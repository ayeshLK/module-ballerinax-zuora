// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/constraint;
import ballerina/http;

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

public type SaveResultArr SaveResult[];

public type DeleteResultArr DeleteResult[];

@constraint:String {maxLength: 36, minLength: 36}
public type SubmitdatalabelingjobrequestOrgidsItemsString string;

# Container for sold-to contact information.
# 
# **Note**: 
#   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
#   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `soldToContactId` field in the request or you select **Default Contact from Account** for the `soldToContactId` field during subscription creation, the value of the `soldToContact` field is automatically set to `null` in the response body.
public type GETAccountSummaryTypeSoldToContact record {
    # First address line, 255 characters or less.
    string address1?;
    # Second address line, 255 characters or less.
    string address2?;
    # City, 40 characters or less.
    string city?;
    # Full country name. This field does not contain the ISO-standard abbreviation of the country name.
    string country?;
    # County; 32 characters or less. Zuora Tax uses this information to calculate county taxation.          
    string county?;
    # Fax phone number, 40 characters or less.
    string fax?;
    # First name, 100 characters or less.
    string firstName?;
    # Contact ID.
    string id?;
    # Last name, 100 characters or less.
    string lastName?;
    # Full state name. This field does not contain the ISO-standard abbreviation of the state name.
    string state?;
    # A region string, defined in your Zuora tax rules.
    string taxRegion?;
    # Work email address, 80 characters or less.
    string workEmail?;
    # Work phone number, 40 characters or less.
    string workPhone?;
    # Zip code, 20 characters or less.
    string zipCode?;
    *ContactObjectCustomFields;
};

public type PostNonRefRefundType record {
    # Comments about the refund.
    @constraint:String {maxLength: 255}
    string comment?;
    # It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item, Reporting currency item, or both).
    # 
    # **Note**: The API custom rate feature is permission controlled.
    @constraint:Array {maxLength: 2}
    CreditMemoFromChargeCustomRatesType[] customRates?;
    # Container for the finance information related to the refund.
    PostNonRefRefundType_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the refund. This field can be specified only for electronic refunds. The ID must be a valid gateway instance ID, and this gateway must support the specific payment method. 
    # 
    # If no gateway ID is specified, the default gateway in the billing account configuration will be used. If no gateway is specified in the billing account, the default gateway of the corresponding tenant will be used.
    string gatewayId?;
    # The field used to pass gateway-specific parameters and parameter values.
    PostNonRefRefundType_gatewayOptions gatewayOptions?;
    # Container for credit memo items. The maximum number of items is 1,000.
    # 
    # **Note:** This field is only available if you have the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/C_Invoice_Item_Settlement) feature enabled. Invoice Item Settlement must be used together with other Invoice Settlement features (Unapplied Payments, and Credit and Debit memos).  If you wish to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    RefundCreditMemoItemType[] items?;
    # How an external refund was issued to a customer. This field is required for an external refund and must be left empty for an electronic refund. You can issue an external refund on a credit memo.
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The ID of the payment method used for the refund. This field is required for an electronic refund, and the value must be an electronic payment method ID. This field must be left empty for an external refund. 
    string paymentMethodId?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    @constraint:String {maxLength: 100}
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the credit memo date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.
    string refundDate?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
    @constraint:String {maxLength: 100}
    string secondRefundReferenceId?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    @constraint:String {maxLength: 35}
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    @constraint:String {maxLength: 20}
    string softDescriptorPhone?;
    # The total amount of the refund. The amount cannot exceed the unapplied amount of the associated credit memo. If the original credit memo was applied to one or more invoices or debit memos, you have to unapply a full or partial credit memo from the invoices or debit memos, and then refund the full or partial unapplied credit memo to your customers.
    decimal totalAmount;
    # The type of the refund.
    "External"|"Electronic" 'type;
    *RefundObjectNSFields;
    *RefundObjectCustomFields;
};

public type GETPaymentItemPartTypewithSuccess record {
    # The amount of the payment part item.
    decimal amount?;
    # The ID of the Zuora user who created the payment part item.
    string createdById?;
    # The date and time when the payment part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the debit memo item associated with the payment part item.
    string debitMemoItemId?;
    # The ID of the payment part item.
    string id?;
    # The ID of the invoice item associated with the payment part item.
    string invoiceItemId?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the taxation item associated with the payment part item.
    string taxItemId?;
    # The ID of the Zuora user who last updated the payment part item.
    string updatedById?;
    # The date and time when the payment part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

# 
public type QueryCreditMemosResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedCreditMemo[] data?;
|};

public type GETProductRatePlanWithExternalIdMultiResponse_inner record {
    # The combination of `externallyManagedPlanId` and `externalIdSourceSystem` is the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string ExternalIdSourceSystem?;
    # The short description of the product rate plan.
    string description?;
    # The end date of the product rate plan.
    string effectiveEndDate?;
    # The start date of the product rate plan.
    string effectiveStartDate?;
    # The unique identifier for the product rate plan in a third-party store. This field is used to represent a rate plan created through third-party stores.
    string[] externallyManagedPlanIds?;
    # The grade of the product rate plan.
    # 
    # **Note**: This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).
    decimal grade?;
    # The unique product rate plan ID.
    string id?;
    # The name of the product rate plan.
    string name?;
    # The organization(s) that the object belongs to. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.            
    record {
        # The organization ID.
        string organizationId?;
        # The organization name.
        string organizationName?;
    }[] organizationLabels?;
    # The status of the product rate plan. 
    "Active"|"Expired"|"NotStarted" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type NestedInvoiceOnExpand record {|
    # The unique identifier of the invoice.
    string id?;
    # The unique identifier of the user who created the invoice.
    string createdById?;
    # The time that the invoice gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the invoice.
    string updatedById?;
    # The time that the invoice gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # The ID of the customer account associated with the invoice.
    string accountId?;
    # The amount of the invoice adjustments associated with the invoice.
    string adjustmentAmount?;
    # The total amount of the invoice.
    string amount?;
    # The invoice amount excluding tax.
    string amountWithoutTax?;
    # Whether invoices are automatically picked up for processing in the corresponding payment run.
    boolean autoPay?;
    # The remaining balance of the invoice after all payments, adjustments, and refunds are applied.
    decimal balance?;
    # The ID of the bill-to contact associated with the invoice.
    string billToContactId?;
    # The ID of the bill-to contact snapshot associated with the invoice.
    string billToContactSnapshotId?;
    # Comments about the invoice.
    string comments?;
    # The currency amount of the adjustment applied to the customer's credit balance.
    # 
    #   **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.
    string creditBalanceAdjustmentAmount?;
    # The currency amount of all credit memos applied to this invoice.
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string creditMemoAmount?;
    # The currency of the invoice.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # The date by which the payment for this invoice is due, in `yyyy-mm-dd` format.
    string dueDate?;
    # Specifies whether the invoice includes one-time charges.
    boolean includesOneTime?;
    # Specifies whether the invoice includes recurring charges.
    boolean includesRecurring?;
    # Specifies whether the invoice includes usage charges.
    boolean includesUsage?;
    # The date that appears on the invoice being created.
    string invoiceDate?;
    # The unique identification number of the invoice.
    string invoiceNumber?;
    # The date when the invoice was last emailed.
    string lastEmailSentDate?;
    # ID of the organization this object belongs to.
    string organizationId?;
    # The amount of payments applied to the invoice.
    string paymentAmount?;
    # The user ID of the person who moved the invoice to Posted status.
    string postedBy?;
    # The date when the invoice was posted.
    string postedDate?;
    # Specifies the amount of a refund that was applied against an earlier payment on the invoice.
    string refundAmount?;
    # The ID of the sequence set associated with the invoice.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the invoice.
    string soldToContactId?;
    # The ID of the sold-to contact snapshot associated with the invoice.
    string soldToContactSnapshotId?;
    # The source of the invoice.
    "BillRun"|"API"|"ApiSubscribe"|"ApiAmend" 'source?;
    # The ID of the invoice source.
    # If an invoice is generated from a bill run, the value is the number of the corresponding bill run.Otherwise, the value is `null`.
    string sourceId?;
    # Whether the invoice is reversed.
    boolean reversed?;
    # The type of the invoice source.
    "Subscription"|"Standalone"|"Order"|"Consolidation" sourceType?;
    # The status of the invoice.
    "Draft"|"Posted" status?;
    # This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.
    string targetDate?;
    # The amount of taxation.
    string taxAmount?;
    # The calculated tax amount excluded due to the exemption.
    string taxExemptAmount?;
    # The message that the tax engine return if it calculates the taxes of this invoice fails.
    string taxMessage?;
    # The status that the tax engine return after it calculates the taxes of this invoice.
    "Complete"|"Error"|"UnknownError"|"DuplicateDoc"|"InvalidRequest"|"InvalidResponse"|"TaxEngineError"|"ConcurrentModify"|"InternalServerError"|"TaxCodeTemplateError" taxStatus?;
    # The ID of the invoice template.
    # 
    # - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature enabled, the value of this field depends on the configuration of the invoice template. 
    #   - If you specify an invoice template at the subscription level, the value of this field is automatically populated from the corresponding subscription.
    #   - If you do not specify any invoice template at the subscription level, the value of this field is automatically populated from the corresponding account.
    # - If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string templateId?;
    # Whether the invoice was transferred to an external accounting system.
    "Processing"|"Error"|"Ignore"|"Yes"|"No" transferredToAccounting?;
    # It could be Processing, Generated, Success, Failed. If it’s Failed, it will have an error code and message. If it’s Generated or Success, both error code and message are empty, and eInvoiceFileId stores the file id of e-invoice.
    "Processing"|"Generated"|"Success"|"Failed" eInvoiceStatus?;
    # The ID of the e-invoice file.
    string eInvoiceFileId?;
    # The error code when status is `Failed`. This code can either be a Zuora-generated error code or one returned by a third-party e-invoice vendor.
    string eInvoiceErrorCode?;
    # The error message when status is "Failed". This message can either be a Zuora-generated error code or one returned by a third-party e-invoice vendor.
    string eInvoiceErrorMessage?;
    # A link to the Payment Link page where the customer can pay the invoice.
    # 
    # The link is generated only if the invoice is posted after enabling the Payment Link feature on your tenant.
    # 
    # **Note**: The Payment Link feature is in the Early Adopter phase. 
    # You can enable the Payment Link feature through a self-service configuration in the **Manage Features** setting for Zuora Payments.
    string paymentLink?;
    # The payment term associated with the invoice. For
    # example, `Net 30`. The payment term determines the due dates of
    # invoices.
    string paymentTerm?;
    # EXPANDABLE.
    # The account associated with the invoice.
    record {} account?;
    # EXPANDABLE.
    # The bill-to contact who pays the invoice.
    record {} billToContact?;
    # EXPANDABLE.
    # The invoice items on the invoice.
    record {}[] invoiceItems?;
|};

# 
public type QueryTaxationItemsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedTaxationItem[] data?;
|};

# Container for custom fields of a Payment Schedule object.
public type PaymentScheduleCustomFields record {
};

# Container for custom fields of a payment method object.
public type SignUpPaymentMethodObjectCustomFields record {
};

public type PreviewExistingSubscriptionResultCreditMemos record {
    # The credit memo number.
    string creditMemoNumber?;
    # Credit memo amount.
    decimal amount?;
    # Credit memo amount minus tax.
    decimal amountWithoutTax?;
    # The tax amount of the credit memo.
    decimal taxAmount?;
    # Date through which to calculate charges if a credit memo is generated, as yyyy-mm-dd.
    string targetDate?;
    # Container for credit memo items.
    PreviewExistingSubscriptionCreditMemoItemResult[] creditMemoItems?;
    # The status of the credit memo.
    string status?;
    # Indicates whether the credit memo information is from an existing credit memo.
    boolean isFromExistingCreditMemo?;
};

public type ListAllCatalogGroupsResponse record {
    # The list of catalog groups that are retrieved..
    CatalogGroupResponse[] catalogGroups?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
};

public type CreditMemoApplyInvoiceRequestType record {
    # The credit memo amount to be applied to the invoice.
    decimal amount;
    # The unique ID of the invoice that the credit memo is applied to.
    string invoiceId;
    # Container for items. The maximum number of items is 1,000.
    # 
    # If `creditMemoItemId` is the source, then it should be accompanied by a target `invoiceItemId`.
    # 
    # If `creditTaxItemId` is the source, then it should be accompanied by a target `taxItemId`.
    CreditMemoApplyInvoiceItemRequestType[] items?;
};

public type PostDiscountItemType record {
    # The accounting code associated with the discount item.
    string accountingCode?;
    # The accounting code for accounts receivable.
    string accountsReceivableAccountingCode?;
    # The accounting code for adjustment liability.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string adjustmentLiabilityAccountingCode?;
    # The accounting code for adjustment revenue.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string adjustmentRevenueAccountingCode?;
    # The amount of the discount item.
    # - Should be a negative number. For example, `-10`.
    # - Always a fixed amount no matter whether the discount charge associated with the discount item uses the [fixed-amount model or percentage model](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models#Fixed_amount_model_and_percentage_model).
    # - For tax-exclusive discount items, this amount indicates the discount item amount excluding tax.
    # - For tax-inclusive discount items, this amount indicates the discount item amount including tax.
    string amount;
    # The booking reference of the discount item.
    string bookingReference?;
    # The date when the discount item is charged, in `yyyy-mm-dd hh:mm:ss` format.
    string chargeDate?;
    # The name of the charge associated with the discount item.
    # This field is required if the `productRatePlanChargeId` field is not specified in the request body.
    string chargeName?;
    # The accounting code for contract asset.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string contractAssetAccountingCode?;
    # The accounting code for contract liability.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string contractLiabilityAccountingCode?;
    # The accounting code for contract recognized revenue.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string contractRecognizedRevenueAccountingCode?;
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string deferredRevenueAccountingCode?;
    # The description of the discount item.
    string description?;
    # The type of the discount item.
    string itemType?;
    # The ID of the product rate plan charge that the discount item is created from.
    # 
    # If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding product rate plan charge, regardless of the values specified in the request body:
    # - `chargeName`
    # - `sku`
    # 
    # If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding discount charge that [uses discount specific accounting codes, rule and segment to manage revenue](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models/Manage_Discount_Charges#Use_discount_specific_accounting_codes.2C_rule_and_segment_to_manage_revenue), regardless of the values specified in the request body:
    # - `accountingCode`
    # - `deferredRevenueAccountingCode`
    # - `recognizedRevenueAccountingCode`
    # 
    # If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding invoice item charge if the discount charge DOES NOT [use discount specific accounting codes, rule and segment to manage revenue](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models/Manage_Discount_Charges#Use_discount_specific_accounting_codes.2C_rule_and_segment_to_manage_revenue), regardless of the values specified in the request body:
    # - `accountingCode`
    # - `deferredRevenueAccountingCode`
    # - `recognizedRevenueAccountingCode`
    string productRatePlanChargeId?;
    # The purchase order number associated with the discount item.
    string purchaseOrderNumber?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string recognizedRevenueAccountingCode?;
    # The revenue recognition code.
    string revRecCode?;
    # The date when revenue recognition is triggered.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate" revRecTriggerCondition?;
    # The name of the revenue recognition rule governing the revenue schedule.
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string revenueRecognitionRuleName?;
    # The SKU of the invoice item. The SKU of the discount item must be different from the SKU of any existing product.
    string sku?;
    # Container for taxation items. The maximum number of taxation items is 5.
    # 
    # **Note**: This field is only available only if you have Taxation enabled.
    PostTaxationItemType[] taxItems?;
    # The accounting code for unbilled receivables.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string unbilledReceivablesAccountingCode?;
    # The per-unit price of the discount item.
    # If the discount charge associated with the discount item uses the percentage model, the unit price will display as a percentage amount in PDF. For example: if unit price is 5.00, it will display as 5.00% in PDF.
    string unitPrice?;
    *DiscountItemObjectNSFields;
    *DiscountItemObjectCustomFields;
};

public type OrderActionPut OrderActionCommon;

public type OrderActionRatePlanUsageOveragePricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    # A certain quantity of units for free in the overage charge model. It cannot be negative. It must be 0 and above. Decimals are allowed.
    decimal includedUnits?;
    decimal overagePrice?;
};

public type POSTRejectPaymentRequest record {
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The transaction response returned by the gateway for this transaction. If the transaction was declined, this reason is provided in the message.
    string gatewayResponse?;
    # Response message Code returned by the gateway about the transaction status.
    string gatewayResponseCode?;
    # Unique Id generated by the gateway for each transaction. Use this ID to find the respective Zuora Payment ID. 
    @constraint:String {maxLength: 100}
    string referenceId?;
    # The second reference Id. Some gateway uses two unique transaction IDs.
    @constraint:String {maxLength: 100}
    string secondReferenceId?;
    # The date and time of the transaction settlement. The format is `yyyy-mm-dd hh:mm:ss`.
    string settledOn?;
};

# Container for the finance information related to the refund.
public type PostNonRefRefundType_financeInformation record {
    # The accounting code that maps to a bank account in your accounting system.
    @constraint:String {maxLength: 100}
    string bankAccountAccountingCode?;
    # The accounting code that maps to an on account in your accounting system.
    @constraint:String {maxLength: 100}
    string onAccountAccountingCode?;
    # Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The accounting code for the unapplied payment.
    @constraint:String {maxLength: 100}
    string unappliedPaymentAccountingCode?;
};

public type CreditMemoFromChargeRequest record {
    # The ID of the account associated with the credit memo.
    # 
    # **Note**: When creating credit memos from product rate plan charges, you must specify `accountNumber`, `accountId`, or both in the request body. If both fields are specified, they must correspond to the same account.
    string accountId?;
    # The number of the customer account associated with the credit memo.
    # 
    # **Note**: When creating credit memos from product rate plan charges, you must specify `accountNumber`, `accountId`, or both in the request body. If both fields are specified, they must correspond to the same account.
    string accountNumber?;
    # Whether to automatically post the credit memo after it is created. 
    # 
    # Setting this field to `true`, you do not need to separately call the [Post a credit memo](https://developer.zuora.com/api-references/api/operation/PUT_PostCreditMemo) operation to post the credit memo.
    boolean autoPost?;
    # Container for product rate plan charges. The maximum number of items is 1,000.
    @constraint:Array {maxLength: 1000}
    CreditMemoFromChargeDetailType[] charges?;
    # Comments about the credit memo.
    string comment?;
    # The code of a currency as defined in Billing Settings through the Zuora UI.
    # 
    # If you do not specify a currency during credit memo creation, the default account currency is applied. The currency that you specify in the request must be configured and activated in Billing Settings.
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    string currency?;
    # It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item or Reporting currency item or both).
    # 
    # **Note**: The API custom rate feature is permission controlled.
    @constraint:Array {maxLength: 2}
    CreditMemoFromChargeCustomRatesType[] customRates?;
    # The date when the credit memo takes effect.
    string effectiveDate?;
    # Whether the credit memo is excluded from the rule of automatically applying unapplied credit memos to invoices and debit memos during payment runs. If you set this field to `true`, a payment run does not pick up this credit memo or apply it to other invoices or debit memos.
    boolean excludeFromAutoApplyRules?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    string reasonCode?;
    *CreditMemoObjectNSFields;
    *CreditMemoObjectCustomFields;
};

public type SignUpCreatePaymentMethodCreditCard record {
    # Container for cardholder information. If provided, Zuora will
    # only use this information for this card. Otherwise, Zuora will use
    # the account''s existing bill-to contact information for this card.
    SignUpCreatePaymentMethodCardholderInfo cardHolderInfo?;
    # Credit card number.
    string cardNumber?;
    # The type of the credit card.
    # 
    # Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
    string cardType?;
    boolean checkDuplicated?;
    # One or two digit expiration month (1-12) of the credit card.
    string expirationMonth?;
    # Four-digit expiration year of the credit card.
    string expirationYear?;
    # Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.
    @constraint:String {maxLength: 128}
    string mitConsentAgreementRef?;
    # Required if you set the `mitProfileAction` field. Specifies how the consent agreement has been established with the customer. The allowed value is `External`. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `External` set to this field.
    "External" mitConsentAgreementSrc?;
    # Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.
    @constraint:String {maxLength: 128}
    string mitNetworkTransactionId?;
    # Specifies how Zuora creates and activates the stored credential profile. If you do not specify this field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Activate` set to this field.
    "Activate"|"Persist" mitProfileAction?;
    # The date on which the profile is agreed. The date format is `yyyy-mm-dd`.
    string mitProfileAgreedOn?;
    # Required if you set the `mitProfileAction` field. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Recurring` set to this field.
    "Recurring" mitProfileType?;
    # CVV or CVV2 security code of the credit card.
    # 
    # To ensure PCI compliance, this value is not stored and cannot be queried.
    string securityCode?;
};

public type PUTCreditMemoWriteOff record {
    # Comments about the debit memo.
    string comment?;
    # The creation date of the debit memo and the effective date of the credit memo. Credit memos are applied to the corresponding debit memos on `memoDate`. By default, `memoDate` is set to the current date.
    string memoDate?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. The default value is `Write-off`.
    string reasonCode?;
    *DebitMemoObjectCustomFieldsCMWriteOff;
};

public type GETListApplePayDomainsResponse record {
    # Container for domains that are already registered with Apple Pay.
    GETListApplePayDomainsResponse_domains[] domains?;
    # Indicates whether this call succeeds.
    boolean success?;
};

# The options on how the preview through date is calculated. 
# - If you set this field to `nextBillingPeriods`, you must specify the number of billing periods to preview in the `nextBillingPeriods` field.
# - If you set this field to `endOfTerm`, the preview through date is the end date of the subscription term.
# - If you set this field to `specificDate`, you must specify a specific date in the `specificDate` field. The date must be in the format `yyyy-mm-dd`.
public type PreviewThruDatePolicy "nextBillingPeriods"|"endOfTerm"|"specificDate";

public type CreatePaymentMethodCreditCard record {
    # Container for cardholder information. The nested `cardHolderName` field is required.
    CreatePaymentMethodCardholderInfo cardHolderInfo?;
    # Credit card number.
    string cardNumber?;
    # The type of the credit card.
    # Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
    string cardType?;
    # Indicates whether the duplication check is performed when you create a new credit card payment method. The default value is `false`.
    # 
    # With this field set to `true`, Zuora will check all active payment methods associated with the same billing account to ensure that no duplicate credit card payment methods are created. An error is returned if a duplicate payment method is found.
    #         
    # The following fields are used for the duplication check:
    #   - `cardHolderName`
    #   - `expirationMonth`
    #   - `expirationYear`
    #   - `creditCardMaskNumber`. It is the masked credit card number generated by Zuora. For example, `************1234`.
    # 
    # **This field is being deprecated.**  To achieve the same purpose, use the `processingOptions` > `checkDuplicated` field of the payment method object.
    boolean checkDuplicated?;
    # One or two digit expiration month (1-12) of the credit card.
    int expirationMonth?;
    # Four-digit expiration year of the credit card.
    int expirationYear?;
    # The identity number of the cardholder. This field is required for Credit Card payment methods in certain countries such as Brazil.
    string identityNumber?;
    # Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.
    @constraint:String {maxLength: 128}
    string mitConsentAgreementRef?;
    # Required if you set the `mitProfileAction` field. Specifies how the consent agreement has been established with the customer. The allowed value is `External`. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `External` set to this field.
    "External" mitConsentAgreementSrc?;
    # Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.
    @constraint:String {maxLength: 128}
    string mitNetworkTransactionId?;
    # Specifies how Zuora creates and activates the stored credential profile.
    # 
    # - `Activate` - Use this value if you are creating the stored credential profile after receiving the customer's consent.
    # 
    #   Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
    #   
    #   If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
    # 
    # 
    # - `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
    # 
    # If you do not specify this field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Activate` set to this field.
    "Activate"|"Persist" mitProfileAction?;
    # The date on which the profile is agreed. The date format is `yyyy-mm-dd`.
    string mitProfileAgreedOn?;
    # Required if you set the `mitProfileAction` field. Indicates the type of the stored credential profile to process recurring or unsecheduled transactions. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Recurring` set to this field.
    "Recurring"|"Unscheduled" mitProfileType?;
    # For <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Chase_Orbital_Payment_Gateway" target="_blank">Chase Paymentech Orbital Gateway</a> integrations, if the Safetech Fraud service is enabled, use this field to pass in the amount used for fraud screening for Credit Card validation transactions.
    # 
    # Two-decimal amount is supported.
    # 
    # If the `screeningAmount` field is not specified, the authorization amount is used for fraud screening.
    decimal screeningAmount?;
    # CVV or CVV2 security code of the credit card.
    # 
    # To ensure PCI compliance, this value is not stored and cannot be queried.
    string securityCode?;
    # The container of the mandate information for the payment method.
    CreatePaymentMethodCreditCard_mandateInfo mandateInfo?;
    # The container for payment method processing options.
    CreatePaymentMethodCreditCard_processingOptions processingOptions?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type PUTPublicNotificationDefinitionCalloutBasicAuthentication record {
    *PUTPublicNotificationDefinitionCalloutCommon;
    # Indicates whether Basic authentication is enabled for the callout.
    boolean requiredAuth?;
    # If `requiredAuth` is `true`, this object is required.
    CalloutAuth calloutAuth?;
};

# 
public type QueryPrepaidBalanceTransactionsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedPrepaidBalanceTransaction[] data?;
|};

public type PaymentInvoiceApplicationItemApplyRequestType record {
    # The amount of the payment that is applied to the specific invoice or taxation item.
    decimal amount;
    # The ID of the specific invoice item.
    string invoiceItemId?;
    # The ID of the specific taxation item.
    string taxItemId?;
};

public type POSTPreviewBillingAdjustmentRequestType record {
    # The account number for which the delivery adjustment is created.
    # **Note**: 
    #   - The account number should be of the subscription owner.
    #   - Only one of accountNumber or subscriptionNumber should be provided.
    string accountNumber?;
    # An optional container to specify charge numbers in the subscription for which the delivery adjustment needs to be created.
    string[] chargeNumbers?;
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string deferredRevenueAccountingCode?;
    # The end date of the delivery adjustment, in `yyyy-mm-dd` format. This is inclusive.
    string endDate;
    # The reason for the delivery adjustment.
    string reason?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string recognizedRevenueAccountingCode?;
    # The name of the revenue recognition rule governing the revenue schedule.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string revenueRecognitionRuleName?;
    # The start date of the delivery adjustment, in `yyyy-mm-dd` format. This is inclusive.
    string startDate;
    # The subscription number for which the delivery adjustment is created.
    # 
    # **Note**: Only one of accountNumber or subscriptionNumber should be provided.
    string subscriptionNumber?;
    # The type of delivery adjustment.
    "DeliveryCredit" 'type?;
};

# Container for custom fields of an Order Action object.
public type OrderActionCustomFields record {
};

public type BillRunId_cancel_body record {
    # Whether to cancel the current bill run or cancel all future recurring bill runs, only valid for a scheduled bill run.
    boolean cancelOnce?;
};

public type GETDebitMemoCollectionType record {
    # Container for debit memos.
    GETDebitMemoTypewithSuccess[] debitmemos?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type POSTTaxationItemListForCMType record {
    # Container for taxation items.
    POSTTaxationItemForCMType[] taxationItems?;
};

# 
public type QueryRatePlanChargesResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedRatePlanCharge[] data?;
|};

public type GETDebitMemoItemCollectionType record {
    # Container for debit memo items.
    GETDebitMemoItemTypewithSuccess[] items?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type Deployment_artifacts_compare_body record {
    # Template contains the config metadata and target tenant information.
    record {byte[] fileContent; string fileName;} template?;
};

public type CustomObjectRecordsWithError record {
    # See [Custom Objects API error code](https://knowledgecenter.zuora.com/Central_Platform/Custom_Objects/Z_Custom_Objects_API#Custom_Objects_API_error_code) for details.
    71012520|71012521|71012522|71012523|71012524|71012525|71012526|71012530 code?;
    string message?;
    # Record data from an object
    CustomObjectRecordWithAllFields 'record?;
};

# Container for Invoice Item fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type InvoiceItemObjectNSFields record {
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
};

public type POSTScCreateType record {
    # The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.
    string amendedByOrderOn?;
    # Specifies the type of charges that you want a specific discount to apply to.
    # 
    # Values:
    # 
    # * `ONETIME`
    # * `RECURRING`
    # * `USAGE`
    # * `ONETIMERECURRING`
    # * `ONETIMEUSAGE`
    # * `RECURRINGUSAGE`
    # * `ONETIMERECURRINGUSAGE`
    string applyDiscountTo?;
    # Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month the customer is billed.
    # 
    # Values: `1`-`31`
    string billCycleDay?;
    # Specifies how to determine the billing day for the charge. When this field is set to `SpecificDayofMonth`, set the `BillCycleDay` field. When this field is set to `SpecificDayofWeek`, set the `weeklyBillCycleDay` field.
    # 
    # Values:
    # 
    # * `DefaultFromCustomer`
    # * `SpecificDayofMonth`
    # * `SubscriptionStartDay`
    # * `ChargeTriggerDay`
    # * `SpecificDayofWeek`
    string billCycleType?;
    # Billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).
    # Values:
    # 
    # * `Month`
    # * `Quarter`
    # * `Semi_Annual`
    # * `Annual`
    # * `Eighteen_Months`
    # * `Two_Years`
    # * `Three_Years`
    # * `Five_Years`
    # * `Specific_Months`
    # * `Subscription_Term`
    # * `Week`
    # * `Specific_Weeks`
    string billingPeriod?;
    # Aligns charges within the same subscription if multiple charges begin on different dates.
    # 
    # Values:
    # 
    # * `AlignToCharge`
    # * `AlignToSubscriptionStart`
    # * `AlignToTermStart`
    string billingPeriodAlignment?;
    # Billing timing for the charge for recurring charge types. Not avaliable for one time, usage, and discount charges.
    # 
    # Values:
    # 
    # * `IN_ADVANCE` (default)
    # * `IN_ARREARS`
    string billingTiming?;
    # Container for charge model configuration data.
    # 
    # **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    ChargeModelConfigurationType chargeModelConfiguration?;
    # Description of the charge.
    string description?;
    # Specifies the amount of fixed-amount discount.
    decimal discountAmount?;
    # Specifies if the discount applies to the product rate plan only, the entire subscription, or to any activity in the account.
    # 
    # Values:
    # 
    # * `rateplan`
    # * `subscription`
    # * `account`
    string discountLevel?;
    # Percentage of discount for a percentage discount. 
    decimal discountPercentage?;
    # Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
    # 
    # Values:
    # 
    # * `Subscription_End`
    # * `Fixed_Period`
    # * `Specific_End_Date`
    # * `One_Time`
    string endDateCondition?;
    # The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled.
    boolean excludeItemBillingFromRevenueAccounting = false;
    # The flag to exclude rate plan charges from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled.
    boolean excludeItemBookingFromRevenueAccounting = false;
    # Specifies the number of units in the base set of units for this charge. Must be >=`0`.
    decimal includedUnits?;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The list price base for the product rate plan charge.
    # 
    # Values:
    # 
    # * `Per_Billing_Period`
    # * `Per_Month`
    # * `Per_Week`
    # * `Per_Year`
    # * `Per_Specific_Months`
    string listPriceBase?;
    # Unique number that identifies the charge. Max 50 characters. System-generated if not provided.
    string number?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
    int numberOfPeriods?;
    # The date when the rate plan charge is created through an order or amendment. This field is not updatable.
    # 
    # This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.
    string originalOrderDate?;
    # Price for units over the allowed amount.
    decimal overagePrice?;
    # Determines whether to credit the customer with unused units of usage.
    # 
    # Values:
    # 
    # * `NoCredit`
    # * `CreditBySpecificRate`
    string overageUnusedUnitsCreditOption?;
    # Price for units in the subscription rate plan.
    decimal price?;
    # Applies an automatic price change when a termed subscription is renewed. The Billing Admin setting **Enable Automatic Price Change When Subscriptions are Renewed?** must be set to Yes to use this field.
    # Values:
    # 
    # * `NoChange` (default)
    # * `SpecificPercentageValue`
    # * `UseLatestProductCatalogPricing`
    string priceChangeOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`. 
    # 
    # Value must be a decimal between `-100` and `100`.
    decimal priceIncreasePercentage?;
    # ID of a product rate-plan charge for this subscription.
    string productRatePlanChargeId;
    # Number of a product rate-plan charge for this subscription.
    string productRatePlanChargeNumber?;
    # Number of units. Must be a decimal >=`0`. 
    # 
    # When using `chargeOverrides` for creating subscriptions with recurring charge types, the `quantity` field must be populated when the charge model is "Tiered Pricing" or "Volume Pricing". It is not required for "Flat Fee Pricing" charge model.
    decimal quantity?;
    # Specifies a rating group based on which usage records are rated.
    # 
    # Possible values:
    # 
    # - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.
    # - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    # - `ByUsageRecord`: The rating is based on each usage record.
    # - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    # - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Note:** 
    # - The `ByBillingPeriod` value can be applied for all charge models. 
    # - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
    # - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    # - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
    string ratingGroup?;
    # Specifies the number of month or week for the charges billing period. Required if you set the value of the `billingPeriod` field to `Specific_Months` or `Specific_Weeks`.
    int specificBillingPeriod?;
    # Defines when the charge ends after the charge trigger date.
    # 
    # **Note**:
    # 
    # * This field is only applicable when the `endDateCondition` field is set to `Specific_End_Date`.
    # 
    # * If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
    string specificEndDate?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.
    # 
    # **Note**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.
    @constraint:Int {minValue: 1, maxValue: 200}
    int:Signed32 specificListPriceBase?;
    # Container for Volume, Tiered, or Tiered with Overage charge models. Supports the following charge types:
    # 
    # * One-time
    # * Recurring
    # * Usage-based
    POSTTierType[] tiers?;
    # Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to `USD`.
    string triggerDate?;
    # Specifies when to start billing the customer for the charge.
    # 
    # Values:
    # 
    # * `UCE`
    # * `USA`
    # * `UCA`
    # * `USD`
    string triggerEvent?;
    # Specifies the rate to credit a customer for unused units of usage. This field applies only for overage charge models when the `OverageUnusedUnitsCreditOption` field is set to `CreditBySpecificRate`.
    decimal unusedUnitsCreditRates?;
    # Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
    # 
    # **Note:** You must use this field together with the `upToPeriodsType` field to specify the time period.
    # 
    # * This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`. 
    # * If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
    int upToPeriods?;
    # 
    # The period type used to define when the charge ends. 
    # 
    # Values:
    # 
    # * `Billing_Periods`
    # * `Days`
    # * `Weeks`
    # * `Months`
    # * `Years`
    # 
    # You must use this field together with the `upToPeriods` field to specify the time period.
    # 
    # This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`. 
    string upToPeriodsType?;
    # Specifies which day of the week is the bill cycle day (BCD) for the charge. 
    # 
    # Values:
    # 
    # * `Sunday`
    # * `Monday`
    # * `Tuesday`
    # * `Wednesday`
    # * `Thursday`
    # * `Friday`
    # * `Saturday`
    string weeklyBillCycleDay?;
    *RatePlanChargeObjectCustomFields;
};

# Information about an order action of type `CancelSubscription`.
public type CancelSubscription record {
    string cancellationEffectiveDate?;
    "EndOfCurrentTerm"|"EndOfLastInvoicePeriod"|"SpecificDate" cancellationPolicy;
};

# The JSON object containing the information for a charge update in the 'UpdateProduct' type order action.
public type OrderActionRatePlanChargeUpdate record {
    # Billing information about the charge.
    OrderActionRatePlanBillingUpdate billing?;
    # Read only. Identifies the charge to be updated.
    string chargeNumber?;
    # Container for custom fields of a Rate Plan Charge object.
    OrderActionRatePlanRatePlanChargeObjectCustomFields customFields?;
    # Description of the charge.
    string description?;
    # Specifies when a charge becomes active.
    OrderActionRatePlanTriggerParams effectiveDate?;
    # Pricing information about the charge.
    OrderActionRatePlanPricingUpdate pricing?;
    # A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.
    string uniqueToken?;
};

public type GETCreditMemoPartType record {
    # The amount of the credit memo part.
    decimal amount?;
    # The ID of the Zuora user who created the credit memo part.
    string createdById?;
    # The date and time when the credit memo part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the debit memo associated with the credit memo part.
    string debitMemoId?;
    # The ID of the credit memo part.
    string id?;
    # The ID of the invoice associated with the credit memo part.
    string invoiceId?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The ID of the Zuora user who last updated the credit memo part.
    string updatedById?;
    # The date and time when the credit memo part was last upated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

public type ProxyPostImport record {
    # The ID of the Import object that was created.
    string Id?;
    # Indicates whether the call succeeded.
    boolean Success?;
};

public type PostFulfillmentsResponseType_fulfillmentItems record {
    # The sytem generated Id.
    string id?;
};

public type PUTCatalogGroup record {
    # The list of product rate plans to be added to the catalog group.
    POSTorPUTCatalogGroupAddProductRatePlan[] add?;
    # The description of the catalog group.
    string description?;
    # The unique name of the catalog group.
    string name?;
    # The list of product rate plans to be removed from the catalog group.
    PUTCatalogGroupRemoveProductRatePlan[] remove?;
};

# Order Delta Mrr. This is a metric that reflects the change to the TCV on rate plan charge object as the result of the order.
public type OrderDeltaMrr OrderDeltaMetric;

# Container for the finance information related to the taxation item in the debit memo item.
public type PutDebitMemoTaxItemType_financeInformation record {
    # The accounting code for the sales taxes payable.
    @constraint:String {maxLength: 100}
    string salesTaxPayableAccountingCode?;
};

# The container for billing processing options and payment processing options.
# 
# **Note:**
# - This field is not supported in draft orders.
# - When you use the "Create an order" operation to create an account, create a subscription, run billing, and collect payment in a single call, if any error occurs during the call, such as a payment processing failure and a tax engine failure, then all the other steps will be rolled back. In this case, neither the invoice will be generated, nor the subscription nor the account will be created.
# - When you use the "Create an order" operation to cancel a subscription with `refund` and `writeOff`, if the `refund` or `writeOff` fails, `cancelSubscription`, `runBilling`, and `collectPayment` still can succeed.
# - When you use the "Create an order" operation, the `collectPayment` and `refund` fields cannot be set to `true` simultaneously.  Otherwise, the order will not be proceeded.
public type ProcessingOptionsOrdersWithDelayedCapturePayment record {
    # The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
    string[] applicationOrder?;
    # Whether to automatically apply credit memos or unapplied payments, or both to an invoice.
    # 
    # If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.          
    # 
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    boolean applyCredit?;
    # Indicates if any credit balance on a customer's account is automatically applied to invoices. If no value is specified then this field defaults to false. This feature is not available if you have enabled the Invoice Settlement feature.
    boolean applyCreditBalance?;
    ProcessingOptionsOrdersWithDelayedCapturePayment_billingOptions billingOptions?;
    # Indicates if the current request needs to collect payments. This value can not be 'true' when 'runBilling' flag is 'false'.
    boolean collectPayment?;
    # Container for the electronic payment options.
    ProcessingOptionsOrdersWithDelayedCapturePayment_electronicPaymentOptions electronicPaymentOptions?;
    # Indicates whether to refund after subscription cancelation. Default is `false`. 
    # 
    # **Note**: When refunding a subscription that is not invoiced separately, if you do not enable the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Invoice_Settlement/C_Invoice_Item_Settlement" target="_blank">Invoice Item Settlement</a> feature, you will encounter the following error during the cancel and refund process: “Cancellation/Refund failed because of the following reason: Invoice is linked to multiple subscriptions. Cancellation was not processed.”
    boolean refund?;
    # Indicates the amount to be refunded. Required if the `refund` field is `true`.
    decimal refundAmount?;
    # A code identifying the reason for the refund transaction. The value must be an existing payment refund reason code listed in **Payments Settings** > **Configure Reason Codes**. If you do not specify the field or leave the field with an empty value, Zuora uses the default payment refund reason code.
    string refundReasonCode?;
    # Indicates if the current request needs to generate an invoice. The invoice will be generated against all subscriptions included in this order.
    boolean runBilling?;
    # Indicates whether to write off the outstanding balance on the invoice after refund. Default is `false`.
    # 
    # **Note**: 
    # - When refunding a subscription that is not invoiced separately, if you do not enable the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Invoice_Settlement/C_Invoice_Item_Settlement" target="_blank">Invoice Item Settlement</a> feature, you will encounter the following error during the cancel and refund process: “Cancellation/Refund failed because of the following reason: Invoice is linked to multiple subscriptions. Cancellation was not processed.”
    # - The <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Invoice_Settlement" target="_blank">Invoice Settlement</a> feature must have been enabled for write-off.
    boolean writeOff?;
    # The financial information of the credit memo items generated to write off the invoice balance. 
    # 
    # **Note:** 
    #   - All the credit memo items that are used to write off the invoice will be applied with the same financial information.
    #   - Credit memo items generated from the unconsumed services of the canceled subscription will not be applied with the finance information specified here.
    ProcessingOptionsOrdersWithDelayedCapturePayment_writeOffBehavior writeOffBehavior?;
};

# The information about the debit memo that just collected.
public type DebitMemoCollectResponse_debitMemo record {
    # The unique ID of the debit memo.
    string id?;
    # The unique identification number of the debit memo.
    string number?;
};

public type GETJournalEntrySegmentType record {
    # Name of segment.
    string segmentName?;
    # Value of segment in this summary journal entry.
    string segmentValue?;
};

# 
public type PUTSequenceSetRequest record {
    # Container for the prefix and starting document number of credit memos.
    # 
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    CreditMemoEntityPrefix creditMemo?;
    # Container for the prefix and starting document number of debit memos.
    # 
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    DebitMemoEntityPrefix debitMemo?;
    # Container for the prefix and starting document number of invoices.
    InvoiceEntityPrefix invoice?;
    # The name of the sequence set configured for billing documents, payments, and refunds.
    string name?;
    # Container for the prefix and starting number of payments.
    PaymentEntityPrefix payment?;
    # Container for the prefix and starting number of refunds.
    RefundEntityPrefix refund?;
};

public type DeleteInvoiceResponseType record {
    # The ID of the deleted invoice.
    string id?;
    # The ID of the job that handles the invoice deletion operation. 
    # 
    # You can specify the value of this field as the value of the `jobId` path parameter in the [Retrieve an operation job](https://developer.zuora.com/api-references/api/operation/GET_OperationJob/) API operation to query job information.
    string jobId?;
    # The status of the invoice deletion operation. 
    "Pending"|"Completed" jobStatus?;
    DeleteAccountResponseType_reasons[] reasons?;
    # Whether the call succeeded.
    boolean success?;
};

public type DeleteResult record {
    # If the delete failed, this contains an array of Error objects.
    ActionsErrorResponse[] errors?;
    # ID of the deleted object.
    string id?;
    # A boolean field indicating the success of the delete operation. If the delete was successful, it is `true`. Otherwise, `false`.
    boolean success?;
};

public type PaymentScheduleItemCommon record {
    # The amount that needs to be collected by this payment schedule item.
    decimal amount;
    # The currency of the payment.
    # 
    # **Note**:
    # - This field is optional. If not specified, the default value is the currency set for the account.
    string currency?;
    # Description of the payment schedule item.
    string description?;
    # The ID of the payment gateway.
    # 
    # **Note**:
    # - This field is optional. If not specified, the default value is the payment gateway id set for the account.
    string paymentGatewayId?;
    # The ID of the payment method.
    # 
    # **Note**:
    # - This field is optional. If not specified, the default value is the payment method id set for the account.
    string paymentMethodId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # Here is an example:
    # ```
    # "paymentOption": [
    #   {
    #     "type": "GatewayOptions",
    #     "detail": {
    #       "SecCode":"WEB"
    #     }
    #   }
    # ]
    # ```
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # At which hour of the day in the tenant’s timezone this payment will be collected. Available values:`[0,1,2,~,22,23]`.
    # If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs.
    # The default value is `0`.
    string runHour?;
    # The date to collect the payment.
    string scheduledDate;
    *PaymentScheduleItemCustomFields;
};

# Pricing information about a one-time charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
public type OneTimeFlatFeePricingOverride record {
    # Price of the charge.
    decimal listPrice;
    # The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.
    decimal originalListPrice?;
};

# Container for the electronic payment options.
public type ProcessingOptionsOrdersAsync_electronicPaymentOptions record {
    # Specifies the ID of a payment gateway to override the default gateway. If this field is not specified, the default payment gateway will be used to process the payment.
    string paymentGatewayId?;
    # Specifies an electronic payment method. It can be one that has already been associated with an invoice owner, or an orphan payment method, which is not associated with any invoice owner. For an orphan payment method, this operation will then associate it with the account that this order will be created under.
    string paymentMethodId?;
};

public type CreditMemoApplyInvoiceItemRequestType record {
    # The amount that is applied to the specific item. 
    decimal amount;
    # The ID of the credit memo item.
    string creditMemoItemId?;
    # The ID of the credit memo taxation item.
    string creditTaxItemId?;
    # The ID of the invoice item that the credit memo item is applied to.
    string invoiceItemId?;
    # The ID of the invoice taxation item that the credit memo taxation item is applied to.
    string taxItemId?;
};

# 
public type QueryPaymentsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedPayment[] data?;
|};

# Date range of the destination validity period to which the funds are transferred. It should be close to the source validity period.
public type DestinationValidityPeriodInfo record {
    # End date of the destination validity period.
    string endDate;
    # Start date of the destination validity period.
    string startDate;
};

public type ProxyBadRequestResponse record {
    ProxyBadRequestResponse_Errors[] Errors?;
    # 
    boolean Success?;
};

public type ProcessingOptionsOrdersWithDelayedCapturePayment_billingOptions record {
    # A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
    string creditMemoReasonCode?;
    # The invoice date displayed on the invoice.
    string documentDate?;
    # Indicates if the current request needs to generate a draft invoice.
    # 
    # Values are:
    # 
    # * `true`
    # * `false` (default)
    boolean generateDraftInvoice?;
    # Date through which to calculate charges if an invoice is generated. See [What is a Target Date?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs#What_is_a_Target_Date.3F).
    string targetDate?;
};

public type PaymentCollectionResponseType record {
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Container for payments.
    GETARPaymentTypewithSuccess[] payments?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Container for Debit Memo fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type DebitMemoObjectNSFields record {
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
};

public type POSTRatePlanDefinitionRequest record {
    # The unique ID of the product rate plan charge to be used in the product rate plan.
    string productRatePlanChargeId?;
    # The unique number (natural key) of the product rate plan charge to be used in the product rate plan.
    string productRatePlanChargeNumber?;
    # The unique ID of the product rate plan that uses this rate plan definition.
    string productRatePlanId?;
    # The unique number (natural key) of the product rate plan that uses this rate plan definition.
    string productRatePlanNumber?;
};

public type GETInvoiceItemsResponse record {
    # Container for invoice items.
    InvoiceItem[] invoiceItems?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type ExpandedOrderAction record {|
    # The unique identifier of the order action.
    string id?;
    # The unique identifier of the user who created the order action.
    string createdById?;
    # The time that the order action gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the order action.
    string updatedById?;
    # The date and time when the order action was last updated.
    string updatedDate?;
    # Effective contract date for this subscription, as yyyy-mm-dd.
    string contractEffectiveDate?;
    # The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.
    string customerAcceptanceDate?;
    # Type of the order action.
    # 
    # **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.
    "CreateSubscription"|"TermsAndConditions"|"AddProduct"|"UpdateProduct"|"RemoveProduct"|"RenewSubscription"|"CancelSubscription"|"OwnerTransfer"|"Suspend"|"Resume"|"ChangePlan" 'type?;
    # The sequence of the order actions processed in the order.
    int:Signed32 sequence?;
    # The unique identifier of the amendment that changes the version of the subscription.
    string subscriptionVersionAmendmentId?;
    # The unique identifier of the order that the order action belongs to.
    string orderId?;
    # The unique identifier of the subscription associated with the order action.
    string subscriptionId?;
    # The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.
    string serviceActivationDate?;
    # If `true`, the subscription automatically renews at the end of the term. 
    boolean autoRenew?;
    # Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
    "RENEW_WITH_SPECIFIC_TERM"|"RENEW_TO_EVERGREEN" renewSetting?;
    # The length of the period for the subscription renewal term. 
    int renewalTerm?;
    # The period type for the subscription renewal term.
    # 
    # This field is used with the `renewalTerm` field to specify the subscription renewal term.
    "Month"|"Year"|"Day"|"Week" renewalTermPeriodType?;
    # The date on which the subscription term begins, as `yyyy-mm-dd`. If this is a renewal subscription, this date is different from the subscription start date.
    string termStartDate?;
    # The type of the subscription term.
    "TERMED"|"EVERGREEN" termType?;
    # The length of the period for the current subscription term.
    int currentTerm?;
    # The period type for the current subscription term.
    "Month"|"Year"|"Day"|"Week" currentTermPeriodType?;
    # The date when subscription suspension takes effect, in the `yyyy-mm-dd` format.
    string suspendDate?;
    # The resume date when the resumption takes effect.
    string resumeDate?;
    # Date when the cancellation takes effect, in the `yyyy-mm-dd` format. Used only if `cancellationPolicy` is `SpecificDate`. It should not be earlier than the subscription contract-effective date, later than the subscription term-end date, or within a period for which the customer has been invoiced.
    string cancellationEffectiveDate?;
    # Cancellation method. 
    "EndOfCurrentTerm"|"EndOfLastInvoicePeriod"|"SpecificDate" cancellationPolicy?;
    # The name of the payment term associated with the subscription. For
    # example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string paymentTerm?;
    # The ID of the bill-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string billToContactId?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # The ID of the sequence set associated with the subscription.
    #   
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string soldToContactId?;
    # Whether to clear the existing payment term at the subscription level. This field is mutually exclusive with the `paymentTerm` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingPaymentTerm?;
    # Whether to clear the existing bill-to contact ID at the subscription level. This field is mutually exclusive with the `billToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingBillToContact?;
    # Whether to clear the existing invoice template ID at the subscription level. This field is mutually exclusive with the `invoiceTemplateId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingInvoiceTemplate?;
    # Whether to clear the existing sequence set ID at the subscription level. This field is mutually exclusive with the `sequenceSetId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSequenceSet?;
    # Whether to clear the existing sold-to contact ID at the subscription level. This field is mutually exclusive with the `soldToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSoldToContact?;
    # The sub type for the change plan order action.
    # 
    # If this field was not set by user, the field is automatically generated by the system according to the following rules:
    # 
    # When the old and new rate plans are within the same Grading catalog group:
    # * If the grade of new plan is greater than that of the old plan, this is an "Upgrade".
    # * If the grade of new plan is less than that of the old plan, this is a "Downgrade".
    # * If the grade of new plan equals that of the old plan, this is a "Crossgrade".
    # 
    # When the old and new rate plans are not in the same Grading catalog group, or either has no group, this is "PlanChanged".
    "Upgrade"|"Downgrade"|"Crossgrade"|"PlanChanged" subType?;
    # The default value for the `effectivePolicy` field is as follows:
    #   * If the rate plan change (from old to new) is an upgrade, the effective policy is `EffectiveImmediately` by default.
    #   * If the rate plan change (from old to new) is a downgrade, the effective policy is `EffectiveEndOfBillingPeriod` by default.
    #   * Otherwise, the effective policy is `SpecificDate` by default.
    # 
    # **Notes**: 
    #   * When setting this field to `EffectiveEndOfBillingPeriod`, you cannot set the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/W_Subscription_and_Amendment_Dates#Billing_Trigger_Dates" target="_blank">billing trigger dates</a> for the subscription as the system will automatically set the trigger dates to the end of billing period.
    #   * When setting this field to `SpecificDate`, you must also set the `contractEffectiveDate` field.
    "EffectiveImmediately"|"EffectiveEndOfBillingPeriod"|"SpecificDate" effectivePolicy?;
    NestedSubscriptionOnExpand subscription?;
    NestedOrderOnExpand 'order?;
|};

# The information of the account that you are to create through the "Sign up" operation.
public type AccountData record {
    @constraint:String {maxLength: 70}
    string accountNumber?;
    # Specifies whether future payments are to be automatically billed when they are due. Possible values are `true`, `false`.
    boolean autoPay?;
    # **Note**: By default, you have 50 configurable account batches. To increase the limit to 200 batches, you must have the <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Performance_Booster_Elite" target="_blank">Performance Booster Elite</a> package.
    string batch?;
    # Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as "AutoSet".
    @constraint:Int {minValue: 0, maxValue: 31}
    int billCycleDay;
    ContactInfo billToContact;
    string communicationProfileId?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.
    string creditMemoTemplateId?;
    @constraint:String {maxLength: 100}
    string crmId?;
    # 3 uppercase character currency code.
    # 
    # For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.
    string currency;
    # Container for custom fields.
    CustomFields customFields?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.
    string debitMemoTemplateId?;
    string invoiceTemplateId?;
    @constraint:String {maxLength: 255}
    string name;
    @constraint:String {maxLength: 65535}
    string notes?;
    SignUpPaymentMethod paymentMethod?;
    string paymentTerm?;
    # The number of the purchase order associated with this account. Purchase order information generally comes from customers.
    @constraint:String {maxLength: 100}
    string purchaseOrderNumber?;
    # The ID of the billing document sequence set to assign to the customer account. 
    # 
    # The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.
    string sequenceSetId?;
    ContactInfo soldToContact?;
    # Information about the tax exempt status of a customer account.
    SignUpTaxInfo taxInfo?;
};

# Specifies when a charge becomes active.
public type OrderActionRatePlanTriggerParams record {
    # Date in YYYY-MM-DD format. Only applicable if the value of the `triggerEvent` field is `SpecificDate`.
    # 
    # While this field is applicable, if this field is not set, your `CreateSubscription` order action creates a `Pending` order and a `Pending Acceptance` subscription. If at the same time the service activation date is required and not set, a `Pending Activation` subscription is created.
    # 
    # While this field is applicable, if this field is not set, the following order actions create a `Pending` order but do not impact the subscription status. **Note**: This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    #  * AddProduct
    #  * UpdateProduct
    #  * RemoveProduct
    #  * RenewSubscription
    #  * TermsAndConditions
    string specificTriggerDate?;
    # Condition for the charge to become active.
    # 
    # If the value of this field is `SpecificDate`, use the `specificTriggerDate` field to specify the date when the charge becomes active.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance" triggerEvent?;
};

public type POSTJournalEntryResponseType record {
    # Journal entry number in the format JE-00000001.
    string journalEntryNumber?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# A volume summary record.
public type BillingDocVolumeSummaryRecord record {
    # The count of total accounts who have failed records.
    int totalFailedAccounts?;
    # The count of total generated credit memos.
    int totalGeneratedCreditMemos?;
    # The count of total generated invoices.
    int totalGeneratedInvoices?;
};

public type GETDeliverySchedule record {
    # The frequency of the delivery. Only weekly delivery is supported now.
    "Weekly" frequency?;
    # The flag to indicate whether the delivery happens on Friday.
    boolean friday?;
    # The flag to indicate whether the delivery happens on Monday.
    boolean monday?;
    # The flag to indicate whether the delivery happens on Saturday.
    boolean saturday?;
    # The flag to indicate whether the delivery happens on Sunday.
    boolean sunday?;
    # The flag to indicate whether the delivery happens on Thursday.
    boolean thursday?;
    # The flag to indicate whether the delivery happens on Tuesday.
    boolean tuesday?;
    # The flag to indicate whether the delivery happens on Wendesday.
    boolean wednesday?;
};

public type OrderActionRatePlanRecurringTieredPricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    @constraint:Number {minValue: 0}
    decimal quantity?;
    OrderActionRatePlanChargeTier[] tiers?;
};

# The custom object definitions. This object maps types to custom object definitions.
public type PostCustomObjectDefinitionsRequestDefinitions record {|
    PostCustomObjectDefinitionsRequestDefinition...;
|};

public type CreatePaymentMethodPayPalAdaptive record {
    # The PayPal preapproval key.
    string preapprovalKey?;
    # Email address associated with the payment method.
    string email?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type PUTSubscriptionPreviewInvoiceItemsType record {
    # The amount of the charge. This amount doesn't include taxes unless the charge's tax mode is inclusive.
    decimal chargeAmount?;
    # Description of the charge.
    string chargeDescription?;
    # Name of the charge
    string chargeName?;
    # Name of the product associated with this item.
    string productName?;
    # 
    string productRatePlanChargeId?;
    # Quantity of this item.
    decimal quantity?;
    # End date of the service period for this item, i.e., the last day of the period, as yyyy-mm-dd.
    string serviceEndDate?;
    # Service start date as yyyy-mm-dd. If the charge is a one-time fee, this is the date of that charge.
    string serviceStartDate?;
    # List of taxation items.
    # **Note**: This field is only available if you set the `zuora-version` request header to `315.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). 
    POSTSubscriptionPreviewTaxationItemsType[] taxationItems?;
    # 
    string unitOfMeasure?;
};

public type RefundPartResponseTypewithSuccess record {
    # The amount of the refund part.
    decimal amount?;
    # The ID of the Zuora user who created the refund part.
    string createdById?;
    # The date and time when the refund part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the credit memo associated with the refund part.
    string creditMemoId?;
    # The ID of the refund part.
    string id?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the payment associated with the refund part.
    string paymentId?;
    # The ID of the Zuora user who last updated the refund part.
    string updatedById?;
    # The date and time when the refund part was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

public type ProxyCreateOrModifyDeliverySchedule record {
    # The frequency of the delivery. Only supports weekly now
    "Weekly" frequency?;
    # The flag to indicate should the delivery happen on Friday
    boolean friday?;
    # The flag to indicate should the delivery happen on Monday
    boolean monday?;
    # The flag to indicate should the delivery happen on Saturday
    boolean saturday?;
    # The flag to indicate should the delivery happen on Sunday
    boolean sunday?;
    # The flag to indicate should the delivery happen on Thursday
    boolean thursday?;
    # The flag to indicate should the delivery happen on Tuesday
    boolean tuesday?;
    # The flag to indicate should the delivery happen on Wendesday
    boolean wendesday?;
};

public type GETAccountSummaryPaymentType record {
    # Effective date as `yyyy-mm-dd`.
    string effectiveDate?;
    # Payment ID.
    string id?;
    # Container for paid invoices for this subscription.
    GETAccountSummaryPaymentInvoiceType[] paidInvoices?;
    # Payment number.
    string paymentNumber?;
    # Payment type; possible values are: `External`, `Electronic`.
    string paymentType?;
    # Payment status. Possible values are: `Draft`, `Processing`, `Processed`, `Error`, `Voided`, `Canceled`, `Posted`.
    string status?;
};

public type CreateEInvoiceFileTemplateRequest record {
    # The content of the e-invoice file template, which must be encoded in Base64 format.
    string content;
    # The short name of a country or region where you must comply with e-invoicing requirements. For example, `IN` for India. For the full list of country names and codes, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>.
    string country;
    # The type of billing documents, which the e-invoice file template is intended for.
    "Invoice"|"CreditMemo"|"DebitMemo" documentType;
    # The name of the e-invoice file template.
    @constraint:String {maxLength: 255}
    string name;
    # The name of an e-invoicing service provider that assists in generating e-invoice files.
    "Sovos" provider;
};

public type POSTPaymentRunDataElementRequest record {
    # A valid account ID associated with the payment run.
    # 
    # If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices/debit memos due on an account.
    string accountId?;
    # The number of the customer account associated with the payment run, such as `A00000001`.
    # 
    # You can specify either `accountNumber` or `accountId` for a customer account, but not both of them.
    # 
    # If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices, debit memos, and standalone payments due on an account.
    string accountNumber?;
    # The amount to be collected for the specified invoice/debit memo. `amount` must be a positive numeric value no more than the balance of the specified invoice/debit memo.
    # 
    # This field is only available when `documentId` is specified. If `amount` is not specified, whole balance of the invoice/debit memo is collected.
    decimal amount?;
    # Additional comments.
    string comment?;
    # Note: This field is only available if support for standalone payments is enabled.
    # 
    # The currency of the standalone payment. Specify this field only if the `standalone` field is `true`. The currency of the standalone payment can be different from the payment currency defined in the customer account settings.
    string currency?;
    # The array of data for each Invoice if you want to collect payment for particular items through one payment method. The grouped items are sent as one data record.  This field is available if the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Invoice_Item_Settlement/Overview_of_Invoice_Item_Settlement) permission is enabled.
    # 
    # Here is another example for a data item:
    #   ```
    #   {
    #     "accountId": "60c81b5bc51649e8a7d1b48303194790",
    #     "documentId": "2c9081a03c63c94c013c6894af5602dd",
    #     "documentType": "Invoice",
    #     "dataItems": [
    #       {
    #           "documentItemId": "8a92ab0e8ab14c53018ac746961c10d1",
    #           "amount": 40
    #       },
    #       {
    #           "taxItemId": "8a92ab0e8ab14c53018ac746961c10d2",
    #           "amount": 40
    #       }
    #   ],
    #     "amount": 80,
    #     "paymentMethodId": "2c9081a03c6d7b51013c6d7e4ada0a1c",
    #     "paymentGatewayId": "d2abe8342e1811ea80e774b9452e17ea",
    #     "comment": "Payment Comments",
    #     "customField1__c": "cf_value1",
    #     "customField2__c": "cf_value2"
    #   },
    #   ```
    DataItems dataItems?;
    # The ID of a billing document associated with the payment run. `documentId` must be valid and match with `documentType`.
    # 
    # You must either specify both `documentId` and `documentType`, or specify neither of them.
    # 
    # If neither of `documentType` and `documentId` is specified, all invoices/debit memos with open balance of the account are collected.
    string documentId?;
    # The number of a billing document associated with the payment run. `documentNumber` must be valid and match with `documentType`.
    # 
    # You must either specify both `documentNumber` and `documentType`, or specify neither of them.
    # 
    # If neither of `documentType` and `documentNumber` is specified, all invoices/debit memos with open balance of the account are collected.
    string documentNumber?;
    # The type of a billing document associated with the payment run. The value can be `Invoice` or `DebitMemo`, but `DebitMemo` is only supported if the Invoice Settlement feature is enabled.
    # 
    # You must either specify both `documentType` and `documentId`, or specify neither of them.
    # 
    # If neither of `documentType` and `documentId` is specified, all invoices/debit memos with open balance of the account are collected.
    "Invoice"|"DebitMemo" documentType?;
    # The ID of the payment gateway for collecting invoices/debit memos. The specified payment gateway must be valid and active.
    # 
    # If <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Payment_Gateway_Routing" target="_blank">Payment Gateway Routing</a> is enabled: 
    #   - If this field is not specified, gateway routing rules will be invoked.
    #   - If this field is specified, the specified gateway will be used to process the payment.
    # 
    # If Payment Gateway Routing is disabled:
    #   - If this field is not specified, the default payment gateway will be used to process the payment. The default gateway of the customer account takes precedence over the default gateway of the tenant.
    #   - If this field is specified, the specified gateway will be used to process the payment.
    # 
    # If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices/debit memos due on an account.
    string paymentGatewayId?;
    # The ID of the payment method for collecting invoices/debit memos. The specified payment method must be a valid non-system payment method. If it is not specified, the default payment method of the account is used regardless of the `autoPay` value of the account.
    # 
    # If `processPaymentWithClosedPM` is set to `false`, the payment method cannot be closed.
    # 
    # If the payment retry rules are enabled, the payment method must meet the rules.
    # 
    # If `consolidatedPayment` is set to `true`, this field is used in processing a single payment for invoices/debit memos due on an account.
    string paymentMethodId?;
    # Note: This field is only available if support for standalone payments is enabled.
    # 
    # Specify `true` to indicate that this is a standalone payment that will be created and processed in Zuora through Zuora gateway integration but will be settled outside of Zuora. When `standalone` is set to `true`:
    #   - `accountId` or `accountNumber` is required.
    #   - `amount` is required. 
    #   - The amount will not be summed up into the account balance and key metrics regardless of the payment currency.
    #   - No settlement data will be created.
    #   - Either the applied amount or the unapplied amount of the payment is zero.
    #   - The standalone payment cannot be applied, unapplied, or transferred.
    boolean standalone?;
    *PaymentObjectCustomFields;
};

public type ChargeModelDataOverride_chargeModelConfiguration record {
    # The custom field that carries the per-unit rate for each usage record. For example, `perUnitAmount__c`.
    # 
    # This field is only available for the usage-based charges that use the Pre-Rated Per Unit Pricing charge model. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string customFieldPerUnitRate?;
    # The custom field that carries the total amount to charge for a usage record. For example, `totalAmount__c`. 
    # 
    # This field is only available for the usage-based charges that use the Pre-Rated Pricing charge model. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string customFieldTotalAmount?;
    # The pricing formula to calculate actual rating amount.
    # 
    # This field is only available for charges that use the Multi-Attribute Pricing charge model.
    string formula?;
};

public type DeletedRecord_1 record {
    # Name of the Column in the extracted file that points to the deleted records. 
    string column?;
    # Can be set to either `Numeric` or `Boolean`. If set to `Numeric`, deleted records are marked as `1`. If set to `Boolean`, deleted records are marked as `true`.          
    string format?;
};

public type UsagesResponse record {
    # The list of tasks retrieved.
    WorkflowUsage[] metrics?;
};

public type POSTPaymentMethodUpdaterBatchRequest record {
    # The billing cycle day. The allowed value is an integer in the range of 1 - 31.
    # 
    # The payment methods from accounts where the billing cycle day is the specified value in this field will be included in the updates.
    int billingCycleDay;
    # The ID (UUID) of the PMU account. This field must be a string of 32 characters consisting of digits and letters a - f.
    string updaterAccountId;
};

public type POSTRatePlanDefinitionResponse record {
    # The unique ID of the product charge definition.
    string id?;
    # Indicates whether the request succeeded.
    boolean success?;
};

public type GetStoredCredentialProfilesResponse record {
    # Container for stored credential profiles.
    GetStoredCredentialProfilesResponse_profiles[] profiles?;
    boolean success?;
};

public type GETCreditMemoCollectionType record {
    # Container for credit memos.
    GETCreditMemoTypewithSuccess[] creditmemos?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type POSTScheduleItemType record {
    # The amount of the invoice to be generated during the processing of the invoice schedule item. 
    # 
    # You can only specify either the `amount` field or `percentage` field in one request. 
    #   - If you choose to specify the `amount` field in the request, `null` is returned as the value of the `percentage` field in the corresponding response. 
    #   - If you choose to specify the `percentage` field in the request, the value of the `amount` field returned in the corresponding response is calculated based on the percentage of the total amount.            
    string amount?;
    # The name of the invoice schedule item.
    @constraint:String {maxLength: 100}
    string name?;
    # The percentage of the total amount to be billed during the processing of the invoice schedule item. 
    # 
    # You can only specify either the `amount` field or `percentage` field in one request. 
    #   - If you choose to specify the `amount` field in the request, `null` is returned as the value of the `percentage` field in the corresponding response. 
    #   - If you choose to specify the `percentage` field in the request, the value of the `amount` field returned in the corresponding response is calculated based on the percentage of the total amount.
    string percentage?;
    # The date in the tenant’s time zone when the invoice schedule item is planned to be processed to generate an invoice.
    # 
    # 
    # When specifying run dates for invoice schedule items, consider that:
    # - An invoice schedule item with a blank run date will not be executed.
    # - You can only update the run date for an invoice schedule item in Pending status.
    # - If the run date of an invoice schedule item is left empty, the dates of all subsequent invoice schedule items must also be blank.
    # - You must specify run dates in chronological order for invoice schedule items.                  
    string runDate?;
    # The date in the tenant's time zone used by the invoice schedule to determine which fixed-period regular charges to be billed together with the invoice schedule item. 
    # 
    # The regular charges must come from the subscriptions specified in the `additionalSubscriptionsToBill` field.
    string targetDateForAdditionalSubscriptions?;
    *InvoiceScheduleItemCustomFields;
};

public type GetOrderLineItemResponseType record {
    *CommonResponse;
    OrderLineItem orderLineItem?;
};

# When Tenant's Compare API returns a result, this object is used to send the response to UI.
public type CompareSchemaInfoResponse record {
    CompareSchemaKeyValue[] customFields?;
    CompareSchemaKeyValue[] customObjects?;
    CompareSchemaKeyValue[] dataAccessControl?;
    # Json node object contains metadata.
    JsonNode metaData?;
    CompareSchemaKeyValue[] notifications?;
    CompareSchemaKeyValue[] productCatalog?;
    CompareSchemaKeyValue[] settings?;
    CompareSchemaKeyValue[] workflows?;
};

public type Inline_response_202_1 record {
    # The ID of an asynchronous job that will be returned for tracking the status and result of the job.
    string jobId?;
    # Indicates whether the operation call succeeded.
    boolean success?;
};

public type GETProductRatePlanDefinitionsResponse record {
    # The list of the product rate plan definitions that are retrieved.
    ProductRatePlanDefinitions[] productRatePlanDefinitions?;
    # Indicates whether the request succeeded.
    boolean success?;
};

public type GETUsageType record {
    # Customer account ID.
    string accountId?;
    # Customer account name.
    string accountName?;
    # Customer account number.
    string accountNumber?;
    # Number of the rate-plan charge that pays for this usage.
    string chargeNumber?;
    # The name of the import file when the usage record is imported from the file.
    string fileName?;
    # Unique ID for the usage item.
    string id?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # Number of units used. 
    # 
    # Could be a negative quantity. Negative quantity usage records are used to adjust the previously uploaded usage records.
    decimal quantity?;
    # Source of the usage data. Possible values are: `Import`, `API`.
    string sourceName?;
    # Start date of the time period in which usage is tracked. Zuora uses this field value to determine the usage date.
    string startDateTime?;
    # Possible values are: `Importing`, `Pending`, `Processed`.
    string status?;
    # Date when usage was submitted.
    string submissionDateTime?;
    # Number of the subscription covering this usage.
    string subscriptionNumber?;
    # a customer-defined specific identifier of a usage record.
    # 
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled. See [Upload usage record with unique key](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Prepaid_balance_transactions#Upload_usage_record_with_unique_key) for more information.
    string uniqueKey?;
    # Unit used to measure consumption.
    string unitOfMeasure?;
    *UsageObjectCustomFields;
};

public type GETJournalRunType record {
    # 
    boolean aggregateCurrency?;
    # Date and time the journal run was executed.
    string executedOn?;
    # Date of the journal entry.
    string journalEntryDate?;
    # Journal run number.
    string number?;
    # The organization(s) that the object belongs to. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    GETProductType_organizationLabels[] organizationLabels?;
    # Name of GL segmentation rule used in the journal run.
    string segmentationRuleName?;
    # Status of the journal run. 
    "Pending"|"Processing"|"Completed"|"Error"|"CancelInprogress"|"Cancelled"|"DeleteInprogress" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The target end date of the journal run.
    string targetEndDate?;
    # The target start date of the journal run.
    string targetStartDate?;
    # Total number of journal entries in the journal run.
    int totalJournalEntryCount?;
    # Transaction types included in the journal run.
    GETJournalRunTransactionType[] transactionTypes?;
};

# 
public type QueryAmendmentsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedAmendment[] data?;
|};

# Information about a new account that will own the subscription. Only available if you have enabled the Owner Transfer feature.
# 
# **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
# 
# If you do not set this field or the `subscriptionOwnerAccountNumber` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `subscriptionOwnerAccountNumber` field.
public type CreateSubscription_newSubscriptionOwnerAccount record {
    # Account number. For example, A00000001.
    @constraint:String {maxLength: 70}
    string accountNumber?;
    # Specifies whether future payments are automatically billed when they are due.
    boolean autoPay?;
    # Name of the billing batch that the account belongs to. For example, Batch1.
    string batch?;
    # Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as "AutoSet".
    @constraint:Int {minValue: 0, maxValue: 31}
    int billCycleDay;
    BillToContact billToContact;
    # Internal identifier of the communication profile that Zuora uses when sending notifications to the account's contacts.
    string communicationProfileId?;
    # Default payment method associated with an account. Only credit card payment methods are supported.
    CreditCard creditCard?;
    # External identifier of the account in a CRM system.
    @constraint:String {maxLength: 100}
    string crmId?;
    # ISO 3-letter currency code (uppercase). For example, USD.
    string currency;
    # Container for custom fields of an Account object.
    AccountObjectCustomFields customFields?;
    # The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.
    # 
    # If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field,
    # but not both.
    # 
    # For the Credit Card Reference Transaction payment method, you can specify the payment method ID in this field or use the `paymentMethod` field to create a CC Reference Transaction payment method for an account.
    string hpmCreditCardPaymentMethodId?;
    # Specifies whether to turn on the invoice delivery method 'Email' for the new account. 
    # Values are: 
    # 
    # * `true` (default). Turn on the invoice delivery method 'Email' for the new account.
    # * `false`. Turn off the invoice delivery method 'Email' for the new account.         
    boolean invoiceDeliveryPrefsEmail?;
    # Specifies whether to turn on the invoice delivery method 'Print' for the new account.
    # Values are: 
    # 
    # * `true`. Turn on the invoice delivery method 'Print' for the new account.
    # * `false` (default). Turn off the invoice delivery method 'Print' for the new account.
    boolean invoiceDeliveryPrefsPrint?;
    # Internal identifier of the invoice template that Zuora uses when generating invoices for the account.
    string invoiceTemplateId?;
    # Account name.
    @constraint:String {maxLength: 70}
    string name;
    # Notes about the account. These notes are only visible to Zuora users.
    @constraint:String {maxLength: 65535}
    string notes?;
    # Identifier of the parent customer account for this Account object. Use this field if you have <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy" target="_blank">Customer Hierarchy</a> enabled.
    string parentId?;
    # The payment gateway that Zuora uses when processing electronic payments and refunds for the account. If you do not specify this field or if the value of this field is null, Zuora uses your default payment gateway.
    @constraint:String {maxLength: 40}
    string paymentGateway?;
    # Payment method information associated with an account.
    POSTPaymentMethodRequest paymentMethod?;
    # Name of the payment term associated with the account. For example, "Net 30". The payment term determines the due dates of invoices.
    string paymentTerm?;
    SoldToContact soldToContact?;
    # Information about the tax exempt status of a customer account.
    TaxInfo taxInfo?;
};

# Container for custom fields of an Order Line Item object.
public type OrderLineItemCustomFields record {
};

public type CustomObjectBulkJobErrorResponseCollection record {
    # All errors for a custom object bulk job.
    CustomObjectBulkJobErrorResponse[] errors;
};

public type BillingPreviewResult record {
    # ID of the customer account to which the billing preview applies.
    string accountId?;
    # An array of credit memo items returned as the result of the billing preivew request.
    # 
    # **Note:** The credit memo items are only available if you have Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    POSTBillingPreviewCreditMemoItem[] creditMemoItems?;
    # An array of invoice items returned as the result of the billing preview request.
    POSTBillingPreviewInvoiceItem[] invoiceItems?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type POSTRetryPaymentScheduleItemResponse record {
    PaymentScheduleItemCommonResponse[] items?;
    # Returns `true` if the request was processed successfully. 
    boolean success?;
};

public type GETPaymentRunSummaryResponse record {
    # **Note:** This field is only available if you have the Credit Balance feature enabled.
    # 
    # The number of credit balance adjustments that are successfully processed in the payment run.
    int numberOfCreditBalanceAdjustments?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The total number of credit memos that are successfully processed in the payment run.
    int numberOfCreditMemos?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The total number of debit memos that are picked up for processing in the payment run.
    int numberOfDebitMemos?;
    # The number of input data that are processed with errors.
    int numberOfErrorInputData?;
    # The number of payments with the status of `Error` and `Processing`.
    int numberOfErrors?;
    # The total number of input data.
    int numberOfInputData?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The total number of invoices that are picked up for processing in the payment run.
    int numberOfInvoices?;
    # The number of payments that are successfully processed in the payment run.
    int numberOfPayments?;
    # The number of input data that are successfully processed.
    int numberOfProcessedInputData?;
    # The total number of receivables that are picked up for processing in the payment run.
    # 
    # The value of this field is the sum of the value of the `numberOfInvoices` field and that of the `numberOfDebitMemos` field.
    int numberOfReceivables?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The number of unapplied payments that are successfully processed in the payment run.
    int numberOfUnappliedPayments?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The number of debit memos with remaining positive balances after the payment run is completed.
    int numberOfUnprocessedDebitMemos?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The number of invoices with remaining positive balances after the payment run is completed.
    int numberOfUnprocessedInvoices?;
    # The number of receivables with remaining positive balances after the payment run is completed.
    int numberOfUnprocessedReceivables?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Container for total values.
    GETPaymentRunSummaryTotalValues[] totalValues?;
};

public type RegenerateBillingRequest record {
    # Id of Invoice, CreditMemo, DebitMemo, or InvoiceItemAdjustment
    string documentId?;
    # Number of Invoice, CreditMemo, DebitMemo, or InvoiceItemAdjustment
    string number?;
    # The type of business object for which you want to generate the transactions.
    "Invoice"|"CreditMemo"|"DebitMemo"|"InvoiceItemAdjustment" 'type?;
};

public type POSTAttachmentResponseType record {
    # ID to identify the attached file. Use this file ID with [Get files](https://developer.zuora.com/api-references/api/operation/GET_Files) to download the file.
    string fileId?;
    # Attachment id.
    string id?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Container for Invoice fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type InvoiceObjectNSFields record {
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the invoice's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Date when the invoice was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
};

public type BulkCreateDebitMemosFromInvoiceRequest record {
    # The type of the source where debit memos are created. 
    #     
    # This enum field has the following values:
    #   - `Invoice`: By setting this field to `Invoice`, you can create multiple debit memos from invoices.
    #   - `Standalone`: By setting this field to `Standalone`, you can create multiple debit memos from product rate plan charges.
    #   
    # The specific schema of the `memos` object field in the request body depends on the value of the `sourceType` field.
    #   - To view the `memos` schema applicable to debit memo creation from invoices, select `Invoice` from the following drop-down list.
    #   - To view the `memos` schema applicable to debit memo creation from product rate plan charges, select `Standalone` from the following drop-down list.
    "Invoice" sourceType;
    # The container for a list of debit memos. The maximum number of debit memos is 50.
    @constraint:Array {maxLength: 50}
    DebitMemoFromInvoiceRequest[] memos?;
};

public type GETPaymentGatwaysResponse record {
    # 
    GETAPaymentGatwayResponse[] paymentgateways?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type CreditMemoItemFromWriteOffInvoice record {
    # Comments about the credit memo item.
    string comment?;
    # Container for the finance information related to the credit memo item.
    CreditMemoItemFromWriteOffInvoice_financeInformation financeInformation?;
    # The ID of the invoice item.
    string invoiceItemId?;
    # The service end date of the credit memo item. 
    string serviceEndDate?;
    # The service start date of the credit memo item. 
    string serviceStartDate?;
    # The name of the charge associated with the invoice.
    string skuName?;
    # The definable unit that you measure when determining charges.
    string unitOfMeasure?;
    *CreditMemoItemObjectCustomFields;
};

# Response information of orders.
public type PostOrderResponseType record {
    *CommonResponse;
    # The account ID for the order. This field is returned instead of the `accountNumber` field if the `returnIds` query parameter is set to `true`.
    @constraint:String {maxLength: 32}
    string accountId?;
    # The account number for the order.
    @constraint:String {maxLength: 50}
    string accountNumber?;
    # An array of the credit memo IDs generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled. This field is returned instead of the `creditMemoNumbers` field if the `returnIds` query parameter is set to `true`.
    string[] creditMemoIds?;
    # An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.
    string[] creditMemoNumbers?;
    # An array of the invoice IDs generated in this order request. Normally it includes one invoice ID only, but can include multiple items when a subscription was tagged as invoice separately. This field is returned instead of the `invoiceNumbers` field if the `returnIds` query parameter is set to `true`.
    string[] invoiceIds?;
    # An array of the invoice numbers generated in this order request. Normally it includes one invoice number only, but can include multiple items when a subscription was tagged as invoice separately.
    string[] invoiceNumbers?;
    # The ID of the order created. This field is returned instead of the `orderNumber` field if the `returnIds` query parameter is set to `true`.
    @constraint:String {maxLength: 32}
    string orderId?;
    PostOrderResponseType_orderLineItems[] orderLineItems?;
    # The order number of the order created.
    @constraint:String {maxLength: 100}
    string orderNumber?;
    # The total amount collected in this order request.
    @constraint:String {maxLength: 22, minLength: 9}
    string paidAmount?;
    # The payment Id that is collected in this order request. This field is returned instead of the `paymentNumber` field if the `returnIds` query parameter is set to `true`.
    @constraint:String {maxLength: 32}
    string paymentId?;
    # The payment number that is collected in this order request.
    @constraint:String {maxLength: 32}
    string paymentNumber?;
    # **Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.
    # 
    # The ramp definitions created by this order request.
    PostOrderResponseType_ramps[] ramps?;
    PostOrderResponseType_refunds[] refunds?;
    # Status of the order. `Pending` is only applicable for an order that contains a `CreateSubscription` order action.
    "Draft"|"Pending"|"Completed" status?;
    # Container for the subscription IDs of the subscriptions in an order. This field is returned if the `returnIds` query parameter is set to `true`.
    string[] subscriptionIds?;
    # Container for the subscription numbers of the subscriptions in an order. Subscriptions in the response are displayed in the same sequence as the subscriptions defined in the request.
    string[] subscriptionNumbers?;
    # **Note:** This field is in Zuora REST API version control. Supported minor versions are 223.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.
    # 
    # Container for the subscription numbers and statuses in an order.
    PostOrderResponseType_subscriptions[] subscriptions?;
    PostOrderResponseType_writeOff[] writeOff?;
};

public type DELETEUnresigerApplePayDomainResponse record {
    # Indicates whether this call succeeds.
    boolean success?;
};

# Rate plan associated with a subscription.
public type RatePlanOverride record {
    # List of charges associated with the rate plan.
    ChargeOverride[] chargeOverrides?;
    # Specifies whether all features in the rate plan will be cleared.
    boolean clearingExistingFeatures?;
    # Container for custom fields of the Rate Plan or Subscription Offer object. The custom fields of the Rate Plan object are used when rate plans are subscribed, and the custom fields of the Subscription Offer object are used when product offers are subscribed.
    OrdersRatePlanObjectCustomFields customFields?;
    # Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string externallyManagedPlanId?;
    # Indicates whether the rate plan is created from the Zuora product catalog or from an external product catalog.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    boolean isFromExternalCatalog?;
    # Internal identifier of the rate plan.
    string newRatePlanId?;
    # Internal identifier of the product rate plan that the rate plan is based on.
    string productRatePlanId;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # Name of the standalone rate plan.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string ratePlanName?;
    # List of features associated with the rate plan.
    # The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows:
    # * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared.
    # * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.    
    RatePlanFeatureOverride[] subscriptionProductFeatures?;
    # Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the rate plan. Then when you update the product, you can use the same unique identifier to specify which rate plan to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
    # Number of a subscription rate plan for this subscription.
    @constraint:String {maxLength: 50}
    string subscriptionRatePlanNumber?;
};

# Information about an order action of type `CreateSubscription`.
public type CreateSubscription record {
    # The ID of the bill-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string billToContactId?;
    # The code of currency that is used for this subscription. If the currency is not selected, the default currency from the account will be used.
    # 
    # All subscriptions in the same order must use the same currency. The currency for a subscription cannot be changed.
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    @constraint:String {maxLength: 3}
    string currency?;
    # The number of the invoice group associated with the subscription.
    # 
    # After enabling the Invoice Grouping feature, you can specify invoice group numbers to bill subscriptions and order line items based on specific criteria. For the same account, Zuora generates separate invoices for subscriptions and order line items, each identified by unique invoice group numbers. For more information, see [Invoice Grouping](https://knowledgecenter.zuora.com/Billing/Subscriptions/Invoice_Grouping).
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string? invoiceGroupNumber?;
    # Specifies whether the subscription appears on a separate invoice when Zuora generates invoices.
    boolean invoiceSeparately?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # Information about a new account that will own the subscription. Only available if you have enabled the Owner Transfer feature.
    # 
    # **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    # 
    # If you do not set this field or the `subscriptionOwnerAccountNumber` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `subscriptionOwnerAccountNumber` field.
    CreateSubscription_newSubscriptionOwnerAccount newSubscriptionOwnerAccount?;
    # Notes about the subscription. These notes are only visible to Zuora users.
    @constraint:String {maxLength: 500}
    string notes?;
    # The name of the payment term associated with the subscription. For example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string paymentTerm?;
    # The ID of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string soldToContactId?;
    # List of rate plans associated with the subscription.
    RatePlanOverride[] subscribeToRatePlans?;
    # Subscription number of the subscription. For example, A-S00000001.
    # 
    # If you do not set this field, Zuora will generate the subscription number.
    @constraint:String {maxLength: 100}
    string subscriptionNumber?;
    # Account number of an existing account that will own the subscription. For example, A00000001.
    # 
    # If you do not set this field or the `newSubscriptionOwnerAccount` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `newSubscriptionOwnerAccount` field.
    @constraint:String {maxLength: 70}
    string subscriptionOwnerAccountNumber?;
    # Container for the terms and renewal settings of the subscription.
    CreateSubscription_terms terms?;
};

public type GetAggregateQueryJobResponse record {
    # A JSON array object that contains a list of batch objects.
    BatchesQueriesById[] batches?;
    # If enabled, you must supply the formatting (zip or unzip) first and decrypt it to get the actual contents.
    "pgp"|"none" encrypted?;
    # The format of the query. The default value is `csv`.
    "csv"|"zip"|"gzip" format?;
    # The job ID created for the AQuA API request. The job ID can be used for querying for the query status. 
    # 
    # The ID exists only if the JSON request can be parsed and validated successfully. Otherwise, the job ID is null.
    string id?;
    # The name of the job. 32 character limit.
    string name?;
    # The partner field indicates the unique ID of a data integration partner. The dropdown list of this field displays partner IDs for the past thirty days.
    # 
    # It must be used together with "project" field to uniquely identify a data integration target.
    # 
    # For example, if a continuous AQuA session is to retrieve data incrementally for a Salesforce.com Org 00170000011K3Ub, you can use partner as "Salesforce", and "project" as "00170000011K3Ub." 
    # 
    # This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.
    # 
    # **Note**: Zuora highly recommends you use the stateless mode instead of the stateful mode to extract bulk data. See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Bulk_data__extraction_from_Zuora_using_AQuA" target="_blank">Bulk data extraction from Zuora using AQuA</a> for best practices.
    # 
    # **Note**: Submit a request at <a href="http://support.zuora.com" target="_blank">Zuora Global Support</a> to obtain a partner ID.
    string partner?;
    # The project field contains the unique ID of a data integration project for a particular partner. The dropdown list of this field displays project IDs for the past thirty days.
    # 
    # This field must be used together with partner field to uniquely identify a data integration target. 
    # 
    # This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.
    string project?;
    # Indicates the source this aggregate query runs against:
    # 
    # * `LIVE` represents the live transactional databases at Zuora (Data Query Live).
    # 
    # * `WAREHOUSE` represents Zuora Warehouse, which has better performance and fewer limitations than the live transactional database. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Zuora_Warehouse/A_Zuora_Warehouse_overview" target="_blank">Zuora Warehouse</a>.
    string sourceData?;
    # The start time of the query. 
    string startTime?;
    # The status of the AQuA job:
    # - submitted: The AQuA job was submitted to the query executor for processing.
    # - executing: The AQuA job is being processed.
    # - completed: The AQuA job was successfully executed.
    # - error: The AQuA job was not processed because of validation errors.
    # - aborted: The AQuA job execution failed because one or more queries of this job failed.
    # - cancelled: The AQuA job was cancelled.
    "submitted"|"executing"|"completed"|"error"|"aborted"|"cancelled" status?;
    # The API version you want to use. 
    # 
    # The supported versions are as follows:
    #   - `1.1`. It supports both modes
    #   - `1.0`. Default. It supports stateless modes only.
    # 
    # See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/BA_Stateless_and_Stateful_Modes" target="_blank">Stateless and stateful modes</a> for more information.
    float version?;
};

public type ProxyCreateOrModifyResponse record {
    # 
    string Id?;
    # 
    boolean Success?;
};

public type GetProductFeatureType record {
    # Feature code, up to 255 characters long.
    string code?;
    # Feature description.
    string description?;
    # Feature ID.
    string id?;
    # Feature name, up to 255 characters long.
    string name?;
    # 
    string status?;
    *ProductFeatureObjectCustomFields;
};

# The container for billing processing options and payment processing options.
# 
# **Note:** This field is not supported in draft orders.
public type ProcessingOptionsOrdersAsync record {
    # The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
    string[] applicationOrder?;
    # 
    # - If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices
    # 
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    boolean applyCredit?;
    # Indicates if any credit balance on a customer's account is automatically applied to invoices. If no value is specified then this field defaults to false. This feature is not available if you have enabled the Invoice Settlement feature.
    boolean applyCreditBalance?;
    ProcessingOptionsOrdersWithDelayedCapturePayment_billingOptions billingOptions?;
    # Indicates if the current request needs to collect payments. This value can not be 'true' when 'runBilling' flag is 'false'.
    boolean collectPayment?;
    # Container for the electronic payment options.
    ProcessingOptionsOrdersAsync_electronicPaymentOptions electronicPaymentOptions?;
    # Indicates if the current request needs to generate an invoice. The invoice will be generated against all subscriptions included in this order.
    boolean runBilling?;
};

public type PUTVerifyPaymentMethodResponseType record {
    # The ID of the verified payment method.
    string paymentMethodId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type GETContactSnapshotResponse record {
    # The first line for the address of the contact, which is often a street address or business name.
    string address1?;
    # The second line for the address of the contact, which is mostly the locality.
    string address2?;
    # The city for the address of the contact.
    string city?;
    # The Zuora ID of the contact who the snapshot belongs to.
    string contactId?;
    # The country for the address of the contact.
    string country?;
    # The county for the address of the contact. The field value might optionally be used by Zuora Tax to calculate county tax.
    string county?;
    # A description of the contact.
    string description?;
    # The fax number of the contact.
    string fax?;
    # The first name of the contact.
    string firstName?;
    # The home phone number of the contact.
    string homePhone?;
    # The unique ID of the contact snapshot.
    string id?;
    # The last name of the contact.
    string lastName?;
    # The mobile phone number of the contact.
    string mobilePhone?;
    # A nickname for the contact.
    string nickname?;
    # An additional phone number for the contact.
    string otherPhone?;
    # The type of the additional phone number.
    "Work"|"Mobile"|"Home"|"Other" otherPhoneType?;
    # The personal email address of the contact.
    string personalEmail?;
    # The postal code for the address of the contact.
    string postalCode?;
    # The state or province for the address of the contact.
    string state?;
    # If using Zuora Tax rules.
    string taxRegion?;
    # The business email address of the contact.
    string workEmail?;
    # The business email address of the contact.
    string workPhone?;
    *ContactSnapshotObjectCustomFields;
};

# The `UpdatedDate` field definition
public type CustomObjectAllFieldsDefinition_UpdatedDate record {
    # The field data format
    "date-time" format?;
    # Specifies the field is a system field
    "system" origin?;
    # The field data type
    "string" 'type?;
};

# 
public type QueryPrepaidBalancesResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedPrepaidBalance[] data?;
|};

# Container for profile information for this account.
# 
# **Note**: This field is available only if you have the <a
# href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing"
# target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
public type PUTAccountEinvoiceProfile record {
    # The high-level category of the business.
    "B2B"|"B2C"|"B2G" businessCategory?;
    # Legal Business Name. The full formal name by which the Buyer is registered with the relevant legal authority. 
    @constraint:String {maxLength: 255}
    string businessName?;
    # Buyer legal registration identifier. An identifier issued by an official registrar that identifies the Buyer as a legal entity or person. GSTIN of buyer for India. 
    string businessNumber?;
    # Business Number Schema Id. The identification scheme identifier of the Buyer legal registration identifier. 
    string businessNumberSchemeId?;
    # Enable e-invoice for the account. All invoices generated from this account can be submitted to generate e-invoices when invoices meet the conditions: A business region must be created for the billing country contact, and it must be linked to a service provider. The account must be enabled to generate e-invoices. The invoice must be in the "Posted" status. 
    boolean enabled?;
    # Buyer electronic address.Identifies the Buyer's electronic address to which the invoice is delivered.
    string endpointId?;
    # Buyer electronic address identification scheme identifier. 
    string endpointSchemeId?;
    # Buyer VAT identifier. The Buyer's VAT identifier (also known as Buyer VAT identification number).
    string taxRegisterNumber?;
};

public type ActionsErrorResponse record {
    # 
    string Code?;
    # 
    string Message?;
};

public type CatalogGroupResponse record {
    # The automatically generated number of the catalog group with the CG- perfix. For example, CG-00000001.
    string catalogGroupNumber?;
    # The description of the catalog group.
    string description?;
    # The ID of the catalog group.
    string id?;
    # The name of the catalog group.
    string name?;
    # The list of product rate plans in the catalog group.
    GETCatalogGroupProductRatePlanResponse[] productRatePlans?;
    # The type of the catalog group.
    "Grading"|"Display" 'type?;
};

# The length of the period for the current subscription term.
public type LastTerm record {
    # Specify only when the termType is 'TERMED'.
    @constraint:Int {minValue: 0}
    int period?;
    # Specify only when the termType is 'TERMED'.
    "Month"|"Year"|"Day"|"Week" periodType?;
    # The start date of the current term. You can change the term start date of a renewed subscription through a T&Cs order action. However, when changing it to an earlier date, this date must not be earlier than the term start date of the current term before this T&Cs.
    string startDate?;
    # The end date of the current term, in YYYY-MM-DD format.
    string endDate?;
    "TERMED"|"EVERGREEN" termType;
};

# 
public type PUTSequenceSetResponse record {
    # Indicates whether the call succeeded.
    boolean success?;
};

# The options on how the preview start date is calculated.
# - If you set this field to `startOfTerm`, the preview start date is the start date of the subscription term.   
# - If you set this field to `today`, the preview start date is today.
# - If you set this field to `specificDate`, you must specify a specific date in the `specificDate` field. The date must be in the format `yyyy-mm-dd`.
public type PreviewStartDatePolicy "startOfTerm"|"today"|"specificDate";

public type CreatePaymentMethodACH record {
    # First address line, 255 characters or less.
    string addressLine1?;
    # Second address line, 255 characters or less.
    string addressLine2?;
    # The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.
    string bankABACode?;
    # The masked account number such as ****1234. 
    # 
    # When creating ACH payment methods on Stripe v2, if the `tokens` field is provided, this `bankAccountMaskNumber` field is required. For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration#ACH" target="_blank">Overview of Stripe payment gateway integration</a>.
    string bankAccountMaskNumber?;
    # The name of the account holder, which can be either a person or a company.
    # 
    # For ACH payment methods on the BlueSnap integration, see [Overview of BlueSnap gateway integration](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways/BlueSnap_Gateway/Overview_of_BlueSnap_gateway_integration#Payer_Name_Extraction) for more information about how Zuora splits the string in this field into two parts and passes them to BlueSnap's `firstName` and `lastName` fields.
    @constraint:String {maxLength: 70}
    string bankAccountName?;
    # The bank account number associated with the ACH payment.
    # 
    # This field is required if the `type` field is set to `ACH`. However, for creating tokenized ACH payment methods on Stripe v2, this field is optional if the `tokens` and `bankAccountMaskNumber` fields are specified. For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration#ACH" target="_blank">Overview of Stripe payment gateway integration</a>.
    @constraint:String {maxLength: 30}
    string bankAccountNumber?;
    # The type of bank account associated with the ACH payment.
    # 
    # When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify any of the allowed values as a dummy value, `Checking` preferably.
    "BusinessChecking"|"Checking"|"Saving" bankAccountType?;
    # The name of the bank where the ACH payment account is held.
    # 
    # When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.
    @constraint:String {maxLength: 70}
    string bankName?;
    # City, 40 characters or less.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    #     
    string city?;
    # Country, must be a valid country name or abbreviation.
    # 
    # See <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a> for the list of supported country names and abbreviations.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    string country?;
    # Phone number, 40 characters or less.
    string phone?;
    # State, must be a valid state name or 2-character abbreviation.
    # 
    # See [United States Standard State Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes) and [Canadian Standard Province Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/C_Canadian_Province_Names_and_2-Digit_Codes) for the list of supported names and abbreviations.
    string state?;
    # Zip code, 20 characters or less.
    string zipCode?;
    # The container of the mandate information for the payment method.
    CreatePaymentMethodCreditCard_mandateInfo mandateInfo?;
    # The container for payment method processing options.
    CreatePaymentMethodCreditCard_processingOptions processingOptions?;
    # To create tokenized ACH payment methods on Stripe v2, pass in the existing token information through the fields in this container.
    # 
    # For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration#ACH" target="_blank">Overview of Stripe payment gateway integration</a>.
    CreatePaymentMethodACH_tokens tokens?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

# Information about an order action of type `ChangePlan`.
# 
# **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.
public type ChangePlan record {
    # * If the rate plan change (from old to new) is an upgrade, the effective policy is `EffectiveImmediately` by default.
    # * If the rate plan change (from old to new) is a downgrade, the effective policy is `EffectiveEndOfBillingPeriod` by default.
    # * Otherwise, the effective policy is `SpecificDate` by default.
    "EffectiveImmediately"|"EffectiveEndOfBillingPeriod"|"SpecificDate" effectivePolicy?;
    # Information about the new product rate plan to add. 
    ChangePlanRatePlanOverride newProductRatePlan?;
    # ID of the rate plan to remove. This can be the latest version or any history version of ID.
    string productRatePlanId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # ID of the rate plan to remove. This can be the latest version or any history version of ID.
    string ratePlanId?;
    # This field is used to choose the sub type for your change plan order action.
    # 
    # However, if you do not set this field, the field will be automatically generated by the system according to the following rules:
    # 
    # When the old and new rate plans are within the same Grading catalog group:
    # * If the grade of new plan is greater than that of the old plan, this is an "Upgrade".
    # * If the grade of new plan is less than that of the old plan, this is a "Downgrade".
    # * If the grade of new plan equals that of the old plan, this is a "Crossgrade".
    # 
    # When the old and new rate plans are not in the same Grading catalog group, or either has no group, this is "PlanChanged".
    "Upgrade"|"Downgrade"|"Crossgrade"|"PlanChanged" subType?;
    # Number of a rate plan for this subscription.
    string subscriptionRatePlanNumber?;
};

public type PUTUpdateInvoiceScheduleRequest record {
    # A list of the numbers of the subscriptions that need to be billed together with the invoice schedule. 
    # 
    # One invoice schedule can have at most 600 additional subscriptions.
    string[] additionalSubscriptionsToBill?;
    # Whether the invoice items created from the invoice schedule appears on a separate invoice when Zuora generates invoices.
    boolean invoiceSeparately?;
    # The run date of the next execution of the invoice schedule. 
    # 
    # By default, the next run date is the same as the run date of next pending invoice schedule item. The date can be overwritten by a different date other than the default value. If the invoice schedule has completed the execution, the next run date is `null`.
    string nextRunDate?;
    # Comments on the invoice schedule.
    @constraint:String {maxLength: 255}
    string notes?;
    # A list of the IDs or numbers of the orders associated with the invoice schedule. One invoice schedule can be associated with at most 10 orders.
    # 
    # The orders specified in this field override all the existing orders associated with the invoice schedule.
    string[] orders?;
    # Container for invoice schedule items. The maximum number of schedule items is 50.
    # 
    # The invoice schedule items specified in this field override all the existing invoice schedule items.
    UpdateScheduleItems[] scheduleItems?;
    # A list of the numbers of specific subscriptions associated with the invoice schedule.
    # 
    # - If the subscriptions specified in this field belong to the orders specified in the `orders` field, only the specific subscriptions instead of the orders are associated with the invoice schedule. 
    # - If only the `orders` field is specified, all the subscriptions from the order are associated with the invoice schedule.
    #   
    # The specific subscriptions specified in this field override all the existing specific subscriptions associated with the invoice schedule.
    # 
    # Example:
    # ```
    # {
    #   "orders": [
    #     "O-00000001", "O-00000002"
    #   ],
    #   "specificSubscriptions": [
    #     {
    #       "orderKey": "O-00000001",
    #       "subscriptionKey": "S-00000001"
    #     }
    #   ]
    # }
    # ```
    # - For the order with number O-00000001, only subscription S-00000001 contained in the order is associated with the invoice schedule.
    # - For the order with number O-00000002, all subscriptions contained in the order are associated with the invoice schedule.
    InvoiceScheduleSpecificSubscriptions[] specificSubscriptions?;
    *InvoiceScheduleCustomFields;
};

public type ModifiedStoredCredentialProfileResponse record {
    # The number that identifies the stored credential profile within the payment method.
    int number?;
    # ID of the payment method.
    string paymentMethodId?;
    boolean success?;
};

# A key-value map of merge fields of this callout.
public type CalloutMergeFields record {|
    string...;
|};

public type PutOrderLineItemUpdateType OrderLineItemCommon;

public type POSTSubscriptionPreviewInvoiceItemsType record {
    # The amount of the charge. This amount doesn't include taxes unless the charge's tax mode is inclusive.
    decimal chargeAmount?;
    # Description of the charge.
    string chargeDescription?;
    # Name of the charge.
    string chargeName?;
    # Name of the product associated with this item.
    string productName?;
    # ID of the product rate plan charge.
    string productRatePlanChargeId?;
    # Quantity of this item.
    decimal quantity?;
    # End date of the service period for this item, i.e., the last day of the period, as yyyy-mm-dd.
    string serviceEndDate?;
    # Service start date as yyyy-mm-dd. If the charge is a one-time fee, this is the date of that charge.
    string serviceStartDate?;
    # The tax amount of the invoice item.
    decimal taxAmount?;
    # List of taxation items.
    # **Note**: This field is only available if you set the `zuora-version` request header to `315.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). 
    POSTSubscriptionPreviewTaxationItemsType[] taxationItems?;
    # 
    string unitOfMeasure?;
};

# The response data returned from the gateway. This field is available only if the `success` field is `false` and the support for returning additional error information from the gateway is enabled.
public type POSTAuthorizeResponse_paymentGatewayResponse record {
    # The additional information returned from the gateway. The returned fields vary for gateways. Here is an example.
    # 
    # ```
    # "additionalInfo": {
    #   "ProcessorName": "MasterCard Saferpay Test",
    #   "ProcessorResult": "51",
    #   "ProcessorMessage": "Insufficient funds",
    #   "ErrorName": "TRANSACTION_DECLINED"
    # }
    # ```
    record {} additionalInfo?;
    # The HTTP response code.
    string gatewayResponseCode?;
    # The error message returned from the gateway.
    string gatewayResponseMessage?;
    # The gateway type.
    string gatewayType?;
    # The gateway version.
    string gatewayVersion?;
};

public type RecurringDeliveryPricingUpdate record {
    *PriceChangeParams;
    DeliveryScheduleParams deliverySchedule?;
    decimal listPrice?;
};

public type ProxyCreateTaxationItem record {
    #  The Chart of Accounts 
    string AccountingCode?;
    #  The calculated tax amount excluded due to the exemption.
    # **Character limit**: 16 **Values**: a decimal value 
    decimal ExemptAmount?;
    #  The ID of the specific invoice item that the taxation information applies to.
    # **Character limit**: 32 **Values**: a valid invoice item ID 
    string InvoiceItemId;
    #  The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    # **Character limit**: 32 **Values**: a string of 32 characterrs or fewer 
    string Jurisdiction;
    #  The identifier for the location based on the value of the `TaxCode` field.
    # **Character limit**: 32 **Values**: automatically generated 
    string LocationCode?;
    #  The name of the tax rate, such as sales tax or GST. This name is displayed on invoices.
    # **Character limit**: 128 **Values**: a string of 128 characters or fewer 
    string Name;
    #  The amount of the tax applied to the charge.
    # **Character limit**: 16 **Values**: a decimal value 
    decimal TaxAmount;
    #  The tax code identifies which tax rules and tax rates to apply to a specific charge.
    # **Character limit**: 32 **Values**: a string of 32 characters or fewer 
    string TaxCode?;
    #  The description for the tax code.
    # **Character limit**: 255 **Values**: a string of 255 characters or fewer 
    string TaxCodeDescription?;
    #  The date that the tax is applied to the charge, in `yyyy-mm-dd` format.
    # **Character limit**: 29 
    string TaxDate;
    #  The tax rate applied to the charge.
    # **Character limit**: 16 **Values**: a valid decimal value 
    decimal TaxRate;
    #  The description of the tax rate.
    # **Character limit**: 255 **Values**: a string of 255 characters or fewer 
    string TaxRateDescription?;
    #  The type of the tax rate applied to the charge.
    # **Character limit**: 10 **Values**: `Percentage`, `FlatFee` 
    string TaxRateType;
    *TaxationItemObjectCustomFields;
};

# Container for custom fields of an Accounting Code object.
public type AccountingCodeObjectCustomFields record {
};

public type POSTOrderRequestType record {
    # Category of the order to indicate a product sale or return. Default value is `NewSales`.
    "NewSales"|"Return" category = "NewSales";
    # Container for custom fields of an Order object.
    OrderObjectCustomFields customFields?;
    # A description of the order.
    @constraint:String {maxLength: 500}
    string description?;
    # The account number that this order will be created under.
    # Note that this actually specifies the invoice owner account of the subscriptions included in this order.
    @constraint:String {maxLength: 70}
    string existingAccountNumber?;
    # An enum field on the Subscription object to indicate the name of a third-party store. This field is used to represent subscriptions created through third-party stores.
    "Amazon"|"Apple"|"Google"|"Roku" externallyManagedBy?;
    CreateOrderNewAccount newAccount?;
    # The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if the contract effective date field is skipped or its value is left as null.
    string orderDate;
    # [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services. 
    # 
    # With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.
    # 
    # **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.        
    CreateOrderOrderLineItem[] orderLineItems?;
    # The order number of the new order. If not provided, system will auto-generate a number for this order.   
    # **Note:** Make sure the order number does not contain a slash. 
    @constraint:String {maxLength: 100}
    string orderNumber?;
    # The container for billing processing options and payment processing options.
    # 
    # **Note:**
    # - This field is not supported in draft orders.
    # - When you use the "Create an order" operation to create an account, create a subscription, run billing, and collect payment in a single call, if any error occurs during the call, such as a payment processing failure and a tax engine failure, then all the other steps will be rolled back. In this case, neither the invoice will be generated, nor the subscription nor the account will be created.
    # - When you use the "Create an order" operation to cancel a subscription with `refund` and `writeOff`, if the `refund` or `writeOff` fails, `cancelSubscription`, `runBilling`, and `collectPayment` still can succeed.
    # - When you use the "Create an order" operation, the `collectPayment` and `refund` fields cannot be set to `true` simultaneously.  Otherwise, the order will not be proceeded.
    ProcessingOptionsOrdersWithDelayedCapturePayment processingOptions?;
    # Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs.
    @constraint:String {maxLength: 255}
    string reasonCode?;
    # Information of scheduled order. 
    POSTOrderRequestType_schedulingOptions schedulingOptions?;
    # The status of the order. The default value is `Completed`. The following values are supported:
    # - `Draft`: The order is in draft status.
    # - `Pending`: The order is in pending status.
    # - `Completed`: The order is in completed status.
    # - `Scheduled`: The order is in scheduled status and it is only valid if the Scheduled Orders feature is enabled.
    # - `Executing`: The scheduled order is executed by a scheduler and it is only valid if the Scheduled Orders feature is enabled.
    # - `Failed`: The scheduled order has failed.
    "Draft"|"Pending"|"Completed"|"Scheduled"|"Executing"|"Failed" status?;
    # Each item includes a set of order actions, which will be applied to the same base subscription.
    POSTOrderRequestType_subscriptions[] subscriptions?;
};

public type PostFulfillmentItemsResponseType record {
    *CommonResponse;
    PostFulfillmentsResponseType_fulfillmentItems[] fulfillmentItems?;
};

public type GETPaymentItemPartCollectionType record {
    # Container for payment part items.
    GETPaymentItemPartTypewithSuccess[] itemParts?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Container for the finance information related to the credit memo items that are created for invoice write-off.
public type ProcessingOptionsOrdersWithDelayedCapturePayment_writeOffBehavior_financeInformation record {
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    @constraint:String {maxLength: 100}
    string deferredRevenueAccountingCode?;
    # The accounting code that maps to an on account in your accounting system.
    @constraint:String {maxLength: 100}
    string onAccountAccountingCode?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccountingCode?;
    # The name of the revenue recognition rule governing the revenue schedule.
    @constraint:String {maxLength: 100}
    string revenueRecognitionRuleName?;
};

public type PUTSrpChangeType record {
    # The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call. 
    string bookingDate?;
    # This optional container is used to override one or more product rate plan charges for this subscription.
    PUTScAddType[] chargeOverrides?;
    # Effective date of the new subscription, as yyyy-mm-dd.
    string contractEffectiveDate?;
    # The date when the customer accepts the contract in yyyy-mm-dd format.
    # When this field is not set:
    # * If the `serviceActivationDate` field is not set, the value of this field
    # is set to be the contract effective date.
    # * If the `serviceActivationDate` field is set, the value of this field is
    # set to be the service activation date.
    # 
    # The billing trigger dates must follow this rule: contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
    string customerAcceptanceDate?;
    # The default value for the `effectivePolicy` field is as follows:
    #   * If the rate plan change (from old to new) is an upgrade, the effective policy is `EffectiveImmediately` by default.
    #   * If the rate plan change (from old to new) is a downgrade, the effective policy is `EffectiveEndOfBillingPeriod` by default.
    #   * Otherwise, the effective policy is `SpecificDate` by default.
    # 
    # **Notes**: 
    #   * When setting this field to `EffectiveEndOfBillingPeriod`, you cannot set the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/W_Subscription_and_Amendment_Dates#Billing_Trigger_Dates" target="_blank">billing trigger dates</a> for the subscription as the system will automatically set the trigger dates to the end of billing period.
    #   * When setting this field to `SpecificDate`, you must also set the `contractEffectiveDate` field.
    "EffectiveImmediately"|"EffectiveEndOfBillingPeriod"|"SpecificDate" effectivePolicy?;
    # An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.
    # 
    # **Note:** Provide only one of `externalCatalogPlanId`, `ratePlanId` or `productRatePlanId`. If more than one field is provided then the request would fail.
    string externalCatalogPlanId?;
    # The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.
    # 
    # **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalIdSourceSystem?;
    # An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.
    # 
    # **Note:** Provide only one of `newExternalCatalogPlanId` or `newProductRatePlanId`. If both fields are provided then the request would fail.
    string newExternalCatalogPlanId?;
    # The ID of the external source system. You can use this field and `newExternalCatalogPlanId` to specify a product rate plan that is imported from an external system.
    # 
    # **Note:** If both `newExternalCatalogPlanId`, `newExternalIdSourceSystem` and `newProductRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string newExternalIdSourceSystem?;
    # ID of a product rate plan for this subscription.
    string newProductRatePlanId?;
    # Number of a product rate plan for this subscription.
    string newProductRatePlanNumber?;
    # ID of the product rate plan that the removed rate plan is based on.
    string productRatePlanId?;
    # Number of a product rate plan for this subscription.    
    string productRatePlanNumber?;
    # ID of a rate plan to remove. Note that the removal of a rate plan through the Change Plan amendment supports the function of <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Subscribe_and_Amend/E_Amendments/EB_Remove_rate_plan_on_subscription_before_future-dated_removals" target="_blank">removal before future-dated removals</a>, as in a Remove Product amendment.
    string ratePlanId?;
    # If resetBcd is true then reset the Account BCD to the effective date; if it is false keep the original BCD.
    boolean resetBcd?;
    # The date when the change in the subscription is activated in yyyy-mm-dd format. You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date. The billing trigger dates must follow this rule: contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
    string serviceActivationDate?;
    # Use this field to choose the sub type for your change plan amendment. 
    # 
    # However, if you do not set this field, the field will be automatically generated by the system according to the following rules:
    # 
    # When the old and new rate plans are within the same Grading catalog group:
    # * If the grade of new plan is greater than that of the old plan, this is an "Upgrade".
    # * If the grade of new plan is less than that of the old plan, this is a "Downgrade".
    # * If the grade of new plan equals that of the old plan, this is a "Crossgrade".
    # 
    # When the old and new rate plans are not in the same Grading catalog group, or either has no group, this is "PlanChanged".
    "Upgrade"|"Downgrade"|"Crossgrade"|"PlanChanged" subType?;
    # Number of a rate plan for this subscription.  
    string subscriptionRatePlanNumber?;
    *RatePlanObjectCustomFields;
};

# 
public type GETAccountSummaryTypeBasicInfo_defaultPaymentMethod record {
    # Two-digit numeric card expiration month as `mm`.
    string creditCardExpirationMonth?;
    # Four-digit card expiration year as `yyyy`.
    string creditCardExpirationYear?;
    # Credit card number, 16 characters or less, displayed in masked format (e.g., ************1234).
    string creditCardNumber?;
    # The type of the credit card.
    # 
    # Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Methods](https://knowledgecenter.zuora.com/Zuora_Central/Billing_and_Payments/L_Payment_Methods/Supported_Payment_Methods).
    string creditCardType?;
    # ID of the default payment method associated with this account.
    string id?;
    # 
    string paymentMethodType?;
};

public type SubmitDataQueryResponse record {
    # A data query job.
    DataQueryJob data?;
};

public type CustomObjectBulkJobResponse_error record {
    # The error code.
    int code?;
    # The error message.
    string message?;
};

public type PUTAccountType record {
    # A list of additional email addresses to receive email notifications. Use commas to separate email addresses.
    string[] additionalEmailAddresses?;
    # Whether future payments are to be automatically billed when they are due. 
    boolean autoPay?;
    # The alias name given to a batch. A string of 50 characters or
    # less.
    # 
    # **Note**: By default, you have 50 configurable account batches. To increase the limit to 200 batches, you must have the <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Performance_Booster_Elite" target="_blank">Performance Booster Elite</a> package.
    string batch?;
    # Sets the bill cycle day (BCD) for the charge. The BCD determines
    # which day of the month the customer is billed. Values: Any activated system-defined bill cycle day （`1`-`31`）
    int billCycleDay?;
    # Container for bill-to contact information for this account.
    PUTAccountTypeBillToContact billToContact?;
    # The ID of the communication profile that this account is linked to.
    # 
    # You can provide either or both of the `communicationProfileId` and `profileNumber` fields.
    # 
    # If both are provided, the request will fail if they do not refer to the same communication profile.
    string communicationProfileId?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.
    string creditMemoTemplateId?;
    # CRM account ID for the account, up to 100 characters.
    string crmId?;
    # Name of the account’s customer service representative, if applicable.
    @constraint:String {maxLength: 50}
    string customerServiceRepName?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.
    string debitMemoTemplateId?;
    # ID of the default payment method for the account.
    # 
    # Values: a valid ID for an existing payment method.
    @constraint:String {maxLength: 64}
    string defaultPaymentMethodId?;
    # Container for profile information for this account.
    # 
    # **Note**: This field is available only if you have the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing"
    # target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    PUTAccountEinvoiceProfile einvoiceProfile?;
    # Whether the customer wants to receive invoices through email. 
    # 
    # The default value is `false`.
    boolean invoiceDeliveryPrefsEmail?;
    # Whether the customer wants to receive printed invoices, such as through postal mail.
    # 
    # The default value is `false`.
    boolean invoiceDeliveryPrefsPrint?;
    # Invoice template ID, configured in Billing Settings in the Zuora UI.
    string invoiceTemplateId?;
    # Account name, up to 255 characters.
    string name?;
    # A string of up to 65,535 characters.
    string notes?;
    # Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy" target="_blank">Customer Hierarchy</a> enabled.
    string parentId?;
    # Whether the customer account is a partner, distributor, or reseller. 
    # 
    # 
    # You can set this field to `true` if you have business with distributors or resellers, or operating in B2B model to manage numerous subscriptions through concurrent API requests. After this field is set to `true`, the calculation of account metrics is performed asynchronously during operations such as subscription creation, order changes, invoice generation, and payments.
    # 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account" target="_blank">Reseller Account</a> feature enabled.
    boolean partnerAccount?;
    # The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.
    string paymentGateway?;
    # Payment terms for this account. Possible values are `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.
    string paymentTerm?;
    # The number of the communication profile that this account is linked to.
    # 
    # You can provide either or both of the `communicationProfileId` and `profileNumber` fields.
    # 
    # If both are provided, the request will fail if they do not refer to the same communication profile.
    string profileNumber?;
    # The purchase order number provided by your customer for services, products, or both purchased.
    string purchaseOrderNumber?;
    # The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.
    string salesRep?;
    # The ID of the billing document sequence set to assign to the customer account. 
    # 
    # The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.
    # 
    # If a customer account has no assigned billing document sequence set, billing documents generated for this account adopt the prefix and starting document number from the default sequence set.
    string sequenceSetId?;
    # Container for optional sold-to contact.
    PUTAccountTypeSoldToContact soldToContact?;
    # 
    string tagging?;
    # Container for tax exempt information, used to establish the tax exempt status of a customer account.
    POSTAccountType_taxInfo taxInfo?;
    *AccountObjectNSFields;
    *AccountObjectCustomFields;
};

public type PreviewResult_creditMemos record {
    decimal amount?;
    decimal amountWithoutTax?;
    InvoiceItemPreviewResult[] creditMemoItems?;
    string targetDate?;
    decimal taxAmount?;
};

public type PutFulfillmentItemRequestType record {
    # Container for custom fields of a Fulfillment Item object.
    FulfillmentItemCustomFields customFields?;
    # The description of the Fulfillment Item.
    string description?;
    # The external identifier of the Fulfillment Item.
    string itemIdentifier?;
};

public type BulkCreateCreditMemosFromChargeRequest record {
    # The type of the source where credit memos are created. 
    #     
    # This enum field has the following values:
    #   - `Invoice`: By setting this field to `Invoice`, you can create multiple credit memos from invoices.
    #   - `Standalone`: By setting this field to `Standalone`, you can create multiple credit memos from product rate plan charges.
    #   
    # The specific schema of the `memos` object field in the request body depends on the value of the `sourceType` field.
    #   - To view the `memos` schema applicable to credit memo creation from invoices, select `Invoice` from the following drop-down list.
    #   - To view the `memos` schema applicable to credit memo creation from product rate plan charges, select `Standalone` from the following drop-down list.
    "Standalone"|"Invoice" sourceType;
    # The container for a list of credit memos. The maximum number of credit memos is 50.
    @constraint:Array {maxLength: 50}
    CreditMemoFromChargeRequest[] memos?;
};

# Information about an order action of type `Resume`.
public type GetOrderResume record {
    # Specifies whether to extend the subscription term by the length of time the suspension is in effect. Note this field is not applicable in a Resume order action auto-created by the Order Metrics migration.
    boolean extendsTerm?;
    # The resume date when the resumption takes effect.
    string resumeDate?;
    # This field is applicable only when the `resumePolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`. It must be used together with the `resumePeriodsType` field. Note this field is not applicable in a Resume order action auto-created by the Order Metrics migration.
    # 
    # The total number of the periods used to specify when a subscription resumption takes effect. The subscription resumption will take place after the specified time frame (`suspendPeriods` multiplied by `suspendPeriodsType`) from today's date. 
    int resumePeriods?;
    # This field is applicable only when the `resumePolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`. It must be used together with the `resumePeriods` field. Note this field is not applicable in a Resume order action auto-created by the Order Metrics migration.
    # 
    # The period type used to specify when a subscription resumption takes effect. The subscription suspension will take place after the specified time frame (`suspendPeriods` multiplied by `suspendPeriodsType`) from today's date. 
    "Day"|"Week"|"Month"|"Year" resumePeriodsType?;
    # Resume methods. Specify a way to resume a subscription. See [Resume Date](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions/Resume_a_Subscription#Resume_Date) for more information. Note this field is not applicable in a Resume order action auto-created by the Order Metrics migration.
    # 
    # If `SuspendDate` is specfied, the resumption will take place on the same day as the suspension. 
    "Today"|"FixedPeriodsFromSuspendDate"|"FixedPeriodsFromToday"|"SpecificDate"|"SuspendDate" resumePolicy?;
    # This field is applicable only when the `resumePolicy` field is set to `SpecificDate`. Note this field is not applicable in a Resume order action auto-created by the Order Metrics migration.
    # 
    # A specific date when the subscription resumption takes effect, in YYYY-MM-DD format. The value should not be earlier than the subscription suspension date.
    string resumeSpecificDate?;
};

public type TasksResponse record {
    # The list of tasks retrieved.
    Task[] data?;
    # An object containing pagination information for the list of tasks returned by the API.
    TasksResponse_pagination pagination?;
};

public type InvoiceItemPreviewResult_taxationItems record {
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # The ID of the taxation item.
    string id?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the taxCode field.
    string locationCode?;
    # The name of the taxation item.
    string name?;
    # The amount of the tax applied to the invoice.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific invoice.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date when the tax is applied to the invoice.
    string taxDate?;
    # The tax rate applied to the invoice.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # Enum:"Percentage" "FlatFee". The type of the tax rate applied to the invoice.
    "Percentage"|"FlatFee" taxRateType?;
};

# Container for the credit memo that is automatically generated during the reversal of the invoice that is related to the credit memo. If no related invoice is reversed, the value is null.
public type PutReverseCreditMemoResponseType_creditMemo record {
    # The ID of the credit memo.
    string id?;
};

public type POSTVoidAuthorizeResponse record {
    # The order ID for the specific gateway.
    # 
    # The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field.
    string gatewayOrderId?;
    # The result code of the request. 
    # 
    # 0 indicates that the request succeeded, and the following values indicate that the request failed:
    #   - 1: The request is declined.
    #   - 7: The field format is not correct.
    #   - 10: Client connection has timed out.
    #   - 11: Host connection has timed out.
    #   - 12: Processor connection has timed out.
    #   - 13: Gateway server is busy.
    #   - 20: The card type is not supported.
    #   - 21: The merchant account information is invalid.
    #   - 22: A generic error occurred on the processor.
    #   - 40: The card type has not been set up yet.
    #   - 41: The limit for a single transaction is exceeded.
    #   - 42: Address checking failed.
    #   - 43: Card security code checking failed.
    #   - 44: Failed due to the gateway security setting.
    #   - 45: Fraud protection is declined.
    #   - 46: Address checking or card security code checking failed (for Authorize.net gateway only).
    #   - 47: The maximum amount is exceeded (for Authorize.net gateway only).
    #   - 48: The IP address is blocked by the gateway (for Authorize.net gateway only).
    #   - 49: Card security code checking failed (for Authorize.net gateway only).
    #   - 60: User authentication failed.
    #   - 61: The currency code is invalid.
    #   - 62: The transaction ID is invalid.
    #   - 63: The credit card number is invalid.
    #   - 64: The card expiration date is invalid.
    #   - 65: The transaction is duplicated.
    #   - 66: Credit transaction error.
    #   - 67: Void transaction error.
    #   - 90: A valid amount is required.
    #   - 91: The BA code is invalid.
    #   - 92: The account number is invalid.
    #   - 93: The ACH transaction is not accepted by the merchant.
    #   - 94: An error occurred for the ACH transaction.
    #   - 95: The version parameter is invalid.
    #   - 96: The transaction type is invalid.
    #   - 97: The transaction method is invalid.
    #   - 98: The bank account type is invalid.
    #   - 99: The authorization code is invalid.
    #   - 200: General transaction error.
    #   - 500: The transaction is queued for submission.
    #   - 999: Unknown error.
    #   - -1: An error occurred in gateway communication.
    #   - -2: Idempotency is not supported.
    #   - -3: Inquiry call is not supported.
    string resultCode?;
    # The corresponding request ID.
    string resultMessage?;
    # Indicates whether the call succeeded.
    boolean success?;
    # The ID of the transaction.
    string transactionId?;
};

public type PUTOrderTriggerDatesResponseType_subscriptions record {
    # Status of the subscription. `Pending Activation` and `Pending Acceptance` are only applicable for an order that contains a `CreateSubscription` order action.
    "Active"|"Pending Activation"|"Pending Acceptance" status?;
    # Subscription number of the subscription updated.
    string subscriptionNumber?;
};

public type PUTRevproAccCodeResponse record {
    # 
    boolean success?;
};

public type PostRefundwithAutoUnapplyType record {
    # Comments about the refund.
    @constraint:String {maxLength: 255}
    string comment?;
    # Container for debit memos. The maximum number of debit memos is 1,000.
    PaymentDebitMemoApplicationApplyRequestType[] debitMemos?;
    # Container for the finance information related to the refund.
    PostRefundType_financeInformation financeInformation?;
    # The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
    PUTVerifyPaymentMethodType_gatewayOptions gatewayOptions?;
    # Container for invoices. The maximum number of invoices is 1,000.
    PaymentInvoiceApplicationApplyRequestType[] invoices?;
    # How an external refund was issued to a customer. This field is required for an external refund and must be left empty for an electronic refund. You can issue an external refund on an electronic payment.
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    @constraint:String {maxLength: 100}
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.
    string refundDate?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
    @constraint:String {maxLength: 100}
    string secondRefundReferenceId?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    @constraint:String {maxLength: 35}
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    @constraint:String {maxLength: 20}
    string softDescriptorPhone?;
    # The total amount of the refund. If you do not specify a value, Zuora initiates a full refund of the payment amount, which is the sum of the applied and unapplied payment amounts.
    # 
    #   - `Full Refund`: If the refund amount and debit memo/ invoice are not specified, then the payment will be unapplied completely, followed by processing a full refund.
    #   - `Partial Refund`:
    #        - If the total amount is specified, and the debit memo/invoice is not specified, you can unapply the refund amount from the available debit memo/invoice and refund the unapplied payment to the customer.
    #        - If the total amount is specified, along with the debit memo and the invoice, you can unapply the applied payments from the mentioned invoices and debit memos, and refund the unapplied payments to customers.  
    decimal totalAmount?;
    # The type of the refund.
    "External"|"Electronic" 'type;
    # The transaction type of the refund.
    "Chargeback"|"PaymentReversal" refundTransactionType?;
    # Indicates whether to write off a document.
    boolean writeOff = false;
    # Container for the write-off information to create credit memo.
    PostRefundwithAutoUnapplyType_writeOffOptions writeOffOptions?;
    *RefundObjectNSFields;
    *RefundObjectCustomFields;
};

public type PUTPreviewPaymentScheduleRequest record {
    # Indicates the updated amount of the pending payment schedule items.
    decimal amount?;
    # Indicates the updated currency of the pending payment schedule items.      
    string currency?;
    # Indicates the updated number of payment schedule items that are created by the payment schedule.
    int occurrences?;
    # Indicates the updated payment gateway ID of the pending payment schedule items.
    string paymentGatewayId?;
    # Indicates the updated payment method ID of the pending payment schedule items. 
    string paymentMethodId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # Here is an example:
    # ```
    # "paymentOption": [
    #   {
    #     "type": "GatewayOptions",
    #     "detail": {
    #       "SecCode":"WEB"
    #     }
    #   }
    # ]
    # ```
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # Indicates the updated period of the pending payment schedule items.
    "Monthly"|"Weekly"|"BiWeekly" period?;
    # Indicates the updated collection date for the next pending payment schedule item.
    string periodStartDate?;
    # Specifies at which hour of the day in the tenant’s time zone this payment will be collected. Available values: `[0,1,2,~,22,23]`.
    #   
    # If the time difference between your tenant’s timezone and the timezone where Zuora servers are is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half hour later than your scheduled time. If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs.
    int runHour?;
    *PaymentScheduleCustomFields;
};

public type ExpandedCreditMemoApplication record {|
    # The unique identifier of the credit memo application.
    string id?;
    # The unique identifier of the user who created the credit memo application.
    string createdById?;
    # The date and time when the credit memo application was created.
    string createdDate?;
    # The unique identifier of the user who last updated the credit memo application.
    string updatedById?;
    # The date and time when the credit memo application was last updated.
    string updatedDate?;
    # The application amount of the credit memo.
    decimal amount?;
    # The date when the credit memo application becomes effective.
    string effectiveDate?;
    # The ID of the credit memo associated with the credit memo application.
    string creditMemoId?;
    # The ID of the customer account associated with the credit memo.
    string accountId?;
    # The ID of the application group to which this credit memo application belongs.
    string applicationGroupId?;
    # The ID of the debit memo to which the credit memo is applied.
    string debitMemoId?;
    # The ID of the invoice to which the credit memo is applied.
    string invoiceId?;
    NestedCreditMemoOnExpand creditMemo?;
|};

public type PaymentInvoiceApplicationUnapplyRequestType record {
    # The amount of the payment that is unapplied from the invoice.
    decimal amount;
    # The unique ID of the invoice that the payment is unapplied from.
    string invoiceId?;
    # The number of the invoice that the payment is unapplied from. For example, `INV00000001`. 
    # 
    # **Note:** When both the `invoiceNumber` and `invoiceId` fields are specified, the two fields must match with each other.
    string invoiceNumber?;
    # Container for invoice items. The maximum number of items is 1,000.
    # 
    # **Note:** This field is only available if you have the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/C_Invoice_Item_Settlement) feature enabled. Invoice Item Settlement must be used together with other Invoice Settlement features (Unapplied Payments, and Credit and Debit memos).  If you wish to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    PaymentInvoiceApplicationItemUnapplyRequestType[] items?;
};

# 
public type GetCreditMemoPdfStatusBatchResponse record {
    # Array of credit memo PDF statuses requested.
    GetCreditMemoPdfStatusResponse[] creditMemoFiles?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type CreditMemoFile record {
    # The ID of the credit memo PDF file. This is the ID for the file object and different from the file handle ID in the `pdfFileUrl` field. To open a file, you have to use the file handle ID.
    string id?;
    # The REST URL for the credit memo PDF file. Click the URL to open the credit memo PDF file.
    string pdfFileUrl?;
    # The version number of the credit memo PDF file.
    int versionNumber?;
};

# The status of the data backfill job
public type DataBackfillJobStatus "Pending"|"Processing"|"Completed"|"Canceled"|"Failed"|"Stopping"|"Stopped";

# Container for e-invoicing profile information for this account.
# 
# **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
public type GetAccountEInvoiceProfile record {
    # The high-level category of the business.
    "B2B"|"B2C"|"B2G" businessCategory?;
    # The full official name that the Buyer is registered with the relevant legal authority.
    @constraint:String {maxLength: 255}
    string businessName?;
    # The unique identifier number of the legal entity or person that you do business with.
    # 
    # For example, you must use a GSTIN for India.
    string businessNumber?;
    # The identification scheme identifier that an official registrar issues to identify the Buyer as a legal entity or person.
    string businessNumberSchemeId?;
    # Whether the e-invoicing profile for the customer account is enabled. 
    # 
    # If the following conditions are met, all billing documents for one account can be submitted to an e-invoicing service provider to be generated in electronic format:
    # - The account must be configured to generate e-invoice files for billing documents.
    # - The billing document must be in Posted status.
    # - A business region must be created for the billing country contact, and be linked to an e-invoicing service provider.
    boolean enabled?;
    # The Buyer's electronic address, to which the application-level response to the billing document might be delivered.
    string endpointId?;
    # The identification scheme identifier of the Buyer’s electronic address.
    string endpointSchemeId?;
    # The Buyer's VAT identifier (also known as the Buyer's VAT identification number) or the local identification (defined by the Buyer’s address) of the Buyer for tax purposes, or a reference that enables the Buyer to state the registered tax status.
    string taxRegisterNumber?;
};

public type OrderActionRatePlanChargeTier record {
    # Limit on the number of units for which the tier is effective.
    decimal endingUnit?;
    # Price or per-unit price of the tier, depending on the value of the `priceFormat` field.
    decimal price;
    # Specifies whether the tier has a fixed price or a per-unit price.
    "FlatFee"|"PerUnit" priceFormat;
    # Number of units at which the tier becomes effective.
    decimal startingUnit;
    # Index of the tier in the charge.
    @constraint:Int {minValue: 1}
    int tier;
};

# Information of the payment schedule items to be retried.
public type POSTRetryPaymentScheduleItemInfo record {
    # Specifies the ID of the payment schedule item to be retried.
    string id?;
    # Specifies the ID of a payment gateway that will be used in the retry.
    string paymentGatewayId?;
    # Specifies the ID of a payment method that will be used in the retry.
    string paymentMethodId?;
};

public type CreatePaymentMethodPAD record {
    # The container for the account holder information. The nested `accountHolderName` field is required.
    CreatePaymentMethodBetalingsservice_accountHolderInfo accountHolderInfo?;
    # The number of the customer's bank account.
    string accountNumber?;
    # The masked account number such as ****1234.
    string accountMaskNumber?;
    # The branch code of the bank used for direct debit.
    string branchCode?;
    # The sort code or number that identifies the bank. This is also known as the sort code.
    string bankCode?;
    # The container of the mandate information for the payment method.
    CreatePaymentMethodCreditCard_mandateInfo mandateInfo?;
    # The container for payment method processing options.
    CreatePaymentMethodCreditCard_processingOptions processingOptions?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type PutFulfillmentRequestType record {
    # The target date for the Fulfillment to be picked up by bill run for billing.
    string billTargetDate?;
    # The carrier of the Fulfillment. The available values can be managed in the Fulfillment Settings page under Billing Settings.
    string carrier?;
    # Container for custom fields of a Fulfillment object.
    FulfillmentCustomFields customFields?;
    # The description of the Fulfillment.
    string description?;
    # The flag to exclude Fulfillment related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The flag to exclude Fulfillment from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting?;
    # The external id of the Fulfillment.
    string externalId?;
    # The date of the Fulfillment.
    string fulfillmentDate?;
    # The fulfillment location of the Fulfillment. The available values can be managed in the Fulfillment Settings page under Billing Settings.
    string fulfillmentLocation?;
    # The fulfillment system of the Fulfillment. The available values can be managed in the Fulfillment Settings page under Billing Settings.
    string fulfillmentSystem?;
    # The type of the Fulfillment. 
    "Delivery"|"Return" fulfillmentType?;
    # The reference id of the related Order Line Ite
    string orderLineItemId?;
    # The quantity of the Fulfillment.
    decimal quantity?;
    # The state of the Fulfillment. See [Order Line Item states, Order states, and state transitions](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
    "Executing"|"Booked"|"SentToBilling"|"Complete"|"Cancelled" state?;
    # The tracking number of the Fulfillment.
    string trackingNumber?;
};

public type PUTTaxationItemType record {
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # Container for the finance information related to the taxation item.
    POSTTaxationItemForCMType_financeInformation financeInformation?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field. 
    string locationCode?;
    # The name of the taxation item to be updated.
    string name?;
    # The amount of the tax applied to the credit or debit memo.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific credit or debit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date when the tax is applied to the credit or debit memo.
    string taxDate?;
    # The tax rate applied to the credit or debit memo.
    decimal taxRate?;
    # The description of the tax rate. 
    string taxRateDescription?;
    # The type of the tax rate applied to the credit or debit memo.
    "Percentage"|"FlatFee" taxRateType?;
    *TaxationItemObjectCustomFields;
};

public type POSTJournalEntrySegmentType record {
    # Name of segment. You must use the segment name that has already been specified in the default segment rule. In addition, segments need to be passed in the order where they were defined in the segmentation rule. If multiple segments are configured in the default rule, you need to specify all of them in order. 
    string segmentName;
    # Value of segment in this summary journal entry.
    string segmentValue;
};

# Pricing information about the charge.
public type OrderActionRatePlanChargeOverride_pricing record {
    # Container for charge model configuration data.
    # 
    # **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    OrderActionRatePlanChargeModelDataOverride chargeModelData?;
    # Pricing information about a discount charge.
    OrderActionRatePlanDiscountPricingOverride discount?;
    # Pricing information about a one-time charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    OrderActionRatePlanOneTimeFlatFeePricingOverride oneTimeFlatFee?;
    # Pricing information about a one-time charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
    OrderActionRatePlanOneTimePerUnitPricingOverride oneTimePerUnit?;
    # Pricing information about a one-time charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
    OrderActionRatePlanOneTimeTieredPricingOverride oneTimeTiered?;
    # Pricing information about a one-time charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
    OrderActionRatePlanOneTimeVolumePricingOverride oneTimeVolume?;
    # Pricing information about a recurring charge that uses the Delivery Pricing charge model. In this charge model, the charge has a fixed price. This field is only available if you have the Delivery Pricing charge model enabled.
    OrderActionRatePlanRecurringDeliveryPricingOverride recurringDelivery?;
    # Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    OrderActionRatePlanRecurringFlatFeePricingOverride recurringFlatFee?;
    # Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
    OrderActionRatePlanRecurringPerUnitPricingOverride recurringPerUnit?;
    # Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
    OrderActionRatePlanRecurringTieredPricingOverride recurringTiered?;
    # Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
    OrderActionRatePlanRecurringVolumePricingOverride recurringVolume?;
    # Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    OrderActionRatePlanUsageFlatFeePricingOverride usageFlatFee?;
    # Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
    OrderActionRatePlanUsageOveragePricingOverride usageOverage?;
    # Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
    OrderActionRatePlanUsagePerUnitPricingOverride usagePerUnit?;
    # Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
    OrderActionRatePlanUsageTieredPricingOverride usageTiered?;
    # Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
    OrderActionRatePlanUsageTieredWithOveragePricingOverride usageTieredWithOverage?;
    # Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
    OrderActionRatePlanUsageVolumePricingOverride usageVolume?;
};

public type BillingDocumentQueryResponseElementType record {
    # Container for billing documents.
    GETBillingDocumentsResponseType[] documents?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type GETSubscriptionProductFeatureType record {
    # Feature description.
    string description?;
    # Feature code, up to 255 characters long.
    string featureCode?;
    # SubscriptionProductFeature ID.
    string id?;
    # Feature name, up to 255 characters long.
    string name?;
};

# The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
# 
# Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
public type PUTVerifyPaymentMethodType_gatewayOptions record {
    # The name of a gateway-specific parameter.
    string 'key?;
    # The value of the gateway-specific parameter.
    string value?;
};

# A data query job.
public type DataQueryJob record {
    *DataQueryJobCommon;
    # The URL of the query results. Only applicable if the value of the `queryStatus` field is `completed`.
    string dataFile?;
    # The number of rows the query results. Only applicable if the value of the `queryStatus` field is `completed`.
    int outputRows?;
    # Processing time of the query job, in milliseconds. Only applicable if the value of the `queryStatus` field is `completed`.
    int processingTime?;
    # Status of the query job.
    # 
    # * `submitted` - query submitted to query service for processing
    # * `accepted` - query accepted by the query service
    # * `in_progress` - query executed by the query service
    # * `completed` - query execution completed by the query service
    # * `failed` - query unable to be processed by the query service
    # * `cancelled` - query cancelled by the user
    # 
    # If the value of this field is `completed`, the `dataFile` field contains the location of the query results.
    # 
    # If the value of this field is `accepted` or `in_progress`, you can use [Cancel a data query job](#operation/DELETE_DataQueryJob) to prevent Zuora from performing the query. Zuora then sets the status of the query job to `cancelled`.
    "submitted"|"accepted"|"in_progress"|"completed"|"failed"|"cancelled" queryStatus?;
};

public type Inline_response_200_9 record {
    *CommonResponse;
    # String of 32 characters that identifies the booking date backfill job. 
    # The id is generated before the backfill job is processed. 
    # You can use the id to get the booking date backfill job result.
    string jobId?;
};

public type Inline_response_200_7 record {
    # ID of the migration process.
    string id?;
    # Name of the migration.
    string name?;
    # Description of the migration.
    string description?;
    # Migration status.
    string status?;
    Inline_response_200_7_targetTenant targetTenant?;
    # Deployment timestamp.
    string deploymentDate?;
    # Name of the user who executed the migration.
    string runBy?;
    Inline_response_200_7_succeeded[] succeeded?;
    Inline_response_200_7_failed[] failed?;
    Inline_response_200_7_skipped[] skipped?;
};

public type Inline_response_200_8 record {
    *CommonResponse;
    GETBookingDateJobResponse[] jobs?;
};

public type ProxyCreateProductRatePlanCharge record {
    # The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.
    @constraint:String {maxLength: 100}
    string AccountingCode?;
    # Specifies the type of charges that you want a specific discount to apply to. All field values are case sensitive and in all-caps.
    "ONETIME (1)"|"RECURRING (2)"|"USAGE (4)"|"ONETIMERECURRING (3)"|"ONETIMEUSAGE (5)"|"RECURRINGUSAGE (6)"|"ONETIMERECURRINGUSAGE (7)" ApplyDiscountTo?;
    # Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed. The BCD value in the account can override the BCD in this object.
    # 
    # **Character limit**: 2
    # 
    # **Values**: a valid BCD integer, 1 - 31
    int:Signed32 BillCycleDay?;
    # Specifies how to determine the billing day for the charge. 
    # 
    # **Notes**:
    #   - If you set this field to `SpecificDayofMonth`, you must specify which day of the month as the billing day for the charge in the BillCycleDay field. 
    #   - If you set this field to `SpecificDayofWeek`, you must specify which day of the week as the billing day for the charge in the WeeklyBillCycleDay field. 
    #   - By default, `TermStartDay` and `TermEndDay` are only available for prepayment charges. But you can reach out to Zuora Global Support to request enabling it for non-prepaid recurring charges. Meanwhile, note the following rules applies to these options:
    #     - The Term End Day option of the Billing Day field must be coupled with the Align to Term End option of the Billing Period Alignment field.
    #     - For prepaid charges, the Term Start Day option of the Billing Day field must be coupled with the existing Align to Term Start option of the Billing Period Alignment field.
    #     - For non-prepaid recurring charges: If Billing Day is set to Term Start Day, Billing Period Alignment must be Align to Term Start; If Billing Day is set to Term End Day, Billing Period Alignment can be set to other values.
    "DefaultFromCustomer"|"SpecificDayofMonth"|"SubscriptionStartDay"|"ChargeTriggerDay"|"SpecificDayofWeek"|"TermStartDay"|"TermEndDay" BillCycleType;
    # The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).
    # 
    # **Notes**:
    #   - Specify the number of months or weeks in the SpecificBillingPeriod field if you set this field to `Specific Months` or `Specific Weeks`.
    #   - The `Subscription Term` value is in **Limited Availability**.
    "Month"|"Quarter"|"Annual"|"Semi-Annual"|"Specific Months"|"Subscription Term"|"Week"|"Specific Weeks"|"Specific Days" BillingPeriod;
    # Aligns charges within the same subscription if multiple charges begin on different dates.
    # 
    # **Note:** The `AlignToTermEnd` value is only available for prepayment charges by default. Reach out to Zuora Global Support to enable it for non-prepaid recurring charges.
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart"|"AlignToTermEnd" BillingPeriodAlignment?;
    # The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    "In Advance"|"In Arrears" BillingTiming?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `141` or higher. Otherwise, an error occurs.
    # 
    # This field defines what type of charge it is in Advanced Consumption Billing:
    # * Standard: Normal charge with no Prepayment or Commitment or Drawdown.
    # * Prepayment: For recurring charges. Unit or currency based prepaid charge.
    # * CommitmentTrueUp: For recurring charges. Currency based minimum commitment charge.
    # * Drawdown: For usage charges. Drawdown from prepaid funds.
    # * DrawdownAndCreditCommitment: For usage charges. Drawdown from prepaid funds and then credit to minimum commitment funds.
    # * CreditCommitment: For usage charges. Credit to minimum commitment funds.
    "Standard"|"Prepayment"|"CommitmentTrueUp"|"Drawdown"|"CreditCommitment"|"DrawdownAndCreditCommitment" ChargeFunction?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `133` or higher. Otherwise, an error occurs. 
    # 
    # This field defines the type of commitment. A prepaid charge can be `UNIT` or `CURRENCY`. A minimum commitment(in-arrears) charge can only be `CURRENCY` type. For topup(recurring or one-time) charges, this field indicates what type of funds are created. 
    # * If UNIT, it will create a fund with given prepaidUom.
    # * If CURRENCY, it will create a fund with the currency amount calculated in list price.
    # 
    # For drawdown(usage) charges, this field indicates what type of funds are drawdown from that created from topup charges.
    "UNIT"|"CURRENCY" CommitmentType?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    # 
    # **Notes:**
    #   - The `Delivery Pricing` value is available only if you have the Delivery Pricing charge model enabled.
    #   - The `MultiAttributePricing` value is available only if you have the Multi-Attribute Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.       
    #   - The `PreratedPerUnit` and  value is available only if you have the Pre-rated Per Unit Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.       
    #   - The `PreratedPricing` value is available only if you have the Pre-rated Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.     
    #   - The `HighWatermarkVolumePricing`value is available only if you have the High Water Mark Volume Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.       
    #   - The `HighWatermarkTieredPricing` value is available only if you have the High Water Mark Tiered Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    "Discount-Fixed Amount"|"Discount-Percentage"|"Flat Fee Pricing"|"Per Unit Pricing"|"Overage Pricing"|"Tiered Pricing"|"Tiered with Overage Pricing"|"Volume Pricing"|"Delivery Pricing"|"MultiAttributePricing"|"PreratedPerUnit"|"PreratedPricing`"|"HighWatermarkVolumePricing"|"HighWatermarkTieredPricing" ChargeModel;
    # Container for charge model configuration data.
    # 
    # **Notes**:
    #   - This field is only available if you have the Pre-Rated Pricing or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `102` or later. Otherwise, an error occurs with "Code: INVALID_VALUE".
    ProxyCreateOrModifyProductRatePlanChargeChargeModelConfiguration ChargeModelConfiguration?;
    # Specifies the type of charge.
    "OneTime"|"Recurring"|"Usage" ChargeType;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information. 
    "TimeBased"|"ConsumptionBased"|"FullCreditBack" CreditOption?;
    # The default quantity of units, such as the number of authors in a hosted wiki service. This field is required if you use a per-unit pricing model. 
    # 
    # **Character limit**: 16
    # 
    # **Values**: a valid quantity value. 
    # 
    # **Note:** When the `ChargeModel` field is set to `Tiered Pricing` or `Volume Pricing`, if this field is not specified, the value will default to `0`.
    decimal DefaultQuantity?;
    # The name of the deferred revenue account for this charge.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    @constraint:String {maxLength: 100}
    string DeferredRevenueAccount?;
    ProxyCreateOrModifyDeliverySchedule DeliverySchedule?;
    # A description of the charge.
    @constraint:String {maxLength: 500}
    string Description?;
    # Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account.
    "rateplan"|"subscription"|"account" DiscountLevel?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). See [Fields related to Prepaid with Drawdown](https://knowledgecenter.zuora.com/Central_Platform/API/G_SOAP_API/E1_SOAP_API_Object_Reference/ProductRatePlanCharge#Fields_related_to_Prepaid_with_Drawdown) for more information.
    decimal DrawdownRate?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # Unit of measurement for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). 
    string DrawdownUom?;
    # Defines when the charge ends after the charge trigger date.
    # 
    # **Values**: 
    #   - `SubscriptionEnd`: The charge ends on the subscription end date after a specified period based on the trigger date of the charge.  
    #   - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields. 
    # 
    #   
    # **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
    "SubscriptionEnd"|"FixedPeriod" EndDateCondition = "SubscriptionEnd";
    # The flag to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Notes**: 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `115` or later. Otherwise, an error occurs.
    #   - This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean ExcludeItemBillingFromRevenueAccounting = false;
    # The flag to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Notes**: 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `115` or later. Otherwise, an error occurs.
    #   - This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean ExcludeItemBookingFromRevenueAccounting = false;
    # Specifies the number of units in the base set of units.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a positive decimal value
    decimal IncludedUnits?;
    # Indicates whether the charge segment is allocation eligible in revenue recognition. The default value is `False`.
    # 
    # **Values**: `True`, `False`
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later. 
    boolean IsAllocationEligible?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # Indicates whether this charge is a prepayment (topup) charge or a drawdown charge. 
    # 
    # **Values**: `true` or `false`.
    boolean IsPrepaid?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.
    # 
    # The value is either "True" or "False". It determines whether the rollover fields are needed.
    boolean IsRollover?;
    # **Note**: This field is only applicable to the Discount - Percentage charge model.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 130 or higher. Otherwise, an error occurs.
    # 
    # This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:
    #   - `True`: This is a stacked discount, which should be calculated by stacking with other discounts.
    #   - `False`: This is not a stacked discount, which should be calculated in sequence with other discounts.
    # 
    # For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).
    boolean IsStackedDiscount?;
    # Specifies how to perform the accounting during revenue recognition. The default value is `False`.
    # 
    # **Values**: `True`, `False`
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.    
    boolean IsUnbilled?;
    # 
    boolean LegacyRevenueReporting?;
    # The list price base for the product rate plan charge.
    "Per Billing Period"|"Per Month"|"Per Week"|"Per Year"|"Per Specific Months" ListPriceBase?;
    # Specifies the maximum number of units for this charge. Use this field and the `MinQuantity` field to create a range of units allowed in a product rate plan charge.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a positive decimal value
    decimal MaxQuantity?;
    # Specifies the minimum number of units for this charge. Use this field and the `MaxQuantity` field to create a range of units allowed in a product rate plan charge.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a positive decimal value
    decimal MinQuantity?;
    # The name of the product rate plan charge.
    @constraint:String {maxLength: 100}
    string Name;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model. The valid value is a positive whole number.
    int NumberOfPeriod?;
    # Determines when to calculate overage charges. If the value of the SmoothingMode field is not specified, the value of this field is ignored.
    # 
    # **Values**: 
    #   - `EndOfSmoothingPeriod`: This option is used by default. The overage is charged at the end of the smoothing period.
    #   - `PerBillingPeriod`: The overage is charged on-demand rather than waiting until the end of the smoothing period.
    "EndOfSmoothingPeriod"|"PerBillingPeriod" OverageCalculationOption?;
    # Determines whether to credit the customer with unused units of usage.
    "NoCredit"|"CreditBySpecificRate"? OverageUnusedUnitsCreditOption?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # The type of this charge. It is either a prepayment (topup) charge or a drawdown charge. 
    "topup"|"drawdown" PrepaidOperationType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number.
    decimal PrepaidQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # The total amount of units that end customers can use during a validity period when they subscribe to a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    decimal PrepaidTotalQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.
    # 
    # Unit of measurement for a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    string PrepaidUom?;
    # Applies an automatic price change when a termed subscription is renewed.
    "NoChange"|"SpecificPercentageValue"|"UseLatestProductCatalogPricing" PriceChangeOption = "NoChange";
    # Applies an automatic price change when a termed subscription is renewed.
    "FromTenantPercentageValue"|"SpecificPercentageValue" PriceIncreaseOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the value to `SpecificPercentageValue`.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a decimal value between -100 and 100
    decimal? PriceIncreasePercentage?;
    # This field is used to maintain the product category for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later. 
    string ProductCategory?;
    # This field is used to maintain the product class for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later. 
    string ProductClass?;
    # This field is used to maintain the product family for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later. 
    string ProductFamily?;
    # This field is used to maintain the product line for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.         
    string ProductLine?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" RevenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" RevenueAmortizationMethod?;
    # The natural key of the product rate plan charge.
    # 
    # **Values**:
    # 
    #   - leave null for automatically generated string
    #   - an alphanumeric string of 100 characters or fewer
    # 
    # **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.
    @constraint:String {maxLength: 100}
    string ProductRatePlanChargeNumber?;
    # Container for pricing information associated with the product rate plan charge.
    ProxyCreateOrModifyProductRatePlanChargeTierData ProductRatePlanChargeTierData;
    # The ID of the product rate plan associated with this product rate plan charge.
    @constraint:String {maxLength: 32}
    string ProductRatePlanId;
    # Specifies a rating group based on which usage records are rated.
    # 
    # Possible values:                
    #   - `ByBillingPeriod`: The rating is based on all the usages in a billing period. 
    #   - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    #   - `ByUsageRecord`: The rating is based on each usage record.
    #   - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    #   - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Notes:** 
    #   - The `ByBillingPeriod` value can be applied for all charge models. 
    #   - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
    #   - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    #   - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload"|"ByGroupId"? RatingGroup = "ByBillingPeriod";
    # The name of the recognized revenue account for this charge.
    #   - Required when the Allow Blank Accounting Code setting is No.
    #   - Optional when the Allow Blank Accounting Code setting is Yes.
    # 
    #   This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    @constraint:String {maxLength: 100}
    string RecognizedRevenueAccount?;
    # Associates this product rate plan charge with a specific revenue recognition code.
    string? RevRecCode?;
    # Specifies when revenue recognition begins.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate"? RevRecTriggerCondition?;
    # Determines when to recognize the revenue for this charge.
    "Recognize upon invoicing"|"Recognize daily over time" RevenueRecognitionRuleName?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" RolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    decimal RolloverPeriods?;
    # Specifies the smoothing model for an overage smoothing charge model.
    "RollingWindow"|"Rollover"? SmoothingModel?;
    # Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`.
    # The valid value is a positive integer.
    int? SpecificBillingPeriod?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `ListPriceBase` field to `Per Specific Months`.
    # 
    # **Notes**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `129` or later. Otherwise, an error occurs.
    #   - The value of this field is `null` if you do not set the value of the `ListPriceBase` field to `Per Specific Months`.
    int:Signed32? SpecificListPriceBase?;
    # Specifies the tax code for taxation rules. Required when the Taxable field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.
    @constraint:String {maxLength: 64}
    string TaxCode?;
    # Determines how to define taxation for the charge. Required when the Taxable field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.
    "TaxExclusive"|"TaxInclusive"? TaxMode?;
    # Determines whether the charge is taxable. When set to `True`, the TaxMode and TaxCode fields are required when creating or updating th ProductRatePlanCharge object.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `True`, `False`
    # 
    # **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.
    boolean Taxable?;
    # Specifies when to start billing the customer for the charge.
    # 
    # **Values**:
    #   - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    #   - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
    #   - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance" TriggerEvent;
    # Specifies a configured unit to measure usage. 
    # 
    # **Note**: You must specify this field when creating the following charge models:
    #   - Per Unit Pricing
    #   - Volume Pricing
    #   - Overage Pricing
    #   - Tiered Pricing
    #   - Tiered with Overage Pricing
    string? UOM?;
    # Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
    # 
    # **Character limit**: 5
    # 
    # **Values**: a whole number between 0 and 65535, exclusive
    # 
    # **Notes**:
    #   - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`. 
    #   - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
    int? UpToPeriods?;
    # The period type used to define when the charge ends.
    # 
    # **Notes**: 
    #  - You must use this field together with the `UpToPeriods` field to specify the time period.
    #  - This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`. 
    "Billing Periods"|"Days"|"Weeks"|"Months"|"Years"? UpToPeriodsType = "Billing Periods";
    # Determines how Zuora processes usage records for per-unit usage charges. 
    "EndOfBillingPeriod"|"OnDemand"? UsageRecordRatingOption = "EndOfBillingPeriod";
    # Determines whether to define a new accounting code for the new discount charge.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `True`, `False`
    boolean? UseDiscountSpecificAccountingCode;
    # Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. 
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    boolean UseTenantDefaultForPriceChange?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" ValidityPeriodType?;
    # Specifies which day of the week as the bill cycle day (BCD) for the charge.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    "Sunday"|"Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"|"Saturday" WeeklyBillCycleDay?;
    # Allow the discount duration to be aligned with the billing period partially.
    # 
    # **Note**: You must enable the [Enhanced Discount](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    boolean ApplyToBillingPeriodPartially?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 137 or higher. Otherwise, an error occurs.
    # 
    # The period length of the rollover fund. If this field is set as optional, then you can modify the value. The limit for the value should be 1 which should be lesser than equal to the specified period that is lesser than equal to the validity period's length.
    int RolloverPeriodLength?;
    # The price lookup formula defined for the product rate plan charge, which is used to identify the correct and relevant charge definition based on the context.
    # 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Attribute-based_pricing/Price_lookup_in_Attribute-based_Pricing"  target="_blank">Price lookup in Attribute-based Pricing</a>.
    # 
    # **Notes**: 
    #   - This field is available only if the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Attribute-based_pricing" target="_blank">Attribute-based Pricing</a> feature is enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 138 or higher.
    string Formula?;
    *ProductRatePlanChargeObjectNSFields;
    *ProductRatePlanChargeObjectCustomFields;
};

public type Inline_response_200_5 record {
    GETPublicEmailTemplateResponse[] data?;
    # The URI to query the next page of data, e.g. '/notification-definitions?start=1&limit=10'. The start equals request's start+limit, and the limit equals the request's limit. If the current page is the last page, this value is null.
    string next?;
};

public type Inline_response_200_6 record {
    # ID of the Deployment Manager migration process.
    string id?;
    # Name of the Deployment Manager migration process.
    string name?;
    # Description of the Deployment Manager migration process.
    string description?;
    # Name of the source Tenant.
    string sourceTenantName?;
    # Description of the source Tenant.
    string sourceTenantDescription?;
    # Status of the Deployment Manager migration process.
    "DEPLOYING"|"REVERTING"|"PARTIALLY-REVERTED"|"FAILED"|"ROLLBACK-FAILED"|"REVERTED"|"COMPARING"|"SUBMITTED"|"SKIPPED"|"IDENTICAL"|"COMPARE-DONE"|"COMPARE-FAILED"|"CANCELLED" status?;
    # start timestamp of the Deployment Manager migration process.
    string startTime?;
    # end timestamp of the Deployment Manager migration process.
    string endTime?;
    # User who initiated the Deployment Manager migration process.
    string migratedBy?;
    # Type of the Deployment Manager migration process.
    string 'type?;
    # Environment of the Deployment Manager migration process.
    string environment?;
    # emailIds notified of the Deployment Manager migration process.
    string emailIds?;
    # Boolean flag specifies if the migration process includes product catalog module.
    boolean productCatalog?;
    # Errors of the Deployment Manager migration process.
    string errors?;
};

public type GETPaymentRunType record {
    # The ID of the customer account associated with the payment run.
    string accountId?;
    # **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.
    # 
    # Whether to apply credit balances in the payment run. This field is only available when you have Invoice Settlement feature disabled.
    boolean applyCreditBalance?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # Whether to automatically apply a posted credit memo to one or more receivables in the payment run.
    boolean autoApplyCreditMemo?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # Whether to automatically apply unapplied payments to  one or more receivables in the payment run.
    boolean autoApplyUnappliedPayment?;
    # The alias name given to a batch.
    string batch?;
    # The billing cycle day (BCD), the day of the month when a bill run generates invoices for the account. 
    string billCycleDay?;
    # The ID of the bill run.
    string billingRunId?;
    # Whether to process electronic payments during the execution of payment runs. 
    boolean collectPayment?;
    # The date and time when the payment run is completed, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 11:39:58.
    string completedOn?;
    # **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information. 
    # 
    # Whether to process a single payment for all receivables that are due on an account.
    boolean consolidatedPayment?;
    # The ID of the Zuora user who created the payment run.
    string createdById?;
    # The date and time when the payment run was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # A currency defined in the web-based UI administrative settings.
    string currency?;
    # The date and time when the payment run is executed, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 11:30:37.
    string executedOn?;
    # The ID of the payment run.
    string id?;
    # The identification number of the payment run.
    string number?;
    # The organization(s) that the object belongs to. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    GETProductType_organizationLabels[] organizationLabels?;
    # The ID of the gateway instance that processes the payment.
    string paymentGatewayId?;
    # **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information. 
    # 
    # Whether to process payments even if the default payment method is closed.
    boolean processPaymentWithClosedPM?;
    # The date and time when the scheduled payment run is to be executed for collecting payments.
    string runDate?;
    # The status of the created payment run.
    "Pending"|"Processing"|"Completed"|"Error"|"Canceled" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The target date used to determine which receivables to be collected in the payment run. 
    string targetDate?;
    # The ID of the Zuora user who last updated the payment run.
    string updatedById?;
    # The date and time when the payment run was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

# The custom field definition in the custom object definition
public type CustomObjectCustomFieldsDefinition record {|
    CustomObjectCustomFieldDefinition...;
|};

public type POSTInvoiceCollectInvoicesType record {
    # The amount of the invoice.
    string invoiceAmount?;
    # The ID of the invoice.
    string invoiceId?;
    # The unique identification number of the invoice.
    string invoiceNumber?;
};

# When a comparison is made between a source and target tenant, it sends a response to the user interface.
public type CompareSchemaKeyValue record {
    # Returns the different components list.
    record {|string[]...;|} difference?;
    # Provides the total reponse of the components.
    MigrationComponentContent[] response?;
    # Provides separation of components.
    string[] segregationKeys?;
};

public type GETEmailHistoryVOType record {
    # ID of an account.
    string accountId?;
    # Blind carbon copy recipients of the email.
    string bcc?;
    # Carbon Copy recipients of the email.
    string cc?;
    # null if the content of result is "OK". A description of the error if the content of result is not "OK".
    string errorMessage?;
    # The event category of the email.
    string eventCategory?;
    # The sender of the email.
    string fromEmail?;
    # The name of the notification.
    string notification?;
    # The reply-to address as configured in the email template.
    string replyTo?;
    # The result from the mail server of sending the email.
    string result?;
    # The date and time the email was sent.
    string sendTime?;
    # The subject of the email.
    string subject?;
    # The intended recipient of the email.
    string toEmail?;
};

public type BillingUpdate record {
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart" billingPeriodAlignment?;
};

# Pricing information about a one-time charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
public type OrderActionRatePlanOneTimeFlatFeePricingOverride record {
    # Price of the charge.
    decimal listPrice;
};

public type CreateOrderOrderAction record {
    # Information about an order action of type `AddProduct`. 
    # 
    # If you want to create a pending order through the "Add product" order action, and if the charge's trigger condition is `Specific Date`, you must set a charge number in the `chargeNumber` field for the "Add product" order action. In this case, if you do not set it, Zuora will not generate the charge number for you.
    # 
    # See more information about pending orders in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Orders/AA_Overview_of_Orders/Pending_orders_and_subscriptions" target="_blank">Pending orders and subscriptions</a>. 
    CreateOrderRatePlanOverride addProduct?;
    # Information about an order action of type `CancelSubscription`.
    CancelSubscription cancelSubscription?;
    # Information about an order action of type `ChangePlan`. 
    # 
    # Use the change plan type of order action to replace the existing rate plans in a subscription with other rate plans.
    # 
    # **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.
    # 
    # If you want to create a pending order through the "change plan" order action, and if the charge's trigger condition is `Specific Date`, you must set a charge number in the `chargeNumber` field for the "change plan" order action. In this case, if you do not set it, Zuora will not generate the charge number for you.
    # 
    # See more information about pending orders in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Orders/AA_Overview_of_Orders/Pending_orders_and_subscriptions" target="_blank">Pending orders and subscriptions</a>.
    CreateChangePlan changePlan?;
    # The change reason set for an order action when an order is created.
    string changeReason?;
    # Information about an order action of type `CreateSubscription`.
    CreateOrderCreateSubscription createSubscription?;
    # Container for custom fields of an Order Action object.
    OrderActionObjectCustomFields customFields?;
    # Information about an order action of type `OwnerTransfer`.
    # 
    # **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    OwnerTransfer ownerTransfer?;
    # Information about an order action of type `RemoveProduct`.
    RemoveProduct removeProduct?;
    # Information about an order action of type `RenewSubscription`.
    RenewSubscription renewSubscription?;
    # Information about an order action of type `Resume`.
    CreateOrderResume resume?;
    # Information about an order action of type `Suspend`.
    CreateOrderSuspend suspend?;
    # Information about an order action of type `TermsAndConditions`.
    CreateOrderTermsAndConditions termsAndConditions?;
    # Container for the contract effective, service activation, and customer acceptance dates of the order action. 
    # 
    # If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.
    # 
    # If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.
    # 
    # If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    #  * AddProduct
    #  * UpdateProduct
    #  * RemoveProduct
    #  * RenewSubscription
    #  * TermsAndConditions
    # 
    # If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    #  * AddProduct
    #  * UpdateProduct
    #  * RemoveProduct
    #  * RenewSubscription
    #  * TermsAndConditions
    TriggerDate[] triggerDates?;
    # Type of order action.
    # 
    # Unless the type of order action is `RenewSubscription`, you must use the corresponding field to provide information about the order action. For example, if the type of order action is `AddProduct`, you must set the `addProduct` field.
    # 
    # Zuora returns an error if you set a field that corresponds to a different type of order action. For example, if the type of order action is `AddProduct`, Zuora returns an error if you set the `updateProduct` field.
    # 
    # A [pending order](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/Pending_Order_and_Subscription) supports the following order actions:
    #  * CreateSubscription
    #  * AddProduct
    #  * UpdateProduct
    #  * RemoveProduct
    #  * RenewSubscription
    #  * TermsAndConditions
    #  * ChangePlan
    # 
    # However, pending orders created through all order actions except for "Create new subscription":
    #  * Do not impact the subscription status.
    #  * Are in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). 
    # 
    # A pending order is created in either of the following conditions:
    #  * [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the service activation date is not set in your "Create an order" call.
    #  * [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the customer acceptance date is not set in your "Create an order" call.
    #  * When a charge in the subscription has its `triggerEvent` field set as `SpecificDate` and the `specificTriggerDate` field is not set in your "Create an order" API call.
    # 
    # **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.
    "CreateSubscription"|"TermsAndConditions"|"AddProduct"|"UpdateProduct"|"RemoveProduct"|"RenewSubscription"|"CancelSubscription"|"OwnerTransfer"|"Suspend"|"Resume"|"ChangePlan" 'type;
    # Information about an order action of type `UpdateProduct`.
    CreateOrderRatePlanUpdate updateProduct?;
};

public type PUTOrderActionsRequestType record {
    OrderActionPut orderAction?;
};

public type TermInfo_renewalTerms record {
    # Duration of the renewal term in months, years, days, or weeks, depending on the value of the `periodType` field.
    int period?;
    # Unit of time that the renewal term is measured in.
    "Month"|"Year"|"Day"|"Week" periodType?;
};

public type Inline_response_200_3 record {
    GetScheduledEventResponse[] data?;
    # The link to the next page. No value if it is last page.
    string next?;
};

public type OrderActionRatePlanUsageVolumePricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    OrderActionRatePlanChargeTier[] tiers?;
};

public type NestedValidityPeriodSummaryOnExpand record {|
    # The unique identifier of the validity period summary.
    string id?;
    # The unique identifier of the user who created the validity period summary.
    string createdById?;
    # The date and time when the validity period summary was created.
    string createdDate?;
    # The unique identifier of the user who last updated the validity period summary.
    string updatedById?;
    # The date and time when the validity period summary was last updated.
    string updatedDate?;
    # The unique identifier of the prepaid balance.
    string prepaidBalanceId?;
    # The start date of the validity period.
    string startDate?;
    # The end date of the validity period.
    string endDate?;
    # The total prepaid balance for the current validity period.
    decimal totalBalance?;
    # The remaining prepaid balance for the current validity period.
    decimal remainingBalance?;
    decimal totalBilledAmount?;
    decimal billedBalanceAmount?;
    # The number of the subscription the validity period belongs to.
    string subscriptionNumber?;
    # The UOM of the validity period.
    string uom?;
    # The number of the account to which the prepaid balance belongs.
    string accountNumber?;
    # The ID of the account to which the prepaid balance belongs.
    string accountId?;
    # The overage rated quantity for the validity period.
    decimal overageRatedQuantity?;
    # The overage rated amount for the validity period.
    decimal overageRatedAmount?;
    # EXPANDABLE.
    # The account associated with the validty period summary.
    record {} account?;
    # EXPANDABLE.
    # The prepaid balance associated with the validity period summary.
    record {} prepaidBalance?;
|};

public type Inline_response_200_4 record {
    GETPublicNotificationDefinitionResponse[] data?;
    # The URI to query the next page of data, e.g. '/notification-definitions?start=1&limit=10'. The start equals request's start+limit, and the limit equals the request's limit. If the current page is the last page, this value is null.
    string next?;
};

# Container for Payment fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type PaymentObjectNSFields record {
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Origin__NS?;
    # Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
    # Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Transaction__NS?;
};

public type Inline_response_200_1 record {
    # Id of the billing preview run.
    string billingPreviewRunId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Information about feature in rate plan.
public type CreateOrderRatePlanFeatureOverride record {
    # A container for custom fields of the feature.
    RatePlanFeatureOverrideCustomFields customFields?;
    # A description of the feature.
    @constraint:String {maxLength: 500}
    string description?;
    # Internal identifier of the feature in the product catalog.
    string featureId;
};

public type Inline_response_200_2 record {
    EventTrigger[] data?;
    # The link to the next page. No value if it is last page.
    string next?;
};

public type OrderActionRatePlanRecurringVolumePricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    @constraint:Number {minValue: 0}
    decimal quantity?;
    OrderActionRatePlanChargeTier[] tiers?;
};

public type OrderLineItemCommon record {
    # Specifies the units to measure usage.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string UOM?;
    # The accountingCode for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string accountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string adjustmentLiabilityAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string adjustmentRevenueAccountingCode?;
    # The actual charged amount per unit for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    decimal amountPerUnit?;
    # The target date for the Order Line Item (OLI) to be picked up by bill run for generating billing documents.
    # 
    # To generate billing documents for an OLI, you must set this field and set the `itemState` field to `SentToBilling`.
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string billTargetDate?;
    # The ID of a contact that belongs to the billing account of the order line item. Use this field to assign an existing account as the bill-to contact of an order line item.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string billTo?;
    # The rule for billing of the Order Line Item (OLI).
    # 
    # You can update this field for a sales or return OLI only when it is in the `Executing` state (when the `itemState` field is set as `Executing`).
    "TriggerWithoutFulfillment"|"TriggerAsFulfillmentOccurs" billingRule?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string contractAssetAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string contractLiabilityAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string contractRecognizedRevenueAccountingCode?;
    # Container for custom fields of an Order Line Item object.
    OrderLineItemCustomFields customFields?;
    # The deferred revenue accounting code for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string deferredRevenueAccountingCode?;
    # The description of the Order Line Item (OLI).
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string description?;
    # Indicates whether to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Indicates whether to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled.
    boolean excludeItemBookingFromRevenueAccounting?;
    # The number of the invoice group associated with the order line item.
    # 
    # After enabling the Invoice Grouping feature, you can specify invoice group numbers to bill subscriptions and order line items based on specific criteria. For the same account, Zuora generates separate invoices for subscriptions and order line items, each identified by unique invoice group numbers. For more information, see [Invoice Grouping](https://knowledgecenter.zuora.com/Billing/Subscriptions/Invoice_Grouping).
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request during subscription creation, the value of this field is automatically set to `null` in the response body.
    string? invoiceGroupNumber?;
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    # 
    # Use this field in accordance with the `inlineDiscountType` field, in the following manner:
    # * If the `inlineDiscountType` field is set as `Percentage`, this field specifies the discount percentage for each unit of the order line item. For exmaple, if you specify `5` in this field, the discount percentage is 5%.
    # * If the `inlineDiscountType` field is set as `FixedAmount`, this field specifies the discount amount on each unit of the order line item. For exmaple, if you specify `10` in this field, the discount amount on each unit of the order line item is 10.
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    decimal inlineDiscountPerUnit?;
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    # 
    # Use this field to specify the inline discount type, which can be `Percentage`, `FixedAmount`, or `None`. The default value is `Percentage`.
    # 
    # Use this field together with the `inlineDiscountPerUnit` field to specify inline discounts for order line items. The inline discount is applied to the list price of an order line item. 
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    "Percentage"|"FixedAmount"|"None" inlineDiscountType?;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The name of the Order Line Item (OLI).
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string itemName?;
    # The number for the Order Line Item (OLI).
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string itemNumber?;
    # The state of the Order Line Item (OLI). See [State transitions for an order, order line item, and fulfillment](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
    # 
    # To generate invoice for an OLI, you must set this field to `SentToBilling` and set the `billTargetDate` field .
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` or 'Booked' or `SentToBilling`state (when the `itemState` field is set as `Executing` or `SentToBilling`).
    "Executing"|"Booked"|"SentToBilling"|"Complete"|"Cancelled" itemState?;
    # The type of the Order Line Item (OLI). 
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    "Product"|"Fee"|"Services" itemType?;
    # The list price per unit for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    decimal listPricePerUnit?;
    # Use this field to assign an existing account as the owner of an order line item.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string ownerAccountNumber?;
    # The product code for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string productCode?;
    # Used by customers to specify the Purchase Order Number provided by the buyer.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string purchaseOrderNumber?;
    # The quantity of units, such as the number of authors in a hosted wiki service.
    # 
    # You can update this field for a sales or return OLI only when the OLI in the `Executing` state (when the `itemState` field is set as `Executing`).
    decimal quantity?;
    # The recognized revenue accounting code for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string recognizedRevenueAccountingCode?;
    # Use this field to relate an order line item to an subscription. Specify this field to the subscription number of the subscription to relate.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string relatedSubscriptionNumber?;
    # The Revenue Recognition rule for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string revenueRecognitionRule?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" revenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" revenueAmortizationMethod?;
    # The ID of the sequence set associated with the orderLineItem.
    string sequenceSetId?;
    # Use this field to assign an existing account as the sold-to contact of an order line item, by the following rules:
    # 
    # * If the `ownerAccountNumber` field is set, then this field must be the ID of a contact that belongs to the owner account of the order line item. 
    # * If the `ownerAccountNumber` field is not set, then this field must be the ID of a contact that belongs to the billing account of the order line item.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string soldTo?;
    # The tax code for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string taxCode?;
    # The tax mode for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    "TaxInclusive"|"TaxExclusive" taxMode?;
    # The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the `transactionStartDate` field.
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string transactionEndDate?;
    # The date a transaction starts. The default value of this field is the order date.
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string transactionStartDate?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string unbilledReceivablesAccountingCode?;
};

public type PUTSkipPaymentScheduleItemResponse record {
    # The amount of the payment.
    decimal amount?;
    GETPaymentScheduleItemResponse_billingDocument billingDocument?;
    # The reason for the cancellation of payment schedule item.            
    string cancellationReason?;
    # The ID of the user who created the payment schedule item.
    string createdById?;
    # The date and time when the payment schedule item was created.
    string createdDate?;
    # The currency of the payment.
    string currency?;
    # The description of the payment schedule item.
    string description?;
    # The error message indicating if the error is related to the configuration or the payment collection.
    string errorMessage?;
    # ID of the newly-created payment schedule item. For example, `412880e749b72b310149b7343ef81346`.
    string id?;
    # Number of the newly-created payment schedule item.
    string number?;
    # ID of the payment gateway of the payment schedule item.
    string paymentGatewayId?;
    # ID of the payment that is created by the payment schedule item， or linked to the payment schedule item. This field is only available if the request doesn’t specify `zuora-version`, or `zuora-version` is set to a value equal to or smaller than `336.0`.  
    string paymentId?;
    # ID of the payment method of the payment schedule item.
    string paymentMethodId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # ID of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`,
    string paymentScheduleId?;
    # Number of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`,
    #      
    string paymentScheduleNumber?;
    # Container for payments linked to the payment schedule item. 
    LinkedPaymentID[] psiPayments?;
    # At which hour in the day in the tenant’s timezone this payment will be collected.
    int runHour?;
    # The scheduled date when the payment is processed.
    string scheduledDate?;
    # Indicates if the payment created by the payment schedule item is a standalone payment.
    boolean standalone?;
    # ID of the payment method of the payment schedule item.
    # 
    # - `Pending`: Waiting for processing.
    # - `Processed`: The payment has been collected.
    # - `Error`: Failed to collect the payment.
    # - `Canceled`: After a pending payment schedule item is canceled by the user, the item is marked as `Canceled`.
    "Pending"|"Processed"|"Error"|"Canceled" status?;
    # Returns `true` if the request was processed successfully. 
    boolean success?;
    # The ID of the user who updated the payment schedule item.
    string updatedById?;
    # The date and time when the payment schedule item was last updated.
    string updatedDate?;
    *PaymentScheduleItemCustomFields;
};

# Container for the finance information related to the credit memo item.
public type GETCreditMemoItemTypewithSuccess_financeInformation record {
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    string deferredRevenueAccountingCode?;
    # The type of the deferred revenue accounting code, such as Deferred Revenue. 
    string deferredRevenueAccountingCodeType?;
    # The accounting code that maps to an on account in your accounting system.
    string onAccountAccountingCode?;
    # The type of the accounting code that maps to an on account in your accounting system.
    string onAccountAccountingCodeType?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    string recognizedRevenueAccountingCode?;
    # The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount. 
    string recognizedRevenueAccountingCodeType?;
    # The name of the revenue recognition rule governing the revenue schedule.
    string revenueRecognitionRuleName?;
    # Revenue schedule number. The revenue schedule number is always prefixed with "RS", for example, RS-00000001.
    string revenueScheduleNumber?;
};

# Json node object contains metadata.
public type JsonNode record {
};

public type POSTRetryPaymentScheduleItemRequest record {
    # The maximum number of items allowable to pass is 10.
    POSTRetryPaymentScheduleItemInfo[] items?;
};

# Container for the intervals that the ramp is split into in its timeline. Zuora can report metrics for this specific period.
public type RampIntervalRequest record {
    # The short description of the interval.
    string description?;
    # The end date of the interval.
    string endDate;
    # The name of the interval.
    string name?;
    # The start date of the interval.
    string startDate;
};

public type POSTOrderAsyncRequestType record {
    # Category of the order to indicate a product sale or return. Default value is `NewSales`.
    "NewSales"|"Return" category = "NewSales";
    # Container for custom fields of an Order object.
    OrderObjectCustomFields customFields?;
    # A description of the order.
    @constraint:String {maxLength: 500}
    string description?;
    # The account number that this order will be created under.
    # Note that this actually specifies the invoice owner account of the subscriptions included in this order.
    @constraint:String {maxLength: 70}
    string existingAccountNumber?;
    # An enum field on the Subscription object to indicate the name of a third-party store. This field is used to represent subscriptions created through third-party stores.
    "Amazon"|"Apple"|"Google"|"Roku" externallyManagedBy?;
    CreateOrderNewAccount newAccount?;
    # The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if the contract effective date field is skipped or its value is left as null.
    string orderDate;
    # [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services. 
    # 
    # With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.
    # 
    # **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.        
    CreateOrderOrderLineItem[] orderLineItems?;
    # The order number of the new order. If not provided, system will auto-generate a number for this order.   
    # **Note:** Make sure the order number does not contain a slash.
    @constraint:String {maxLength: 100}
    string orderNumber?;
    # The container for billing processing options and payment processing options.
    # 
    # **Note:** This field is not supported in draft orders.
    ProcessingOptionsOrdersAsync processingOptions?;
    # Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs.
    @constraint:String {maxLength: 255}
    string reasonCode?;
    # Each item includes a set of order actions, which will be applied to the same base subscription.
    POSTOrderRequestType_subscriptions[] subscriptions?;
};

# 
public type QueryOrderActionsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedOrderAction[] data?;
|};

public type PutCreditMemoTaxItemType record {
    # The amount of the taxation item in the credit memo item.
    decimal amount?;
    # Container for the finance information related to the taxation item in the credit memo item.
    PutCreditMemoTaxItemType_financeInformation financeInformation?;
    # The ID of the taxation item in the credit memo item.
    string id;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The tax code identifies which tax rules and tax rates to apply to a specific credit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the credit memo, in `yyyy-mm-dd` format.
    string taxDate?;
    # The calculated tax amount excluded due to the exemption.
    decimal taxExemptAmount?;
    # The name of taxation.
    string taxName?;
    # The tax rate applied to the credit memo.
    decimal taxRate?;
    # The description of the tax rate. 
    string taxRateDescription?;
    # The type of the tax rate applied to the credit memo.
    "Percentage"|"FlatFee" taxRateType?;
    *CreditTaxationItemObjectCustomFields;
};

public type POSTTaxationItemListForDMType record {
    # Container for taxation items.
    POSTTaxationItemForDMType[] taxationItems?;
};

public type ContactInfo record {
    # First line of the contact's address. This is often a street address or a business name.
    @constraint:String {maxLength: 255}
    string address1?;
    # Second line of the contact's address.
    @constraint:String {maxLength: 255}
    string address2?;
    # City of the contact's address.
    @constraint:String {maxLength: 40}
    string city?;
    # A description for the contact.
    @constraint:String {maxLength: 100}
    string contactDescription?;
    # Country; must be a valid country name or abbreviation. If using [Zuora Tax](https://knowledgecenter.zuora.com/Zuora_Billing/Taxes/A_Zuora_Tax), you must specify a country in the bill-to contact to calculate tax.
    @constraint:String {maxLength: 64}
    string country?;
    # County of the contact's address.
    @constraint:String {maxLength: 32}
    string county?;
    # Container for custom fields.
    CustomFields customFields?;
    # Fax number of the contact.
    @constraint:String {maxLength: 40}
    string fax?;
    # First name of the contact.
    @constraint:String {maxLength: 100}
    string firstName;
    # Home phone number of the contact.
    @constraint:String {maxLength: 40}
    string homePhone?;
    # 
    @constraint:String {maxLength: 100}
    string lastName;
    # Mobile phone number of the contact.
    @constraint:String {maxLength: 40}
    string mobilePhone?;
    # Nickname of the contact.
    @constraint:String {maxLength: 100}
    string nickname?;
    # Additional phone number of the contact. Use the `otherPhoneType` field to specify the type of phone number.
    @constraint:String {maxLength: 40}
    string otherPhone?;
    # Specifies the type of phone number in the `otherPhone` field.
    "Work"|"Mobile"|"Home"|"Other" otherPhoneType?;
    # Personal email address of the contact.
    @constraint:String {maxLength: 80}
    string personalEmail?;
    # ZIP code or other postal code of the contact's address.
    @constraint:String {maxLength: 20}
    string postalCode?;
    # State or province of the contact's address.
    @constraint:String {maxLength: 40}
    string state?;
    # Region defined in your taxation rules. Only applicable if you use Zuora Tax.
    @constraint:String {maxLength: 32}
    string taxRegion?;
    # Business email address of the contact.
    @constraint:String {maxLength: 80}
    string workEmail?;
    # Business phone number of the contact.
    @constraint:String {maxLength: 40}
    string workPhone?;
};

# Container for the prefix and starting document number of debit memos.
# 
# **Note:** This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
public type DebitMemoEntityPrefix record {
    # The prefix of debit memos.
    string prefix?;
    # The starting document number of debit memos.
    int startNumber?;
};

# Charge associated with a rate plan.
public type PreviewOrderChargeOverride record {
    # The accountReceivableAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a>, <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a>, and <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Get_started_with_Invoice_Settlement/AA_Overview_of_Invoice_Settlement" target="_blank">Invoice Settlement</a> features are enabled.
    string accountReceivableAccountingCode?;
    # The adjustmentLiabilityAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string adjustmentLiabilityAccountingCode?;
    # The adjustmentRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string adjustmentRevenueAccountingCode?;
    # Billing information about the charge.
    PreviewOrderChargeOverride_billing billing?;
    # The chargeModel of a standalone charge.
    # Supported charge models:
    # * `FlatFee`
    # * `PerUnit`
    # * `Volume`
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string chargeModel?;
    # Charge number of the charge. For example, C-00000307.
    # 
    # If you do not set this field, Zuora will generate the charge number.
    @constraint:String {maxLength: 50}
    string chargeNumber?;
    # The chargeType of a standalone charge.
    # Supported charge types:
    # * `OneTime`
    # * `Recurring`
    # * `Usage`
    # * `DiscountFixedAmount`
    # * `DiscountPercentage`
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string chargeType?;
    # The contractAssetAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractAssetAccountingCode?;
    # The contractLiabilityAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractLiabilityAccountingCode?;
    # The contractRecognizedRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractRecognizedRevenueAccountingCode?;
    # Container for custom fields of a Rate Plan Charge object.
    RatePlanChargeObjectCustomFields customFields?;
    # The deferredRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string deferredRevenueAccountingCode?;
    # Description of the charge.
    @constraint:String {maxLength: 500}
    string description?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal drawdownRate?;
    # Specifies when a charge becomes inactive.
    EndConditions endDate?;
    # The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # If both the following features in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing" target="_blank">Advanced Consumption Billing</a> are enabled in your tenant, you must ensure the `excludeItemBillingFromRevenueAccounting` field is set consistently for a prepayment charge and the corresponding drawdown charge. In addition, if the `excludeItemBookingFromRevenueAccounting` field in a Create Subscription or Add Product order action is set to `false`, you must also set the `excludeItemBillingFromRevenueAccounting` field in this order action to `false`.
    #   * Prepaid with Drawdown
    #   * Unbilled Usage
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.
    boolean excludeItemBillingFromRevenueAccounting = false;
    # The flag to exclude rate plan charges from revenue accounting.
    # 
    # If both the following features in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing" target="_blank">Advanced Consumption Billing</a> are enabled in your tenant, you must ensure the `excludeItemBookingFromRevenueAccounting` field is set consistently for a prepayment charge and the corresponding drawdown charge.
    #   * Prepaid with Drawdown
    #   * Unbilled Usage
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.
    boolean excludeItemBookingFromRevenueAccounting = false;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The value is either "True" or "False". It determines whether the rollover fields are needed.
    boolean isRollover?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The name of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string name?;
    # The pobPolicy of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string pobPolicy?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal prepaidQuantity?;
    # Pricing information about the charge.
    PreviewOrderChargeOverride_pricing pricing?;
    # The productCategory of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productCategory?;
    # The productClass of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productClass?;
    # The productFamily of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productFamily?;
    # The productLine of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productLine?;
    # Internal identifier of the product rate plan charge that the charge is based on.
    string productRatePlanChargeId;
    # Number of a product rate-plan charge for this subscription.
    string productRatePlanChargeNumber?;
    # The recognizedRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string recognizedRevenueAccountingCode?;
    # Revenue Recognition Code
    @constraint:String {maxLength: 70}
    string revRecCode?;
    # Specifies the revenue recognition trigger condition.
    # 
    #   * `Contract Effective Date` 
    #   * `Service Activation Date`
    #   * `Customer Acceptance Date`
    "Contract Effective Date"|"Service Activation Date"|"Customer Acceptance Date" revRecTriggerCondition?;
    # Specifies the revenue recognition rule, such as `Recognize upon invoicing` or `Recognize daily over time`.
    string revenueRecognitionRuleName?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    decimal rolloverPeriods?;
    # Specifies when a charge becomes active.
    PreviewOrderTriggerParams startDate?;
    # The taxCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string taxCode?;
    # The taxMode of a standalone charge. 
    # Values:
    # * `TaxExclusive`
    # * `TaxInclusive`
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string taxMode?;
    # The unBilledReceivablesAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string unBilledReceivablesAccountingCode?;
    # Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
    # The identifier of the original upselling charge associated with the current charge.
    # 
    # For a termed subscription, you can now use the "Create an order" API operation to perform an Add Product order action to make a product quantity upsell for per unit recurring charges. The benefit is that the charge added by this approach will be automatically combined with the original existing charge for which you want to upsell when the subscription is renewed. The approach is as follows:
    # * Use an Add Product order action to add a charge that is of the same charge type, charge model, and charge end date as the existing per unit recurring charge for which you want to make a quantity upsell.
    # 
    # * In the preceding charge to add, use the `upsellOriginChargeNumber` field to specify the existing rate plan charge for which you want to make the quantity upsell.
    # 
    # Note that a termed subscription with such upsell charges can not be changed to an evergreen subscription.   
    # 
    # **Note**: The Quantity Upsell feature is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global
    #   Support](https://support.zuora.com).  
    string upsellOriginChargeNumber?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).      
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
};

# Container for the prefix and starting number of payments.
public type PaymentEntityPrefix record {
    # The prefix of payments.
    string prefix?;
    # The starting number of payments.
    int startNumber?;
};

# Information about an order action of type `UpdateProduct`.
public type PreviewOrderRatePlanUpdate record {
    # Array of the JSON objects containing the information for a charge update in the `updateProduct` type of order action.
    # 
    # When previewing an `updateProduct` order action, either the `chargeNumber` or `uniqueToken` field is required to specify the charge to update.
    PreviewOrderChargeUpdate[] chargeUpdates?;
    # Specifies whether all features in the rate plan will be cleared.
    boolean clearingExistingFeatures?;
    # Container for custom fields of the Rate Plan or Subscription Offer object. The custom fields of the Rate Plan object are used when rate plans are subscribed, and the custom fields of the Subscription Offer object are used when product offers are subscribed.
    OrdersRatePlanObjectCustomFields customFields?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # The id of the rate plan to be updated. It can be the latest version or any history version id.
    string ratePlanId?;
    # 
    # The date when the Update Product order action takes effect. This field is only applicable if there is already a future-dated Update Product order action on the subscription. The format of the date is yyyy-mm-dd.
    # 
    # See [Update a Product on Subscription with Future-dated Updates](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AC_Orders_Tutorials/C_Update_a_Product_in_a_Subscription/Update_a_Product_on_Subscription_with_Future-dated_Updates) for more information about this feature.
    string specificUpdateDate?;
    # List of features associated with the rate plan.
    # The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows:
    # * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared.
    # * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.
    CreateOrderRatePlanFeatureOverride[] subscriptionProductFeatures?;
    # Number of a rate plan for this subscription.
    string subscriptionRatePlanNumber?;
    # A unique string to represent the rate plan in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added rate plan and use that token in future order actions.
    string uniqueToken?;
};

# 
public type QueryPaymentApplicationsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedPaymentApplication[] data?;
|};

public type WorkflowUsage_values record {
    # The amount of task runs that have been used.
    int taskCount?;
};

# Container for exchange rate information on a given date. The field name is a  date in the `yyyy-mm-dd` format. For example, `2024-01-15`.
public type Rate record {|
    # The date of the exchange rate used. The date is in `yyyy-mm-dd` format.
    # 
    # Corresponds to the value specified in the Provider Exchange Rate Date column in the Import Foreign Exchange Rates template when you uploaded the rates through the Mass Updater.
    string providerExchangeRateDate?;
    decimal...;
|};

public type GETPaymentMethodResponsePayPalForAccount record {
    # ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.
    string BAID?;
    # Email address associated with the PayPal payment method. 
    string email?;
    # The PayPal preapproval key.                
    string preapprovalKey?;
};

public type RampIntervalChargeDeltaMetrics_deltaMrr record {
    # The discount delta amount for the MRR.
    decimal discount?;
    # The end date.
    string endDate?;
    # The MRR delta amount before discounts charges are applied.
    decimal gross?;
    # The MRR delta amount after discounts charges are applied.
    decimal net?;
    # The start date.
    string startDate?;
};

public type SignUpCreatePaymentMethodCommon record {
    # Internal ID of the customer account that will own the payment method.
    string accountKey?;
    # Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.
    # 
    # If you do not set this field, Zuora will use one of the following payment gateways instead:
    # 
    # * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set.
    # * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.
    string authGateway?;
    # The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways. 
    # 
    # If the IP address length is beyond 45 characters, a validation error occurs.
    string ipAddress?;
    # Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.
    boolean makeDefault?;
};

# Container for custom fields of a Product Charge Definition object.
public type ProductChargeDefinitionObjectCustomFields record {
};

public type GETPublicEmailTemplateResponse record {
    # The status of the email template.
    boolean active?;
    # Email BCC address.
    string bccEmailAddress?;
    # Email CC address.
    string ccEmailAddress?;
    # Email cc type.
    "BillToContact"|"SoldToContact"|"SpecificEmails"|"TenantAdmin"|"BillToAndSoldToContacts"|"RunOwner"|"AllContacts"|"InvoiceOwnerBillToContact"|"InvoiceOwnerSoldToContact"|"InvoiceOwnerBillToAndSoldToContacts"|"InvoiceOwnerAllContacts" ccEmailType?;
    # The ID of the user who created the email template.
    string createdBy?;
    # The time when the email template was created. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00
    string createdOn?;
    # The description of the email template.
    @constraint:String {maxLength: 255}
    string description?;
    # The email body. You can add merge fields in the email body using angle brackets or double curly brackets. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Events_and_Notifications/Create_Email_Templates/A_Merge_field_syntax_for_email_templates" target="_blank">Merge field syntax for email templates</a>. 
    # 
    # User can also embed html tags if `isHtml` is `true`.
    string emailBody?;
    # Container for custom email headers. Each custom email header consists of a header name and a header value.
    record {|string...;|} emailHeaders?;
    # The email subject. You can add merge fields in the email subject using angle brackets or double curly brackets. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Events_and_Notifications/Create_Email_Templates/A_Merge_field_syntax_for_email_templates" target="_blank">Merge field syntax for email templates</a>.
    string emailSubject?;
    # The endcode type of the email body.
    "UTF8"|"Shift_JIS"|"ISO_2022_JP"|"EUC_JP"|"X_SJIS_0213" encodingType?;
    # The event category code for a standard event. See [Standard Event Categories](https://knowledgecenter.zuora.com/Central_Platform/Notifications/A_Standard_Events/Standard_Event_Category_Code_for_Notification_Histories_API) for all event category codes.
    decimal eventCategory?;
    # The name of the custom event or custom scheduled event.
    @constraint:String {minLength: 1}
    string eventTypeName?;
    # The namespace of the `eventTypeName` field for custom events and custom scheduled events. 
    string eventTypeNamespace?;
    # If formEmailType is SpecificEmail, this field is required.
    string fromEmailAddress?;
    # The from email type.
    "TenantEmail"|"RunOwner"|"SpecificEmail" fromEmailType?;
    # The name of email sender.
    @constraint:String {maxLength: 50}
    string fromName?;
    # The email template ID.
    string id?;
    # Indicates whether the style of email body is HTML.
    boolean isHtml?;
    # The name of the email template.
    @constraint:String {maxLength: 255}
    string name?;
    # If replyToEmailType is SpecificEmail, this field is required
    string replyToEmailAddress?;
    # The reply email type.
    "TenantEmail"|"RunOwner"|"SpecificEmail" replyToEmailType?;
    # If `toEmailType` is `SpecificEmail`, this field is required.
    string toEmailAddress?;
    # Email receive type.
    "BillToContact"|"SoldToContact"|"SpecificEmails"|"TenantAdmin"|"BillToAndSoldToContacts"|"RunOwner"|"AllContacts"|"InvoiceOwnerBillToContact"|"InvoiceOwnerSoldToContact"|"InvoiceOwnerBillToAndSoldToContacts"|"InvoiceOwnerAllContacts" toEmailType?;
    # The ID of the user who updated the email template.
    string updatedBy?;
    # The time when the email template was updated. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00
    string updatedOn?;
};

public type JobResult_orderLineItems record {
    # The sytem generated Id for the Order Line Item.
    string id?;
    # The number for the Order Line Item.
    string itemNumber?;
};

public type GETProductType record {
    # Category of the product. Used by Zuora Quotes Guided Product Selector.
    # 
    # Possible values are:
    #   - Base Products
    #   - Add On Services
    #   - Miscellaneous Products
    string category?;
    # Optional product description.
    string description?;
    # The date when the product expires and cannot be subscribed to anymore, as `yyyy-mm-dd`.
    string effectiveEndDate?;
    # The date when the product becomes available and can be subscribed to, as `yyyy-mm-dd`.
    string effectiveStartDate?;
    # Product ID.
    string id?;
    # Product name, up to 100 characters.
    string name?;
    # The organization(s) that the object belongs to. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.            
    GETProductType_organizationLabels[] organizationLabels?;
    # Container for one or more product features. Only available when the following settings are enabled:
    # - The Entitlements feature in your tenant
    # - The Enable Feature Specification in Product and Subscriptions setting in Settings > Billing
    GetProductFeatureType[] productFeatures?;
    # The natural key of the product.
    string productNumber?;
    # URL to retrieve information about all product rate plans of a specific product. For example, `/v1/rateplan/40289f466463d683016463ef8b7301a0/productRatePlan`. If you want to view the product rate plan details, call [List all product rate plans of a product](https://developer.zuora.com/api-references/api/operation/GET_ProductRatePlans) with the returned URL.
    # 
    # This field is in Zuora REST API version control. If you set the `zuora-version` request header to `230.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version), the value of this field is a URL. Zuora recommends that you use the latest behavior to retrieve product information.
    # 
    # If you do not set the `zuora-version` request header or you set this header to `229.0` or earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version), the value of this field is an array of product rate plan details. 
    # For more information about the array, see the response body of [List all product rate plans of a product](https://developer.zuora.com/api-references/api/operation/GET_ProductRatePlans). **Note**: The array contains a maximum of 300 product rate plans. Additionally, across all product rate plans, at most 300 product rate plan charges are returned.
    string productRatePlans?;
    # Unique product SKU, up to 50 characters.
    string sku?;
    # 
    string tags?;
    *ProductObjectNSFields;
    *ProductObjectCustomFields;
};

public type MigrationUpdateCustomObjectDefinitionsRequest record {|
    # The actions of updating custom object definitions, to be performed as parts of the migration.  Currently only one action per migration is supported.
    @constraint:Array {maxLength: 1, minLength: 1}
    CustomObjectDefinitionUpdateActionRequest[] actions;
|};

public type NestedDebitMemoItemOnExpand record {|
    # The unique identifier of the debit memo item.
    string id?;
    # The unique identifier of the user who created the debit memo item.
    string createdById?;
    # The date and time when the debit memo item was created.
    string createdDate?;
    # The unique identifier of the user who last updated the debit memo item.
    string updatedById?;
    # The date and time when the debit memo item was last updated.
    string updatedDate?;
    # The amount of the debit memo item. For tax-inclusive debit memo items, the amount indicates the debit memo item amount including tax. For tax-exclusive debit memo items, the amount indicates the debit memo item amount excluding tax.
    decimal amount?;
    # The debit memo item amount excluding tax.
    decimal amountWithoutTax?;
    # The parent debit memo item that this debit memo items is applied to if this item is discount.
    string appliedToItemId?;
    decimal appliedToOthersAmount?;
    decimal beAppliedByOthersAmount?;
    # The date when the debit memo item is charged, in `yyyy-mm-dd hh:mm:ss`
    # format.
    string chargeDate?;
    string creditMemoItemId?;
    # The flag to exclude the debit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The description of the debit memo item.
    string description?;
    # The ID of the sold-to contact associated with the debit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactId?;
    # The ID of the sold-to contact snapshot associated with the debit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactSnapshotId?;
    # The type of the charge for the debit memo item. 
    "Charge"|"Discount" processingType?;
    # The number of units for the debit memo item.
    decimal quantity?;
    # The end date of the service period associated with this debit memo item. Service ends one second before the date specified in this field.
    string serviceEndDate?;
    # The start date of the service period associated with this debit memo item. If the associated charge is a one-time fee, this date is the date of that charge.
    string serviceStartDate?;
    # The SKU for the product associated with the debit memo item.
    string sku?;
    # The type of the source item.
    "CreditMemoItem"|"SubscriptionComponent"|"InvoiceDetail"|"ProductRatePlanCharge" sourceItemType?;
    # The name of the charge associated with the debit memo item.
    string chargeName?;
    # The number of the charge associated with the debit memo item.
    string chargeNumber?;
    # The amount of tax on this debit memo.
    decimal taxAmount?;
    # Name of the tax code identifies which tax rules and tax rates to apply to a specific debit memo item.
    string taxCodeName?;
    # The calculated tax amount excluded due to the exemption.
    decimal taxExemptAmount?;
    # The tax mode of the debit memo item, indicating whether the amount of the debit memo item includes tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # The units to measure usage.
    string unitOfMeasure?;
    # The per-unit price of the debit memo item.
    decimal unitPrice?;
    # The ID of the subscription associated with the debit memo item.
    string subscriptionId?;
    # The number of the subscription associated with the debit memo item.
    string subscriptionNumber?;
    # The ID of the invoice item associated with the debit memo item.
    string invoiceItemId?;
    # The ID of the product rate plan charge based on which the debit memo item is created.
    string productRatePlanChargeId?;
    # The ID of the rate plan charge associated with the debit memo item.
    string ratePlanChargeId?;
    # The ID of the debit memo to which this debit memo item belongs.
    string debitMemoId?;
    # The balance of the debit memo item.
    decimal balance?;
    # The Recognized Revenue accounting code for the credit memo item.
    string recognizedRevenueAccountingCodeId?;
    # The Account Receivable accounting code for the credit memo item.
    string accountReceivableAccountingCodeId?;
    # The Deferred Revenue accounting code for the credit memo item.
    string deferredRevenueAccountingCodeId?;
    # The ID of the journal entry that corresponds to this transaction.
    string journalEntryId?;
    # The ID of the sold-to contact snapshot associated with the credit memo.
    string soldToContactSnapshotId?;
    # The ID of the bill-to contact snapshot associated with the credit memo.
    string billToContactSnapshotId?;
    # EXPANDABLE.
    # The subscription associated with the debit memo item.
    record {} subscription?;
    # EXPANDABLE.
    # The rate plan charge associated with the debit memo item.
    record {} ratePlanCharge?;
|};

public type GETPaymentMethodResponseApplePayForAccount record {
    # This field is only available for Apple Pay payment methods.
    string appleBIN?;
    # This field is only available for Apple Pay payment methods.
    string appleCardNumber?;
    # This field is only available for Apple Pay payment methods.
    # 
    # For Apple Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field.
    string appleCardType?;
    # This field is only available for Apple Pay payment methods.
    string appleExpiryDate?;
    # This field is only available for Apple Pay payment methods.
    string appleGatewayToken?;
};

# Container for the credit memo that is automatically created.
public type PUTCreditMemoWriteOffResponseType_debitMemo record {
    # The unique ID of the created debit memo.
    string id?;
};

public type ChildrenSettingValueRequest record {
    # Request payload if any
    BodyInSettingValueRequest body?;
    # The id of the request. You can set it to any string. It must be unique within the whole batch.
    string id?;
    # One of the HTTP methods supported by the setting endpoint, for example, GET,PUT,POST or DELETE.
    "GET"|"HEAD"|"POST"|"PUT"|"PATCH"|"DELETE"|"OPTIONS"|"TRACE" method?;
    # The relative URL of the setting. It is the same as in the `pathPattern` field in the response body of [Listing all settings](https://developer.zuora.com/api-references/api/operation/GET_ListAllSettings). For example, `/billing-rules`.
    string url?;
};

# The container for the account holder information. The nested `accountHolderName` field is required.
public type CreatePaymentMethodSEPA_accountHolderInfo record {
    # Required.
    # 
    # The full name of the bank account holder.
    @constraint:String {maxLength: 60}
    string accountHolderName?;
    # The first line of the address for the account holder.
    # 
    # This field is required for SEPA Direct Debit payment methods on Stripe v2 for [certain countries](https://stripe.com/docs/payments/sepa-debit/set-up-payment?platform=web#web-submit-payment-method).
    string addressLine1?;
    # The second line of the address for the account holder. 
    string addressLine2?;
    # The city where the account holder stays.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    string city?;
    # The country where the account holder stays.
    # 
    # This field is required for SEPA payment methods on Stripe v2 for [certain countries](https://stripe.com/docs/payments/sepa-debit/set-up-payment?platform=web#web-submit-payment-method).
    string country?;
    # The email address of the account holder.
    string email?;
    # The first name of the account holder.
    string firstName?;
    # The last name of the account holder.
    string lastName?;
    # The phone number of the account holder.
    string phone?;
    # The state where the account holder stays.
    string state?;
    # The zip code for the address of the account holder.
    string zipCode?;
};

# Container for custom fields of an Order Line Item object.
public type OrderLineItemCustomFieldsRetrieveOrderLineItem record {
};

public type GETPaymentMethodResponseGooglePay record {
    # This field is only available for Google Pay payment methods.
    string googleBIN?;
    # This field is only available for Google Pay payment methods.
    string googleCardNumber?;
    # This field is only available for Google Pay payment methods.
    # 
    # For Google Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field.
    string googleCardType?;
    # This field is only available for Google Pay payment methods.
    string googleExpiryDate?;
    # This field is only available for Google Pay payment methods.
    string googleGatewayToken?;
};

# Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`.
public type FieldsAdditionalProperties record {|
    string...;
|};

public type GETPublicNotificationDefinitionResponse record {
    # The status of the notification definition. The default value is `true`.
    boolean active?;
    # The account on which the histories of this notification will be displayed. The associated account does not enforce where the merge fields come from.
    string associatedAccount?;
    GETPublicNotificationDefinitionResponse_callout callout?;
    # The status of the callout action. The default value is `false`.
    boolean calloutActive?;
    # The profile that the notification definition belongs to.
    string communicationProfileId?;
    # The ID of the user who created the notification definition.
    string createdBy?;
    # The time when the notification definition was created. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00
    string createdOn?;
    # Description of the notification definition
    @constraint:String {maxLength: 255}
    string description?;
    # The status of the email action. The default value is `false`.
    boolean emailActive?;
    # The ID of the email template. In the request, there should be at least one email template or callout.
    string emailTemplateId?;
    # The event category code for a standard event, on which the notification definition is created.
    # 
    # This field is available only if the notification definition is based on a standard event.
    # 
    # For the list of supported standard event category codes, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Events_and_Notifications/A_Standard_Events/Standard_Event_Category_Code_for_Events_and_Notifications" target="_blank">Standard event category code for events and notifications</a>.
    decimal eventCategory?;
    # The ID of the event that the notification definition is based on.
    # 
    # This field is available only if the notification definition is based on a standard event.    
    string eventId?;
    # The name of the event that the notification definition is based on.
    # 
    # This field is available only if the notification definition is based on a Zuora custom event, custom event, or custom scheduled event.
    @constraint:String {minLength: 1}
    string eventTypeName?;
    # The namespace of the `eventTypeName` field. It indicates who created the event and which namespace the event is assigned to.
    # 
    # Supported values are as follows:
    # 
    # - `com.zuora.notification`: events that are created by Zuora. This value applies to Zuora custom events.
    # - `user.notification`: events that are created by tenant users. This value applies to custom events and custom scheduled events.
    # 
    # This field is available only if the notification definition is based on a Zuora custom event, custom event, or custom scheduled event.      
    "user.notification"|"com.zuora.notification" eventTypeNamespace?;
    # 
    GETPublicNotificationDefinitionResponse_filterRule filterRule?;
    # The parameter values used to configure the filter rule.
    FilterRuleParameterValues filterRuleParams?;
    # The ID associated with this notification definition.
    string id?;
    # The name of the notification definition.
    @constraint:String {maxLength: 255}
    string name?;
    # The ID of the user who updated the notification definition.
    string updatedBy?;
    # The time when the notification was updated. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00
    string updatedOn?;
};

# 
public type QueryBillingRunsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedBillingRun[] data?;
|};

# 
public type QueryInvoiceItemsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedInvoiceItem[] data?;
|};

public type POSTInvoiceCollectType record {
    # Customer account ID or account number.
    string accountKey;
    # The date that should appear on the invoice and credit memo being generated,
    # in `yyyy-mm-dd` format. If this field is omitted
    # and `invoiceId` is not specified, the current date is used by default. 
    # 
    # 
    # **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `215.0` and later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method, you
    # must set the  `zuora-version` parameter to the minor version number in
    # the request header.
    string documentDate?;
    # **Note:** This field has been replaced by the `documentDate` field in Zuora REST API version `215.0` and later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). The
    # `invoiceDate` field is only available for backward
    # compatibility.
    # 
    # The date that should appear on the invoice being generated,
    # in `yyyy-mm-dd` format. If this field is omitted
    # and `invoiceId` is not specified, the current date is used by default. 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `214.0` and earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string invoiceDate?;
    # The ID of an existing invoice for which to collect payment using
    # the account's default payment method. If this value is specified, no new
    # invoice is generated, and the following fields are ignored:
    #   - `invoiceDate` and `invoiceTargetDate` (if the Zuora REST API version is 214.0 or earlier)
    #   - `documentDate` and `targetDate` (if the Zuora REST API version is 215.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version))
    string invoiceId?;
    # The number of an existing invoice for which to collect payment using
    # the account's default payment method. If this value is specified, no new
    # invoice is generated, and the following fields are ignored:
    #   - `invoiceDate` and `invoiceTargetDate` (if the Zuora REST API version is 214.0 or earlier)
    #   - `documentDate` and `targetDate` (if the Zuora REST API version is 215.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version))
    string invoiceNumber?;
    # **Note:** This field has been replaced by the `targetDate` field in Zuora REST API version `215.0` and later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). The
    # `invoiceTargetDate` field is only available for backward
    # compatibility.
    # 
    # 
    # The date through which to calculate charges on this account if an invoice is generated, in `yyyy-mm-dd` format. If this field is omitted
    # and `invoiceId` is not specified, the current date is used by default. 
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `214.0` and earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).  
    string invoiceTargetDate?;
    # The name of the gateway that will be used for the payment. Must be a valid gateway name and the gateway must support the specific payment method. If a value is not specified, the default gateway on the Account will be used.
    string paymentGateway?;
    # The date through which to calculate charges on this account if an invoice or a credit memo is generated, 
    # in `yyyy-mm-dd` format. If this field is omitted
    # and `invoiceId` is not specified, the current date is used by default. 
    # 
    # 
    # **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `215.0` and later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method, you
    # must set the  `zuora-version` parameter to the minor version number in
    # the request header.
    string targetDate?;
};

# The `Id` field definition
public type CustomObjectAllFieldsDefinition_Id record {
    # The field data format
    "uuid" format?;
    # The UI name of the field
    string label?;
    # Specifies whether the field is a system field or a custom field
    "system" origin?;
    # The field data type
    "string" 'type?;
};

# Container for bill-to or sold-to contact information. A new Contact will be created under the invoice owner account.
#             
# **Note**: If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body.
public type PostCreateInvoiceContactType record {
    # First address line, 255 characters or less.
    @constraint:String {maxLength: 255}
    string address1?;
    # Second address line, 255 characters or less.
    string address2?;
    # City, 40 characters or less.
    @constraint:String {maxLength: 40}
    string city?;
    # Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.
    string country?;
    # County; 32 characters or less. May optionally be used by Zuora Tax to calculate county tax.
    @constraint:String {maxLength: 32}
    string county?;
    # Fax phone number, 40 characters or less.
    @constraint:String {maxLength: 40}
    string fax?;
    # First name, 100 characters or less.
    @constraint:String {maxLength: 100}
    string firstName;
    # Home phone number, 40 characters or less.
    @constraint:String {maxLength: 40}
    string homePhone?;
    # Last name, 100 characters or less.
    @constraint:String {maxLength: 100}
    string lastName;
    # Mobile phone number, 40 characters or less.
    @constraint:String {maxLength: 40}
    string mobilePhone?;
    # Nickname for this contact
    string nickname?;
    # Other phone number, 40 characters or less.
    @constraint:String {maxLength: 40}
    string otherPhone?;
    # Possible values are: `Work`, `Mobile`, `Home`, `Other`.
    string otherPhoneType?;
    # Personal email address, 80 characters or less.
    @constraint:String {maxLength: 80}
    string personalEmail?;
    # State; must be a valid state or province name or 2-character abbreviation. If using Zuora Tax, be aware that Zuora Tax requires a state (in the US) or province (in Canada) in this field for the sold-to contact to calculate tax, and that a bill-to contact may be used if no sold-to contact is provided.
    string state?;
    # If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.
    string taxRegion?;
    # Work email address, 80 characters or less.
    @constraint:String {maxLength: 80}
    string workEmail?;
    # Work phone number, 40 characters or less.
    @constraint:String {maxLength: 40}
    string workPhone?;
    # Zip code, 20 characters or less.
    @constraint:String {maxLength: 20}
    string zipCode?;
    *ContactCustomFields;
};

public type ProxyGetUsage record {
    #  The ID of the account associated with the usage data. This field is required if no value is specified for the `AccountNumber` field.
    # **Character limit**: 32 **Values**: a valid account ID 
    string AccountId?;
    #  The number of the account associated with the usage data. This field is required if no value is specified for the `AccountId` field.
    # **Character limit**: 50 **Values**: a valid account number 
    string AccountNumber?;
    #  The OrginalId of the rate plan charge related to the usage record, e.g., `2c9081a03c63c94c013c6873357a0117` **Character limit**: 32 **Values**: a valid rate plan charge OriginalID 
    string ChargeId?;
    #  The user ID of the person who uploaded the usage records.
    # **Character limit**: 32 **Values**: automatically generated 
    string CreatedById?;
    #  The date when the usage was generated.
    # **Character limit**: 29 **Values**: automatically generated 
    string CreatedDate?;
    # A description of the usage record.
    string Description?;
    #  The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation.
    # **Character limit**: 29 **Values**: a valid date and time value 
    string EndDateTime?;
    # Object identifier.
    string Id?;
    # Indicates the number of units used.
    # 
    # **Character limit**: 16 
    # 
    # **Values**: A valid decimal amount. It could be a negative amount. Negative quantity usage records are used to adjust the previously uploaded usage records.
    decimal Quantity?;
    #  Indicates if the rating and billing engine (RBE) processed usage data for an invoice.
    # **Character limit**: 9 **Values**: automatically generated to be one of the following values: `Importing`, `Pending`, `Processed` 
    string RbeStatus?;
    #  Indicates if the usage records were imported from the web-based UI or the API.
    # **Character limit**: 6 **Values**: automatically generated to be one of the following values: `API`, `Import` 
    string SourceType?;
    #  The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation.
    # **Character limit**: 29 **Values**: a valid date and time value 
    string StartDateTime?;
    #  The original ID of the subscription that contains the fees related to the usage data.
    # **Character limit**: 32 **Values**: a valid subscription ID 
    string SubscriptionId?;
    # The unique identifier number of the subscription that contains the fees related to the usage data.
    string SubscriptionNumber?;
    #  Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.
    # **Character limit**: **Values**: a valid unit of measure 
    string UOM?;
    #  The ID of the user who last updated the usage upload.
    # **Character limit**: 32 **Values**: automatically generated 
    string UpdatedById?;
    #  The date when the usage upload was last updated.
    # **Character limit**: 29 **Values**: automatically generated 
    string UpdatedDate?;
    *UsageObjectCustomFields;
};

# Container for bill-to contact information of this account.
public type POSTSubscriptionPreviewTypePreviewAccountInfo_billToContact record {
    # The city of the bill-to address. The value should be 40 characters or less.
    string city?;
    # The country of the bill-to address. The value must be a valid country name or abbreviation.
    # 
    # **Note:** You must specify this field if you are using Zuora Tax for this account.
    string country?;
    # The county of the bill-to address. The value should be 32 characters or less.
    string county?;
    # The state of the bill-to address. The value must be a valid state or province name or 2-character abbreviation.
    # 
    # **Note:** You must specify this field if you are using Zuora Tax for this account and the country is `USA` or `Canada`.
    string state?;
    # If using Zuora Tax, a region string as optionally defined in your tax rules.
    string taxRegion?;
    # The zip code of the bill-to address. The value should be 20 characters or less.
    string zipCode?;
};

public type GETCreditMemoPartsCollectionType record {
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Container for credit memo parts.
    GETCreditMemoPartTypewithSuccess[] parts?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type OrderDeltaMetric record {
    # The charge number for the associated Rate Plan Charge. This field can be null if the metric is generated for an Order Line Item.
    string chargeNumber?;
    # ISO 3-letter currency code (uppercase). For example, USD.
    string currency?;
    # The end date for the order delta metric.
    string endDate?;
    # The gross amount for the metric. The is the amount excluding applied discount.
    decimal grossAmount?;
    # The net amount for the metric. The is the amount with discounts applied
    decimal netAmount?;
    # The Id for the related Order Action. This field can be null if the metric is generated for an Order Line Item.
    string orderActionId?;
    # The sequence for the related Order Action. This field can be null if the metric is generated for an Order Line Item.
    string orderActionSequence?;
    # The type for the related Order Action. This field can be null if the metric is generated for an Order Line Item.
    string orderActionType?;
    # A sequential number auto-assigned for each of order line items in a order, used as an index, for example, "1".
    string orderLineItemNumber?;
    # The Id for the associated Product Rate Plan Charge. This field can be null if the Order Line Item is not associated with a Product Rate Plan Charge.
    string productRatePlanChargeId?;
    # The id for the associated Rate Plan Charge. This field can be null if the metric is generated for an Order Line Item.
    string ratePlanChargeId?;
    # The start date for the order delta metric.
    string startDate?;
    # The number of the subscription. This field can be null if the metric is generated for an Order Line Item.
    string subscriptionNumber?;
};

public type PaymentInvoiceApplicationApplyRequestType record {
    # The amount that is applied from the payment to the invoice.
    decimal amount;
    # The unique ID of the invoice that the payment is applied to.
    string invoiceId?;
    # The number of the invoice that the payment is applied to. For example, `INV00000001`. 
    # 
    # **Note:** When both the `invoiceNumber` and `invoiceId` fields are specified, the two fields must match with each other.
    string invoiceNumber?;
    # Container for invoice items. The maximum number of items is 1,000.
    # 
    # **Note:** This field is only available if you have the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/C_Invoice_Item_Settlement) feature enabled. Invoice Item Settlement must be used together with other Invoice Settlement features (Unapplied Payments, and Credit and Debit memos).  If you wish to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    PaymentInvoiceApplicationItemApplyRequestType[] items?;
};

# Pricing information about a recurring charge that uses the Delivery Pricing charge model. In this charge model, the charge has a fixed price. This field is only available if you have the Delivery Pricing charge model enabled.
public type RecurringDeliveryPricingOverride record {
    *PriceChangeParams;
    DeliveryScheduleParams deliverySchedule?;
    # Price of the charge in each recurring period.
    decimal listPrice?;
    # List of interval pricing in the charge. 
    # The `priceIntervals` field is not supported for a charge subscribed via a RatePlan, you can only override the `priceIntervals` field for a charge subscribed via an offer.
    # 
    # **Note**: You must enable the Offers feature to access this field. The Offers feature is in the Early Adopter phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at <a href="https://support.zuora.com/hc/en-us" target="_blank">Zuora Global Support</a>.
    PriceIntervalWithPrice[] priceIntervals?;
};

# Container for Account fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type AccountObjectNSFields record {
    # Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Class__NS?;
    # Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    "Company"|"Individual" CustomerType__NS?;
    # Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Department__NS?;
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Location__NS?;
    # Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Subsidiary__NS?;
    # Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
    # Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    "Yes"|"No" SynctoNetSuite__NS?;
};

public type GETSubscriptionStatusHistoryType record {
    # The effective end date of the status history.
    string endDate?;
    # The effective start date of the status history.
    string startDate?;
    # The status of the subscription.
    # 
    # Values are:
    # 
    # * `Pending Activation`
    # * `Pending Acceptance`
    # * `Active`
    # * `Cancelled`
    # * `Suspended`
    # * `OutOfTerm`
    string status?;
};

public type GETTierType record {
    # Decimal defining end of tier range.
    decimal endingUnit?;
    # The decimal value of the tiered charge model. If the charge model is not a tiered type then this price field will be null and the `price` field directly under the `productRatePlanCharges` applies.
    decimal price?;
    # Tier price format. Allowed values: `flat fee`, `per unit`.
    string priceFormat?;
    # Decimal defining start of tier range.
    decimal startingUnit?;
    # Unique number of the tier.
    int tier?;
};

# Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
public type OrderActionRatePlanUsageVolumePricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    # Specifies how Zuora groups usage records when rating usage. See [Usage Rating by Group](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Usage/Usage_Rating_by_Group) for more information.
    #   * ByBillingPeriod (default): The rating is based on all the usages in a billing period.
    #   * ByUsageStartDate: The rating is based on all the usages on the same usage start date.
    #   * ByUsageRecord: The rating is based on each usage record.
    #   * ByUsageUpload: The rating is based on all the usages in a uploaded usage file (.xls or .csv). If you import a mass usage in a single upload, which contains multiple usage files in .xls or .csv format, usage records are grouped for each usage file.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload" ratingGroup?;
    # List of variable pricing tiers in the charge.
    OrderActionRatePlanChargeTier[] tiers?;
};

public type ExpandedDebitMemoItem record {|
    # The unique identifier of the debit memo item.
    string id?;
    # The unique identifier of the user who created the debit memo item.
    string createdById?;
    # The date and time when the debit memo item was created.
    string createdDate?;
    # The unique identifier of the user who last updated the debit memo item.
    string updatedById?;
    # The date and time when the debit memo item was last updated.
    string updatedDate?;
    # The amount of the debit memo item. For tax-inclusive debit memo items, the amount indicates the debit memo item amount including tax. For tax-exclusive debit memo items, the amount indicates the debit memo item amount excluding tax.
    decimal amount?;
    # The debit memo item amount excluding tax.
    decimal amountWithoutTax?;
    # The parent debit memo item that this debit memo items is applied to if this item is discount.
    string appliedToItemId?;
    decimal appliedToOthersAmount?;
    decimal beAppliedByOthersAmount?;
    # The date when the debit memo item is charged, in `yyyy-mm-dd hh:mm:ss`
    # format.
    string chargeDate?;
    string creditMemoItemId?;
    # The flag to exclude the debit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The description of the debit memo item.
    string description?;
    # The ID of the sold-to contact associated with the debit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactId?;
    # The ID of the sold-to contact snapshot associated with the debit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactSnapshotId?;
    # The type of the charge for the debit memo item. 
    "Charge"|"Discount" processingType?;
    # The number of units for the debit memo item.
    decimal quantity?;
    # The end date of the service period associated with this debit memo item. Service ends one second before the date specified in this field.
    string serviceEndDate?;
    # The start date of the service period associated with this debit memo item. If the associated charge is a one-time fee, this date is the date of that charge.
    string serviceStartDate?;
    # The SKU for the product associated with the debit memo item.
    string sku?;
    # The type of the source item.
    "CreditMemoItem"|"SubscriptionComponent"|"InvoiceDetail"|"ProductRatePlanCharge" sourceItemType?;
    # The name of the charge associated with the debit memo item.
    string chargeName?;
    # The number of the charge associated with the debit memo item.
    string chargeNumber?;
    # The amount of tax on this debit memo.
    decimal taxAmount?;
    # Name of the tax code identifies which tax rules and tax rates to apply to a specific debit memo item.
    string taxCodeName?;
    # The calculated tax amount excluded due to the exemption.
    decimal taxExemptAmount?;
    # The tax mode of the debit memo item, indicating whether the amount of the debit memo item includes tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # The units to measure usage.
    string unitOfMeasure?;
    # The per-unit price of the debit memo item.
    decimal unitPrice?;
    # The ID of the subscription associated with the debit memo item.
    string subscriptionId?;
    # The number of the subscription associated with the debit memo item.
    string subscriptionNumber?;
    # The ID of the invoice item associated with the debit memo item.
    string invoiceItemId?;
    # The ID of the product rate plan charge based on which the debit memo item is created.
    string productRatePlanChargeId?;
    # The ID of the rate plan charge associated with the debit memo item.
    string ratePlanChargeId?;
    # The ID of the debit memo to which this debit memo item belongs.
    string debitMemoId?;
    # The balance of the debit memo item.
    decimal balance?;
    # The Recognized Revenue accounting code for the credit memo item.
    string recognizedRevenueAccountingCodeId?;
    # The Account Receivable accounting code for the credit memo item.
    string accountReceivableAccountingCodeId?;
    # The Deferred Revenue accounting code for the credit memo item.
    string deferredRevenueAccountingCodeId?;
    # The ID of the journal entry that corresponds to this debit memo item.
    string journalEntryId?;
    # The ID of the sold-to contact snapshot associated with the credit memo.
    string soldToContactSnapshotId?;
    # The ID of the bill-to contact snapshot associated with the credit memo.
    string billToContactSnapshotId?;
    NestedSubscriptionOnExpand subscription?;
    NestedRatePlanChargeOnExpand ratePlanCharge?;
|};

# 
public type QueryAccountsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedAccount[] data?;
|};

# Container for the finance information related to the refund.
public type GETRefundCreditMemoType_financeInformation record {
    # The accounting code that maps to a bank account in your accounting system.
    string bankAccountAccountingCode?;
    # The type of the accounting code that maps to a bank account in your accounting system.
    string bankAccountAccountingCodeType?;
    # Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The accounting code for the unapplied payment.
    string unappliedPaymentAccountingCode?;
    # The type of the accounting code for the unapplied payment.
    string unappliedPaymentAccountingCodeType?;
};

public type RecurringVolumePricingUpdate record {
    *PriceChangeParams;
    @constraint:Number {minValue: 0}
    decimal quantity?;
    ChargeTier[] tiers?;
};

# The definitions of all the fields in the custom object definition
public type CustomObjectAllFieldsDefinition record {
    # The `CreatedById` field definition
    CustomObjectAllFieldsDefinition_CreatedById CreatedById?;
    # The `CreatedDate` field definition
    CustomObjectAllFieldsDefinition_CreatedDate CreatedDate?;
    # The `Id` field definition
    CustomObjectAllFieldsDefinition_Id Id?;
    # The `UpdatedById` field definition
    CustomObjectAllFieldsDefinition_UpdatedById UpdatedById?;
    # The `UpdatedDate` field definition
    CustomObjectAllFieldsDefinition_UpdatedDate UpdatedDate?;
    *CustomObjectCustomFieldsDefinition;
};

public type DeleteBatchQueryJobResponse record {
    # A JSON array object that contains a list of batch objects.
    BatchQueries[] batches?;
    # The format of the query. The default value is `csv`.
    "csv"|"zip"|"gzip" format?;
    # The job ID created for the AQuA API request. The job ID can be used for querying for the query status. 
    # 
    # The ID exists only if the JSON request can be parsed and validated successfully. Otherwise, the job ID is null.
    string id?;
    # The name of the job. 32 character limit.
    string name?;
    # Indicates the source this aggregate query runs against:
    # 
    # * `LIVE` represents the live transactional databases at Zuora (Data Query Live).
    # 
    # * `WAREHOUSE` represents Zuora Warehouse, which has better performance and fewer limitations than the live transactional database. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Zuora_Warehouse/A_Zuora_Warehouse_overview" target="_blank">Zuora Warehouse</a>.
    string sourceData?;
    # The status of the AQuA job:
    # - submitted: The AQuA job was submitted to the query executor for processing.
    # - executing: The AQuA job is being processed.
    # - completed: The AQuA job was successfully executed.
    # - error: The AQuA job was not processed because of validation errors.
    # - aborted: The AQuA job execution failed because one or more queries of this job failed.
    # - cancelled: The AQuA job was cancelled.
    "submitted"|"executing"|"completed"|"error"|"aborted"|"cancelled" status?;
    # The API version you want to use. 
    # 
    # The supported versions are as follows:
    #   - `1.1`. It supports both modes
    #   - `1.0`. Default. It supports stateless modes only.
    # 
    # See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/BA_Stateless_and_Stateful_Modes" target="_blank">Stateless and stateful modes</a> for more information.
    float version?;
};

# The length of the period for the current subscription term.
public type InitialTerm record {
    # Specify only when the termType is 'TERMED'.
    @constraint:Int {minValue: 0}
    int period?;
    # Specify only when the termType is 'TERMED'.
    "Month"|"Year"|"Day"|"Week" periodType?;
    # The start date of the current term.
    string startDate?;
    "TERMED"|"EVERGREEN" termType;
};

public type Error401 record {
    int code?;
    string message?;
};

# Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
public type RecurringFlatFeePricingOverride record {
    *PriceChangeParams;
    # Price of the charge in each recurring period.
    decimal listPrice?;
    # Specifies the duration of each recurring period.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.
    decimal originalListPrice?;
    # List of interval pricing in the charge. 
    # The `priceIntervals` field is not supported for a charge subscribed via a RatePlan, you can only override the `priceIntervals` field for a charge subscribed via an offer. 
    # 
    # **Note**: You must enable the Offers feature to access this field. The Offers feature is in the Early Adopter phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at <a href="https://support.zuora.com/hc/en-us" target="_blank">Zuora Global Support</a>.
    PriceIntervalWithPrice[] priceIntervals?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.
    # 
    # **Note**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.              
    @constraint:Int {minValue: 1, maxValue: 200}
    int:Signed32 specificListPriceBase?;
};

public type InvoiceKey_files_body record {
    # The PDF file to upload for the invoice.
    record {byte[] fileContent; string fileName;} file?;
};

# Container for custom fields of a Payment Schedule Item object.
public type PaymentScheduleItemCustomFields record {
};

public type PUTPaymentMethodRequest record {
    # The account holder information. This field is not supported in updating Credit Card Reference Transaction payment methods.
    PUTPMAccountHolderInfo accountHolderInfo?;
    # The ID of the customer account associated with this payment method, such as `2x92c0f859b0480f0159d3a4a6ee5bb6`.
    # 
    # **Note:** You can use this field to associate an orphan payment method with a customer account. If a payment method is already associated with a customer account, you cannot change the associated payment method through this operation. You cannot remove the previous account ID and leave this field empty, either.
    string accountKey?;
    # Specifies the ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method. 
    # 
    # This field is not supported in updating Credit Card Reference Transaction payment methods.
    string authGateway?;
    # The currency used for payment method authorization.
    string currencyCode?;
    # The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
    # 
    # This field is not supported in updating Credit Card Reference Transaction payment methods.
    PUTPaymentMethodRequest_gatewayOptions gatewayOptions?;
    # The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways. 
    # 
    # If the IP address length is beyond 45 characters, a validation error occurs.
    # 
    # For validating SEPA payment methods on Stripe v2, this field is required.
    string ipAddress?;
    # The mandate information for the Credit Card, Credit Card Reference Transaction, ACH, or Bank Transfer payment method.
    PUTPaymentMethodRequest_mandateInfo mandateInfo?;
    # The container for payment method processing options.
    PUTPaymentMethodRequest_processingOptions processingOptions?;
    *PUTPMCreditCardInfo;
    *PUTPaymentMethodObjectCustomFields;
};

public type RefundPartResponseType record {
    # The amount of the refund part.
    decimal amount?;
    # The ID of the Zuora user who created the refund part.
    string createdById?;
    # The date and time when the refund part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the credit memo associated with the refund part.
    string creditMemoId?;
    # The ID of the refund part.
    string id?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the payment associated with the refund part.
    string paymentId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The ID of the Zuora user who last updated the refund part.
    string updatedById?;
    # The date and time when the refund part was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

public type ProxyBadRequestResponse_Errors record {
    # 
    string Code?;
    # 
    string Message?;
};

public type GetBillRunResponseType record {
    # Whether to automatically send emails after Auto-Post is complete.
    boolean autoEmail?;
    # Whether to automatically post the bill run after the bill run is created.
    boolean autoPost?;
    # Whether to automatically renew auto-renew subscriptions that are up for renewal.
    boolean autoRenewal?;
    # The batch of accounts for this bill run, this field can not exist with `billRunFilters` together.
    # 
    # **Values:** `AllBatches` or an array of `Batch`*n* where *n* is a number between 1 and 50, for example, `Batch7`.
    string[] batches?;
    # The day of the bill cycle, this field is only valid when `batches` is specified.
    # 
    # **Values:** 
    # - `AllBillCycleDays` or one of numbers 1 - 31 for an ad-hoc bill run
    # - `AllBillCycleDays`, one of numbers 1 - 31, or `AsRunDay` for a scheduled bill run
    string billCycleDay?;
    # The target account or subscriptions for this bill run.
    BillRunFilterResponseType[] billRunFilters?;
    # The number of the bill run.
    string billRunNumber?;
    # The types of the charges to be excluded from the generation of billing documents.
    ("OneTime"|"Recurring"|"Usage")[] chargeTypeToExclude?;
    # The ID of the user who created the bill run.
    string createdById?;
    # The date and time when the bill run was created.
    string createdDate?;
    # The unqie ID of the bill run.
    string id?;
    # The invoice date for this bill run, only valid for ad-hoc bill runs.
    string invoiceDate?;
    # The offset compared to bill run execution date, only valid for scheduled bill runs.
    int invoiceDateOffset?;
    # The name of the bill run.
    string name?;
    # Whether to suppress emails for invoices with zero total amount generated in this bill run after the bill run is complete. 
    boolean noEmailForZeroAmountInvoice?;
    # The organization(s) that the run is created for. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    GETProductType_organizationLabels[] organizationLabels?;
    BillRunScheduleResponseType schedule?;
    # The scheduled execution time for a bill run.
    string scheduledExecutionTime?;
    # The status of the bill run.
    "Pending"|"Processing"|"Completed"|"Error"|"Canceled"|"Posted"|"PostInProgress"|"CancelInProgress"|"RemoveInProgress"|"Paused" status?;
    # The target date for this bill run, only valid for ad-hoc bill runs.
    string targetDate?;
    # The offset compared to bill run execution date, only valid for scheduled bill runs.
    int targetDateOffset?;
    # The ID of the user who last updated the bill run.
    string updatedById?;
    # The date and time when the bill run was last updated.
    string updatedDate?;
};

# Container for custom fields of a Credit Memo Item object.
public type CreditMemoItemObjectCustomFields record {
};

public type NestedPaymentOnExpand record {|
    # The unique identifier of the payment.
    string id?;
    # The unique identifier of the user who created the payment.
    string createdById?;
    # The time that the payment gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the payment.
    string updatedById?;
    # The time that the payment gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # The ID of the customer account that the payment is for.
    string accountId?;
    # The accounting code for the charge. Accounting codes group
    # transactions that contain similar accounting attributes.
    string accountingCode?;
    # The total amount of the payment.
    decimal amount?;
    # The applied amount of the payment.
    decimal appliedAmount?;
    # The authorization transaction ID from the payment gateway.
    string authTransactionId?;
    # The amount of the payment to apply to a credit balance. 
    decimal appliedCreditBalanceAmount?;
    # The first six or eight digits of the credit card or debit card used for the payment, when applicable. 
    # Use this field to <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_Operations/DF_Reconciling_Payments_with_Merchant_Accounts" target="_blank">reconcile payments between the gateway and merchant banks</a>.
    string bankIdentificationNumber?;
    # The date when the payment was canceled.
    string cancelledOn?;
    # Comments about the payment.
    string comment?;
    # When Standalone Payment is not enabled, the `currency` of the payment must be the same as the payment currency defined in the customer account settings through Zuora UI.
    # 
    # When Standalone Payment is enabled and `standalone` is `true`, the `currency` of the standalone payment can be different from the payment currency defined in the customer account settings. The amount will not be summed up to the account balance or key metrics regardless of currency.
    string currency?;
    # The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.
    string effectiveDate?;
    # A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created.
    string gatewayOrderId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the payment. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the payment. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the payment in the gateway; use for reconciliation. 
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    string gatewayTransactionState?;
    # Indicates whether the payment is a standalone payment. A standalone
    # payment is a payment that is not associated with any invoice or
    # subscription.
    boolean isStandalone?;
    # The date and time when a charge was marked and waiting for batch
    # submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # The unique ID of the payment method that the customer used to make the payment.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
    string paymentMethodSnapshotId?;
    # ID of the paymentOption object, which describe the transactional level rules for processing payments. 
    string paymentOptionId?;
    # The unique identification number of a payment. 
    string paymentNumber?;
    # The payout ID of the payment from the gateway side.
    string payoutId?;
    # Indicates whether the payment is used as a reserved payment. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.
    boolean prepayment?;
    # The ID of a referenced payment. 
    string referencedPaymentID?;
    # The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
    string referenceId?;
    # The amount of the payment that is refunded.
    decimal refundAmount?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondPaymentReferenceId?;
    # The date and time when the payment was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptorPhone?;
    # Indicates how the payment was created, whether through API, manually, import, or payment run.
    "PaymentRun"|"Import"|"Manually"|"API" 'source?;
    # Name of the source. It can be a payment run number or a file name.
    string sourceName?;
    # The status of the payment.
    "Draft"|"Processing"|"Processed"|"Error"|"Canceled"|"Posted" status?;
    # The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # The type of the payment.
    "External"|"Electronic" 'type?;
    # Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # Payment transaction source used to differentiate the transaction source in Stored Credential Transaction framework.
    #   - `C_Unscheduled`: Cardholder-initiated transaction (CIT) that does not occur on scheduled or regularly occurring dates.
    #   - `M_Recurring`: Merchant-initiated transaction (MIT) that occurs at regular intervals.
    #   - `M_Unscheduled`: Merchant-initiated transaction (MIT) that does not occur on scheduled or regularly occurring dates.
    #   - `M_MOTO`: Mail Order Telephone Order (MOTO) payment transaction. This option is only available for credit card payments on Stripe v2. See [Overview of Stripe payment gateway integration](https://knowledgecenter.zuora.com/Zuora_Collect/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration) for more information.
    "C_Unscheduled"|"M_Recurring"|"M_Unscheduled"|"M_MOTO" transactionSource?;
    # The unapplied amount of the payment.
    decimal unappliedAmount?;
    # The date and time when the last email was sent to the customer for the payment.
    string lastEmailDateTime?;
    # Name of the gateway instance that processes the payment. 
    string gateway?;
    # EXPANDABLE.
    # The account associated with the payment.
    record {} account?;
    # EXPANDABLE.
    # The payment method used for this payment.
    record {} paymentMethod?;
    # EXPANDABLE. 
    # The payment applications associated with the payment.
    record {}[] paymentApplications?;
|};

public type ZObject record {
};

public type GetOrderResponse record {
    *CommonResponse;
    # Represents the order information that will be returned in the GET call.
    Order 'order?;
};

# Container for the finance information related to the debit memo item.
public type PUTDebitMemoItemType_financeInformation record {
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    @constraint:String {maxLength: 100}
    string deferredRevenueAccountingCode?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccountingCode?;
    # The name of the revenue recognition rule governing the revenue schedule.
    @constraint:String {maxLength: 100}
    string revenueRecognitionRuleName?;
};

public type CreatePaymentMethodAutogiro record {
    # The container for the account holder information. The nested `accountHolderName` field is required.
    CreatePaymentMethodBetalingsservice_accountHolderInfo accountHolderInfo?;
    # The number of the customer's bank account.
    string accountNumber?;
    # The masked account number such as ****1234.
    string accountMaskNumber?;
    # The branch code of the bank used for direct debit.
    string branchCode?;
    # The identity number used for Bank Transfer.
    string identityNumber?;
    # The container of the mandate information for the payment method.
    CreatePaymentMethodCreditCard_mandateInfo mandateInfo?;
    # The container for payment method processing options.
    CreatePaymentMethodCreditCard_processingOptions processingOptions?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type DeleteAccountResponseType record {
    # The ID of the deleted account.
    string id?;
    # The ID of the job that handles the account deletion operation. 
    # 
    # You can specify the value of this field as the value of the `jobId` path parameter in the [Retrieve an operation job](https://developer.zuora.com/api-references/api/operation/GET_OperationJob/) API operation to query job information.
    string jobId?;
    # The status of the account deletion operation. 
    "Pending" jobStatus?;
    DeleteAccountResponseType_reasons[] reasons?;
    # Whether the call succeeded.
    boolean success?;
};

public type POSTAdjustmentResponseType record {
    # The system generated delivery adjustment ID.
    string adjustmentId?;
    # The system generated delivery adjustment number.
    string adjustmentNumber?;
    # The amount of the delivery adjustment.
    string amount?;
    # The billing date is same as the delivery date of the delivery adjustment, in `yyyy-mm-dd` format.
    string billingDate?;
    # The charge number in the subscription for which the delivery adjustment is created.
    string chargeNumber?;
    # The Credit Memo generated for the delivery adjustment.
    string creditMemoNumber?;
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string deferredRevenueAccountingCode?;
    # The delivery adjustment date, in `yyyy-mm-dd` format.
    string deliveryDate?;
    # The delivery adjustment day of the week.
    string deliveryDay?;
    # The eligible flag is set as true for a successfully created delivery adjustment.
    boolean eligible?;
    # The reason for the delivery adjustment.
    string reason?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string recognizedRevenueAccountingCode?;
    # The name of the revenue recognition rule governing the revenue schedule.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string revenueRecognitionRuleName?;
    # The status of the delivery adjustment will be `Billed` or `Cancelled`.
    string status?;
    # The subscription number for which the delivery adjustment is created.
    string subscriptionNumber?;
};

public type PUTSubscriptionPatchRequestType_charges record {
    # Use either this field or the `chargeNumber` field to specify the charge for which you will be updating the custom fields. By using this field you actually specify a specific charge segment of a charge. See <a href="https://knowledgecenter.zuora.com/Central_Platform/API/G_SOAP_API/E1_SOAP_API_Object_Reference/RatePlanCharge#Segmented_rate_plan_charges" target="_blank">Segmented rate plan charges</a> for more information about charge segments.
    string chargeId?;
    # Use either this field or the `chargeId` field to specify the charge for which you will be updating the custom fields. By using this field you actually specify the last charge segment of a charge. See <a href="https://knowledgecenter.zuora.com/Central_Platform/API/G_SOAP_API/E1_SOAP_API_Object_Reference/RatePlanCharge#Segmented_rate_plan_charges" target="_blank">Segmented rate plan charges</a> for more information about charge segments.
    string chargeNumber?;
    # Container for custom fields of a Rate Plan Charge object.
    RatePlanChargeObjectCustomFields customFields?;
};

public type OrderLineItem record {
    # The calculated gross amount for the Order Line Item.
    decimal amount?;
    # The calculated gross amount for an order line item excluding tax. If the tax mode is tax exclusive, the value of this field equals that of the `amount` field.
    # 
    # If the tax mode of an order line item is not set, the system treats it as tax exclusive by default. The value of the `amountWithoutTax` field equals that of the `amount` field.
    # 
    # If you create an order line item from the product catalog, the tax mode and tax code of the product rate plan charge are used for the order line item by default. You can still overwrite this default set-up by setting the tax mode and tax code of the order line item.
    decimal amountWithoutTax?;
    # The sytem generated Id for the Order Line Item.
    string id?;
    # The number of the invoice group associated with the order line item.
    # 
    # After enabling the Invoice Grouping feature, you can specify invoice group numbers to bill subscriptions and order line items based on specific criteria. For the same account, Zuora generates separate invoices for subscriptions and order line items, each identified by unique invoice group numbers. For more information, see [Invoice Grouping](https://knowledgecenter.zuora.com/Billing/Subscriptions/Invoice_Grouping).
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request during subscription creation, the value of this field is automatically set to `null` in the response body.
    string? invoiceGroupNumber?;
    # The quantity that has been fulfilled by fulfillments for the order line item. This field will be updated automatically when related fulfillments become 'SentToBilling' or 'Complete' state.
    decimal quantityFulfilled?;
    # The quantity that needs to be fulfilled by fulfillments for the order line item. This field will be updated automatically when related fulfillments become 'SentToBilling' or 'Complete' state.
    decimal quantityPendingFulfillment?;
    *OrderLineItemCommonRetrieveOrderLineItem;
    # Container for the fulfillments attached to an order line item.
    FulfillmentGet[] fulfillments?;
};

public type FulfillmentPost record {
    # The reference id of the related Order Line Item.
    string orderLineItemId?;
    *FulfillmentCommon;
    FulfillmentItemPostFromFulfillmentPost[] fulfillmentItems?;
};

public type PostFulfillmentItemsRequestType record {
    FulfillmentItemPost[] fulfillmentItems?;
};

public type POSTCreateOpenPaymentMethodTypeRequest record {
    # If this custom payment method type is specific to one entity only, provide the entity ID in this field in UUID format, such as `123e4567-e89b-12d3-a456-426614174000`. If no entity UUID is provided, the custom payment method type is available to the global entity and all the sub entities in the tenant.
    # 
    # You can get the entity ID through the [Multi-entity: List entities](https://developer.zuora.com/api-references/older-api/operation/GET_Entities/) API operation or the **Manage Entity Profile** administration setting in the UI. To convert the format of the entity ID to UUID, separate the entity ID string in five groups with hyphens, in the form `<8-characters>-<4-characters>-<4-characters>-<4-characters>-<12-characters>` for a total of 36 characters.
    # 
    # Note: After the custom payment method type is created, you can only update this field to be empty.
    string entityId?;
    # An array containing field metadata of the custom payment method type.
    # 
    # Notes:
    #   - All the following nested metadata must be provided in the request to define a field. 
    #   - At least one field must be defined in the fields array for a custom payment method type. 
    #   - Up to 20 fields can be defined in the fields array for a custom payment method type.
    OpenPaymentMethodTypeRequestFields[] fields;
    # A string to identify the custom payment method type in the API name of the payment method type.
    # 
    # This field must be alphanumeric, starting with a capital letter, excluding JSON preserved characters such as  * \ ’ ”. Additionally, '_' or '-' is not allowed.
    # 
    # This field must be unique in a tenant.
    # 
    # This field is used along with the `tenantId` field by the system to construct and generate the API name of the custom payment method type in the following way:
    # 
    # `<internalName>__c_<tenantId>`
    # 
    # For example, if `internalName` is `AmazonPay`, and `tenantId` is `12368`, the API name of the custom payment method type will be `AmazonPay__c_12368`.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    @constraint:String {maxLength: 19}
    string internalName;
    # The label that is used to refer to this type in the Zuora UI.
    # 
    # This value must be alphanumeric, excluding JSON preserved characters such as  * \ ’ ” 
    @constraint:String {maxLength: 40}
    string label;
    # The identification reference of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Payment Method Data Source Exports and Data Query.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    string methodReferenceIdField;
    # The identification reference indicating the subtype of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    string subTypeField?;
    # Zuora tenant ID. If multi-entity is enabled in your tenant, this is the ID of the parent tenant of all the sub entities.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    string tenantId;
    # The identification reference of the user or customer account.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    string userReferenceIdField?;
};

# Error information. Only applicable if the payment method was not created.
public type POSTPaymentMethodResponse_reasons record {
    # Error code.
    string code?;
    # Error message.
    string message?;
};

public type GETProductRatePlanWithExternalIdResponse record {
    # The combination of `externallyManagedPlanId` and `externalIdSourceSystem` is the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string ExternalIdSourceSystem?;
    # The short description of the product rate plan.
    string description?;
    # The end date of the product rate plan.
    string effectiveEndDate?;
    # The start date of the product rate plan.
    string effectiveStartDate?;
    # The unique identifier for the product rate plan in a third-party store. This field is used to represent a rate plan created through third-party stores.
    string[] externallyManagedPlanIds?;
    # The grade of the product rate plan.
    # 
    # **Note**: This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).
    decimal grade?;
    # The unique product rate plan ID.
    string id?;
    # The name of the product rate plan.
    string name?;
    # The organization(s) that the object belongs to. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.            
    GETProductType_organizationLabels[] organizationLabels?;
    # The natural key of the product rate plan.
    string productRatePlanNumber?;
    # The status of the product rate plan. 
    "Active"|"Expired"|"NotStarted" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# A task.
public type Task record {
    # The type of the task.
    "Approval"|"Attachment"|"Billing::BillRun"|"Billing::CurrencyConversion"|"Billing::CustomInvoice"|"Callout"|"Cancel"|"Create"|"CustomObject::Create"|"CustomObject::Delete"|"CustomObject::Query"|"CustomObject::Update"|"Data::BillingPreviewRun"|"Data::Link"|"Delay"|"Delete"|"Download::SFTP"|"Email"|"Export"|"File::CustomPDF::CustomDocument"|"If"|"InvoiceGenerate"|"Iterate"|"Logic::CSVTranslator"|"Logic::Case"|"Logic::CustomCode"|"Logic::JSONTransform"|"Logic::Lambda"|"Logic::ResponseFormatter"|"Logic::XMLTransform"|"NewProduct"|"Notifications::GoogleCloudPrint"|"Notifications::PhoneCall"|"Notifications::SMS"|"Payment::GatewayReconciliation"|"Payment::PaymentRun"|"Query"|"RemoveProduct"|"Reporting::ReportData"|"Reporting::RunReport"|"Resume"|"Suspend"|"UI::Page"|"UI::Stop"|"Update"|"Upload::FTP"|"Upload::SFTP"|"WriteOff" action_type?;
    # The type of API used.
    string call_type?;
    # the number of concurrent tasks that are allowed to run simultaneously
    int concurrent_limit?;
    # The data payload for the task.
    record {} data?;
    # If **Instance** is **true**, the end time of the task instance.
    string end_time?;
    # If **Instance** is **true** and **status** is **Error**, the error reason of the task instance failure.
    string 'error?;
    # If **Instance** is **true** and **status** is **Error**, the error class of the task instance failure.
    string error_class?;
    # If **Instance** is **true** and **status** is **Error**, the error details of the task instance failure.
    string error_details?;
    # The unique ID of the task.
    int id?;
    # Indicates whether this task belongs to an instance of a workflow.
    boolean instance?;
    # The name of the task.
    string name?;
    # The selected object for the task.
    string 'object?;
    # The id of the selected object of the task.
    string object_id?;
    # If **Instance** is **true**, the ID of the original task in the original workflow.
    int original_task_id?;
    # If **Instance** is **true**, the ID of the original workflow.
    int original_workflow_id?;
    # The configuration of the task.
    record {} parameters?;
    # If **Instance** is **true**, the start time of the task instance.
    string start_time?;
    # If **Instance** is **true**, the status of the task instance.
    "Queued"|"Processing"|"Pending"|"Success"|"Stopped"|"Error" status?;
    # The array of filter tags.
    string[] tags?;
    # the id of this task's parent task. Will be null if this is the first task of the workflow
    int task_id?;
    # The ID of the workflow that the task belongs to.
    int workflow_id?;
};

public type GETRefundPaymentType record {
    # The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.
    string accountId?;
    # The total amount of the refund.
    decimal amount?;
    # The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format. 
    string cancelledOn?;
    # Comments about the refund.
    string comment?;
    # The ID of the Zuora user who created the refund.
    string createdById?;
    # The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10. 
    string createdDate?;
    # The ID of the credit memo associated with the refund.
    string creditMemoId?;
    # Container for the finance information related to the refund.
    GETRefundCreditMemoType_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the refund.
    string gatewayId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the refund. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the refund. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the refund in the gateway.
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    # The ID of the created refund.
    string id?;
    # The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # How an external refund was issued to a customer.
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The unique identification number of the refund.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The natural key for the payment gateway.
    string paymentGatewayNumber?;
    # The ID of the payment that is refunded.
    string paymentId?;
    # The unique ID of the payment method that the customer used to make the refund. 
    string paymentMethodId?;
    # The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.
    string paymentMethodSnapshotId?;
    # The payout ID of the refund from the gateway side.
    string payoutId?;
    # A code identifying the reason for the transaction. 
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format.
    string refundDate?;
    # The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
    string refundTransactionTime?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondRefundReferenceId?;
    # The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptorPhone?;
    # The status of the refund.
    "Processed"|"Canceled"|"Error"|"Processing" status?;
    # The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The type of the refund.
    "External"|"Electronic" 'type?;
    # The ID of the the Zuora user who last updated the refund.
    string updatedById?;
    # The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *RefundObjectNSFields;
    *RefundObjectCustomFields;
};

public type EventType record {
    # The description of the event type.
    @constraint:String {maxLength: 1000}
    string description?;
    # The display name for the event type.
    @constraint:String {maxLength: 500, minLength: 1}
    string displayName;
    # The name of the event. Should be unique, contain no space, and be in the pattern: ^[A-Za-z]{1,}[\\w\\-]*$
    @constraint:String {maxLength: 200, minLength: 1}
    string name;
};

public type GETBookingDateJobResponse record {
    # Job ID
    string id?;
    # The created-on date in the `int64` format
    int createdOn?;
    # The created-on date in the `datetime` format
    string createdOnReadable?;
    # The updated-on date in the `int64` format
    int updatedOn?;
    # The updated-on date in the `datetime` format
    string updatedOnReadable?;
    # The user who performs the booking date backfill job
    string updatedByUsername?;
    # The status of the booking date backfill job
    "ACCEPTED"|"PROCESSING"|"COMPLETED"|"FAILED"|"STOPPED" status?;
    # The batch count sent for execution
    int:Signed32 batchSentCount?;
    # The finished batch count
    int:Signed32 batchFinishedCount?;
    # The failed record count
    int:Signed32 errorCount?;
    # The progress of the booking date backfill job
    string progress?;
};

# Container for cardholder information. The nested `cardHolderName` field is required.
public type CreatePaymentMethodCardholderInfo record {
    # First address line, 255 characters or less.
    string addressLine1?;
    # Second address line, 255 characters or less.
    string addressLine2?;
    # The card holder's full name as it appears on the card, e.g., "John J Smith", 50 characters or less.
    string cardHolderName;
    # City, 40 characters or less.
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    string city?;
    # Country, must be a valid country name or abbreviation.
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    string country?;
    # Card holder's email address, 80 characters or less.
    string email?;
    # Phone number, 40 characters or less.
    string phone?;
    # State; must be a valid state name or 2-character abbreviation.
    string state?;
    # Zip code, 20 characters or less.
    string zipCode?;
};

public type ExpandedRefundApplicationItem record {|
    # The unique identifier of the refund application item.
    string id?;
    # The unique identifier of the user who created the refund application item.
    string createdById?;
    # The date and time when the refund application item was created.
    string createdDate?;
    # The unique identifier of the user who last updated the refund application item.
    string updatedById?;
    # The date and time when the refund application item was last updated.
    string updatedDate?;
    # The amount of the refund application item.
    decimal amount?;
    # The date when the refund application item becomes effective.
    string effectiveDate?;
    # The ID of the application group to which this refund application belongs.
    string applicationGroupId?;
    # The ID of the refund application to which this refund application item belongs.
    string refundApplicationId?;
    # The Account Receivable accounting code of a standalone charge.
    string accountReceivableAccountingCodeId?;
    # The accounting code that maps to an on account in your accounting system.
    string onAccountAccountingCodeId?;
    # The accounting code for the unapplied payment.
    string unappliedPaymentAccountingCodeId?;
    # The accounting code for cash payments.
    string cashAccountingCodeId?;
    # The ID of the journal entry that corresponds to this transaction.
    string journalEntryId?;
    # The unique identifier of the credit taxation item to which the refund application item is applied.
    string creditTaxationItemId?;
    # The unique identifier of the credit memo item to which the refund application item is applied.
    string creditMemoItemId?;
    NestedRefundApplicationOnExpand refundApplication?;
|};

# Container for custom fields of a Payment object.
public type PaymentObjectCustomFields record {
};

# Container for the finance information related to the refund.
public type PostRefundType_financeInformation record {
    # The accounting code that maps to a bank account in your accounting system.
    @constraint:String {maxLength: 100}
    string bankAccountAccountingCode?;
    # Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The accounting code for the unapplied payment.
    @constraint:String {maxLength: 100}
    string unappliedPaymentAccountingCode?;
};

public type GETProductChargeDefinitionPricing record {
    # The currency for the price.
    string currency?;
    # The specific amount for a fixed discount. The field is applicable only for charges based on the Discount-Fixed Amount charge model.
    decimal discountAmount?;
    # The percentage of discount for a percentage discount. The field is applicable only for charges based on the Discount-Percentage charge model.
    decimal discountPercentage?;
    # The number of units included in this price item. 
    # 
    # This field is only applicable for charges based on the Overage Pricing charge model.
    decimal includedUnits?;
    # The overage price of the price item. 
    # 
    # This field is only applicable for charges based on the Overage Pricing or Tiered with Overage Pricing charge model.
    decimal overagePrice?;
    # The price of this item. 
    # 
    # This field is only applicable for charges based on the following charge models:
    #   - Flat Fee
    #   - Per Unit
    #   - Delivery Pricing
    decimal price?;
    # Container for the tiers of the price item. 
    # 
    # This field is only applicable for charges based on the following charge models:
    #   - Tiered Pricing
    #   - Volume Pricing
    #   - Tiered with Overage Pricing
    GETChargeDefinitionPricingTier[] tiers?;
};

# Specifies contraints to apply to custom object records.
public type CustomObjectDefinition_schema_recordConstraints record {
    CustomObjectDefinition_schema_recordConstraints_create create?;
};

public type DataQueryErrorResponse record {
    # Error code.
    int code?;
    # Error message.
    string message?;
};

public type ChargeTier record {
    # Limit on the number of units for which the tier is effective.
    decimal endingUnit?;
    # Price or per-unit price of the tier, depending on the value of the `priceFormat` field.
    decimal price;
    # Specifies whether the tier has a fixed price or a per-unit price.
    "FlatFee"|"PerUnit" priceFormat;
    # Number of units at which the tier becomes effective.
    decimal startingUnit;
    # Index of the tier in the charge.
    @constraint:Int {minValue: 1}
    int tier;
};

public type FulfillmentItemPostFromFulfillmentPost FulfillmentItemCommon;

public type ExpandedBillingRun record {|
    # The unique identifier of the bill run.
    string id?;
    # The unique identifier of the user who created the bill run.
    string createdById?;
    # The date and time when the bill run was created.
    string createdDate?;
    # The unique identifier of the user who last updated the bill run.
    string updatedById?;
    # The date and time when the bill run was last updated.
    string updatedDate?;
    # The number of the bill run.
    string billingRunNumber?;
    # The type of the bill run. 
    # 
    # - You can use this field only if the Catch-Up Bill Run feature is
    # enabled. 
    # 
    # - You must specify this field to create a catch up bill run.
    "Regular"|"CatchUp" billingRunType?;
    # The end date and time when the bill run completes.
    string endDate?;
    # The error message generated by a failed billing run.
    string errorMessage?;
    # The date and time when the bill run was executed.
    string executedDate?;
    # The date that appears on the invoice being created, in the `yyyy-mm-dd` format. 
    # The value cannot fall in a closed accounting period.
    string invoiceDate?;
    # The name of the bill run.
    string name?;
    # The number of accounts included in this bill run processing.
    int numberOfAccounts?;
    # The number of invoices generated from this bill run.
    int numberOfInvoices?;
    # The number of credit memos generated from this bill run.
    int numberOfCreditMemos?;
    # The date when the bill run was posted.
    string postedDate?;
    # The start date and time of the bill run.
    string startDate?;
    # The status of the bill run.
    "Pending"|"Processing"|"Completed"|"Error"|"Canceled"|"Posted"|"PostInProgress"|"CancelInProgress"|"RemoveInProgress"|"Paused" status?;
    # The target date for this bill run, only valid for ad-hoc bill runs.
    string targetDate?;
    # The target type for this bill run.
    "SingleAccount"|"AllAccount" targetType?;
    # The total time in milliseconds for the bill run to complete.
    int totalTime?;
    # The unique identifier of the account included in the bill run.
    string accountId?;
    # The batch of accounts for this bill run, this field can not exist with
    # `billRunFilters` together.
    # 
    # **Values:** `AllBatches` or an array of `Batch`*n* where *n* is a
    # number between 1 and 50, for example, `Batch7`.
    string[] batches?;
    # The day of the bill cycle. This field is only valid when `batches` is
    # specified.
    # 
    # **Values:** 
    # 
    # - `AllBillCycleDays` or one of numbers 1 - 31 for an ad-hoc bill run
    # 
    # - `AllBillCycleDays`, one of numbers 1 - 31, or `AsRunDay` for a scheduled bill run
    "AllBillCycleDays"|"AsRunDay" billCycleDay?;
    # Whether to suppress emails for invoices with zero total amount
    # generated in this bill run after the bill run is complete. 
    boolean noEmailForZeroAmountInvoice?;
    # Whether to automatically send emails after Auto-Post is complete.
    boolean autoEmail?;
    # Whether to automatically post the bill run after the bill run is created.
    boolean autoPost?;
    # Whether to automatically renew auto-renew subscriptions that are up for renewal.
    boolean autoRenewal?;
    # Whether the invoices have been emailed after the bill run is complete.
    boolean invoicesEmailed?;
    # The date and time when the last email was sent.
    string lastEmailSentTime?;
    # The offset compared to bill run execution date, only valid for scheduled bill runs.
    int:Signed32 targetDateOffSet?;
    # The offset compared to bill run execution date, only valid for scheduled bill runs.
    int:Signed32 invoiceDateOffSet?;
    # The types of the charges to be excluded from the generation of billing
    # documents.
    "OneTime"|"Recurring"|"Usage" chargeTypeToExclude?;
    # The scheduled execution time for a bill run.
    string scheduledExecutionTime?;
    # The repeat type of the bill run.
    "None"|"Daily"|"Weekly"|"Monthly" repeatType?;
    # The start date of the scheduled bill run.
    string repeatFrom?;
    # The end date of of the scheduled bill run.
    string repeatTo?;
    # The scheduled run time (hour) of day.
    @constraint:Int {minValue: 0, maxValue: 23}
    int:Signed32 runTime?;
    # Timezone of the scheduled bill run.
    string timeZone?;
    # The repeat day in a month.
    string monthlyOnDay?;
    # The repeat day in a week.
    "Mon"|"Tue"|"Wed"|"Thu"|"Fri"|"Sat"|"Sun" weeklyOnDay?;
|};

public type UsagePerUnitPricingUpdate record {
    *PriceChangeParams;
    decimal listPrice?;
    # The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.
    decimal originalListPrice?;
};

public type GETPaymentMethodResponseBankTransferForAccount record {
    # The International Bank Account Number used to create the SEPA payment method. The value is masked.
    string IBAN?;
    # The number of the customer's bank account and it is masked.
    string accountNumber?;
    # The sort code or number that identifies the bank. This is also known as the sort code.         
    string bankCode?;
    # The type of the Bank Transfer payment method. For example, `SEPA`.
    string bankTransferType?;
    # The branch code of the bank used for Direct Debit.
    string branchCode?;
    # The BIC code used for SEPA. The value is masked.       
    string businessIdentificationCode?;
    # The identity number of the account holder or the cardholder.
    string identityNumber?;
};

# Pricing information about a discount charge.
public type OrderActionRatePlanDiscountPricingOverride record {
    # Specifies which type of charge the discount charge applies to.
    "ONETIME"|"RECURRING"|"USAGE"|"ONETIMERECURRING"|"ONETIMEUSAGE"|"RECURRINGUSAGE"|"ONETIMERECURRINGUSAGE" applyDiscountTo?;
    # Only applicable if the discount charge is a fixed-amount discount.
    decimal discountAmount?;
    # Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account" discountLevel?;
    # Only applicable if the discount charge is a percentage discount.
    decimal discountPercentage?;
    # Specifies how Zuora changes the price of the charge each time the subscription renews.
    "NoChange"|"UseLatestProductCatalogPricing" priceChangeOption?;
};

public type DebitMemoKey_files_body record {
    # The PDF file to upload for the debit memo.
    record {byte[] fileContent; string fileName;} file?;
};

public type GETRefundTypewithSuccess record {
    # The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment or credit memo.
    string accountId?;
    # The total amount of the refund.
    decimal amount?;
    # The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the refund.
    string comment?;
    # The ID of the Zuora user who created the refund.
    string createdById?;
    # The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the credit memo that is refunded.
    string creditMemoId?;
    # Container for the finance information related to the refund.
    GETRefundCreditMemoType_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the refund.
    string gatewayId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the refund. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the refund. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the refund in the gateway. 
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    # The ID of the refund.
    string id?;
    # The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # How an external refund was issued to a customer. 
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The unique identification number of the refund.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the payment that is refunded.
    string paymentId?;
    # The unique ID of the payment method that the customer used to make the refund.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.
    string paymentMethodSnapshotId?;
    # The payout ID of the refund from the gateway side.
    string payoutId?;
    # A code identifying the reason for the transaction.
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2017-03-01.
    string refundDate?;
    # The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
    string refundTransactionTime?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondRefundReferenceId?;
    # The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptor?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptorPhone?;
    # The status of the refund. 
    "Processed"|"Canceled"|"Error"|"Processing" status?;
    # The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # The type of the refund. 
    "External"|"Electronic" 'type?;
    # The ID of the Zuora user who last updated the refund.
    string updatedById?;
    # The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *RefundObjectNSFields;
    *RefundObjectCustomFields;
};

public type NestedRefundApplicationOnExpand record {|
    # The unique identifier of the refund application.
    string id?;
    # The unique identifier of the user who created the refund application.
    string createdById?;
    # The date and time when the refund application was created.
    string createdDate?;
    # The unique identifier of the user who last updated the refund application.
    string updatedById?;
    # The date and time when the refund application was last updated.
    string updatedDate?;
    # The unique identifier of the account.
    string accountId?;
    # The ID of the application group to which this payment application belongs.
    string applicationGroupId?;
    # The total amount of the refund to be applied.
    decimal applyAmount?;
    # The unique identifier of the credit memo to which the associated payment was applied.
    string creditMemoId?;
    # The date when the refund application becomes effective.
    string effectiveDate?;
    # The unique identifier of the invoice to which the associated payment was applied.
    string invoiceId?;
    # The unique identifier of the payment associated with the refund application.
    string paymentId?;
    # The unique identifier of the refund associated with the refund application.
    string refundId?;
    # The Account Receivable accounting code of a standalone charge.
    string accountReceivableAccountingCodeId?;
    # The accounting code that maps to an on account in your accounting
    # system.
    string onAccountAccountingCodeId?;
    # The accounting code for the unapplied payment.
    string unappliedPaymentAccountingCodeId?;
    # The accounting code for cash payments.
    string cashAccountingCodeId?;
    # The ID of the journal entry that corresponds to this transaction.
    string journalEntryId?;
    # EXPANDABLE.
    # The refund associated with the refund application.
    record {} refund?;
    # EXPANDABLE.
    # The payment associated with the refund application.
    record {} payment?;
    # EXPANDABLE.
    # The refund application items contained in the refund application.
    record {}[] refundApplicationItems?;
|};

public type CreateOrderOrderLineItem OrderLineItemCommonPostOrder;

# 
public type QueryRatingResultsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedRatingResult[] data?;
|};

public type GETDebitMemoFilesResponse record {
    # Container for debit memo PDF files.
    DebitMemoFile[] debitMemoFiles?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type ExpandedInvoice record {|
    # The unique identifier of the invoice.
    string id?;
    # The unique identifier of the user who created the invoice.
    string createdById?;
    # The time that the invoice gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the invoice.
    string updatedById?;
    # The time that the invoice gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # The ID of the customer account associated with the invoice.
    string accountId?;
    # The amount of the invoice adjustments associated with the invoice.
    string adjustmentAmount?;
    # The total amount of the invoice.
    string amount?;
    # The invoice amount excluding tax.
    string amountWithoutTax?;
    # Whether invoices are automatically picked up for processing in the corresponding payment run.
    boolean autoPay?;
    # The remaining balance of the invoice after all payments, adjustments, and refunds are applied.
    decimal balance?;
    # The ID of the bill-to contact associated with the invoice.
    string billToContactId?;
    # The ID of the bill-to contact snapshot associated with the invoice.
    string billToContactSnapshotId?;
    # Comments about the invoice.
    string comments?;
    # The currency amount of the adjustment applied to the customer's credit balance.
    # 
    #   **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.
    string creditBalanceAdjustmentAmount?;
    # The currency amount of all credit memos applied to this invoice.
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string creditMemoAmount?;
    # The currency of the invoice.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # The date by which the payment for this invoice is due, in `yyyy-mm-dd` format.
    string dueDate?;
    # Specifies whether the invoice includes one-time charges.
    boolean includesOneTime?;
    # Specifies whether the invoice includes recurring charges.
    boolean includesRecurring?;
    # Specifies whether the invoice includes usage charges.
    boolean includesUsage?;
    # The date that appears on the invoice being created.
    string invoiceDate?;
    # The unique identification number of the invoice.
    string invoiceNumber?;
    # The date when the invoice was last emailed.
    string lastEmailSentDate?;
    # ID of the organization this object belongs to.
    string organizationId?;
    # The amount of payments applied to the invoice.
    string paymentAmount?;
    # The user ID of the person who moved the invoice to Posted status.
    string postedBy?;
    # The date when the invoice was posted.
    string postedDate?;
    # Specifies the amount of a refund that was applied against an earlier payment on the invoice.
    string refundAmount?;
    # The ID of the sequence set associated with the invoice.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the invoice.
    string soldToContactId?;
    # The ID of the sold-to contact snapshot associated with the invoice.
    string soldToContactSnapshotId?;
    # The source of the invoice.
    "BillRun"|"API"|"ApiSubscribe"|"ApiAmend" 'source?;
    # The ID of the invoice source.
    # If an invoice is generated from a bill run, the value is the number of the corresponding bill run.Otherwise, the value is `null`.
    string sourceId?;
    # Whether the invoice is reversed.
    boolean reversed?;
    # The type of the invoice source.
    "Subscription"|"Standalone"|"Order"|"Consolidation" sourceType?;
    # The status of the invoice.
    "Draft"|"Posted" status?;
    # This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.
    string targetDate?;
    # The amount of taxation.
    string taxAmount?;
    # The calculated tax amount excluded due to the exemption.
    string taxExemptAmount?;
    # The message that the tax engine return if it calculates the taxes of this invoice fails.
    string taxMessage?;
    # The status that the tax engine return after it calculates the taxes of this invoice.
    "Complete"|"Error"|"UnknownError"|"DuplicateDoc"|"InvalidRequest"|"InvalidResponse"|"TaxEngineError"|"ConcurrentModify"|"InternalServerError"|"TaxCodeTemplateError" taxStatus?;
    # The ID of the invoice template.
    # 
    # - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature enabled, the value of this field depends on the configuration of the invoice template. 
    #   - If you specify an invoice template at the subscription level, the value of this field is automatically populated from the corresponding subscription.
    #   - If you do not specify any invoice template at the subscription level, the value of this field is automatically populated from the corresponding account.
    # - If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string templateId?;
    # Whether the invoice was transferred to an external accounting system.
    "Processing"|"Error"|"Ignore"|"Yes"|"No" transferredToAccounting?;
    # It could be Processing, Generated, Success, Failed. If it’s Failed, it will have an error code and message. If it’s Generated or Success, both error code and message are empty, and eInvoiceFileId stores the file id of e-invoice.
    "Processing"|"Generated"|"Success"|"Failed" eInvoiceStatus?;
    # The ID of the e-invoice file.
    string eInvoiceFileId?;
    # The error code when status is `Failed`. This code can either be a Zuora-generated error code or one returned by a third-party e-invoice vendor.
    string eInvoiceErrorCode?;
    # The error message when status is "Failed". This message can either be a Zuora-generated error code or one returned by a third-party e-invoice vendor.
    string eInvoiceErrorMessage?;
    # A link to the Payment Link page where the customer can pay the invoice.
    # 
    # The link is generated only if the invoice is posted after enabling the Payment Link feature on your tenant.
    # 
    # **Note**: The Payment Link feature is in the Early Adopter phase. 
    # You can enable the Payment Link feature through a self-service configuration in the **Manage Features** setting for Zuora Payments.
    string paymentLink?;
    # The payment term associated with the invoice. The payment term determines the due dates of
    # invoices.
    string paymentTerm?;
    NestedAccountOnExpand account?;
    ExpandedContact billToContact?;
    NestedInvoiceItemOnExpand[] invoiceItems?;
|};

public type GETProductRatePlanDefinitionResponse record {
    # The unique ID of the product rate plan definition.
    string id?;
    # The unique ID of the product charge in this rate plan definition.
    string productRatePlanChargeId?;
    # Th name of the product charge in this rate plan definition.
    string productRatePlanChargeName?;
    # The unique number (natural key) of the product charge in this rate plan definition.
    string productRatePlanChargeNumber?;
    # The unique ID of the product rate plan that uses this rate plan definition.
    string productRatePlanId?;
    # Th name of the product rate plan that uses this rate plan definition.
    string productRatePlanName?;
    # The unique number (natural key) of the product rate plan that uses this rate plan definition.
    string productRatePlanNumber?;
    # Indicates whether the request succeeded.
    boolean success?;
};

# Container for custom fields of an Order object.
public type OrderObjectCustomFields record {
};

public type PostFulfillmentsResponseType record {
    *CommonResponse;
    # An array of the credit memo numbers generated in this request. The credit memo is only available if you have the Invoice Settlement feature enabled.
    string[] creditMemoNumbers?;
    PostFulfillmentsResponseType_fulfillments[] fulfillments?;
    # An array of the invoice numbers generated in this request. Normally it includes one invoice number only.
    string[] invoiceNumbers?;
    # The total amount collected in this request.
    decimal paidAmount?;
    # The payment number collected in this request.
    string paymentNumber?;
};

public type ExpandedAccount record {|
    # The unique identifier of the account.
    string id?;
    # The unique identifier of the user who created the account.
    string createdById?;
    # The date and time when the account was created.
    string createdDate?;
    # The unique identifier of the user who last updated the account.
    string updatedById?;
    # The date and time when the account was last updated.
    string updatedDate?;
    # The account number that identifies the account.
    string accountNumber?;
    # An additional email addresse to receive email notifications.
    string additionalEmailAddresses?;
    # Indicates whether associated invoices can be edited.
    boolean allowInvoiceEdit?;
    # Indicates whether future payments are automatically collected when they are due
    # during a payment run.
    boolean autoPay?;
    # The customer's total invoice balance minus credit balance.
    decimal balance?;
    # The alias name given to a batch. A string of 50 characters or less.
    string batch?;
    # The billing cycle day setting option for the account.
    "ManualSet"|"AutoSet" bcdSettingOption?;
    # Billing cycle day (BCD), the day of the month when a bill run
    # generates invoices for the account.
    int billCycleDay?;
    # The unique identifier of the bill-to contact associated with the account.
    string billToId?;
    # The unique identifier of the communication profile that Zuora uses when sending notifications to the account's contacts.
    string communicationProfileId?;
    # The current credit balance on the account.
    decimal creditBalance?;
    # External identifier of the account in a CRM system.
    @constraint:String {maxLength: 100}
    string crmId?;
    # A currency defined in the web-based UI administrative settings.
    string currency?;
    # Name of the account's customer service representative, if applicable.
    @constraint:String {maxLength: 50}
    string customerServiceRepName?;
    # ID of the default payment method for the account.
    string defaultPaymentMethodId?;
    # ID of the e-invoice profile for this account.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string eInvoiceProfileId?;
    # Indicates whether the customer wants to receive invoices through email. 
    boolean invoiceDeliveryPrefsEmail?;
    # Whether the customer wants to receive printed invoices, such as through postal mail.
    boolean invoiceDeliveryPrefsPrint?;
    # Invoice template ID, configured in Billing Settings in the Zuora UI.
    string invoiceTemplateId?;
    # Date of the most recent invoice for the account; null if no invoice has ever been generated.
    string lastInvoiceDate?;
    # The date and time when account metrics are last updated, if the account is a partner account.
    # 
    # **Note**: 
    # - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account" target="_blank">Reseller Account</a> feature enabled.
    # - If you ever set the `partnerAccount` field to `true` for an account, the value of `lastMetricsUpdate` field is the time when the account metrics are last updated.
    string lastMetricsUpdate?;
    # The name of the account.
    string name?;
    # A string of up to 65,535 characters.
    string notes?;
    # The unique identifier of the organization to which the account belongs.
    string organizationId?;
    # Identifier of the parent customer account for this Account object. The
    # length is 32 characters. Use this field if you have <a
    # href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy"
    # target="_blank">Customer Hierarchy</a> enabled.
    string parentId?;
    # Whether the customer account is a partner, distributor, or reseller. 
    # 
    # **Note**: This field is available only if you have the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account"
    # target="_blank">Reseller Account</a> feature enabled.
    boolean partnerAccount?;
    # The purchase order number provided by your customer for services,
    # products, or both purchased.
    string purchaseOrderNumber?;
    # Name of the account's sales representative, if applicable.
    string salesRepName?;
    # The ID of the billing document sequence set to assign to the customer account. 
    # The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.
    # If a customer account has no assigned billing document sequence set, billing documents generated for this account adopt the prefix and starting document number from the default sequence set.
    string sequenceSetId?;
    # The unique identifier of the sold-to contact associated with the account.
    string soldToId?;
    # The account status.
    "Active"|"Draft"|"Canceled" status?;
    # Unique code that identifies a company account in Avalara. 
    # **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
    @constraint:String {maxLength: 50}
    string taxCompanyCode?;
    # ID of the customer tax exemption certificate. Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 32}
    string taxExemptCertificateID?;
    # Type of tax exemption certificate that the customer holds. Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 32}
    string taxExemptCertificateType?;
    # Description of the tax exemption certificate that the customer holds.
    # Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 500}
    string taxExemptDescription?;
    # Date when the customer tax exemption starts, in `YYYY-MM-DD` format. Applicable if you use Zuora Tax or Connect tax engines.
    string taxExemptEffectiveDate?;
    # A unique entity use code to apply exemptions in Avalara AvaTax. See <a href="https://developer.avalara.com/avatax/handling-tax-exempt-customers/" target="_blank">Exempt Transactions</a> for more details.
    @constraint:String {maxLength: 64}
    string taxExemptEntityUseCode?;
    # Date when the customer tax exemption expires, in `YYYY-MM-DD` format. Applicable if you use Zuora Tax or Connect tax engines.
    string taxExemptExpirationDate?;
    # Jurisdiction in which the customer tax exemption certificate was issued.
    @constraint:String {maxLength: 32}
    string taxExemptIssuingJurisdiction?;
    # Status of the account tax exemption. Applicable if you use Zuora Tax or Connect tax engines. Required if you use Zuora Tax. 
    "No"|"Yes"|"PendingVerification" taxExemptStatus?;
    # Total balance of all posted invoices.
    decimal totalInvoiceBalance?;
    # Total unapplied balance in this currency.
    decimal unappliedBalance?;
    # EU Value Added Tax ID.
    string vATId?;
    # Monthly recurring revenue for the account.
    decimal mrr?;
    # Total balance of all posted debit memos.
    decimal totalDebitMemoBalance?;
    # The total unapplied amount of all posted credit memos in this currency.
    decimal unappliedCreditMemoAmount?;
    # ID of the credit memo template that is used to generate credit memos for the account.
    string creditMemoTemplateId?;
    # ID of the debit memo template that is used to generate debit memos for the account.
    string debitMemoTemplateId?;
    # The name of the payment gateway instance. If null or left unassigned,
    # the account will use the default gateway.
    string paymentGateway?;
    # A payment-terms indicator defined in the web-based UI administrative
    # settings, for example, `Net 30`.
    string paymentTerm?;
    ExpandedContact billTo?;
    ExpandedContact soldTo?;
    NestedPaymentMethodOnExpand defaultPaymentMethod?;
    NestedSubscriptionOnExpand[] subscriptions?;
    NestedPaymentOnExpand[] payments?;
    NestedRefundOnExpand[] refunds?;
    NestedCreditMemoOnExpand[] creditMemos?;
    NestedDebitMemoOnExpand[] debitMemos?;
    NestedInvoiceOnExpand[] invoices?;
    NestedUsageOnExpand[] usages?;
    NestedPaymentMethodOnExpand[] paymentMethods?;
|};

public type ProxyNoDataResponse record {
    # 
    boolean done?;
    # 
    record {}[] records?;
    # 
    int size?;
};

public type POSTOrderPreviewRequestType record {
    # Category of the order to indicate a product sale or return. Default value is `NewSales`.
    "NewSales"|"Return" category = "NewSales";
    # Container for custom fields of an Order object.
    OrderObjectCustomFields customFields?;
    # A description of the order.
    @constraint:String {maxLength: 500}
    string description?;
    # The account number that this order will be created under. 
    # Note that invoice owner account of the subscriptions included in this order should be the same with the account of the order.
    @constraint:String {maxLength: 70}
    string existingAccountNumber?;
    # The date when the order is signed. All of the order actions under this order will use this order date as the contract effective date.
    string orderDate;
    # [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services. 
    # 
    # With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models. 
    # 
    # **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.        
    CreateOrderOrderLineItem[] orderLineItems?;
    # The order number of this order.   
    # **Note:** Make sure the order number does not contain a slash.
    @constraint:String {maxLength: 100}
    string orderNumber?;
    # Information about the account that will own the order.
    PreviewAccountInfo previewAccountInfo?;
    PreviewOptions previewOptions;
    # Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs.
    @constraint:String {maxLength: 255}
    string reasonCode?;
    # Each item includes a set of order actions, which will be applied to the same base subscription.
    POSTOrderPreviewRequestType_subscriptions[] subscriptions?;
};

# Container for the finance information related to the taxation item.
public type GETCMTaxItemTypeNew_financeInformation record {
    # The accounting code that maps to an on account in your accounting system.
    string onAccountAccountingCode?;
    # The type of the accounting code that maps to an on account in your accounting system.
    string onAccountAccountingCodeType?;
    # The accounting code for the sales taxes payable.
    string salesTaxPayableAccountingCode?;
    # The type of the accounting code for the sales taxes payable.
    string salesTaxPayableAccountingCodeType?;
};

public type GETProductRatePlanWithExternalIdMultiResponse GETProductRatePlanWithExternalIdMultiResponse_inner[];

# Container for bill-to contact information for this account.
public type PUTAccountTypeBillToContact record {
    # First address line, 255 characters or less.
    string address1?;
    # Second address line, 255 characters or less.
    string address2?;
    # City, 40 characters or less.
    string city?;
    # Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.
    string country?;
    # County; 32 characters or less. May optionally be used by Zuora Tax to calculate county tax.
    string county?;
    # Fax phone number, 40 characters or less.
    string fax?;
    # First name, 100 characters or less.
    string firstName?;
    # Home phone number, 40 characters or less.
    string homePhone?;
    # Last name, 100 characters or less.
    string lastName?;
    # Mobile phone number, 40 characters or less.
    string mobilePhone?;
    # Nickname for this contact
    string nickname?;
    # Other phone number, 40 characters or less.
    string otherPhone?;
    # Possible values are: `Work`, `Mobile`, `Home`, `Other`.
    string otherPhoneType?;
    # Personal email address, 80 characters or less.
    string personalEmail?;
    # State; must be a valid state or province name or 2-character abbreviation. If using Zuora Tax, be aware that Zuora Tax requires a state (in the US) or province (in Canada) in this field for the sold-to contact to calculate tax, and that a bill-to contact may be used if no sold-to contact is provided.
    string state?;
    # If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.
    string taxRegion?;
    # Work email address, 80 characters or less.
    string workEmail?;
    # Work phone number, 40 characters or less.
    string workPhone?;
    # Zip code, 20 characters or less.
    string zipCode?;
    *ContactObjectCustomFields;
};

public type GETAllCustomObjectDefinitionsInNamespaceResponse record {
    # The number of objects in the `definitions` object. The value of this field is the number of custom object definitions in the namespace.
    int count?;
    # The custom object definitions. This object maps types to custom object definitions.
    CustomObjectDefinitions definitions?;
};

public type ProxyActionqueryRequest record {
    # Configuration of the query result.
    ProxyActionqueryRequest_conf conf?;
    # [ZOQL](https://knowledgecenter.zuora.com/DC_Developers/K_Zuora_Object_Query_Language) expression that specifies the object to query, the fields to retrieve, and any filters.
    # 
    # **Note:** When querying one time charges from ProductRatePlanCharge, you need to specify the `ChargeType` value as `One-Time` rather than `OneTime`.
    string queryString;
};

# The custom field definition in the custom object
public type CustomObjectCustomFieldDefinition record {
    # Indicates whether to use this field as the display name of the custom object when being linked to another custom object.
    # 
    # This field applies only to the Text custom field type:
    # 
    # - The `type` field is `string`.
    # - The `enum` field is not specified.
    boolean displayName?;
    # The data format of the custom field
    string format?;
    # The UI label of the custom field
    string label?;
    # The maximum length of string that can be stored in the custom field.
    # 
    # This field applies only to the following custom field types:
    # 
    # - Text:
    #   - The `type` field is `string`.
    #   - The `format` field is not specified or is `url`.
    #   - The `enum` field is not specified.
    # - Picklist:
    #   - The `type` field is `string`.
    #   - The `enum` field is specified.
    #   - The `multiselect` field is not specified or is `false`.
    # - Multiselect:
    #   - The `type` field is `string`.
    #   - The `enum` field is specified.
    #   - The `multiselect` field is `true`.
    int maxLength?;
    # Indicates whether this is a multiselect custom field.
    # 
    # This field applies only to the Picklist or Multiselect custom field types:
    # 
    # - The `type` field is `string`.
    # - The `maxLength` field is specified.
    # - The `enum` field is specified.
    boolean multiselect?;
    # Specifies that this is a custom field
    "custom" origin?;
    # The data type of the custom field
    string 'type?;
};

public type GETRampsBySubscriptionKeyResponseType record {
    RampResponse[] ramps?;
    *CommonResponse;
};

public type PUTCreditMemoWriteOffResponseType record {
    # Container for the credit memo that is automatically created.
    PUTCreditMemoWriteOffResponseType_debitMemo debitMemo?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# 
public type GetInvoicePdfStatusBatchResponse record {
    # Array of invoice PDF statuses requested.
    GetInvoicePdfStatusResponse[] invoiceFiles?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type PutReverseCreditMemoType record {
    # The date when the to-be-reversed credit memo is applied to the newly generated debit memo, in `yyyy-mm-dd` format. The effective date must be later than or equal to the memo date.
    # 
    # The default value is the date when you reverse the credit memo and create the debit memo.
    string applyEffectiveDate?;
    # The date when the debit memo is created, in `yyyy-mm-dd` format. The memo date must be later than or equal to the credit memo's memo date.
    # 
    # The default value is the date when you reverse the credit memo and create the debit memo.
    string memoDate?;
};

# Some detail info that would be used to processed an electronic payment.
# The info would only effect when `collect` set to `true`.
public type DebitMemoCollectRequest_payment record {
    # The ID of the gateway instance that processes the payment. The ID must be a valid gateway instance ID and this gateway must support the specific payment method.
    # If no gateway ID is specified in the request body, the default gateway for the customer account is used automatically, if this default one is not configured, the default gateway of the tenant would be used.
    string gatewayId?;
    # The unique ID of the payment method that the customer used to make the payment.
    # If no payment method ID is specified in the request body, the default payment method for the customer account is used automatically. If the default payment method is different from the type of payments that you want to create, an error occurs.
    string paymentMethodId?;
};

public type GETAccountCurrencyMetricsType record {
    # The total balance in this currency.
    string balance?;
    # The future expected Monthly Recurring Revenue (MRR) in this currency, accounting for future upgrades, downgrades, upsells, and cancellations.
    string contractedMrr?;
    # The currency that metrics are aggregated based on.
    string currency?;
    # The reserved payment amount of the customer account in this currency. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown" target="_blank">Prepaid Cash with Drawdown</a>.
    string reservedPaymentAmount?;
    # The total balance of all posted debit memos in this currency.
    # 
    # **Note:** This field is only available if you have <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement" target="_blank">Invoice Settlement</a> enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amount[…]ment/AC_Invoice_Settlement_migration_checklist_and_guide" target="_blank">Invoice Settlement Enablement and Checklist Guide</a> for more information.
    string totalDebitMemoBalance?;
    # The total balance of all posted invoices in this currency.
    string totalInvoiceBalance?;
    # The total unapplied amount of all posted credit memos in this currency.
    string unappliedCreditMemoAmount?;
    # The total unapplied amount of all posted payments in this currency.
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string unappliedPaymentAmount?;
};

public type DebitMemoCollectRequest record {
    # The priority order to apply credit memos and/or unapplied payments to the debit memo. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply the debit memo.
    string[] applicationOrder?;
    # Whether to automatically apply credit memos or unapplied payments, or both to the debit memo.
    # If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the debit memo. If no value is specified or the value is `false`, no action is taken.
    boolean applyCredit?;
    # Indicates if the current request needs to collect payment or not.
    boolean collect?;
    # Some detail info that would be used to processed an electronic payment.
    # The info would only effect when `collect` set to `true`.
    DebitMemoCollectRequest_payment payment?;
};

public type DataQueryJobCommon record {
    # The query job creator's Id.
    @constraint:String {maxLength: 64, minLength: 64}
    string createdBy?;
    # Internal identifier of the query job.
    @constraint:String {maxLength: 64, minLength: 64}
    string id?;
    # The query that was submitted.
    string query?;
    # The number of times that Zuora will retry the query if Zuora is unable to perform the query.
    int remainingRetries?;
    # Indicates the source that data queries run against:
    # 
    # * `LIVE` represents the live transactional databases at Zuora (Data Query Live).
    # 
    # * `WAREHOUSE` represents Zuora Warehouse, which has better performance and fewer limitations than the live transactional database. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Zuora_Warehouse/A_Zuora_Warehouse_overview" target="_blank">Zuora Warehouse</a>.
    string sourceData?;
    # Date and time when the query job was last updated, in ISO 8601 format.
    string updatedOn?;
    # Indicates whether to use Index Join. See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Query/Data_Query/Best_practices_when_writing_data_queries/General_best_practices#Index_JOIN" target="_blank">Index Join</a> for more information.
    boolean useIndexJoin?;
};

# Container for custom fields of a Refund object.
public type RefundObjectCustomFields record {
};

public type Jobs_jobId_body_1 record {
    # `Stopping` is currently the only allowed value.
    "Stopping" status;
};

public type ExpandedPrepaidBalanceTransaction record {|
    # The unique identifier of the prepaid balance transaction.
    string id?;
    # The unique identifier of the user who created the prepaid balance transaction.
    string createdById?;
    # The date and time when the prepaid balance transaction was created.
    string createdDate?;
    # The unique identifier of the user who last updated the prepaid balance transaction.
    string updatedById?;
    # The date and time when the prepaid balance transaction was last updated.
    string updatedDate?;
    # The ID of the customer account on which the prepaid balance transaction occurs.
    string accountId?;
    # The ID of the prepaid balance.
    string prepaidBalanceId?;
    # The ID of the prepaid balance fund.
    string fundId?;
    # The amount of units to be adjusted to the prepaid balance (could be positive or negative).
    decimal amount?;
    # The prepaid balance after a transaction.
    decimal balance?;
    # The transaction source id (original Charge Id, Guided Usage Id, Order Line Item Id).
    string sourceId?;
    # The date when the prepaid balance transaction occurs.
    string transactionDate?;
    # The type of the transaction source. 
    "CHARGE"|"ORDER_LINE_ITEM"|"USAGE" transactionSourceType?;
    # The type of the Prepaid Balance Transaction. 
    "PREPAYMENT"|"DRAWDOWN"|"PREPAYMENT_ADJUSTMENT"|"DRAWDOWN_ADJUSTMENT"|"DRAWDOWN_REVERSAL"|"PREPAYMENT_CREDIT_BACK"|"PREPAYMENT_CREDIT_BACK_REVERSAL" prepaidBalanceTransactionType?;
    string usageUom?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal? drawdownRate?;
    NestedAccountOnExpand account?;
    NestedPrepaidBalanceOnExpand prepaidBalance?;
    NestedPrepaidBalanceFundOnExpand fund?;
|};

# Container for custom fields of a Contact Snapshot object.
public type ContactSnapshotObjectCustomFields record {
};

public type POSTOrderRequestType_subscriptions record {
    # Container for custom fields of a Subscription object.
    SubscriptionObjectCustomFields customFields?;
    # The actions to be applied to the subscription. Order actions will be stored with the sequence when it was provided in the request.
    CreateOrderOrderAction[] orderActions?;
    # The fields populated for a quote when a quote is sent to Zuora Billing from Zuora Quote.
    QuoteObjectFields quote?;
    # Container of the ramp definitions. It is used to create, update, or remove the ramp definition for the new subscription.
    RampRequest ramp?;
    # Leave this empty to represent new subscription creation. Specify a subscription number to update an existing subscription.
    string subscriptionNumber?;
};

public type GETListApplePayDomainsResponse_domains record {
    # The ID of the user who created this domain.
    string createdBy?;
    # The date and time when the domain was created, in `yyyy-mm-dd hh:mm:ss` format. 
    string createdOn?;
    # The name of the domain registered with Apple Pay, such as `testapplepay.zuora.com`. 
    string domainName?;
    # Indicates whether the domain registration is successfully verified. 
    boolean domainVerified?;
    # The ID of the domain, such as `402881a38924ff1001892502da090021`.
    string id?;
    # The ID of the user who made the last update to this domain.
    string updatedBy?;
    # The last date and time when the domain was updated, in `yyyy-mm-dd hh:mm:ss` format.
    string updatedOn?;
};

public type ProxyCreateProductRatePlan record {
    # A list of 3-letter currency codes representing active currencies for the product rate plan. Use a comma to separate each currency code.
    # 
    # When creating a product rate plan, you can use this field to specify default currency and at most four other active currencies.
    string[] ActiveCurrencies?;
    # A description of the product rate plan.
    @constraint:String {maxLength: 500}
    string Description?;
    # The date when the product rate plan expires and can't be subscribed to, in `yyyy-mm-dd` format.
    @constraint:String {maxLength: 29}
    string EffectiveEndDate?;
    # The date when the product rate plan becomes available and can be subscribed to, in `yyyy-mm-dd` format.
    @constraint:String {maxLength: 29}
    string EffectiveStartDate?;
    # The grade that is assigned for the product rate plan. The value of this field must be a positive integer. The greater the value, the higher the grade.
    # 
    # A product rate plan to be added to a Grading catalog group must have one grade. You can specify a grade for a product rate plan in this request or update the product rate plan individually.
    # 
    # **Notes**: 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `116` or later. Otherwise, an error occurs.
    #   - This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).
    decimal Grade?;
    # The name of the product rate plan. The name doesn't have to be unique in a Product Catalog, but the name has to be unique within a product.
    @constraint:String {maxLength: 255}
    string Name;
    # The ID of the product that contains the product rate plan.
    @constraint:String {maxLength: 32}
    string ProductId;
    # The natural key of the product rate plan.
    # 
    # **Possible values**:
    # 
    #   - leave null for automatically generated string
    #   - an alphanumeric string of 100 characters or fewer
    # 
    # **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.
    @constraint:String {maxLength: 100}
    string ProductRatePlanNumber?;
    *ProductRatePlanObjectNSFields;
    *ProductRatePlanObjectCustomFields;
};

public type TimeSlicedElpNetMetrics record {
    # The extended list price which is calculated by the original product catalog list price multiplied by the delta quantity.
    decimal amount?;
    # The latest date that the metric applies.
    string endDate?;
    # Specify the reason why the metrics are generated by the certain order action.
    "IncreaseQuantity"|"DecreaseQuantity"|"ChangePrice"|"Extension"|"Contraction" generatedReason?;
    # The acount number of the billing account that is billed for the subscription.
    string invoiceOwner?;
    # The ID of the order item referenced by the order metrics.
    string orderItemId?;
    # The earliest date that the metric applies.
    string startDate?;
    # The acount number of the billing account that owns the subscription.
    string subscriptionOwner?;
    # The tax amount in the metric when the tax permission is enabled.
    decimal tax?;
    decimal termNumber?;
    # The type for ELP is always "Regular".
    "Regular"|"Discount" 'type?;
};

public type UpdateEInvoicingBusinessRegionRequest record {
    # The first line of the Seller’s address, which is often a street address or business name.
    string addressLine1?;
    # The second line of the Seller’s address, which is often the name of a building.
    string addressLine2?;
    # The full official name that the Seller is registered with the relevant legal authority.
    @constraint:String {maxLength: 255}
    string businessName?;
    # The specify the unique identifier number of the legal entity or person that you do business with.
    # 
    # For example, you must use a GSTIN for India and Tax Identification Number (TIN) for Saudi Arabia.
    string businessNumber?;
    # The identification scheme identifier that an official registrar issues to identify the Seller as a legal entity or person.
    string businessNumberSchemaId?;
    # The the name of the city where the business is located.
    string city?;
    # The name of the Seller contact to receive e-invoicing data.
    @constraint:String {maxLength: 255}
    string contactName?;
    # The short name of a country or region where you must comply with e-invoicing requirements. For example, `IN` for India. For the full list of country names and codes, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>.
    string country?;
    # Whether the e-invoicing service provider signs PDF files for billing documents.
    boolean digitalSignatureEnable?;
    # Whether the digital signature box is displayed on PDF files for billing documents.
    boolean digitalSignatureBoxEnable?;
    # The X-coordinate to determine where the digital signature box is displayed on PDF files for billing documents.
    @constraint:Number {minValue: 0}
    decimal digitalSignatureBoxPosX?;
    # The Y-coordinate to determine where the digital signature box is displayed on PDF files for billing documents. 
    @constraint:Number {minValue: 0}
    decimal digitalSignatureBoxPosY?;
    # The email address of the Seller contact to receive e-invoicing data.
    string email?;
    # The Seller's electronic address, to which the application-level response to the e-invoice file might be delivered.
    string endpointId?;
    # The identification scheme identifier of the Seller’s electronic address.
    string endpointSchemeId?;
    # The business phone number of the Seller contact to receive e-invoicing data.
    string phoneNumber?;
    # The short code that can identify the business address.
    string postalCode?;
    # Container for e-invoicing response field mappings that map values from Sovos response data to fields on the EInvoiceData object in Zuora. Each response field mapping consists of a field name and a field path.
    # 
    # Note that this field is applicable only to the Sovos service provider.
    # 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing/B_Configure_the_E-Invoicing_feature/Configure_e-invoicing_response_field_mappings" target="_blank">Configure e-invoicing response field mappings</a>.
    record {|string...;|} responseMapping?;
    # The unique ID of the e-invoicing service provider that is associated to the business region.
    string serviceProviderId?;
    # The name of the state or province where the business is located.
    string state?;
    # The Seller's VAT identifier (also known as Seller VAT identification number) or the local identification (defined by the Seller’s address) of the Seller for tax purposes, or a reference that enables the Seller to state the registered tax status.
    string taxRegisterNumber?;
    # The name that the Seller is known as, other than the legal business name.
    @constraint:String {maxLength: 100}
    string tradeName?;
};

public type PUTDeleteSubscriptionResponseType record {
    # Returns `true` if the request is processed successfully.
    boolean success?;
};

public type CustomObjectRecordsThrottledResponse record {
    int code?;
    CustomObjectRecordsWithError[] details?;
    string message?;
};

public type ExpandedTaxationItem record {|
    # The unique identifier of the taxation item.
    string id?;
    # The unique identifier of the user who created the taxation item.
    string createdById?;
    # The date and time when the taxation item was created in the Zuora
    # system, in the `yyyy-mm-dd hh:mm:ss` format.
    string createdDate?;
    # The unique identifier of the user who last updated the taxation item.
    string updatedById?;
    # The date and time when the taxation item was last updated, in the `yyyy-mm-dd hh:mm:ss` format. 
    string updatedDate?;
    # The amount of credit memos applied to the taxation item. 
    decimal creditAmount?;
    # The accounting code that maps to the taxation item in your accounting system.
    string accountingCode?;
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # The unique identifier of the invoice item to which the taxation item belongs.
    string invoiceItemId?;
    # The jurisdiction that applies the tax or VAT. This value is typically
    # a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field. 
    string locationCode?;
    # The name of the taxation item. 
    string name?;
    # The amount of payment applied to the invoice or debit memo. 
    decimal paymentAmount?;
    # The amount of the tax applied to the billing document.
    decimal taxAmount?;
    # The amount of the tax applied to the billing document before rounding.
    decimal taxAmountUnrounded?;
    # The code of country to which the taxation item.
    string countryCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    string customerCode?;
    # The tax exemption certificate that the customer holds. Applicable if you use Zuora Tax or Connect tax engines.
    string exemptCertificate?;
    string sellerRegistration?;
    # The description of the tax.
    string taxDescription?;
    # The unique identifier of the tax rule.
    string taxRuleId?;
    # The tax code identifies which tax rules and tax rates to apply to a
    # specific billing document.
    string taxCode?;
    # The mode of the tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # The date when the tax is applied to the billing document.
    string taxDate?;
    # The tax rate applied to the billing document.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate applied to the billing document.
    "Percentage"|"FlatFee" taxRateType?;
    decimal balance?;
    # The ID of the journal entry that corresponds to this transaction.
    string journalEntryId?;
    # The accounting code for Sales Tax Payable.
    string salesTaxPayableAccountingCodeId?;
    # The accounting code for Account Receivable.
    string accountReceivableAccountingCodeId?;
    # The unique identifier of the taxable item snapshot.
    string taxableItemSnapshotId?;
|};

public type PreviewResult_chargeMetrics record {
    ChargePreviewMetrics[] charges?;
    # The number of the subscription that has been affected by this order. When creating a subscription, this value will not show if the subscription number was not specified in the request.
    string subscriptionNumber?;
};

public type NestedUsageOnExpand record {|
    # The unique identifier of the usage.
    string id?;
    # The unique identifier of the user who created the usage.
    string createdById?;
    # The date and time when the usage was created.
    string createdDate?;
    # The unique identifier of the user who last updated the usage.
    string updatedById?;
    # The date and time when the usage was last updated.
    string updatedDate?;
    # The ID of the customer account associated with the usage.
    string accountId?;
    # The number of the customer account associated with the usage.
    string accountNumber?;
    # ID of the rate plan charge that pays for this usage.
    string ratePlanChargeId?;
    # End date of the time period in which usage is tracked. Zuora uses
    # this field value to determine the usage date.
    string endDateTime?;
    # Number of units used.
    decimal quantity?;
    # Indicates if the rating and billing engine (RBE) processed usage data for an invoice.
    "Importing"|"Pending"|"Processed" rbeStatus?;
    # Indicates if the usage records were imported from the web-based UI or the API.
    "API"|"Import" sourceType?;
    # Start date of the time period in which usage is tracked. Zuora uses
    # this field value to determine the usage date.
    string startDateTime?;
    # The original ID of the subscription that contains the fees related to the usage data.
    string subscriptionId?;
    # The date and time when the usage was submitted.
    string submissionDateTime?;
    # The units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.
    string uOM?;
    # A description of the usage record.
    string description?;
    # The unique identifier of the import.
    string importId?;
    # a customer-defined specific identifier of a usage record.
    # 
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled. See [Upload usage record with unique
    # key](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Prepaid_balance_transactions#Upload_usage_record_with_unique_key)
    # for more information.
    string uniqueKey?;
    # File ID of the uploaded usage records file. You can use this file ID with [Get files](https://developer.zuora.com/api-references/api/operation/GET_Files) to download the file.
    string fileId?;
    # The name of the import file when the usage record is imported from the file.
    string fileName?;
    # EXPANDABLE.
    # The account associated with the usage.
    record {} account?;
|};

# The container for billing processing options and payment processing options.
# 
# **Note:**
# - This field is not supported in draft orders.
# - When you use the "Create an order" operation to create an account, create a subscription, run billing, and collect payment in a single call, if any error occurs during the call, such as a payment processing failure and a tax engine failure, then all the other steps will be rolled back. In this case, neither the invoice will be generated, nor the subscription nor the account will be created.
# - When you use the "Create an order" operation to cancel a subscription with `refund` and `writeOff`, if the `refund` or `writeOff` fails, `cancelSubscription`, `runBilling`, and `collectPayment` still can succeed.
# - When you use the "Create an order" operation, the `collectPayment` and `refund` fields cannot be set to `true` simultaneously.  Otherwise, the order will not be proceeded.
public type ProcessingOptionsOrders record {
    # The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
    string[] applicationOrder?;
    # Whether to automatically apply credit memos or unapplied payments, or both to an invoice.
    # 
    # If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.          
    # 
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    boolean applyCredit?;
    # Indicates if any credit balance on a customer's account is automatically applied to invoices. If no value is specified then this field defaults to false. This feature is not available if you have enabled the Invoice Settlement feature.
    boolean applyCreditBalance?;
    ProcessingOptionsOrdersWithDelayedCapturePayment_billingOptions billingOptions?;
    # Indicates if the current request needs to collect payments. This value can not be 'true' when 'runBilling' flag is 'false'.
    boolean collectPayment?;
    # Container for the electronic payment options.
    ProcessingOptionsOrdersAsync_electronicPaymentOptions electronicPaymentOptions?;
    # Indicates whether to refund after subscription cancelation. Default is `false`. 
    # 
    # **Note**: When refunding a subscription that is not invoiced separately, if you do not enable the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Invoice_Settlement/C_Invoice_Item_Settlement" target="_blank">Invoice Item Settlement</a> feature, you will encounter the following error during the cancel and refund process: “Cancellation/Refund failed because of the following reason: Invoice is linked to multiple subscriptions. Cancellation was not processed.”
    boolean refund?;
    # Indicates the amount to be refunded. Required if the `refund` field is `true`.
    decimal refundAmount?;
    # A code identifying the reason for the refund transaction. The value must be an existing payment refund reason code listed in **Payments Settings** > **Configure Reason Codes**. If you do not specify the field or leave the field with an empty value, Zuora uses the default payment refund reason code.
    string refundReasonCode?;
    # Indicates if the current request needs to generate an invoice. The invoice will be generated against all subscriptions included in this order.
    boolean runBilling?;
    # Indicates whether to write off the outstanding balance on the invoice after refund. Default is `false`.
    # 
    # **Note**: 
    # - When refunding a subscription that is not invoiced separately, if you do not enable the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Invoice_Settlement/C_Invoice_Item_Settlement" target="_blank">Invoice Item Settlement</a> feature, you will encounter the following error during the cancel and refund process: “Cancellation/Refund failed because of the following reason: Invoice is linked to multiple subscriptions. Cancellation was not processed.”
    # - The <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Invoice_Settlement" target="_blank">Invoice Settlement</a> feature must have been enabled for write-off.
    boolean writeOff?;
    # The financial information of the credit memo items generated to write off the invoice balance. 
    # 
    # **Note:** 
    #   - All the credit memo items that are used to write off the invoice will be applied with the same financial information.
    #   - Credit memo items generated from the unconsumed services of the canceled subscription will not be applied with the finance information specified here.
    ProcessingOptionsOrdersWithDelayedCapturePayment_writeOffBehavior writeOffBehavior?;
};

public type PostGenerateBillingDocumentType record {
    # Whether to automatically post the billing documents after the draft billing documents are generated. 
    # 
    # If an error occurs during posting billing documents, the draft billing documents are not generated too.
    true|false autoPost?;
    # Whether to automatically renew the subscriptions with **Auto Renew** set to **Yes**. 
    true|false autoRenew?;
    # The types of the charges to be excluded from the generation of billing documents. The field values are case insensitive. Supported values include `onetime`, `recurring`, and `usage`. 
    string[] chargeTypeToExclude?;
    # A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
    string creditMemoReasonCode?;
    # The date on which to generate the billing documents, in `yyyy-mm-dd` format.
    string effectiveDate?;
    # The IDs of the subscriptions that you want to create the billing documents for. Each value must be the ID of the latest version of an active subscription.
    string[] subscriptionIds?;
    # The date used to determine which charges are to be billed, in `yyyy-mm-dd` format.
    string targetDate?;
};

public type GETAccountSummaryType record {
    # Container for basic information about the account.
    GETAccountSummaryTypeBasicInfo basicInfo?;
    # Container for bill-to contact information.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `billToContactId` field in the request or you select **Default Contact from Account** for the `billToContactId` field during subscription creation, the value of the `billToContact` field is automatically set to `null` in the response body.
    GETAccountSummaryTypeBillToContact billToContact?;
    # Container for invoices. Only returns the last 6 invoices.
    GETAccountSummaryInvoiceType[] invoices?;
    # Container for payments. Only returns the last 6 payments.
    GETAccountSummaryPaymentType[] payments?;
    # Container for sold-to contact information.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `soldToContactId` field in the request or you select **Default Contact from Account** for the `soldToContactId` field during subscription creation, the value of the `soldToContact` field is automatically set to `null` in the response body.
    GETAccountSummaryTypeSoldToContact soldToContact?;
    # Container for subscriptions.
    GETAccountSummarySubscriptionType[] subscriptions?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Container for tax exempt information, used to establish the tax exempt status of a customer account.
    GETAccountType_taxInfo taxInfo?;
    # Container for usage data. Only returns the last 6 months of usage.
    # 
    # **Note:** If the Active Rating feature is enabled, no usage data is returned in the response body field.
    GETAccountSummaryUsageType[] usage?;
};

public type PreviewContactInfo record {
    @constraint:String {maxLength: 40}
    string city?;
    # Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country to calculate tax.
    @constraint:String {maxLength: 64}
    string country?;
    @constraint:String {maxLength: 32}
    string county?;
    @constraint:String {maxLength: 20}
    string postalCode?;
    @constraint:String {maxLength: 40}
    string state?;
    @constraint:String {maxLength: 32}
    string taxRegion?;
};

public type DeleteWorkflowSuccess record {
    # The id of the deleted workflow
    string id?;
    # The indicator for whether the deletion was a success
    boolean success?;
};

# 
public type QueryCustomObjectsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    record {||}[] data?;
|};

# The notification history deletion task information.
public type NotificationsHistoryDeletionTaskResponse record {
    # The ID of the account whose notification histories are deleted by the current deletion task.
    string accountId?;
    # The ID of the user who submits the notification history deletion task.
    string createdBy?;
    # The timestamp when the notification history deletion task is created.
    int createdOn?;
    # The ID of the notification history deletion task.
    string id?;
    # The status of the notification history deletion task.
    "RUNNING"|"FINISHED"|"FAILED" status?;
    # The ID of the tenant where the notification history deletion task runs.
    string tenantId?;
};

# Container for custom fields of a Product object.
public type ProductObjectCustomFields record {
};

public type PreviewResult_invoices record {
    decimal amount?;
    decimal amountWithoutTax?;
    InvoiceItemPreviewResult[] invoiceItems?;
    string targetDate?;
    decimal taxAmount?;
};

public type ExportWorkflowVersionResponse record {
    Linkage[] linkages?;
    Task[] tasks?;
    # A workflow.
    Workflow workflow?;
};

# Response body if the request is executed successfully.
public type BodyInSettingValueReponse record {
};

public type POSTSettlePaymentRequest record {
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The payout ID from the gateway side.
    string payoutId?;
    # The date and time of the transaction settlement. The format is `yyyy-mm-dd hh:mm:ss`.
    string settledOn?;
};

# Container for custom fields of a Product Rate Plan Charge object.
public type ProductRatePlanChargeObjectCustomFields record {
};

public type GETProductChargeDefinitionResponse record {
    # Indicates which type of charge the discount charge applies to.
    "ONETIME"|"RECURRING"|"USAGE"|"ONETIMERECURRING"|"ONETIMEUSAGE"|"RECURRINGUSAGE"|"ONETIMERECURRINGUSAGE"? applyDiscountTo?;
    # The bill cycle type for the charge.
    string billingDay?;
    # The billing period for the product charge definition.
    string billingPeriod?;
    # The billing period alignment setting for the charge.
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart"|"AlignToTermEnd" billingPeriodAlignment?;
    # The billing timing setting for the product charge definition.
    "IN_ADVANCE"|"IN_ARREARS" billingTiming?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    "DiscountFixedAmount"|"DiscountPercentage"|"FlatFee"|"PerUnit"|"Overage"|"Tiered"|"TieredWithOverage"|"Volume"|"Delivery"|"MultiAttributePricing"|"PreratedPerUnit"|"PreratedPricing"|"HighWatermarkVolumePricing"|"HighWatermarkTieredPricing" chargeModel?;
    # Indicates the type of charge.
    "OneTime"|"Recurring"|"Usage" chargeType?;
    # Container for custom fields of a Product Charge Definition object.
    ProductChargeDefinitionObjectCustomFields customFields?;
    # The default quantity. 
    # 
    # This field is applicable only for one-time and recurring charges.
    decimal? defaultQuantity?;
    GETDeliverySchedule? deliverySchedule?;
    # The description for the charge.
    string description?;
    # The class that the discount belongs to. The discount class defines the order in which discount product rate plan charges are applied.
    # 
    # For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).
    string? discountClass?;
    # The application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account"? discountLevel?;
    # The effective end date of the product charge definition.
    string effectiveEndDate?;
    # The effective start date of the product charge definition.
    string effectiveStartDate?;
    # The end date condition for this charge.
    "Subscription_End"|"One_Time"|"Fixed_Period"|"Specific_End_Date" endDateCondition?;
    # Container for finance information of the rate plan charge.
    FinanceInformation_3 financeInformation?;
    # Indicates whether this charge definition is the default one for the charge.
    boolean isDefault?;
    # **Note**: This field is only applicable to the Discount - Percentage charge model.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 130 or higher. Otherwise, an error occurs.
    # 
    # This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:
    #   - `True`: This is a stacked discount, which should be calculated by stacking with other discounts.
    #   - `False`: This is not a stacked discount, which should be calculated in sequence with other discounts.
    # 
    # For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).
    boolean isStackedDiscount?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
    # This field is ued when overage smoothing model is `RollingWindow` or `Rollover`.
    int? numberOfPeriods?;
    # The list price base. 
    # 
    # This field is applicable only for recurring charges.
    # 
    # **Note**: The `Per_Year` enum value is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year" listPriceBase?;
    # Indicates the number of periods to use when calculating charges in an overage smoothing charge model. The valid value is a positive whole number.
    int numberOfPeriod?;
    # Determines when to calculate overage charges. If the value of the `SmoothingMode` field is not specified, the value of this field is ignored.
    # 
    # **Values**: 
    #   - `EndOfSmoothingPeriod`: This option is used by default. The overage is charged at the end of the smoothing period.
    #   - `PerBillingPeriod`: The overage is charged on-demand rather than waiting until the end of the smoothing period.
    "EndOfSmoothingPeriod"|"PerBillingPeriod"? overageCalculationOption?;
    # Determines whether to credit the customer with unused units of usage.
    "NoCredit"|"CreditBySpecificRate"? overageUnusedUnitsCreditOption?;
    # Applies an automatic price change when a termed subscription is renewed.
    "NoChange"|"SpecificPercentageValue"|"UseLatestProductCatalogPricing"? priceChangeOption?;
    # Applies an automatic price change when a termed subscription is renewed.
    "FromTenantPercentageValue"|"SpecificPercentageValue" priceIncreaseOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `priceIncreaseOption` value to `SpecificPercentageValue`.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a decimal value between -100 and 100
    decimal? priceIncreasePercentage?;
    # Container for the prices of the product charge definition.
    GETProductChargeDefinitionPricing[] prices?;
    # The unique ID of the product charge definition.
    string productChargeDefinitionId?;
    # The unique number (natural key) of the product charge definition.
    string productChargeDefinitionNumber?;
    # Container for the application details about a discount product rate plan charge. 
    # 
    # Only discount product rate plan charges have values for this field.
    GETProductDiscountApplyDetailsType[] productDiscountApplyDetails?;
    # The unique ID of the product charge of the charge definition.
    string productRatePlanChargeId?;
    # The unique number (natural key) of the product charge of the charge definition.
    string? productRatePlanChargeNumber?;
    # The unique ID of the product rate plan that uses this charge definition.
    string? productRatePlanId?;
    # Th name of the product rate plan that uses this charge definition.
    string? productRatePlanName?;
    # The unique number (natural key) of the product rate plan that uses this charge definition.
    string? productRatePlanNumber?;
    # The rating group based on which usage records are rated.
    # 
    # Possible values:                
    #   - `ByBillingPeriod`: The rating is based on all the usages in a billing period. 
    #   - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    #   - `ByUsageRecord`: The rating is based on each usage record.
    #   - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    #   - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Notes:** 
    #   - The `ByBillingPeriod` value can be applied for all charge models. 
    #   - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for Per Unit, Volume Pricing, and Tiered Pricing charge models. 
    #   - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    #   - Use this field only for Usage charges. One-time charges and recurring charges return `NULL`.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload"|"ByGroupId"? ratingGroup?;
    # The name of the recognized revenue account for this charge.
    #   - Required when the Allow Blank Accounting Code setting is No.
    #   - Optional when the Allow Blank Accounting Code setting is Yes.
    # 
    #   This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccount?;
    # Associates this product rate plan charge with a specific revenue recognition code.
    string? revRecCode?;
    # Indicates when revenue recognition begins.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate"? revRecTriggerCondition?;
    # Determines when to recognize the revenue for this charge.
    "Recognize upon invoicing"|"Recognize daily over time" revenueRecognitionRuleName?;
    # Indicates the smoothing model for an overage smoothing charge model.
    "RollingWindow"|"Rollover"? smoothingModel?;
    # The specific number of billing period for the product charge definition.
    decimal? specificBillingPeriod?;
    # The number of months for the list price base of the charge definition.  
    # This field is `null` if the `listPriceBase` field is not set to `Per_Specific_Months`.
    int:Signed32? specificListPriceBase?;
    # Indicates whether the request succeeded.
    boolean success?;
    # Specifies the tax code for taxation rules.
    # 
    # **Note**: This value affects the tax calculation of the rate plan charge.
    @constraint:String {maxLength: 64}
    string taxCode?;
    # Determines how to define taxation for the charge.
    # 
    # **Note**: This value affects the tax calculation of the rate plan charge.
    "TaxExclusive"|"TaxInclusive"? taxMode?;
    # Determines whether the charge definition is taxable.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `True`, `False`
    # 
    # **Note**: This value affects the tax calculation of the rate plan charge.
    boolean taxable?;
    # The number of periods of a termed subscription that is eligible for this charge definition. This field is applicable when the `termType` field is set to `TERMED`, 
    # and is to be used together with the `termPeriodType` field.
    decimal? term?;
    # The period type for the subscription term that is eligible for this charge definition.
    "Month"|"Year"|"Day"|"Week"? termPeriodType?;
    # The type of the subscription that is eligible for this charge definition.
    "TERMED"|"EVERGREEN"? termType?;
    # Specifies when to start billing the customer for the charge definition.
    # 
    # **Values**:
    #   - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    #   - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
    #   - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance" triggerEvent?;
    # Indicates the unit of measure (UOM) that is configured in **Settings > Billing** for the product rate plan charge.
    string? uom?;
    # The number of up-to periods for this charge.
    decimal? upToPeriods?;
    # The up-to-periods type for this charge.
    "Billing_Periods"|"Days"|"Weeks"|"Months"|"Years"? upToPeriodsType?;
    # Determines how Zuora processes usage records for per-unit usage charges.
    "EndOfBillingPeriod"|"OnDemand"? usageRecordRatingOption?;
    # Determines whether to define a new accounting code for the new discount charge.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    boolean? useDiscountSpecificAccountingCode?;
    # Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. 
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    boolean useTenantDefaultForPriceChange?;
    # Indicates whether to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Indicates whether to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled.
    boolean excludeItemBookingFromRevenueAccounting?;
    # Indicates whether the charge segment is allocation eligible in revenue recognition. The default value is `false`.
    # 
    # **Values**: `true`, `false`
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.
    boolean isAllocationEligible?;
    # Specifies how to perform the accounting during revenue recognition. The default value is `false`.
    # 
    # **Values**: `true`, `false`
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.     
    boolean isUnbilled?;
    # This field is used to maintain the product category for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.    
    string productCategory?;
    # This field is used to maintain the product class for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.    
    string productClass?;
    # This field is used to maintain the product family for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.
    string productFamily?;
    # This field is used to maintain the product line for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.
    string productLine?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" revenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" revenueAmortizationMethod?;
};

public type GETDebitMemoItemTypewithSuccess record {
    # The amount of the debit memo item. For tax-inclusive debit memo items, the amount indicates the debit memo item amount including tax. For tax-exclusive debit memo items, the amount indicates the debit memo item amount excluding tax.
    decimal amount?;
    # The debit memo item amount excluding tax.
    decimal amountWithoutTax?;
    # The parent debit memo item that this debit memo items is applied to if this item is discount.
    string appliedToItemId?;
    # The balance of the debit memo item.
    decimal balance?;
    # The applied amount of the debit memo item.
    decimal beAppliedAmount?;
    # Comments about the debit memo item.
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string comment?;
    # The ID of the Zuora user who created the debit memo item.
    string createdById?;
    # The date and time when the debit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The description of the debit memo item.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string description?;
    # The flag to exclude the debit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Container for the finance information related to the debit memo item.
    GETDebitMemoItemTypewithSuccess_financeInformation financeInformation?;
    # The ID of the debit memo item.
    string id?;
    # The kind of the charge for the debit memo item. Its possible values are `Charge` and `Discount`. 
    string processingType?;
    # The number of units for the debit memo item.
    decimal quantity?;
    # The end date of the service period associated with this debit memo item. Service ends one second before the date specified in this field.
    string serviceEndDate?;
    # The start date of the service period associated with this debit memo item. If the associated charge is a one-time fee, this date is the date of that charge.
    string serviceStartDate?;
    # The SKU for the product associated with the debit memo item.
    string sku?;
    # The name of the SKU.
    string skuName?;
    # The ID of the sold-to contact associated with the invoice item.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string soldToContactId?;
    # The ID of the sold-to contact snapshot associated with the invoice item.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.               
    string soldToContactSnapshotId?;
    # The ID of the source item.
    string sourceItemId?;
    # The type of the source item.
    "CreditMemoItem"|"SubscriptionComponent"|"InvoiceDetail"|"ProductRatePlanCharge" sourceItemType?;
    # The ID of the subscription associated with the debit memo item.
    string subscriptionId?;
    # Container for the taxation items of the debit memo item. 
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    GETDMTaxItemType[] taxItems?;
    # The tax mode of the debit memo item, indicating whether the amount of the debit memo item includes tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # Container for the taxation items of the debit memo item. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    GETDebitMemoItemTypewithSuccess_taxationItems taxationItems?;
    # The units to measure usage.
    string unitOfMeasure?;
    # The per-unit price of the debit memo item.
    decimal unitPrice?;
    # The ID of the Zuora user who last updated the debit memo item.
    string updatedById?;
    # The date and time when the debit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *DebitMemoItemObjectCustomFields;
};

public type ErrorResponse401Record record {
    int code?;
    Error401[] details?;
    string message?;
};

public type PUTRefundType record {
    # Comments about the refund.
    @constraint:String {maxLength: 255}
    string comment?;
    # Container for the finance information related to the refund.
    PUTRefundType_financeInformation financeInformation?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    string reasonCode?;
    # The transaction ID returned by the payment gateway. Use this field to reconcile refunds between your gateway and Zuora Payments.
    # 
    # You can only update the reference ID for external refunds.
    @constraint:String {maxLength: 100}
    string referenceId?;
    *RefundObjectNSFields;
    *RefundObjectCustomFields;
};

# Filters to determine which records to be deleted in the bulk delete operation.
public type CustomObjectBulkDeleteFilter record {
    # Group of field filter conditions that are evaluated in conjunction with each other using the AND operator. The minimum number of conditions is 1 and the maximum is 2.
    CustomObjectBulkDeleteFilterCondition[] conditions;
};

public type NestedProductRatePlanOnExpand record {|
    # The unique identifier of the product rate plan.
    string id?;
    # The unique identifier of the user who created the product rate plan.
    string createdById?;
    # The date and time when the product rate plan was created.
    string createdDate?;
    # The unique identifier of the user who last updated the product rate plan.
    string updatedById?;
    # The date and time when the product rate plan was last updated.
    string updatedDate?;
    # The unique identifier of the product to which this product rate
    # plan belongs.
    string productId?;
    # The name of the product rate plan.
    string name?;
    # A description of the product rate plan.
    string description?;
    # First date the rate plan is active (i.e., available to be subscribed
    # to), as `yyyy-mm-dd`.  Before this date, the status is `NotStarted`.
    string effectiveStartDate?;
    # Final date the rate plan is active, as `yyyy-mm-dd`. After this date,
    # the rate plan status is `Expired`.
    string effectiveEndDate?;
    # The grade of the product rate plan.
    # 
    # 
    # **Note**: This field is in the **Early Adopter** phase. We are
    # actively soliciting feedback from a small set of early adopters before
    # releasing it as generally available. If you want to join this early
    # adopter program, submit a request at [Zuora Global
    # Support](http://support.zuora.com/).
    int:Signed32 grade?;
    # The natural key of the product rate plan. 
    string productRatePlanNumber?;
    # EXPANDABLE.
    # The product associated with the product rate plan.
    record {} product?;
    # EXPANDABLE.
    # The product rate plan charges on the product rate plan.
    record {}[] productRatePlanCharges?;
|};

public type GETDebitMemoItemType record {
    # The amount of the debit memo item. For tax-inclusive debit memo items, the amount indicates the debit memo item amount including tax. For tax-exclusive debit memo items, the amount indicates the debit memo item amount excluding tax.
    decimal amount?;
    # The debit memo item amount excluding tax.
    decimal amountWithoutTax?;
    # The parent debit memo item that this debit memo items is applied to if this item is discount.
    string appliedToItemId?;
    # The balance of the debit memo item.
    decimal balance?;
    # The applied amount of the debit memo item.
    decimal beAppliedAmount?;
    # Comments about the debit memo item.
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string comment?;
    # The ID of the Zuora user who created the debit memo item.
    string createdById?;
    # The date and time when the debit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # Description about the debit memo item.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string description?;
    # The flag to exclude the debit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Container for the finance information related to the debit memo item.
    GETDebitMemoItemTypewithSuccess_financeInformation financeInformation?;
    # The ID of the debit memo item.
    string id?;
    # The kind of the charge for the debit memo item. Its possible values are `Charge` and `Discount`. 
    string processingType?;
    # The number of units for the debit memo item.
    decimal quantity?;
    # The end date of the service period associated with this debit memo item. Service ends one second before the date specified in this field.
    string serviceEndDate?;
    # The start date of the service period associated with this debit memo item. If the associated charge is a one-time fee, this date is the date of that charge.
    string serviceStartDate?;
    # The SKU for the product associated with the debit memo item.
    string sku?;
    # The name of the SKU.
    string skuName?;
    # The ID of the sold-to contact associated with the invoice item.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string soldToContactId?;
    # The ID of the sold-to contact snapshot associated with the invoice item.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.             
    string soldToContactSnapshotId?;
    # The ID of the source item.
    string sourceItemId?;
    # The type of the source item.
    "CreditMemoItem"|"SubscriptionComponent"|"InvoiceDetail"|"ProductRatePlanCharge" sourceItemType?;
    # The ID of the subscription associated with the debit memo item.
    string subscriptionId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Container for the taxation items of the debit memo item.. 
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    GETDMTaxItemType[] taxItems?;
    # The tax mode of the debit memo item, indicating whether the amount of the debit memo item includes tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # Container for the taxation items of the debit memo item.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    GETDebitMemoItemType_taxationItems taxationItems?;
    # The units to measure usage.
    string unitOfMeasure?;
    # The per-unit price of the debit memo item.
    decimal unitPrice?;
    # The ID of the Zuora user who last updated the debit memo item.
    string updatedById?;
    # The date and time when the debit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *DebitMemoItemObjectCustomFields;
};

public type ExpandedProcessedUsage record {|
    # The unique identifier of the processed usage.
    string id?;
    # The unique identifier of the user who created the processed usage.
    string createdById?;
    # The date and time when the processed usage was created.
    string createdDate?;
    # The unique identifier of the user who last updated the processed usage.
    string updatedById?;
    # The date and time when the processed usage was last updated.
    string updatedDate?;
    # The unique identifier of the usage.
    string usageId?;
    # The amount of the processed usage.
    decimal amount?;
    # The end date of the billing period for the processed usage.
    string billingPeriodEndDate?;
    # The start date of the billing period for the processed usage.
    string billingPeriodStartDate?;
    # The unique identifier of the invoice item associated with the processed usage.
    string invoiceItemId?;
    # The unique identifier of the credit memo item associated with the processed usage.
    string creditMemoItemId?;
    NestedUsageOnExpand usage?;
    NestedInvoiceItemOnExpand invoiceItem?;
    NestedCreditMemoItemOnExpand creditMemoItem?;
|};

public type PUTOrderActionTriggerDatesRequestType_subscriptions record {
    PUTOrderActionTriggerDatesRequestType_orderActions[] orderActions?;
    # Subscription number of a subscription in the `Pending` order for which you are to update the triggering dates. For example, A-S00000001.
    @constraint:String {maxLength: 100}
    string subscriptionNumber;
};

public type POSTUsageResponseType record {
    # The path for checking the status of the import.
    # 
    # The possible status values at this path are `Pending`, `Processing`, `Completed`, `Canceled`, and `Failed`. Only `Completed` indicates that the file contents were imported successfully.
    string checkImportStatus?;
    # The size of the uploaded file in bytes.
    int size?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type NestedRatePlanOnExpand record {|
    # The unique identifier of the rate plan.
    string id?;
    # The unique identifier of the user who created the rate plan.
    string createdById?;
    # The date and time when the rate plan was created.
    string createdDate?;
    # The unique identifier of the user who last updated the rate plan.
    string updatedById?;
    # The date and time when the rate plan was last updated.
    string updatedDate?;
    # The unique identifier of the product associated with the rate plan.
    string productId?;
    # The unique identifier of the amendment made to the subscription.
    string amendmentId?;
    # The type of amendment associated with the rate plan. This field only applies to amendment rate plans.
    string amendmentType?;
    # The name of the rate plan.
    string name?;
    # The unique identifier of the product rate plan that the rate plan is based on.
    string productRatePlanId?;
    # The unique identifier of the subscription associated with the rate plan.
    string subscriptionId?;
    # The unique identifier of the account that owns the subscription.
    string subscriptionOwnerId?;
    # The unique identifier of the account that will pay the invoice.
    string invoiceOwnerId?;
    # Indicates the unique identifier for the rate plan purchased on a
    # third-party store. This field is used to represent a subscription rate
    # plan created through third-party stores.
    string externallyManagedPlanId?;
    # The original ID of the subscription rate plan, which is the ID of the subscription rate plan in the version-1 subscription.
    string originalRatePlanId?;
    # The unique identifier of the subscription offer associated with the rate plan.
    string subscriptionOfferId?;
    # The number of the rate plan in the subscription.
    string subscriptionRatePlanNumber?;
    # EXPANDABLE.
    # The subscription associated with the rate plan.
    record {} subscription?;
    # EXPANDABLE.
    # The product rate plan associated with the rate plan.
    record {} productRatePlan?;
    # EXPANDABLE.
    # The rate plan charges on the rate plan.
    record {}[] ratePlanCharges?;
|};

# Container for Product Rate Plan Charge fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type ProductRatePlanChargeObjectNSFields record {
    # Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Class__NS?;
    # Deferrred revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string DeferredRevAccount__NS?;
    # Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Department__NS?;
    # Specifies whether the corresponding item in NetSuite is visible under child subsidiaries. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    "Yes"|"No" IncludeChildren__NS?;
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the product rate plan charge's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Type of item that is created in NetSuite for the product rate plan charge. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    "Inventory"|"Non Inventory"|"Service" ItemType__NS?;
    # Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Location__NS?;
    # Recognized revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string RecognizedRevAccount__NS?;
    # End date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    "Charge Period Start"|"Rev Rec Trigger Date"|"Use NetSuite Rev Rec Template" RevRecEnd__NS?;
    # Start date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    "Charge Period Start"|"Rev Rec Trigger Date"|"Use NetSuite Rev Rec Template" RevRecStart__NS?;
    # Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string RevRecTemplateType__NS?;
    # Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Subsidiary__NS?;
    # Date when the product rate plan charge was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
};

public type GETMassUpdateType record {
    # Type of mass action.
    string actionType?;
    # Date and time that the mass action was completed. The format is `yyyy-MM-dd hh:mm:ss`.
    string endedOn?;
    # Total number of failed records.
    # 
    # This field is updated in real time. When the mass action **status** is Processing, this field returns the number of records that have failed so far. When the mass action **status** is Pending, this field is null.
    string errorCount?;
    # Size of the input file in bytes.
    int inputSize?;
    # Size of the response file in bytes.
    int outputSize?;
    # Type of output for the response file. The following table describes the output type.
    # 
    # | Output Type    | Description                         |
    # |----------------|-------------------------------------|
    # | (url:.csv.zip) | URL pointing to a zipped .csv file. |
    string outputType?;
    # URL to download the response file. The response file is a zipped .csv file. 
    # The response file is identical to the file you uploaded to perform the mass action, with additional columns providing information about the outcome of each record. 
    # This field only returns a value when the mass action **status** is Completed or Stopped. Otherwise, this field is null.
    string outputURL?;
    # Total number of processed records. This field is equal to the sum of `errorCount` and `successCount`.
    # 
    # This field is updated in real time. When the mass action **status** is Processing, this field returns the number of records that have been processed so far. When the mass action **status** is Pending, this field is null.
    string processedCount?;
    # Date and time that Zuora started processing the mass action. The format is `yyyy-MM-dd hh:mm:ss`.
    string startedOn?;
    # Status of the mass action. The following table describes the mass action statuses.
    # 
    # | Status     | Description                                                                |
    # |------------|----------------------------------------------------------------------------|
    # | Pending    | Mass action has not yet started being processed.                           |
    # | Processing | Mass action is in progress.                                                |
    # | Stopping   | Mass action is in the process of stopping, but has not yet stopped.        |
    # | Stopped    | Mass action has stopped.                                                   |
    # | Completed  | Mass action was successfully completed. There may still be failed records. |
    # | Failed     | Mass action failed. No records are processed. No response file is created. |
    string status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Total number of successful records.
    # This field is updated in real time. When the mass action **status** is Processing, this field returns the number of records that have succeeded so far. When the mass action **status** is Pending, this field is null.
    string successCount?;
    # Total number of records in the uploaded mass action file.
    # When the mass action **status** is Pending, this field is null.
    string totalCount?;
    # Email of the person who uploaded the mass action file.
    string uploadedBy?;
    # Date and time that the mass action file was uploaded. The format is `yyyy-MM-dd hh:mm:ss`.
    string uploadedOn?;
};

public type PostOrderResponseType_orderLineItems record {
    # The sytem generated Id for the Order Line Item.
    @constraint:String {maxLength: 32}
    string id?;
    # The number for the Order Line Item.
    @constraint:String {maxLength: 100}
    string itemNumber?;
};

# Request payload if any
public type BodyInSettingValueRequest record {
};

public type ApplyCreditMemoType record {
    # Container for debit memos that the credit memo is applied to. The maximum number of debit memos is 1,000.
    CreditMemoApplyDebitMemoRequestType[] debitMemos?;
    # The date when the credit memo is applied.
    string effectiveDate?;
    # Container for invoices that the credit memo is applied to. The maximum number of invoices is 1,000.
    CreditMemoApplyInvoiceRequestType[] invoices?;
};

public type GetWorkflowResponse record {
    # The overall CPU time for the execution of the workflow.
    string cpuTime?;
    # The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format..
    string createdAt?;
    # The date and time when the execution of the workflow completes, in the `YYYY-MM-DD HH:MM:SS` format.
    string finishedAt?;
    # The unique ID of the workflow.
    int id?;
    # Messages from tasks. 
    # 
    # **Note:** This field is only returned in Production.
    record {} messages?;
    # The unique run number of the workflow.
    string name?;
    # The ID of the workflow setup.
    string originalWorkflowId?;
    # The execution time of the workflow including the waiting time, in seconds.
    decimal runTime?;
    # The status of the workflow:
    #   - Queued: The workflow is in queue for being processed.
    #   - Processing: The workflow is in process.
    #   - Stopping: The workflow is being stopped through Zuora UI.
    #   - Stopped: The workflow is stopped through Zuora UI.
    #   - Finished: The workflow is finished. When a workflow is finished, it might have tasks pending for retry or delay. Pending tasks do not block the onfinish branch of the workflow, but they block the oncomplete branch of the iterate. 
    "Queued"|"Processing"|"Stopping"|"Stopped"|"Finished" status?;
    # An object containing task counts.
    GetWorkflowResponse_tasks tasks?;
    # The type of the current workflow. Possible values:
    #   - `Workflow::Setup`: The workflow is a setup and is used for creating workflow instances.
    #   - `Workflow::Instance`: The workflow is an execution that has data.
    string 'type?;
    # The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.
    string updatedAt?;
};

public type PUTAccountingPeriodType record {
    # The end date of the accounting period in yyyy-mm-dd format, for example, "2016-02-19".
    string endDate?;
    # Fiscal year of the accounting period in yyyy format, for example, "2016".
    string fiscalYear?;
    # 
    int fiscal_quarter?;
    # Name of the accounting period.
    # 
    # Accounting period name must be unique. Maximum of 100 characters.
    string name?;
    # Notes about the accounting period.
    # 
    # Maximum of 255 characters.
    string notes?;
    # The start date of the accounting period in yyyy-mm-dd format, for example, "2016-02-19".
    string startDate?;
    *AccountingPeriodObjectCustomFields;
};

public type GetStoredCredentialProfilesResponse_profiles record {
    # The date when the stored credential profile was activated (if applicable).
    string activatedOn?;
    # The date when the stored credential profile was created.
    string agreedOn?;
    # The stored credential transaction framework. For example, Visa.
    string brand?;
    # The date when the stored credential profile was cancelled (if applicable).
    string cancelledOn?;
    # Your reference for the consent agreement that you have established with the customer.
    @constraint:String {maxLength: 128}
    string consentAgreementRef?;
    "External" consentAgreementSrc?;
    # The date when the stored credential profile was expired (if applicable).
    string expiredOn?;
    # The number that identifies the stored credential profile within the payment method.
    int number?;
    # ID of the payment method.
    string paymentMethodId?;
    # The status of the stored credential profile.
    # 
    # * `Agreed` - The stored credential profile has not been validated via an authorization transaction with the payment gateway.
    # * `Active` - The stored credential profile has been validated via an authorization transaction with the payment gateway.
    # * `Cancelled` - The stored credentials are no longer valid, per a customer request. Zuora cannot use the stored credentials in transactions.
    # * `Expired` - The stored credentials are no longer valid, per an expiration policy in the stored credential transaction framework. Zuora cannot use the stored credentials in transactions.
    "Agreed"|"Active"|"Cancelled"|"Expired" status?;
    "Recurring"|"Unscheduled" 'type?;
};

public type V1_bulk_body record {
    # File containing data about the mass action you want to perform. The file requirements are the same as when uploading a file through the Mass Updater in the Zuora UI. The file must be a `.csv` file or a zipped `.csv` file.
    # 
    # The maximum file size is 4 MB.
    # 
    # The data in the file must be formatted according to the mass action type you want to perform.
    record {byte[] fileContent; string fileName;} file;
    # Container for the following fields. You must format this parameter as a JSON object.
    # 
    # * `actionType` (string, **Required**) - Type of mass action you want to perform. The following mass actions are supported: `UpdateAccountingCode`, `CreateRevenueSchedule`, `UpdateRevenueSchedule`, `DeleteRevenueSchedule`, `ImportFXRate`, and `MPU`.
    # 
    # * `checksum` (string) - An MD5 checksum that is used to validate the integrity of
    #   the uploaded file. The checksum is a 32-character string.
    string params;
};

public type PostOrderLineItemUpdateType record {
    # The sytem generated Id for the Order Line Item(OLI). Use this field to specify which OLI to update.
    string id;
    *OrderLineItemCommon;
};

public type CustomObjectDefinitionUpdateActionResponse record {
    # Optional property for `updateObject` action
    string description?;
    # Indicates whether to audit the creation of custom object records of this custom object definition.
    boolean enableCreateRecordAuditing?;
    # Indicates whether to audit the deletion of custom object records of this custom object definition.
    boolean enableDeleteRecordAuditing?;
    # A reference to a field.
    UpdateCustomObjectCusotmField 'field?;
    # Optional property for `updateObject` action
    string label?;
    # The namespace of the custom object definition to be updated
    string namespace?;
    # The API name of the custom object definition to be updated
    string 'object?;
    CustomObjectDefinitionUpdateActionResponse_relationship relationship?;
    # The type of the updating action on a custom object definition
    "addField"|"deleteField"|"updateField"|"updateObject"|"renameField"|"addRelationship"|"deleteRelationship" 'type?;
};

public type PUTPMCreditCardInfo record {
    # One or two digits expiration month (1-12).
    #         
    int expirationMonth?;
    # Four-digit expiration year.
    int expirationYear?;
    # Optional. It is the CVV or CVV2 security code specific for the credit card or debit card. To ensure PCI compliance, this value is not stored and cannot be queried. 
    # 
    # If securityCode code is not passed in the request payload, this operation only updates related fields in the payload. It does not validate the payment method through the gateway.
    # 
    # If securityCode is passed in the request payload, this operation retrieves the credit card information from payload and validates them through the gateway.
    string securityCode?;
};

# Container for custom fields of an Invoice Item object.
public type InvoiceItemObjectCustomFields record {
};

public type Inline_response_400 record {
    # The list of errors returned from the workflow
    WorkflowError[] errors?;
};

public type PostOrderPreviewResponseType record {
    *CommonResponse;
    # The result of each type of preview. Returned only when the current request is preview call.
    PreviewResult previewResult?;
};

public type POSTReversePaymentResponse record {
    # The ID of the customer account that the payment is for.
    string accountId?;
    # The total amount of the payment.
    decimal amount?;
    # The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the payment.
    string comment?;
    # The ID of the Zuora user who created the refund.
    string createdById?;
    # The date and time when the chargeback is created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-01 15:31:10.
    string createdDate?;
    # The ID of the credit memo that is refunded.
    string creditMemoId?;
    # Container for the finance information related to the refund.
    POSTReversePaymentResponse_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the payment.
    string gatewayId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the payment. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the payment. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the payment in the gateway; specifically used for reconciliation.
    "Submitted"|"NotSubmitted"|"Settled"|"FailedToSettle" gatewayState?;
    # The ID of the payment chargeback.
    string id?;
    # The date and time when a charge was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # How an external refund was issued to a customer. 
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The unique identification number of the payment. For example, P-00000001.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the payment that is refunded.
    string paymentId?;
    # The unique ID of the payment method that the customer used to make the payment.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
    string paymentMethodSnapshotId?;
    # The payout ID from the gateway side.
    string payoutId?;
    # A code identifying the reason for the transaction.   
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2017-03-01.
    string refundDate?;
    # The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
    string refundTransactionTime?;
    # The transaction ID returned by the payment gateway if there is an additional refund. 
    string secondRefundReferenceId?;
    # The date and time when the transaction is settled, in `yyyy-mm-dd hh:mm:ss` format.
    string settledOn?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptor?;
    # A payment gateway-specific field that maps Zuora to other gateways.          
    string softDescriptorPhone?;
    # The status of the payment.
    string status?;
    # The date and time when the payment was submitted, in yyyy-mm-dd hh:mm:ss format.
    string submittedOn?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The type of the payment.
    "External"|"Electronic" 'type?;
    # The ID of the Zuora user who last updated the payment.
    string updatedById?;
    # The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-02 15:36:10.
    string updatedDate?;
};

public type POSTChargeDefinitionResponse record {
    # The unique ID of the product charge definition.
    string chargeDefinitionId?;
    # The unique number (natural key) of the product charge definition.
    string chargeDefinitionNumber?;
    # Indicates whether the request succeeded.
    boolean success?;
};

public type PutOrderLineItemResponseType CommonResponse;

public type DebitMemoFromChargeCustomRatesType record {
    # The currency code for either Reporting or Home currency.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string currency;
    # The Custom FX conversion rate between home currency and transactional currency items.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    decimal customFxRate;
    # The date on which a particular currency rate is fixed or obtained on.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string rateDate?;
    *DebitMemoItemObjectCustomFields;
};

# Container for custom fields of the Rate Plan or Subscription Offer object. The custom fields of the Rate Plan object are used when rate plans are subscribed, and the custom fields of the Subscription Offer object are used when product offers are subscribed.
public type OrdersRatePlanObjectCustomFields record {
};

public type POSTContactType record {
    # The ID of the account associated with the contact. 
    # 
    # **Note**: When creating a contact, you must specify `accountNumber`, `accountId`, or both in the request body. If both fields are specified, they must correspond to the same account.
    string accountId?;
    # The number of the customer account associated with the contact. 
    # 
    # **Note**: When creating a contact, you must specify `accountNumber`, `accountId`, or both in the request body. If both fields are specified, they must correspond to the same account.
    string accountNumber?;
    # The first line of the contact's address, which is often a street address or business name.
    @constraint:String {maxLength: 255}
    string address1?;
    # The second line of the contact's address.
    @constraint:String {maxLength: 255}
    string address2?;
    # The city of the contact's address.
    @constraint:String {maxLength: 40}
    string city?;
    # A description for the contact.
    @constraint:String {maxLength: 100}
    string contactDescription?;
    # The country of the contact's address.
    @constraint:String {maxLength: 64}
    string country?;
    # The county. May optionally be used by Zuora Tax to calculate county tax.
    @constraint:String {maxLength: 32}
    string county?;
    # The contact's fax number.
    @constraint:String {maxLength: 40}
    string fax?;
    # The contact's first name.
    @constraint:String {maxLength: 100}
    string firstName;
    # The contact's home phone number.
    @constraint:String {maxLength: 40}
    string homePhone?;
    # The contact's last name.
    @constraint:String {maxLength: 100}
    string lastName;
    # The mobile phone number of the contact.
    @constraint:String {maxLength: 100}
    string mobilePhone?;
    # A nickname for the contact.
    @constraint:String {maxLength: 100}
    string nickname?;
    # An additional phone number for the contact.
    @constraint:String {maxLength: 40}
    string otherPhone?;
    # The type of the additional phone number.
    "Work"|"Mobile"|"Home"|"Other" otherPhoneType?;
    # The contact's personal email address.
    @constraint:String {maxLength: 74}
    string personalEmail?;
    # The state or province of the contact's address.
    @constraint:String {maxLength: 40}
    string state?;
    # If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.
    @constraint:String {maxLength: 32}
    string taxRegion?;
    # The contact's business email address.
    @constraint:String {maxLength: 74}
    string workEmail?;
    # The contact's business phone number.
    @constraint:String {maxLength: 40}
    string workPhone?;
    # The zip code for the contact's address.
    @constraint:String {maxLength: 20}
    string zipCode?;
    *ContactObjectCustomFields;
};

public type GETIntervalPriceType record {
    # Duration period of this interval.
    int duration?;
    # Price of this interval.
    decimal price?;
    # A system-generated number that indicates the sequence in which each interval price is billed.
    int sequence?;
    GETIntervalPriceTierType[] subscriptionChargeIntervalPriceTiers?;
    # Interval type of this pricing.
    "Day"|"Month"|"Infinity" 'type?;
};

public type NestedRefundApplicationItemOnExpand record {|
    # The unique identifier of the refund application item.
    string id?;
    # The unique identifier of the user who created the refund application item.
    string createdById?;
    # The date and time when the refund application item was created.
    string createdDate?;
    # The unique identifier of the user who last updated the refund application item.
    string updatedById?;
    # The date and time when the refund application item was last updated.
    string updatedDate?;
    # The amount of the refund application item.
    decimal amount?;
    # The date when the refund application item becomes effective.
    string effectiveDate?;
    # The ID of the application group to which this refund application belongs.
    string applicationGroupId?;
    # The ID of the refund application to which this refund application item belongs.
    string refundApplicationId?;
    # The Account Receivable accounting code of a standalone charge.
    string accountReceivableAccountingCodeId?;
    # The accounting code that maps to an on account in your accounting system.
    string onAccountAccountingCodeId?;
    # The accounting code for the unapplied payment.
    string unappliedPaymentAccountingCodeId?;
    # The accounting code for cash payments.
    string cashAccountingCodeId?;
    # The ID of the journal entry that corresponds to this transaction.
    string journalEntryId?;
    # The unique identifier of the credit taxation item to which the refund application item is applied.
    string creditTaxationItemId?;
    # The unique identifier of the credit memo item to which the refund application item is applied.
    string creditMemoItemId?;
    # EXPANDABLE. The refund application object that contains the refund application item.
    record {} refundApplication?;
|};

public type ExpandedRefundApplication record {|
    # The unique identifier of the refund application.
    string id?;
    # The unique identifier of the user who created the refund application.
    string createdById?;
    # The date and time when the refund application was created.
    string createdDate?;
    # The unique identifier of the user who last updated the refund application.
    string updatedById?;
    # The date and time when the refund application was last updated.
    string updatedDate?;
    string accountId?;
    # The ID of the application group to which this payment application belongs.
    string applicationGroupId?;
    # The total amount of the refund to be applied.
    decimal applyAmount?;
    # The unique identifier of the credit memo to which the associated payment was applied.
    string creditMemoId?;
    # The date when the refund application becomes effective.
    string effectiveDate?;
    # The unique identifier of the invoice to which the associated payment was applied.
    string invoiceId?;
    # The unique identifier of the payment associated with the refund application.
    string paymentId?;
    # The unique identifier of the refund associated with the refund application.
    string refundId?;
    # The accountReceivableAccountingCode of a standalone charge.
    string accountReceivableAccountingCodeId?;
    # The accounting code that maps to an on account in your accounting
    # system.
    string onAccountAccountingCodeId?;
    # The accounting code for the unapplied payment.
    string unappliedPaymentAccountingCodeId?;
    # The accounting code for cash payments.
    string cashAccountingCodeId?;
    # The ID of the journal entry that corresponds to this transaction.
    string journalEntryId?;
    NestedRefundOnExpand refund?;
    NestedPaymentOnExpand payment?;
    NestedRefundApplicationItemOnExpand[] refundApplicationItems?;
|};

public type PutInvoiceType record {
    # Whether invoices are automatically picked up for processing in the corresponding payment run.
    # By default, invoices are automatically picked up for processing in the corresponding payment run.
    boolean autoPay?;
    # Additional information related to the invoice that a Zuora user added to the invoice.
    @constraint:String {maxLength: 255}
    string comments?;
    # The date by which the payment for this invoice is due.
    string dueDate?;
    # The new invoice date of the invoice. The new invoice date cannot fall in a closed accounting period.
    # You can only specify `invoiceDate` or `dueDate` in one request. Otherwise, an error occurs.
    string invoiceDate?;
    # Container for invoice items, The maximum number of items is 1,000.
    PutInvoiceItemType[] invoiceItems?;
    # Whether the invoice was transferred to an external accounting system.
    "Processing"|"Yes"|"Error"|"Ignore" transferredToAccounting?;
    *InvoiceObjectNSFields;
    *InvoiceObjectCustomFields;
};

public type PUTOrderPatchRequestType record {
    # Container for custom fields of an Order object.
    OrderObjectCustomFields customFields?;
    PUTOrderPatchRequestType_subscriptions[] subscriptions?;
};

public type SoldToContact record {
    # First line of the contact's address. This is often a street address or a business name.
    @constraint:String {maxLength: 255}
    string address1?;
    # Second line of the contact's address.
    @constraint:String {maxLength: 255}
    string address2?;
    # City of the contact's address.
    @constraint:String {maxLength: 40}
    string city?;
    # Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.
    @constraint:String {maxLength: 64}
    string country?;
    # County of the contact's address.
    @constraint:String {maxLength: 32}
    string county?;
    # Fax number of the contact.
    @constraint:String {maxLength: 40}
    string fax?;
    # First name of the contact.
    @constraint:String {maxLength: 100}
    string firstName;
    # Home phone number of the contact.
    @constraint:String {maxLength: 40}
    string homePhone?;
    # Last name of the contact.
    @constraint:String {maxLength: 100}
    string lastName;
    # Mobile phone number of the contact.
    @constraint:String {maxLength: 40}
    string mobilePhone?;
    # Nickname of the contact.
    @constraint:String {maxLength: 100}
    string nickname?;
    # Additional phone number of the contact. Use the `otherPhoneType` field to specify the type of phone number.
    @constraint:String {maxLength: 40}
    string otherPhone?;
    # Specifies the type of phone number in the `otherPhone` field.
    "Work"|"Mobile"|"Home"|"Other" otherPhoneType?;
    # Personal email address of the contact.
    @constraint:String {maxLength: 80}
    string personalEmail?;
    # ZIP code or other postal code of the contact's address.
    @constraint:String {maxLength: 20}
    string postalCode?;
    # State or province of the contact's address.
    @constraint:String {maxLength: 40}
    string state?;
    # Region defined in your taxation rules. Only applicable if you use Zuora Tax.
    @constraint:String {maxLength: 32}
    string taxRegion?;
    # Business email address of the contact.
    @constraint:String {maxLength: 80}
    string workEmail?;
    # Business phone number of the contact.
    @constraint:String {maxLength: 40}
    string workPhone?;
    *ContactObjectCustomFields;
};

# 
public type QueryRefundApplicationsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedRefundApplication[] data?;
|};

public type DebitMemoCollectResponse record {
    # The information about which credit memo applied to the specific debit memo.
    DebitMemoCollectResponseAppliedCreditMemos[] appliedCreditMemos?;
    # The information about which payment applied to the specific debit memo.
    DebitMemoCollectResponseAppliedPayments[] appliedPayments?;
    # The information about the debit memo that just collected.
    DebitMemoCollectResponse_debitMemo debitMemo?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The information about the payment that newly processed to the debit memo.
    DebitMemoCollectResponse_processedPayment processedPayment?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Container for the finance information related to the refund.
public type PUTRefundType_financeInformation record {
    # The accounting code that maps to a bank account in your accounting system.
    @constraint:String {maxLength: 100}
    string bankAccountAccountingCode?;
    # Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The accounting code for the unapplied payment.
    @constraint:String {maxLength: 100}
    string unappliedPaymentAccountingCode?;
};

# Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
public type RecurringTieredPricingOverride record {
    *PriceChangeParams;
    # Specifies the duration of each recurring period.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # List of tier prices with intervals. 
    # The `priceIntervals` field is not supported for a charge subscribed via a RatePlan, you can only override the `priceIntervals` field for a charge subscribed via an offer.
    # 
    # **Note**: You must enable the Offers feature to access this field. The Offers feature is in the Early Adopter phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at <a href="https://support.zuora.com/hc/en-us" target="_blank">Zuora Global Support</a>.
    PriceIntervalWithTiers[] priceIntervals?;
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.
    # 
    # **Note**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.              
    @constraint:Int {minValue: 1, maxValue: 200}
    int:Signed32 specificListPriceBase?;
    # List of cumulative pricing tiers in the charge.
    ChargeTier[] tiers?;
};

public type GETAccountingPeriodType record {
    # ID of the user who created the accounting period.
    string createdBy?;
    # Date and time when the accounting period was created.
    string createdOn?;
    # The end date of the accounting period.
    string endDate?;
    # File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://developer.zuora.com/api-references/api/operation/GET_Files) REST API call.
    GETAccountingPeriodWithoutSuccessType_fileIds fileIds?;
    # Fiscal year of the accounting period.
    string fiscalYear?;
    # 
    int fiscal_quarter?;
    # ID of the accounting period.
    string id?;
    # Name of the accounting period.
    string name?;
    # Any optional notes about the accounting period.
    string notes?;
    # The organization(s) that the object belongs to. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.            
    GETProductType_organizationLabels[] organizationLabels?;
    # Date and time that the trial balance was completed. If the trial balance status is `Pending`, `Processing`, or `Error`, this field is `null`.
    string runTrialBalanceEnd?;
    # If trial balance status is Error, an error message is returned in this field.
    string runTrialBalanceErrorMessage?;
    # Date and time that the trial balance was run. If the trial balance status is Pending, this field is null.
    string runTrialBalanceStart?;
    # Status of the trial balance for the accounting period. Possible values:
    # 
    # * `Pending`
    # * `Processing`
    # * `Completed`
    # * `Error`
    string runTrialBalanceStatus?;
    # The start date of the accounting period.
    string startDate?;
    # Status of the accounting period. Possible values:
    # * `Open`
    # * `PendingClose`
    # * `Closed`
    string status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # ID of the user who last updated the accounting period.
    string updatedBy?;
    # Date and time when the accounting period was last updated.
    string updatedOn?;
    *AccountingPeriodObjectCustomFields;
};

public type POSTProductChargeDefinitionPricing record {
    # The currency for the price.
    string currency?;
    # The specific amount for a fixed discount. The field is applicable only for charges based on the Discount-Fixed Amount charge model.
    decimal discountAmount?;
    # The percentage of discount for a percentage discount. The field is applicable only for charges based on the Discount-Percentage charge model.
    decimal discountPercentage?;
    # The price of this item. 
    # 
    # This field is only applicable for charges based on the following charge models:
    #   - Flat Fee
    #   - Per Unit
    #   - Delivery Pricing
    decimal price?;
    # Container for the tiers of the price item. 
    # 
    # This field is only applicable for charges based on the following charge models:
    #   - Tiered Pricing
    #   - Volume Pricing
    # 
    # You must specify all relevant fields of all tiers, including pricing information for each currency.
    # For each currency, ensure that the tiers appear in ascending order of `StartingUnit`.
    # 
    # For example:
    # 
    # ```
    # [
    #   {
    #     "startingUnit": "1",
    #     "endingUnit": "150",
    #     "currency": "USD",
    #     "price": 1.95,
    #     "priceFormat": "Per Unit"
    #   },
    #   {
    #     "startingUnit": "151",
    #     "endingUnit": "300",
    #     "currency": "USD",
    #     "price": 1.45,
    #     "priceFormat": "Per Unit"
    #   },
    #   {
    #     "startingUnit": "1",
    #     "endingUnit": "150",
    #     "currency": "EUR",
    #     "price": 1.75,
    #     "priceFormat": "Per Unit"
    #   },
    #   {
    #     "startingUnit": "151",
    #     "endingUnit": "300",
    #     "currency": "EUR",
    #     "price": 1.30,
    #     "priceFormat": "Per Unit"
    #   }
    # ]
    # ```    
    POSTChargeDefinitionPricingTier[] tiers?;
};

# Container for the finance information related to the payment.
# 
# For a standalone payment, the finance information cannot be updated.
public type UpdatePaymentType_financeInformation record {
    # The accounting code that maps to a bank account in your accounting system.
    @constraint:String {maxLength: 100}
    string bankAccountAccountingCode?;
    # Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The accounting code for the unapplied payment.
    @constraint:String {maxLength: 100}
    string unappliedPaymentAccountingCode?;
};

public type POSTBillingPreviewCreditMemoItem record {
    # The amount of the credit memo item. For tax-inclusive credit memo items, the amount indicates the credit memo item amount including tax. For tax-exclusive credit memo items, the amount indicates the credit memo item amount excluding tax
    decimal amount?;
    # The credit memo item amount excluding tax.
    decimal amountWithoutTax?;
    # The unique ID of the credit memo item that the discount charge is applied to.
    string appliedToItemId?;
    # The date when the credit memo item is created.
    string chargeDate?;
    # Number of the charge.
    string chargeNumber?;
    # The type of charge. 
    # 
    # Possible values are `OneTime`, `Recurring`, and `Usage`.
    string chargeType?;
    # Comment of the credit memo item.
    string comment?;
    # Credit memo item id.
    string id?;
    # The number of deliveries dedicated to the Delivery Pricing charges. 
    # **Note**: This field is available only if you have the Delivery Pricing feature enabled.  
    decimal numberOfDeliveries?;
    # Identifies the kind of charge. 
    # 
    # Possible values:
    # * charge
    # * discount
    # * prepayment
    # * tax
    string processingType?;
    # Quantity of this item, in the configured unit of measure for the charge.
    string quantity?;
    # Id of the rate plan charge associated with this item.
    string ratePlanChargeId?;
    # End date of the service period for this item, i.e., the last day of the service period, in yyyy-mm-dd format.
    string serviceEndDate?;
    # Start date of the service period for this item, in yyyy-mm-dd format. If the charge is a one-time fee, this is the date of that charge.
    string serviceStartDate?;
    # Unique SKU for the product associated with this item.
    string sku?;
    # Name of the unique SKU for the product associated with this item.
    string skuName?;
    # ID of the subscription associated with this item.
    string subscriptionId?;
    # Name of the subscription associated with this item.
    string subscriptionNumber?;
    # Unit used to measure consumption.
    string unitOfMeasure?;
};

public type POSTResendEmailNotifications string[];

public type NestedSubscriptionOnExpand record {|
    # The unique identifier of the subscription.
    string id?;
    # The unique identifier of the user who created the subscription.
    string createdById?;
    # The date and time when the subscription was created in the Zuora
    # system, in the `yyyy-mm-dd hh:mm:ss` format.
    string createdDate?;
    # The unique identifier of the user who last updated the subscription.
    string updatedById?;
    # The date and time when the subscription was last updated, in the `yyyy-mm-dd hh:mm:ss` format.
    string updatedDate?;
    # The ID of the account associated with this subscription.
    string accountId?;
    # If `true`, the subscription automatically renews at the end of the
    # term. 
    boolean autoRenew?;
    # The date on which the subscription was canceled.
    string cancelledDate?;
    # The date when the customer accepts the contract, in the `yyyy-mm-dd` format.
    # 
    # If this field is not set:
    # 
    # - If the `serviceActivationDate` field is not set, the value of this
    # field is set to be the contract effective date.
    # 
    # - If the `serviceActivationDate` field is set, the value of this field
    # is set to be the service activation date.
    # 
    # 
    # The billing trigger dates must follow this rule:
    # 
    # contractEffectiveDate <= serviceActivationDate <=
    # contractAcceptanceDate
    string contractAcceptanceDate?;
    # The date when the subscription is activated, in the `yyyy-mm-dd` format.
    # 
    # 
    # You must specify a Service Activation date if the Customer Acceptance
    # date is set. If the Customer Acceptance date is not set, the value of
    # the `serviceActivationDate` field defaults to be the Contract
    # Effective Date.
    # 
    # 
    # The billing trigger dates must follow this rule:
    # 
    # 
    # contractEffectiveDate <= serviceActivationDate <=
    # contractAcceptanceDate
    string contractEffectiveDate?;
    # The ID of the account that created the subscription. This field is
    # automatically populated with the ID of the account that creates the
    # subscription.
    string creatorAccountId?;
    # The account ID that owns the invoices associated with the subscription or the amended subscription.
    string creatorInvoiceOwnerId?;
    # The length of the period for the current subscription term.
    int currentTerm?;
    # The period type for the current subscription term.
    "Month"|"Year"|"Day"|"Week" currentTermPeriodType?;
    # The length of the period for the initial subscription term.
    int initialTerm?;
    # The period type for the first subscription term.
    "Month"|"Year"|"Day"|"Week" initialTermPeriodType?;
    # The account ID that owns the invoices associated with the subscription. 
    string invoiceOwnerId?;
    # Determines if the subscription is invoiced separately. 
    # If `true`, then all charges for this subscription are collected into the subscription's own invoice.
    boolean isInvoiceSeparate?;
    # The name of the subscription.
    string name?;
    # Additional information about the subscription.
    @constraint:String {maxLength: 65535}
    string notes?;
    # The date when the subscription was originally created. 
    # This value is the same as the `createdDate` value until the subscription is amended.
    string originalCreatedDate?;
    # The original rate plan charge ID. Only available for update
    # subscription.
    string originalId?;
    # The ID of the previous subscription. This field is only available if
    # the subscription is a renewal subscription.
    string previousSubscriptionId?;
    # Specifies whether a termed subscription will remain `TERMED` or change to `EVERGREEN` when it is renewed. 
    "RENEW_WITH_SPECIFIC_TERM"|"RENEW_TO_EVERGREEN" renewalSetting?;
    # The length of the period for the subscription renewal term.
    int renewalTerm?;
    # The period type for the subscription renewal term.
    "Month"|"Year"|"Day"|"Week" renewalTermPeriodType?;
    # An auto-generated decimal value uniquely tagged with a subscription.
    # The value always contains one decimal place, for example, the revision
    # of a new subscription is 1.0. If a further version of the subscription
    # is created, the revision value will be increased by 1. Also, the
    # revision value is always incremental regardless of deletion of
    # subscription versions.
    string revision?;
    # The date on which the services or products within a subscription have been activated and access has been provided to the customer, in the `yyyy-mm-dd` format.
    string serviceActivationDate?;
    # Subscription status.
    "Draft"|"Pending Activation"|"Pending Acceptance"|"Active"|"Cancelled"|"Suspended" status?;
    # If `true`, the current subscription object is the latest version.
    boolean isLatestVersion?;
    # The date when the subscription term ends, where the subscription ends
    # at midnight the day before.
    # 
    # For example, if the `subscriptionEndDate` is 12/31/2016, the
    # subscriptions ends at midnight (00:00:00 hours) on 12/30/2016.
    # 
    # This date is the same as the term end date or the cancelation date, as
    # appropriate.
    string subscriptionEndDate?;
    # Date the subscription becomes effective.
    string subscriptionStartDate?;
    # The ID of the amendment made to this subscription version.
    string subscriptionVersionAmendmentId?;
    # Date the subscription term ends. If the subscription is evergreen,
    # this is null or is the cancellation date (if one has been set).
    string termEndDate?;
    # Date the subscription term begins. If this is a renewal subscription,
    # this date is different from the subscription start date.
    string termStartDate?;
    # The type of the subscription term.
    "TERMED"|"EVERGREEN" termType?;
    # This is the subscription version automatically generated by Zuora Billing. Each order or amendment creates a new version of the subscription, which incorporates the changes made in the order or amendment.
    int version?;
    # Monthly recurring revenue of the subscription.
    decimal cMRR?;
    # The ID of the bill-to contact snapshot.
    string billToContactSnapshotId?;
    # The ID of the bill-to contact for the subscription.
    string billToContactId?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # The ID of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact for the subscription.
    string soldToContactId?;
    # The ID of the sold-to contact snapshot.
    string soldToContactSnapshotId?;
    # An enum field on the Subscription object to indicate the name of a
    # third-party store. This field is used to represent subscriptions created
    # through third-party stores.
    "Amazon"|"Apple"|"Google"|"Roku" externallyManagedBy?;
    # The last booking date of the subscription object. This field is
    # writable only when the subscription is newly created as a first
    # version subscription. You can override the date value when creating a
    # subscription through the Subscribe and Amend API or the subscription
    # creation UI (non-Orders). Otherwise, the default value `today` is set
    # per the user's timezone. The value of this field is as follows:
    # 
    # * For a new subscription created by the [Subscribe and Amend
    # APIs](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Subscribe_and_Amend_APIs_to_Migrate),
    # this field has the value of the subscription creation date.
    # 
    # * For a subscription changed by an amendment, this field has the value
    # of the amendment booking date.
    # 
    # * For a subscription created or changed by an order, this field has
    # the value of the order date. 
    string lastBookingDate?;
    # The ID of the invoice schedule associated with the subscription.
    # 
    # 
    # If multiple invoice schedules are created for different terms of a
    # subscription, this field stores the latest invoice schedule.
    # 
    # 
    # **Note**: This field is available only if you have the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule"
    # target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleId?;
    # The reason for a subscription cancellation copied from the
    # `changeReason` field of a Cancel Subscription order action. 
    # 
    # This field contains valid value only if a subscription is cancelled
    # through the Orders UI or API. Otherwise, the value for this field will
    # always be `null`.
    string cancelReason?;
    # Whether the subscription is prepaid.
    boolean prepayment?;
    # The currency of the subscription.
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    string currency?;
    # The ID of the ramp object associated with the subscription.
    # 
    # **Note**: This field is available only if you have the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Ramp"
    # target="_blank">Ramp</a> feature enabled.
    string rampId?;
    # Name of the payment term associated with the account. For example,
    # "Net 30". The payment term determines the due dates of invoices.
    string paymentTerm?;
    # The unique identifier of the Quote. This field is used in Zuora data
    # sources to report on Subscription metrics. If the subscription originated
    # from Zuora Quotes, the value is populated with the value from Zuora
    # Quotes.
    @constraint:String {maxLength: 32}
    string quoteNumber__QT?;
    # The Quote type that represents the subscription lifecycle stage such as
    # New, Amendment, Renew or Cancel. This field is used in Zuora data sources
    # to report on Subscription metrics. If the subscription originated from
    # Zuora Quotes, the value is populated with the value from Zuora Quotes.
    @constraint:String {maxLength: 32}
    string quoteType__QT?;
    # The specific identifier for the type of business transaction the Quote
    # represents such as New, Upsell, Downsell, Renewal or Churn. This field is
    # used in Zuora data sources to report on Subscription metrics. If the
    # subscription originated from Zuora Quotes, the value is populated with the
    # value from Zuora Quotes.
    @constraint:String {maxLength: 32}
    string quoteBusinessType__QT?;
    # The unique identifier of the Opportunity. This field is used in Zuora data
    # sources to report on Subscription metrics. If the subscription originated
    # from Zuora Quotes, the value is populated with the value from Zuora
    # Quotes.
    @constraint:String {maxLength: 100}
    string opportunityName__QT?;
    string opportunityCloseDate__QT?;
    # The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.
    @constraint:String {maxLength: 32}
    string cpqBundleJsonId__QT?;
    # EXPANDABLE.
    # The subscription owner account associated with the subscription.
    record {} account?;
    # EXPANDABLE.
    # The invoice owner account associated with the subscription.
    record {} invoiceOwner?;
    # EXPANDABLE.
    # The bill-to contact who pays the billing documents for this subscription.
    record {} billToContact?;
    # EXPANDABLE.
    # The invoice items associated with the subscription.
    record {}[] invoiceItems?;
    # EXPANDABLE.
    # The rate plans associated with the subscription.
    record {}[] ratePlans?;
|};

public type GETAccountingPeriodsType record {
    # An array of all accounting periods on your tenant. The accounting periods are returned in ascending order of start date; that is, the latest period is returned first.
    GETAccountingPeriodWithoutSuccessType[] accountingPeriods?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type PUTRenewSubscriptionResponseType record {
    # The credit memo ID, if a credit memo is generated during the subscription process.
    # 
    # **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string creditMemoId?;
    # Invoice ID, if one is generated.
    string invoiceId?;
    # Payment amount, if payment is collected.
    decimal paidAmount?;
    # Payment ID, if payment is collected.
    string paymentId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Date the new subscription term ends, as yyyy-mm-dd.
    string termEndDate?;
    # Date the new subscription term begins, as yyyy-mm-dd.
    string termStartDate?;
    # Change in the subscription monthly recurring revenue as a result of the update. For a renewal, this is the MRR of the subscription in the new term.
    decimal totalDeltaMrr?;
    # Change in the total contracted value of the subscription as a result of the update. For a renewal, this is the TCV of the subscription in the new term.
    decimal totalDeltaTcv?;
};

public type GETOpenPaymentMethodTypeRevisionResponse record {
    # If an entity UUID is provided, this custom payment method type is specific to this entity only. If no entity UUID is provided, the custom payment method type is available to the global entity and all the sub entities in the tenant.
    string entityId?;
    # An array containing field metadata of the custom payment method type.
    OpenPaymentMethodTypeResponseFields[] fields?;
    # A string to identify the custom payment method type in the API name of the payment method type.
    # 
    # This field is used along with the `tenantId` field by the system to construct and generate the API name of the custom payment method type in the following way:
    # 
    # `<internalName>__c_<tenantId>`
    # 
    # For example, if `internalName` is `AmazonPay`, and `tenantId` is `12368`, the API name of the custom payment method type will be `AmazonPay__c_12368`.
    string internalName?;
    # The label that is used to refer to this type in the Zuora UI.
    string label?;
    # The identification reference of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string methodReferenceIdField?;
    # The revision number of the custom payment method type, which starts from 1 and increases by 1 when you update a published revision for the first time.
    int revision?;
    # The status of the custom payment method type.
    string status?;
    # The identification reference indicating the subtype of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string subTypeField?;
    # Zuora tenant ID. If multi-entity is enabled in your tenant, this is the ID of the parent tenant of all the sub entities.
    string tenantId?;
    # The identification reference of the user or customer account.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string userReferenceIdField?;
    # The time when the custom payment method type was first published.
    string version?;
};

public type OrderActionRatePlanUsageTieredWithOveragePricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    decimal overagePrice?;
    OrderActionRatePlanChargeTier[] tiers?;
};

# Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`. Usually the `<other-object-field-name>` can only be the `Id` field of the related object. Two exceptions are Subscription Name and Rate Plan Charge Number as both of them are unique.
public type FieldsAdditionalPropertiesForPostDefinition record {|
    string...;
|};

# Container for e-invoicing profile information for this account.
# 
# **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
public type PostAccountEInvoiceProfile record {
    # The high-level category of the business.
    "B2B"|"B2C"|"B2G" businessCategory?;
    # The full official name that the Buyer is registered with the relevant legal authority.
    @constraint:String {maxLength: 255}
    string businessName?;
    # The unique identifier number of the legal entity or person that you do business with.
    # 
    # For example, you must use a GSTIN for India.
    string businessNumber?;
    # The identification scheme identifier that an official registrar issues to identify the Buyer as a legal entity or person.
    string businessNumberSchemeId?;
    # Whether to enable the e-invoicing profile for the customer account.
    # 
    # If the following conditions are met, all billing documents for one account can be submitted to an e-invoicing service provider to be generated in electronic format:
    # - The account must be configured to generate e-invoice files for billing documents.
    # - The billing document must be in Posted status.
    # - A business region must be created for the billing country contact, and be linked to an e-invoicing service provider.
    boolean enabled?;
    # The Buyer's electronic address, to which the application-level response to the billing document might be delivered.
    string endpointId?;
    # The identification scheme identifier of the Buyer’s electronic address.
    string endpointSchemeId?;
    # The Buyer's VAT identifier (also known as the Buyer's VAT identification number) or the local identification (defined by the Buyer’s address) of the Buyer for tax purposes, or a reference that enables the Buyer to state the registered tax status.
    string taxRegisterNumber?;
};

# The container for the account holder information. The nested `accountHolderName` field is required.
public type CreatePaymentMethodBetalingsservice_accountHolderInfo record {
    # Required.
    # 
    # The full name of the bank account holder.
    @constraint:String {maxLength: 60}
    string accountHolderName?;
    # The first line of the address for the account holder.
    string addressLine1?;
    # The second line of the address for the account holder. 
    string addressLine2?;
    # The city where the account holder stays.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    string city?;
    # The country where the account holder stays.
    string country?;
    # The email address of the account holder.
    string email?;
    # The first name of the account holder.
    string firstName?;
    # The last name of the account holder.
    string lastName?;
    # The phone number of the account holder.
    string phone?;
    # The state where the account holder stays.
    string state?;
    # The zip code for the address of the account holder.
    string zipCode?;
};

public type POSTPublicNotificationDefinitionRequest record {
    # The status of the notification definition. The default value is `true`.
    boolean active = true;
    # The account on which the histories of this notification will be displayed. The associated account does not enforce where the merge fields come from.
    # Available values are as follows:
    # * `Account.Id`: ID of the primary customer account related to the notification. It is also the default value.
    # * `ParentAccount.Id`: this option is available only if you have <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy" target="_blank">Customer Hierarchy</a> enabled for your tenant.
    # * `SubscriptionOwnerAccount.Id`: this option is available if the base object of the notification is Order Action.
    # 
    # **Note:** before specifying this field, we recommend that you use [Data Source](https://knowledgecenter.zuora.com/Billing/Reporting/D_Data_Sources_and_Exports/C_Data_Source_Reference) to check the available types of accounts for the current notification.  
    string associatedAccount?;
    POSTPublicNotificationDefinitionCalloutCommon|POSTPublicNotificationDefinitionCalloutBasicAuthentication|POSTPublicNotificationDefinitionCalloutOauth2Authentication callout?;
    # The status of the callout action. The default value is `false`.
    boolean calloutActive = false;
    # The profile that notification definition belongs to. 
    # 
    # You can use the [Query Action](https://developer.zuora.com/api-references/api/operation/Action_POSTquery) to get the communication profile Id. See the following request sample:
    # 
    # `{
    #     "queryString": "select Id, ProfileName from CommunicationProfile"
    #  }`
    # 
    # If you do not pass the communicationProfileId, notification service will be automatically added to the 'Default Profile'.
    string communicationProfileId?;
    # The description of the notification definition.
    @constraint:String {maxLength: 255}
    string description?;
    # The status of the email action. The default value is `false`.
    boolean emailActive = false;
    # The ID of the email template. If `emailActive` is `true`, an email template is required. And EventType of the email template MUST be the same as the eventType.
    string emailTemplateId?;
    # The event category code for a standard event, on which the notification definition is created.
    # 
    # This field is required when creating notification definitions for standard events.
    # 
    # For the list of supported standard event category codes, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Events_and_Notifications/A_Standard_Events/Standard_Event_Category_Code_for_Events_and_Notifications" target="_blank">Standard event category code for events and notifications</a>.
    decimal eventCategory?;
    # The name of the event that the notification definition is based on.
    # 
    # This field is required when creating notification definitions for Zuora custom events, custom events, or custom scheduled events.
    # 
    # If this field is provided, you can specify the event namespace in the `eventTypeNamespace` field. 
    @constraint:String {minLength: 1}
    string eventTypeName?;
    # The namespace of the `eventTypeName` field. It indicates who created the event and which namespace the event is assigned to.
    # 
    # Supported values are as follows:
    # 
    # - `com.zuora.notification`: events that are created by Zuora. This value applies to Zuora custom events.
    # - `user.notification`: events that are created by tenant users. This value applies to custom events and custom scheduled events. This is the default value. 
    #           
    # For example, if you want to create a notification definition on the `OrderActionProcessed` event, which is a Zuora custom event, you must specify `com.zuora.notification` for this field.
    "user.notification"|"com.zuora.notification" eventTypeNamespace = "user.notification";
    # 
    POSTPublicNotificationDefinitionRequest_filterRule filterRule?;
    # The parameter values used to configure the filter rule.
    FilterRuleParameterValues filterRuleParams?;
    # The name of the notification definition, unique per communication profile.
    @constraint:String {maxLength: 255}
    string name;
};

public type UsageVolumePricingUpdate record {
    *PriceChangeParams;
    ChargeTier[] tiers?;
};

# An object containing pagination information for the list of workflows returned by the api
public type GetWorkflowsResponse_pagination record {
    # A string containing the URL where the next page of data can be retrieved.
    string next_page?;
    # An integer denoting the current page number.
    int page?;
    # An integer denoting the number of workflows in this response. The maximum value is 50.
    int page_length?;
};

public type GetDebitMemoApplicationPartCollectionType record {
    # Container for application parts.
    GetDebitMemoApplicationPartType[] applicationParts?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Container for custom fields of an Invoice object.
public type InvoiceObjectCustomFields record {
};

public type SignUpCreatePaymentMethodCreditCardReferenceTransaction record {
    # The second token id of CreditCardReferenceTransaction.
    string secondTokenId?;
    # The token id of payment method, required field of CreditCardReferenceTransaction type.
    string tokenId?;
};

public type PreviewExistingSubscriptionResponse record {
    *CommonResponse;
    # Container for invoices.
    PreviewExistingSubscriptionResultInvoices[] invoices?;
    # Container for credit memos.
    # 
    # **Note**: This field is only available if you have the Invoice Settlement feature enabled.
    PreviewExistingSubscriptionResultCreditMemos[] creditMemos?;
};

public type GetInvoiceApplicationPartCollectionType record {
    # Container for application parts.
    GetInvoiceApplicationPartType[] applicationParts?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type BillRunFilters record {
    # The target account of the bill run.
    string accountId?;
    # The type of the filter to determine whether to create a bill run at the account level or subscription level.
    "Account"|"Subscription"|"InvoiceSchedule" filterType?;
    # The unique ID of the target subscription belonged to the target account. 
    # 
    # This field is required if you set the `filterType` field to `Subscription`.
    string subscriptionId?;
};

public type DebitMemoFromInvoiceRequest record {
    # Whether debit memos are automatically picked up for processing in the corresponding payment run. 
    # By default, debit memos are automatically picked up for processing in the corresponding payment run.
    boolean autoPay?;
    # Whether to automatically post the debit memo after it is created. 
    # Setting this field to `true`, you do not need to separately call the [Post debit memo](https://developer.zuora.com/api-references/api/operation/PUT_PostDebitMemo) operation to post the debit memo.
    boolean autoPost?;
    # Comments about the debit memo. 
    @constraint:String {maxLength: 255}
    string comment?;
    # The date when the debit memo takes effect.
    string effectiveDate?;
    # The ID of the invoice that the debit memo is created from.
    # * If this field is specified, its value must be the same as the value of the `invoiceId` path parameter. Otherwise, its value overrides the value of the `invoiceId` path parameter. 
    # * If this field is not specified, the value of the `invoiceId` path parameter is used. 
    string invoiceId?;
    # Container for items. The maximum number of items is 1,000.
    @constraint:Array {maxLength: 1000}
    DebitMemoItemFromInvoiceItemType[] items?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    string reasonCode?;
    # Whether to automatically calculate taxes in the debit memo.
    boolean taxAutoCalculation?;
    *DebitMemoObjectNSFields;
    *DebitMemoObjectCustomFields;
};

# Information about an order action of type `ChangePlan`. 
# 
# Use the change plan type of order action to replace the existing rate plans in a subscription with other rate plans.
# 
# **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.
# 
# If you want to create a pending order through the "change plan" order action, and if the charge's trigger condition is `Specific Date`, you must set a charge number in the `chargeNumber` field for the "change plan" order action. In this case, if you do not set it, Zuora will not generate the charge number for you.
# 
# See more information about pending orders in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Orders/AA_Overview_of_Orders/Pending_orders_and_subscriptions" target="_blank">Pending orders and subscriptions</a>.
public type CreateChangePlan record {
    # The default value for the `effectivePolicy` field is as follows:
    #   * If the rate plan change (from old to new) is an upgrade, the effective policy is `EffectiveImmediately` by default.
    #   * If the rate plan change (from old to new) is a downgrade, the effective policy is `EffectiveEndOfBillingPeriod` by default.
    #   * Otherwise, the effective policy is `SpecificDate` by default.
    # 
    # **Notes**: 
    #   * When setting this field to `EffectiveEndOfBillingPeriod`, you cannot set the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/W_Subscription_and_Amendment_Dates#Billing_Trigger_Dates" target="_blank">billing trigger dates</a> for the subscription as the system will automatically set the trigger dates to the end of billing period, and you cannot set the following billing trigger date settings to `Yes`:
    #     * <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Require_Customer_Acceptance_of_Orders.3F" target="_blank">Require Customer Acceptance of Orders?</a>
    #     * <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Default_Subscription_and_Order_Settings#Require_Service_Activation_of_Orders.3F" target="_blank">Require Service Activation of Orders?</a>
    #   
    #   * When setting this field to `SpecificDate`, you must also set the contract effective date in the `triggerDates` field as follows:
    #     * Set the `name` field as `ContractEffective`
    #     * Specify a date for the `triggerDate` field
    "EffectiveImmediately"|"EffectiveEndOfBillingPeriod"|"SpecificDate" effectivePolicy?;
    # An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.
    # 
    # **Note:** Please provide only one of `externalCatalogPlanId`, `ratePlanId` or `productRatePlanId`. If more than 1 field is provided then the request would fail.
    string externalCatalogPlanId?;
    # Information about the new product rate plan to add. 
    CreateOrderChangePlanRatePlanOverride newProductRatePlan;
    # ID of the product rate plan that the removed rate plan is based on.
    string productRatePlanId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # ID of the rate plan to remove. This can be the latest version or any history version of ID. Note that the removal of a rate plan through the Change Plan order action supports the function of <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Orders/Order_actions_tutorials/E2_Remove_rate_plan_on_subscription_before_future-dated_removals" target="_blank">removal before future-dated removals</a>, as in a Remove Product order action.
    string ratePlanId?;
    # If resetBcd is true then reset the Account BCD to the effective date; if it is false keep the original BCD.
    boolean resetBcd = false;
    # Use this field to choose the sub type for your change plan order action.
    # 
    # However, if you do not set this field, the field will be automatically generated by the system according to the following rules:
    # 
    # When the old and new rate plans are within the same Grading catalog group:
    # * If the grade of new plan is greater than that of the old plan, this is an "Upgrade".
    # * If the grade of new plan is less than that of the old plan, this is a "Downgrade".
    # * If the grade of new plan equals that of the old plan, this is a "Crossgrade".
    # 
    # When the old and new rate plans are not in the same Grading catalog group, or either has no group, this is "PlanChanged".
    "Upgrade"|"Downgrade"|"Crossgrade"|"PlanChanged" subType?;
    # Number of a rate plan for this subscription.
    string subscriptionRatePlanNumber?;
};

public type DeleteWorkflowError record {
    # The error messages
    string[] Errors?;
};

public type POSTRegisterApplePayDomainRequest record {
    # The name of the domain to be registered with Apple Pay, such as `testapplepay.zuora.com`.
    string domainName;
};

# Container for custom fields of a Rate Plan Charge object.
public type RatePlanChargeObjectCustomFields record {
};

public type GetCascadingPaymentMethodsConfigurationResponse_priorities record {
    # The ID of a payment method.
    string paymentMethodId?;
    # The order of the payment method in the priority list. For example, `1` indicates the payment method is the first one in the priority list, and `2` indicates it is the second.
    # 
    # The first payment method in the priority list is the default payment method of the customer account.
    @constraint:Int {minValue: 1}
    int 'order?;
};

public type DailyConsumptionRevRecRequest record {
    # Rate plan charge number.
    string chargeSegmentNumber?;
    # Fund ID. For more information about fund, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Prepaid_with_Drawdown" target="_blank">Prepaid with Drawdown</a>.
    string fundId?;
    # Original rate plan charge ID.
    string originalChargeId;
};

# Specifies when a charge becomes active.
public type PreviewOrderTriggerParams record {
    # Date in YYYY-MM-DD format. Only applicable if the value of the `triggerEvent` field is `SpecificDate`. 
    # 
    # While this field is applicable, if this field is not set, your `CreateSubscription` order action creates a `Pending` order and a `Pending Acceptance` subscription. If at the same time the service activation date is required and not set, a `Pending Activation` subscription is created.
    string specificTriggerDate?;
    # Condition for the charge to become active.
    # 
    # If the value of this field is `SpecificDate`, use the `specificTriggerDate` field to specify the date when the charge becomes active.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance"|"SpecificDate" triggerEvent?;
};

# Container for Subscription fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type SubscriptionObjectNSFields record {
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Project__NS?;
    # The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SalesOrder__NS?;
    # Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
};

public type CommonResponse_reasons record {
    # The error code of response.
    string code?;
    # The detail information of the error response
    string message?;
};

# Container for custom fields of a Debit Memo object.
public type DebitMemoObjectCustomFields record {
};

public type PutReverseInvoiceType record {
    # The date when the credit memo is applied to the invoice that will be reversed, in `yyyy-mm-dd` format. The effective date must be later than or equal to the memo date.
    # 
    # The default value is the date when you reverse the invoice and create the credit memo.
    string applyEffectiveDate?;
    # The date when the credit memo was created, in `yyyy-mm-dd` format. The memo date must be later than or equal to the invoice date.
    # 
    # The default value is the date when you reverse the invoice and create the credit memo.
    string memoDate?;
};

# Specifies when a charge becomes active.
public type TriggerParams record {
    # Duration of the discount charge in days, weeks, months, or years, depending on the value of the `startPeriodsType` field. Only applicable if the value of the `startDatePolicy` field is `FixedPeriodAfterApplyToChargeStartDate`.
    # 
    # **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    int periodsAfterChargeStart?;
    # Date in YYYY-MM-DD format. Only applicable if the value of the `triggerEvent` field is `SpecificDate`. 
    # 
    # While this field is applicable, if this field is not set, your `CreateSubscription` order action creates a `Pending` order and a `Pending Acceptance` subscription. If at the same time the service activation date is required and not set, a `Pending Activation` subscription is created.
    # 
    # While this field is applicable, if this field is not set, the following order actions create a `Pending` order but do not impact the subscription status. **Note**: This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    #  * AddProduct
    #  * UpdateProduct
    #  * RemoveProduct
    #  * RenewSubscription
    #  * TermsAndConditions
    string specificTriggerDate?;
    # Start date policy of the discount charge to become active when the **Apply to billing period partially** checkbox is selected from the product catalog UI or the `applyToBillingPeriodPartially` field is set as true from the "CRUD: Create a product rate plan charge" operation. 
    # 
    # - If the value of this field is `SpecificDate`, use the `specificTriggerDate` field to specify the date when the charge becomes active.
    # - If the value of this field is `FixedPeriodAfterApplyToChargeStartDate`, the charge is active for a predefined duration based on the value of the `upToPeriodsType` and `upToPeriods` fields.
    # 
    # **Notes**: 
    #   - You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field. 
    #   - You can use either `triggerEvent` or `startDatePolicy` to define when a discount charge starts, but not both at the same time.
    "AlignToApplyToCharge"|"SpecificDate"|"EndOfLastInvoicePeriodOfApplyToCharge"|"FixedPeriodAfterApplyToChargeStartDate" startDatePolicy?;
    # Unit of time that the discount charge duration is measured in. Only applicable if the value of the `startDatePolicy` field is `FixedPeriodAfterApplyToChargeStartDate`.
    # 
    # **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    "Days"|"Weeks"|"Months"|"Years" startPeriodsType?;
    # Condition for the charge to become active.
    # 
    # If the value of this field is `SpecificDate`, use the `specificTriggerDate` field to specify the date when the charge becomes active.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance"|"SpecificDate" triggerEvent?;
};

# Contains usage rate details for the invoice item as specified in the request.
public type GETUsageRateDetailWrapper_data record {
    # The amount of the invoice item without tax.
    decimal amountWithoutTax?;
    # The unique number of the product rate plan charge associated with the invoice item.
    string chargeNumber?;
    # The unique ID of the invoice.
    string invoiceId?;
    # The unique ID of the invoice item.
    string invoiceItemId?;
    # The unique number of the invoice.
    string invoiceNumber?;
    # The list price of the product rate plan charge associated with the invoice item. For example, if the product rate plan charge uses the tiered charge model, its list price could be: 
    # 
    # Tier / From / To / List Price / Price Format\n1 / 0 / 9 / 0.00 / Per Unit\n2 / 10 / 20 / 1.00 / Per Unit\n3 / 21 / 30 / 2.00 / Flat Fee\n4 / 31 /   / 3.00 / Per Unit\n
    string listPrice?;
    # The quantity of the invoice item.
    # 
    # Could be a negative amount. Negative quantity usage records are used to adjust the previously uploaded usage records.
    decimal quantity?;
    # The rate detail of the invoice item. It shows how the total amount is calculated. For example, if the product rate plan charge uses the tiered charge model, the rate detail for the associated invoice item could be: 
    # 
    # Tier 1: 0-9, 9 Each(s) x $0.00/Each = $0.00\nTier 2: 10-20, 11 Each(s) x $1.00/Each = $11.00\nTier 3: 21-30, $2.00 Flat Fee\nTier 4: >=31, 15 Each(s) x $3.00/Each = $45.00\nTotal = $58.00. 
    # 
    # The rate detail retrieved from this REST API operation is the same as the [Rate Detail presented on PDF invoices](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/IA_Invoices/Create_a_custom_invoice_template/DD_Display_Usage_Charge_Breakdown#How_UsageSummary.RateDetail_is_displayed_on_invoices). 
    string rateDetail?;
    # The service period of the invoice item.
    string servicePeriod?;
    # The unit of measurement of the invoice item.
    string uom?;
};

# 
public type POSTSequenceSetRequest record {
    # Container for the prefix and starting document number of credit memos.
    # 
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    CreditMemoEntityPrefix creditMemo;
    # Container for the prefix and starting document number of debit memos.
    # 
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    DebitMemoEntityPrefix debitMemo;
    # Container for the prefix and starting document number of invoices.
    InvoiceEntityPrefix invoice;
    # The name of the sequence set to configure for billing documents, payments, and refunds.
    string name;
    # Container for the prefix and starting number of payments.
    PaymentEntityPrefix payment?;
    # Container for the prefix and starting number of refunds.
    RefundEntityPrefix refund?;
};

public type PaymentSchedulePaymentOptionFields record {
    # The field used to pass the transactional payment data to the gateway side in the key-value format.
    PaymentSchedulePaymentOptionFields_detail detail?;
    # The type of the payment option. Currently, only `GatewayOptions` is supported for specifying Gateway Options fields supported by a payment gateway.
    string 'type?;
};

public type POSTSubscriptionPreviewType record {
    # 
    # Customer account number or ID.
    # 
    # You must specify the account information either in this field or in the `previewAccountInfo` field with the following conditions:
    #          
    # * If you already have a customer account, specify the account number or ID in this field.
    # * If you do not have a customer account, provide account information in the `previewAccountInfo` field.
    string accountKey?;
    # Effective contract date for this subscription, as yyyy-mm-dd.
    string contractEffectiveDate;
    # The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.
    # 
    # Default value is dependent on the value of other fields. See **Notes** section for more details.
    string customerAcceptanceDate?;
    # The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
    # 
    # - If this field is specified, the specified date is used as the billing document date. 
    # - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
    string documentDate?;
    # Specifies whether to include draft invoice items in subscription previews.
    # Values are:
    # 
    # * `true` (default). Includes draft invoice items in the preview result.
    # * `false`. Excludes draft invoice items in the preview result.
    # 
    # **Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    boolean includeExistingDraftDocItems?;
    # Specifies whether to include draft invoice items in previews.
    # Values are:
    # 
    # * `true` (default). Includes draft invoice items in the preview result.
    # * `false`. Excludes draft invoice items in the preview result.
    # 
    # **Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, 196.0, and 206.0.
    boolean includeExistingDraftInvoiceItems?;
    # Duration of the first term of the subscription, in whole months. If `termType` is `TERMED`, then this field is required, and the value must be greater than `0`. If `termType` is `EVERGREEN`, this field is ignored.    
    int initialTerm?;
    # The period type of the initial term. 
    # 
    # Supported values are:
    # 
    # * `Month`
    # * `Year`
    # * `Day`
    # * `Week`
    #  
    # The default period type is `Month`.
    string initialTermPeriodType?;
    # Invoice owner account number or ID.
    # 
    # **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    string invoiceOwnerAccountKey?;
    # Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.
    # 
    # **Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, 196.0, and 206.0. .
    string invoiceTargetDate?;
    # String of up to 500 characters.
    string notes?;
    # A container for providing a customer account information if you do not have an existing customer account. This customer account information is only used for subscription preview.
    # 
    # You must specify the account information either in this field or in the `accountKey` field with the following conditions:
    # 
    # * If you already have a customer account, specify the account number or ID in the accountKey field.
    # * If you do not have a customer account, provide account information in this field.
    POSTSubscriptionPreviewTypePreviewAccountInfo previewAccountInfo?;
    # The type of preview you will receive. 
    # 
    # This field is in Zuora REST API version control. The supported values of this field depend on the REST API minor version you specified in the request header.
    # 
    # 
    # * If you do not specify the REST API minor version or specify the minor version number to one of following values in the request header:
    #  
    #   * 186.0
    #   * 187.0
    #   * 188.0
    #   * 189.0
    #   * 196.0
    #   * 206.0
    #   
    #   The following values are supported in the **previewType** field:
    # 
    #   * InvoiceItem
    #   * ChargeMetrics
    #   * InvoiceItemChargeMetrics
    #   
    #   The default value is InvoiceItem.
    # 
    # * If you specify the REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, the following values are supported in the **previewType** field:
    # 
    #   - LegalDoc
    #   - ChargeMetrics
    #   - LegalDocChargeMetrics
    # 
    #   The default value is LegalDoc.
    # 
    # .
    string previewType?;
    # The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.
    # 
    # Default value is dependent on the value of other fields. See **Notes** section for more details.
    string serviceActivationDate?;
    # Container for one or more rate plans for this subscription.
    POSTSrpCreateType[] subscribeToRatePlans;
    # Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.
    # 
    # **Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.
    string targetDate?;
    # The date on which the subscription term begins, as yyyy-mm-dd. If this is a renewal subscription, this date is different from the subscription start date.
    string termStartDate?;
    # Possible values are: `TERMED`, `EVERGREEN`.
    string termType;
    *SubscriptionObjectCustomFields;
};

# The parameters of the filter rule and their name must match those in the filter rule. And all parameters must be defined in the event type payload. The name of parameters can't be duplicate. The following reserved keywords should not be used as a parameter name: `AttachmentList`, `RecipientList`, `RecipientType`, `Exceptions`, `OCP_OBJECT_TYPE`, `OCP_OBJECT_ID`, `OCP_TRIGGER_BY`
public type FilterRuleParameterDefinitions record {|
    FilterRuleParameterDefinition...;
|};

# 
public type QueryCreditMemoItemsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedCreditMemoItem[] data?;
|};

public type ContactResponse record {
    # The ID of the account associated with the contact.
    string accountId?;
    # The number of the customer account associated with the contact.
    string accountNumber?;
    # The first line of the contact's address, which is often a street address or business name.
    @constraint:String {maxLength: 255}
    string address1?;
    # The second line of the contact's address.
    @constraint:String {maxLength: 255}
    string address2?;
    # The city of the contact's address.
    @constraint:String {maxLength: 40}
    string city?;
    # A description for the contact.
    @constraint:String {maxLength: 100}
    string contactDescription?;
    # The country of the contact's address.
    @constraint:String {maxLength: 64}
    string country?;
    # The county. May optionally be used by Zuora Tax to calculate county tax.
    @constraint:String {maxLength: 32}
    string county?;
    # The contact's fax number. 
    @constraint:String {maxLength: 40}
    string fax?;
    # The contact's first name.
    @constraint:String {maxLength: 100}
    string firstName?;
    # The contact's home phone number.
    @constraint:String {maxLength: 40}
    string homePhone?;
    # The contact's last name.
    @constraint:String {maxLength: 100}
    string lastName?;
    # The mobile phone number of the contact.
    @constraint:String {maxLength: 100}
    string mobilePhone?;
    # A nickname for the contact.
    @constraint:String {maxLength: 100}
    string nickname?;
    # An additional phone number for the contact.
    @constraint:String {maxLength: 40}
    string otherPhone?;
    # The type of the additional phone number.
    "Work"|"Mobile"|"Home"|"Other" otherPhoneType?;
    # The contact's personal email address.
    @constraint:String {maxLength: 74}
    string personalEmail?;
    # The state or province of the contact's address.
    @constraint:String {maxLength: 40}
    string state?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.
    @constraint:String {maxLength: 32}
    string taxRegion?;
    # The contact's business email address.
    @constraint:String {maxLength: 74}
    string workEmail?;
    # The contact's business phone number.
    @constraint:String {maxLength: 40}
    string workPhone?;
    # The zip code for the contact's address.
    @constraint:String {maxLength: 20}
    string zipCode?;
    *ContactObjectCustomFields;
};

public type RampIntervalChargeDeltaMetrics record {
    # The number of the rate plan charge.
    string chargeNumber?;
    # The discount delta amount for the TCB.
    decimal deltaDiscountTcb?;
    # The discount delta amount for the TCV.
    decimal deltaDiscountTcv?;
    # The TCB delta value before discount charges are applied.
    decimal deltaGrossTcb?;
    # The TCV delta value before discount charges are applied.
    decimal deltaGrossTcv?;
    # The MRR changing history of the current rate plan charge in the current ramp interval.
    RampIntervalChargeDeltaMetrics_deltaMrr[] deltaMrr?;
    # The TCB delta value after discount charges are applied.
    decimal deltaNetTcb?;
    # The TCV delta value after discount charges are applied.
    decimal deltaNetTcv?;
    # The charge quantity changing history of the current rate plan charge in the current ramp interval.
    RampIntervalChargeDeltaMetrics_deltaQuantity[] deltaQuantity?;
    # The ID of the corresponding product rate plan charge.
    string productRatePlanChargeId?;
    # The number of the subscription that the current rate plan charge belongs to.
    string subscriptionNumber?;
};

public type POSTTaxationItemTypeForInvoice record {
    # The calculated tax amount excluded due to the exemption.
    string exemptAmount?;
    # Container for the finance information related to the taxation item.
    POSTTaxationItemTypeForInvoice_financeInformation financeInformation?;
    # The ID of the invoice associated with the taxation item.
    string invoiceItemId;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The name of taxation.
    string name;
    # The amount of the taxation item in the invoice item.
    string taxAmount;
    # The tax code identifies which tax rules and tax rates to apply to a specific invoice item.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the invoice item, in `yyyy-mm-dd` format.
    string taxDate;
    # The tax mode of the invoice item, indicating whether the amount of the invoice item includes tax.
    "TaxInclusive"|"TaxExclusive" taxMode?;
    # The tax rate applied to the invoice item.
    string taxRate;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate applied to the invoice item.
    "Percentage"|"FlatFee" taxRateType;
    *TaxationItemObjectCustomFields;
};

public type CustomObjectRecordWithOnlyCustomFields record {
};

public type DeletedRecord record {
    # Name of the Column in the extracted file that points to the deleted records. 
    string column?;
    # Can be set to either `Numeric` or `Boolean`. If set to `Numeric`, deleted records are marked as `1`. If set to `Boolean`, deleted records are marked as `true`.
    string format?;
};

public type FulfillmentItemPost record {
    # The reference of the related Fulfillment.
    string fulfillmentNumber?;
    *FulfillmentItemCommon;
};

public type ProxyDeleteResponse record {
    # 
    string id?;
    # 
    boolean success?;
};

public type UsageTieredWithOveragePricingUpdate record {
    *PriceChangeParams;
    decimal overagePrice?;
    ChargeTier[] tiers?;
};

public type NestedOrderActionOnExpand record {|
    # The unique identifier of the order action.
    string id?;
    # The unique identifier of the user who created the order action.
    string createdById?;
    # The time that the order action gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the order action.
    string updatedById?;
    # The date and time when the order action was last updated.
    string updatedDate?;
    # Effective contract date for this subscription, as yyyy-mm-dd.
    string contractEffectiveDate?;
    # The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.
    string customerAcceptanceDate?;
    # Type of the order action.
    # 
    # **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.
    "CreateSubscription"|"TermsAndConditions"|"AddProduct"|"UpdateProduct"|"RemoveProduct"|"RenewSubscription"|"CancelSubscription"|"OwnerTransfer"|"Suspend"|"Resume"|"ChangePlan" 'type?;
    # The sequence of the order actions processed in the order.
    int:Signed32 sequence?;
    # The unique identifier of the amendment that changes the version of the subscription.
    string subscriptionVersionAmendmentId?;
    # The unique identifier of the order that the order action belongs to.
    string orderId?;
    # The unique identifier of the subscription associated with the order action.
    string subscriptionId?;
    # The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.
    string serviceActivationDate?;
    # If `true`, the subscription automatically renews at the end of the term. 
    boolean autoRenew?;
    # Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
    "RENEW_WITH_SPECIFIC_TERM"|"RENEW_TO_EVERGREEN" renewSetting?;
    # The length of the period for the subscription renewal term. 
    int renewalTerm?;
    # The period type for the subscription renewal term.
    # 
    # This field is used with the `renewalTerm` field to specify the subscription renewal term.
    "Month"|"Year"|"Day"|"Week" renewalTermPeriodType?;
    # The date on which the subscription term begins, as `yyyy-mm-dd`. If this is a renewal subscription, this date is different from the subscription start date.
    string termStartDate?;
    # The type of the subscription term.
    "TERMED"|"EVERGREEN" termType?;
    # The length of the period for the current subscription term.
    int currentTerm?;
    # The period type for the current subscription term.
    "Month"|"Year"|"Day"|"Week" currentTermPeriodType?;
    # The date when subscription suspension takes effect, in the `yyyy-mm-dd` format.
    string suspendDate?;
    # The resume date when the resumption takes effect.
    string resumeDate?;
    # Date when the cancellation takes effect, in the `yyyy-mm-dd` format. Used only if `cancellationPolicy` is `SpecificDate`. It should not be earlier than the subscription contract-effective date, later than the subscription term-end date, or within a period for which the customer has been invoiced.
    string cancellationEffectiveDate?;
    # Cancellation method. 
    "EndOfCurrentTerm"|"EndOfLastInvoicePeriod"|"SpecificDate" cancellationPolicy?;
    # The name of the payment term associated with the subscription. For
    # example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string paymentTerm?;
    # The ID of the bill-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string billToContactId?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # The ID of the sequence set associated with the subscription.
    #   
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string soldToContactId?;
    # Whether to clear the existing payment term at the subscription level. This field is mutually exclusive with the `paymentTerm` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingPaymentTerm?;
    # Whether to clear the existing bill-to contact ID at the subscription level. This field is mutually exclusive with the `billToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingBillToContact?;
    # Whether to clear the existing invoice template ID at the subscription level. This field is mutually exclusive with the `invoiceTemplateId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingInvoiceTemplate?;
    # Whether to clear the existing sequence set ID at the subscription level. This field is mutually exclusive with the `sequenceSetId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSequenceSet?;
    # Whether to clear the existing sold-to contact ID at the subscription level. This field is mutually exclusive with the `soldToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSoldToContact?;
    # The sub type for the change plan order action.
    # 
    # If this field was not set by user, the field is automatically generated by the system according to the following rules:
    # 
    # When the old and new rate plans are within the same Grading catalog group:
    # * If the grade of new plan is greater than that of the old plan, this is an "Upgrade".
    # * If the grade of new plan is less than that of the old plan, this is a "Downgrade".
    # * If the grade of new plan equals that of the old plan, this is a "Crossgrade".
    # 
    # When the old and new rate plans are not in the same Grading catalog group, or either has no group, this is "PlanChanged".
    "Upgrade"|"Downgrade"|"Crossgrade"|"PlanChanged" subType?;
    # The default value for the `effectivePolicy` field is as follows:
    #   * If the rate plan change (from old to new) is an upgrade, the effective policy is `EffectiveImmediately` by default.
    #   * If the rate plan change (from old to new) is a downgrade, the effective policy is `EffectiveEndOfBillingPeriod` by default.
    #   * Otherwise, the effective policy is `SpecificDate` by default.
    # 
    # **Notes**: 
    #   * When setting this field to `EffectiveEndOfBillingPeriod`, you cannot set the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/W_Subscription_and_Amendment_Dates#Billing_Trigger_Dates" target="_blank">billing trigger dates</a> for the subscription as the system will automatically set the trigger dates to the end of billing period.
    #   * When setting this field to `SpecificDate`, you must also set the `contractEffectiveDate` field.
    "EffectiveImmediately"|"EffectiveEndOfBillingPeriod"|"SpecificDate" effectivePolicy?;
    # EXPANDABLE.
    # The subscription associated with this order action.
    record {} subscription?;
    # EXPANDABLE.
    # The order associated with this order action.
    record {} 'order?;
|};

public type POSTBillingPreviewInvoiceItem record {
    # The unique ID of the invoice item that the discount charge is applied to.
    string appliedToItemId?;
    # The amount of the charge. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.
    string chargeAmount?;
    # The date when the invoice item was created.
    string chargeDate?;
    # Description of the charge.
    string chargeDescription?;
    # Id of the charge.
    string chargeId?;
    # Name of the charge.
    string chargeName?;
    # Number of the charge.
    string chargeNumber?;
    # The type of charge. 
    # 
    # Possible values are `OneTime`, `Recurring`, and `Usage`.
    string chargeType?;
    # Invoice item ID.
    string id?;
    # The number of deliveries dedicated to the Delivery Pricing charges. 
    # **Note**: This field is available only if you have the Delivery Pricing feature enabled. 
    decimal numberOfDeliveries?;
    # Identifies the kind of charge. 
    # 
    # Possible values:
    # * charge
    # * discount
    # * prepayment
    # * tax
    string processingType?;
    # Name of the product associated with this item.
    string productName?;
    # Quantity of this item, in the configured unit of measure for the charge.
    string quantity?;
    # End date of the service period for this item, i.e., the last day of the service period, in `yyyy-mm-dd` format.
    string serviceEndDate?;
    # Start date of the service period for this item, in `yyyy-mm-dd` format. If the charge is a one-time fee, this is the date of that charge.
    string serviceStartDate?;
    # ID of the subscription associated with this item.
    string subscriptionId?;
    # Name of the subscription associated with this item.
    string subscriptionName?;
    # Number of the subscription associated with this item.
    string subscriptionNumber?;
    # If you use [Zuora Tax](https://knowledgecenter.zuora.com/Billing/Taxes/A_Zuora_Tax) and the product rate plan charge associated with the invoice item is of [tax inclusive mode](https://knowledgecenter.zuora.com/Billing/Taxes/A_Zuora_Tax/D_Associate_tax_codes_with_product_charges_and_set_the_tax_mode), the value of this field is the amount of tax applied to the charge. Otherwise, the value of this field is `0`. 
    string taxAmount?;
    # Unit used to measure consumption.
    string unitOfMeasure?;
};

public type ProxyGetImport record {
    #  The user ID of the person who created the import.
    # 
    # **Character limit**: 32
    # 
    # **Values**: automatically generated 
    string CreatedById?;
    #  The date when the import was created.
    # 
    # **Character limit**: 29
    # 
    # **Values**: automatically generated 
    string CreatedDate?;
    # Object identifier.
    string Id?;
    #  The type of item imported.
    # 
    # **Character limit**: 7
    # 
    # **Values**: Usage 
    string ImportType?;
    # The number of records successfully imported.
    # 
    # **Values**: automatically generated 
    int:Signed32 ImportedCount?;
    #  A check to validate the import file's integrity.
    # 
    # **Character limit:** 32
    # 
    # **System-generated:** no
    # 
    # **Values**: a string of 32 characters or fewer 
    string Md5?;
    #  A descriptive name for the import.
    # 
    # **Character limit:** 100
    # 
    # **Values:** one of the following:
    # 
    # - a string of 100 characters or fewer
    # - if NULL default is: `import <ImportType_value>`
    string Name?;
    #  The URL for your import file, which contains your records for upload. When you upload the file, Zuora assigns it to this address.
    # 
    # **Values:** automatic dynamically-generated URL 
    string OriginalResourceUrl?;
    #  The URL for the import result file, which is a zipped CSV file.
    # 
    # **Values**: automatic dynamically-generated URL 
    string ResultResourceUrl?;
    # The status of the import process.
    # 
    # **Values**: automatically generated using one of the following values:
    # 
    # - Pending
    # - Processing
    # - Completed
    # - Failed
    string Status?;
    #  The reason for the system-generated status. Use this information if the import fails.
    # 
    # **Character limit**: 2000
    # 
    # **Values**: automatically generated error message 
    string StatusReason?;
    #  The number of records in the import file.
    # 
    # **Character limit**:
    # 
    # **Values**: automatically generated 
    int:Signed32 TotalCount?;
    #  The ID of the user who last updated the import.
    # 
    # **Character limit**: 32
    # 
    # **Values**: automatically generated 
    string UpdatedById?;
    #  The date when the import was last updated.
    # **Character limit**: 29 **Values**: automatically generated 
    string UpdatedDate?;
};

public type RampIntervalChargeDeltaMetrics_deltaQuantity record {
    # The delta amount of the charge quantity.
    decimal amount?;
    # The end date.
    string endDate?;
    # The start date.
    string startDate?;
};

# Container for invoices.
# 
# 
#  **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header. Also, the response structure is changed and the following invoice related response fields are moved to this **invoice** container:
#   
#    * amount
#    * amountWithoutTax
#    * taxAmount
#    * invoiceItems
#    * targetDate
public type PUTSubscriptionResponseType_invoice record {
    # Invoice amount.
    decimal amount?;
    # Invoice amount minus tax.
    decimal amountWithoutTax?;
    # Container for invoice items.
    PUTSubscriptionPreviewInvoiceItemsType[] invoiceItems?;
    # Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.
    # 
    # **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header.
    string targetDate?;
    # The tax amount of the invoice.
    decimal taxAmount?;
};

# A volume summary record.
public type PaymentVolumeSummaryRecord record {
    # The count of failed payments of above `paymentGatewayType` and `paymentMethodType`.
    int 'error?;
    # The payment gateway type.
    string paymentGatewayType?;
    # The payment method type.
    string paymentMethodType?;
    # The count of successful payments of above `paymentGatewayType` and `paymentMethodType`.
    int success?;
    # The count of total payments of above `paymentGatewayType` and `paymentMethodType`.      
    int total?;
};

# Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
public type UsageTieredPricingOverride record {
    *PriceChangeParams;
    # Specifies how Zuora groups usage records when rating usage. See [Usage Rating by Group](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Usage/Usage_Rating_by_Group) for more information.
    #   * ByBillingPeriod (default): The rating is based on all the usages in a billing period.
    #   * ByUsageStartDate: The rating is based on all the usages on the same usage start date. 
    #   * ByUsageRecord: The rating is based on each usage record.
    #   * ByUsageUpload: The rating is based on all the usages in a uploaded usage file (.xls or .csv). If you import a mass usage in a single upload, which contains multiple usage files in .xls or .csv format, usage records are grouped for each usage file.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload" ratingGroup?;
    # List of cumulative pricing tiers in the charge.
    ChargeTier[] tiers?;
    # Unit of measure of the standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string uom?;
};

public type ExpandedSubscription record {|
    # The unique identifier of the subscription.
    string id?;
    # The unique identifier of the user who created the subscription.
    string createdById?;
    # The date and time when the subscription was created in the Zuora
    # system, in the `yyyy-mm-dd hh:mm:ss` format.
    string createdDate?;
    # The unique identifier of the user who last updated the subscription.
    string updatedById?;
    # The date and time when the subscription was last updated, in the `yyyy-mm-dd hh:mm:ss` format.
    string updatedDate?;
    # The ID of the account associated with this subscription.
    string accountId?;
    # If `true`, the subscription automatically renews at the end of the
    # term. 
    boolean autoRenew?;
    # The date on which the subscription was canceled.
    string cancelledDate?;
    # The date when the customer accepts the contract, in the `yyyy-mm-dd` format.
    # 
    # If this field is not set:
    # 
    # - If the `serviceActivationDate` field is not set, the value of this
    # field is set to be the contract effective date.
    # 
    # - If the `serviceActivationDate` field is set, the value of this field
    # is set to be the service activation date.
    # 
    # 
    # The billing trigger dates must follow this rule:
    # 
    # contractEffectiveDate <= serviceActivationDate <=
    # contractAcceptanceDate
    string contractAcceptanceDate?;
    # The date when the subscription is activated, in the `yyyy-mm-dd` format.
    # 
    # 
    # You must specify a Service Activation date if the Customer Acceptance
    # date is set. If the Customer Acceptance date is not set, the value of
    # the `serviceActivationDate` field defaults to be the Contract
    # Effective Date.
    # 
    # 
    # The billing trigger dates must follow this rule:
    # 
    # 
    # contractEffectiveDate <= serviceActivationDate <=
    # contractAcceptanceDate
    string contractEffectiveDate?;
    # The ID of the account that created the subscription. This field is
    # automatically populated with the ID of the account that creates the
    # subscription.
    string creatorAccountId?;
    # The account ID that owns the invoices associated with the subscription or the amended subscription.
    string creatorInvoiceOwnerId?;
    # The length of the period for the current subscription term.
    int currentTerm?;
    # The period type for the current subscription term.
    "Month"|"Year"|"Day"|"Week" currentTermPeriodType?;
    # The length of the period for the initial subscription term.
    int initialTerm?;
    # The period type for the first subscription term.
    "Month"|"Year"|"Day"|"Week" initialTermPeriodType?;
    # The account ID that owns the invoices associated with the subscription. 
    string invoiceOwnerId?;
    # Determines if the subscription is invoiced separately. 
    # If `true`, then all charges for this subscription are collected into the subscription's own invoice.
    boolean isInvoiceSeparate?;
    # The name of the subscription.
    string name?;
    # Additional information about the subscription.
    @constraint:String {maxLength: 65535}
    string notes?;
    # The date when the subscription was originally created. 
    # This value is the same as the `createdDate` value until the subscription is amended.
    string originalCreatedDate?;
    # The original rate plan charge ID. Only available for update
    # subscription.
    string originalId?;
    # The ID of the previous subscription. This field is only available if
    # the subscription is a renewal subscription.
    string previousSubscriptionId?;
    # Specifies whether a termed subscription will remain `TERMED` or change to `EVERGREEN` when it is renewed. 
    "RENEW_WITH_SPECIFIC_TERM"|"RENEW_TO_EVERGREEN" renewalSetting?;
    # The length of the period for the subscription renewal term.
    int renewalTerm?;
    # The period type for the subscription renewal term.
    "Month"|"Year"|"Day"|"Week" renewalTermPeriodType?;
    # An auto-generated decimal value uniquely tagged with a subscription.
    # The value always contains one decimal place, for example, the revision
    # of a new subscription is 1.0. If a further version of the subscription
    # is created, the revision value will be increased by 1. Also, the
    # revision value is always incremental regardless of deletion of
    # subscription versions.
    string revision?;
    # The date on which the services or products within a subscription have been activated and access has been provided to the customer, in the `yyyy-mm-dd` format.
    string serviceActivationDate?;
    # Subscription status.
    "Draft"|"Pending Activation"|"Pending Acceptance"|"Active"|"Cancelled"|"Suspended" status?;
    # If `true`, the current subscription object is the latest version.
    boolean isLatestVersion?;
    # The date when the subscription term ends, where the subscription ends
    # at midnight the day before.
    # 
    # For example, if the `subscriptionEndDate` is 12/31/2016, the
    # subscriptions ends at midnight (00:00:00 hours) on 12/30/2016.
    # 
    # This date is the same as the term end date or the cancelation date, as
    # appropriate.
    string subscriptionEndDate?;
    # Date the subscription becomes effective.
    string subscriptionStartDate?;
    # The ID of the amendment made to this subscription version.
    string subscriptionVersionAmendmentId?;
    # Date the subscription term ends. If the subscription is evergreen,
    # this is null or is the cancellation date (if one has been set).
    string termEndDate?;
    # Date the subscription term begins. If this is a renewal subscription,
    # this date is different from the subscription start date.
    string termStartDate?;
    # The type of the subscription term.
    "TERMED"|"EVERGREEN" termType?;
    # This is the subscription version automatically generated by Zuora Billing. Each order or amendment creates a new version of the subscription, which incorporates the changes made in the order or amendment.
    int version?;
    # Monthly recurring revenue of the subscription.
    decimal cMRR?;
    # The ID of the bill-to contact snapshot.
    string billToContactSnapshotId?;
    # The ID of the bill-to contact for the subscription.
    string billToContactId?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # The ID of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact for the subscription.
    string soldToContactId?;
    # The ID of the sold-to contact snapshot.
    string soldToContactSnapshotId?;
    # An enum field on the Subscription object to indicate the name of a
    # third-party store. This field is used to represent subscriptions created
    # through third-party stores.
    "Amazon"|"Apple"|"Google"|"Roku" externallyManagedBy?;
    # The last booking date of the subscription object. This field is
    # writable only when the subscription is newly created as a first
    # version subscription. You can override the date value when creating a
    # subscription through the Subscribe and Amend API or the subscription
    # creation UI (non-Orders). Otherwise, the default value `today` is set
    # per the user's timezone. The value of this field is as follows:
    # 
    # * For a new subscription created by the [Subscribe and Amend
    # APIs](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Subscribe_and_Amend_APIs_to_Migrate),
    # this field has the value of the subscription creation date.
    # 
    # * For a subscription changed by an amendment, this field has the value
    # of the amendment booking date.
    # 
    # * For a subscription created or changed by an order, this field has
    # the value of the order date. 
    string lastBookingDate?;
    # The ID of the invoice schedule associated with the subscription.
    # 
    # 
    # If multiple invoice schedules are created for different terms of a
    # subscription, this field stores the latest invoice schedule.
    # 
    # 
    # **Note**: This field is available only if you have the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule"
    # target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleId?;
    # The reason for a subscription cancellation copied from the
    # `changeReason` field of a Cancel Subscription order action. 
    # 
    # This field contains valid value only if a subscription is cancelled
    # through the Orders UI or API. Otherwise, the value for this field will
    # always be `null`.
    string cancelReason?;
    # Whether the subscription is prepaid.
    boolean prepayment?;
    # The currency of the subscription.
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    string currency?;
    # The ID of the ramp object associated with the subscription.
    # 
    # **Note**: This field is available only if you have the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Ramp"
    # target="_blank">Ramp</a> feature enabled.
    string rampId?;
    # Name of the payment term associated with the account. For example,
    # "Net 30". The payment term determines the due dates of invoices.
    string paymentTerm?;
    # The unique identifier of the Quote. This field is used in Zuora data
    # sources to report on Subscription metrics. If the subscription originated
    # from Zuora Quotes, the value is populated with the value from Zuora
    # Quotes.
    @constraint:String {maxLength: 32}
    string quoteNumber__QT?;
    # The Quote type that represents the subscription lifecycle stage such as
    # New, Amendment, Renew or Cancel. This field is used in Zuora data sources
    # to report on Subscription metrics. If the subscription originated from
    # Zuora Quotes, the value is populated with the value from Zuora Quotes.
    @constraint:String {maxLength: 32}
    string quoteType__QT?;
    # The specific identifier for the type of business transaction the Quote
    # represents such as New, Upsell, Downsell, Renewal or Churn. This field is
    # used in Zuora data sources to report on Subscription metrics. If the
    # subscription originated from Zuora Quotes, the value is populated with the
    # value from Zuora Quotes.
    @constraint:String {maxLength: 32}
    string quoteBusinessType__QT?;
    # The unique identifier of the Opportunity. This field is used in Zuora data
    # sources to report on Subscription metrics. If the subscription originated
    # from Zuora Quotes, the value is populated with the value from Zuora
    # Quotes.
    @constraint:String {maxLength: 100}
    string opportunityName__QT?;
    string opportunityCloseDate__QT?;
    # The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.
    @constraint:String {maxLength: 32}
    string cpqBundleJsonId__QT?;
    NestedAccountOnExpand account?;
    NestedAccountOnExpand invoiceOwner?;
    ExpandedContact billToContact?;
    NestedInvoiceItemOnExpand[] invoiceItems?;
    NestedRatePlanOnExpand[] ratePlans?;
|};

public type POSTRSASignatureResponseType record {
    # Public key generated for this Payment Page.
    string 'key?;
    # Digital signature generated for this Payment Page.
    # 
    # If `signature` returns `null` but `token` is successfully returned, please limit the number of the fields in your request to make sure that the maximum length supported by the RSA signature algorithm is not exceeded.
    string signature?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # ID of the Zuora tenant.
    string tenantId?;
    # Token generated for this Payment Page.
    string token?;
};

public type GetCascadingPaymentMethodsConfigurationResponse record {
    # `true` indicates the consent from your customer to use the Cascading Payment Method feature was collected. `false` indicates the consent was not collected and the Cascading Payment Method feature is not enabled.
    boolean consent?;
    # Container for the priority configuration of payment methods. 
    GetCascadingPaymentMethodsConfigurationResponse_priorities[] priorities?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type PostBatchInvoicesType record {
    # Container for standalone invoices.
    PostInvoiceType[] invoices?;
    # Whether a batch request is handled with a single transaction.
    # 
    # - `true` indicates that a batch request will be handled with a single transaction.
    # - `false`  indicates that the standalone invoices to be created in a batch request will be handled with separated transactions.
    # 
    # If the field is set to `false`, a failure in the batch request will not cause the whole request to fail, so you have to retry the whole batch request.
    boolean useSingleTransaction?;
};

# Contains all template details.
public type TemplateDetailResponse record {
    # Whether or not the template is active.
    boolean active?;
    # Provides details about the different components that need to be compared and deployed.
    SettingSourceComponentResponse content?;
    # Information about the user who created it.
    string createdBy?;
    # When it is created.
    string createdOn?;
    # Template description which contains the information about the created template.
    string description?;
    # Name of the Entity
    string entityName?;
    # Details of the environment in which the template was created.
    string environment?;
    # Error information.
    string errors?;
    # Id of the template.
    string id?;
    # Name of the template.
    string name?;
    # The status of the template creation, such as whether it is in progress, completed, or failed.
    string status?;
    # Tenant's name for whom the template is created.
    string tenantName?;
};

public type RampIntervalChargeMetrics_mrr record {
    # The discount amount for the MRR.
    decimal discount?;
    # The end date.
    string endDate?;
    # The gross MRR amount before discounts charges are applied.
    decimal gross?;
    # The net MRR amount after discounts charges are applied.
    decimal net?;
    # The start date.
    string startDate?;
};

public type CustomObjectDefinitionUpdateActionRequest_relationship record {|
    # The cardinality of the relationship from this object to another object.
    # 
    # Only the `manyToOne` cardinality can be used when creating relationships.  A relationship with `oneToMany` cardinality is created implicitly when a `manyToOne` relationship is created.
    # 
    # A custom object definition can have a maximum of 2 `manyToOne` relationships.
    "manyToOne" cardinality?;
    # Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`.
    FieldsAdditionalProperties fields;
    # The namespace where the related object is located
    string namespace;
    # The API name of the related object
    string 'object;
    # Specifies contraints to apply to custom object records.
    PostCustomObjectDefinitionsRequestDefinition_recordConstraints recordConstraints?;
|};

public type CreatePaymentMethodGooglePayChase record {
    # This field is specific for setting up Google Pay on Chase gateway integrations to specify the stringified Google Pay token. For more information, see [Set up Google Pay on Chase](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Google_Pay_on_Chase).
    string googlePaymentToken?;
    *PaymentMethodCommonFields;
};

# The start date of the preview.
public type PreviewStartDate record {
    # The options on how the preview start date is calculated.
    # - If you set this field to `startOfTerm`, the preview start date is the start date of the subscription term.   
    # - If you set this field to `today`, the preview start date is today.
    # - If you set this field to `specificDate`, you must specify a specific date in the `specificDate` field. The date must be in the format `yyyy-mm-dd`.
    PreviewStartDatePolicy previewStartDatePolicy?;
    # The specific date for the preview start date. Required if `previewStartDatePolicy` is `specificDate`.
    string specificDate?;
};

# The array of data for each Invoice if you want to collect payment for particular items through one payment method. The grouped items are sent as one data record.  This field is available if the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Invoice_Item_Settlement/Overview_of_Invoice_Item_Settlement) permission is enabled.
# 
# Here is another example for a data item:
#   ```
#   {
#     "accountId": "60c81b5bc51649e8a7d1b48303194790",
#     "documentId": "2c9081a03c63c94c013c6894af5602dd",
#     "documentType": "Invoice",
#     "dataItems": [
#       {
#           "documentItemId": "8a92ab0e8ab14c53018ac746961c10d1",
#           "amount": 40
#       },
#       {
#           "taxItemId": "8a92ab0e8ab14c53018ac746961c10d2",
#           "amount": 40
#       }
#   ],
#     "amount": 80,
#     "paymentMethodId": "2c9081a03c6d7b51013c6d7e4ada0a1c",
#     "paymentGatewayId": "d2abe8342e1811ea80e774b9452e17ea",
#     "comment": "Payment Comments",
#     "customField1__c": "cf_value1",
#     "customField2__c": "cf_value2"
#   },
#   ```
public type DataItems record {
    # The total amount to be collected for the specified invoice/debit memo item. The sum of the item amount should be equal to document amount.
    decimal amount?;
    # The ID of a billing document of the invoice item or debit memo item.
    string documentItemId?;
    # The tax ID of the invoice item or debit memo item.
    string taxItemId?;
};

public type TimeSlicedNetMetrics record {
    decimal amount?;
    string discountChargeNumber?;
    string endDate?;
    # Specify the reason why the metrics are generated by the certain order action.
    # 
    # This field is only available to existing Orders customers who already have access to the field.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    "IncreaseQuantity"|"DecreaseQuantity"|"ChangePrice"|"Extension"|"Contraction" generatedReason?;
    # The acount number of the billing account that is billed for the subscription.
    string invoiceOwner?;
    # The ID of the order item referenced by the order metrics.
    # 
    # This field is only available to existing Orders customers who already have access to the field.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    string orderItemId?;
    string startDate?;
    # The acount number of the billing account that owns the subscription.
    string subscriptionOwner?;
    decimal termNumber?;
    # Indicates whether this metrics is for a regular charge or a discount charge.
    "Regular"|"Discount" 'type?;
};

# Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
public type OrderActionRatePlanRecurringPerUnitPricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    # Per-unit price of the charge in each recurring period.
    decimal listPrice?;
    # Specifies the duration of each recurring period.
    # 
    # **Note**: The `Per_Year` and `Per_Specific_Months` enum values are available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.              
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.
    @constraint:Int {minValue: 1, maxValue: 200}
    int:Signed32 specificListPriceBase?;
};

# The `CreatedById` field definition
public type CustomObjectAllFieldsDefinition_CreatedById record {
    # The field data format
    "uuid" format?;
    # The UI name of the field
    string label?;
    # Specifies whether the field is a system field or a custom field
    "system" origin?;
    # The field data type
    "string" 'type?;
};

public type ProxyGetPaymentMethodTransactionLog record {
    # 
    string Gateway?;
    # 
    string GatewayReasonCode?;
    # 
    string GatewayReasonCodeDescription?;
    # 
    string GatewayTransactionType?;
    # Object identifier.
    string Id?;
    # 
    string PaymentMethodId?;
    # 
    string PaymentMethodType?;
    # 
    string RequestString?;
    # 
    string ResponseString?;
    # 
    string TransactionDate?;
    # 
    string TransactionId?;
};

# Information about an order action of type `TermsAndConditions`.
public type CreateOrderTermsAndConditions record {
    boolean autoRenew?;
    # The ID of the bill-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string billToContactId?;
    # Whether to clear the existing bill-to contact ID at the subscription level. This field is mutually exclusive with the `billToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingBillToContact?;
    # Whether to clear the existing invoice group number at the subscription level. This field is mutually exclusive with the `invoiceGroupNumber` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingInvoiceGroupNumber?;
    # Whether to clear the existing invoice template ID at the subscription level. This field is mutually exclusive with the `invoiceTemplateId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingInvoiceTemplate?;
    # Whether to clear the existing payment term at the subscription level. This field is mutually exclusive with the `paymentTerm` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingPaymentTerm?;
    # Whether to clear the existing sequence set ID at the subscription level. This field is mutually exclusive with the `sequenceSetId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSequenceSet?;
    # Whether to clear the existing sold-to contact ID at the subscription level. This field is mutually exclusive with the `soldToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSoldToContact?;
    # The number of the invoice group associated with the subscription.
    # 
    # After enabling the Invoice Grouping feature, you can specify invoice group numbers to bill subscriptions and order line items based on specific criteria. For the same account, Zuora generates separate invoices for subscriptions and order line items, each identified by unique invoice group numbers. For more information, see [Invoice Grouping](https://knowledgecenter.zuora.com/Billing/Subscriptions/Invoice_Grouping).
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request during subscription creation, the value of this field is automatically set to `null` in the response body.
    string? invoiceGroupNumber?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # The length of the period for the current subscription term.
    LastTerm lastTerm?;
    # The name of the payment term associated with the subscription. For example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string paymentTerm?;
    "RENEW_WITH_SPECIFIC_TERM"|"RENEW_TO_EVERGREEN" renewalSetting?;
    RenewalTerm[] renewalTerms?;
    # The ID of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string soldToContactId?;
};

public type PUTDebitMemoItemType record {
    # The amount of the debit memo item. For tax-inclusive debit memo items, the amount indicates the debit memo item amount including tax. For tax-exclusive debit memo items, the amount indicates the debit memo item amount excluding tax.
    decimal amount?;
    # Comments about the debit memo item.
    string comment?;
    # The flag to exclude the debit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.            
    boolean excludeItemBillingFromRevenueAccounting = false;
    # Container for the finance information related to the debit memo item.
    PUTDebitMemoItemType_financeInformation financeInformation?;
    # The ID of the debit memo item.
    @constraint:String {maxLength: 32, minLength: 32}
    string id;
    # The number of units for the debit memo item.
    decimal quantity?;
    # The service end date of the debit memo item.
    string serviceEndDate?;
    # The service start date of the debit memo item. 
    string serviceStartDate?;
    # The name of the SKU.
    string skuName?;
    # Container for debit memo taxation items.
    PutDebitMemoTaxItemType[] taxItems?;
    # The definable unit that you measure when determining charges.
    string unitOfMeasure?;
    *DebitMemoItemObjectCustomFields;
};

# The container of the mandate information for the payment method.
public type CreatePaymentMethodCreditCard_mandateInfo record {
    # The mandate ID.
    @constraint:String {maxLength: 36}
    string mandateId?;
    # The reason of the mandate from the gateway side.
    @constraint:String {maxLength: 64}
    string mandateReason?;
    # The status of the mandate from the gateway side.
    @constraint:String {maxLength: 64}
    string mandateStatus?;
};

public type GetVersionsResponse record {
    # The list of workflow versions retrieved. 
    Workflow[] data?;
};

public type GetEInvoiceFileTemplateResponse record {
    # The content of the e-invoice file template, which must be encoded in Base64 format.
    string content?;
    # The short name of a country or region where you must comply with e-invoicing requirements. For example, `IN` for India. For the full list of country names and codes, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>.
    boolean country?;
    # The type of billing document for which the e-invoice file template is intended.
    "Invoice"|"CreditMemo"|"DebitMemo" documentType?;
    # The unique ID of the e-invoice file template.
    string id?;
    # The name of the e-invoice file template.
    @constraint:String {maxLength: 255}
    string name?;
    # The name of the e-invoicing service provider that assists in generating e-invoice files for billing documents. 
    "Sovos" provider?;
    # The unique number of the e-invoice file template.
    string templateNumber?;
};

# Provides details about the individual components that need to be compared and deployed.
public type SettingComponentKeyValue record {
    string[] errors?;
    # Json node object contains metadata.
    JsonNode originalPayload?;
    ConfigurationTemplateContent[] response?;
    string[] segregationKeys?;
};

public type PUTPaymentMethodResponse record {
    # ID of the updated payment method.
    string id?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type CreatePaymentMethodGooglePayAdyen record {
    # This field is specific for setting up Google Pay for Adyen  gateway integrations to specify the stringified Google Pay token. For more information, see [Set up Adyen Google Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Adyen_Google_Pay).
    string googlePaymentToken?;
    # Email address associated with the payment method. This field is specific for setting up Google Pay on Adyen v2.0. This field will be passed to Adyen as `shopperEmail`.
    string email?;
    *PaymentMethodCommonFields;
};

# Information about an order action of type `CreateSubscription`.
public type CreateOrderCreateSubscription record {
    # The ID of the bill-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string billToContactId?;
    # The code of currency that is used for this subscription. If the currency is not selected, the default currency from the account will be used.
    # 
    # All subscriptions in the same order must use the same currency. The currency for a subscription cannot be changed.
    # 
    # **Note**: 
    #   This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    @constraint:String {maxLength: 3}
    string currency?;
    # The number of the invoice group associated with the subscription.
    # 
    # After enabling the Invoice Grouping feature, you can specify invoice group numbers to bill subscriptions and order line items based on specific criteria. For the same account, Zuora generates separate invoices for subscriptions and order line items, each identified by unique invoice group numbers. For more information, see [Invoice Grouping](https://knowledgecenter.zuora.com/Billing/Subscriptions/Invoice_Grouping).
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request during subscription creation, the value of this field is automatically set to `null` in the response body.
    string? invoiceGroupNumber?;
    # Specifies whether the subscription appears on a separate invoice when Zuora generates invoices.
    boolean invoiceSeparately?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    CreateOrderCreateSubscriptionNewSubscriptionOwnerAccount newSubscriptionOwnerAccount?;
    # Notes about the subscription. These notes are only visible to Zuora users.
    @constraint:String {maxLength: 500}
    string notes?;
    # The name of the payment term associated with the subscription. For example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string paymentTerm?;
    # The ID of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string soldToContactId?;
    # List of rate plans associated with the subscription.
    CreateOrderRatePlanOverride[] subscribeToRatePlans?;
    # Subscription number of the subscription. For example, A-S00000001.
    # 
    # If you do not set this field, Zuora will generate the subscription number.
    @constraint:String {maxLength: 100}
    string subscriptionNumber?;
    # Account number of an existing account that will own the subscription. For example, A00000001.
    # 
    # If you do not set this field or the `newSubscriptionOwnerAccount` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `newSubscriptionOwnerAccount` field.
    @constraint:String {maxLength: 70}
    string subscriptionOwnerAccountNumber?;
    # Container for the terms and renewal settings of the subscription.
    PreviewOrderCreateSubscription_terms terms?;
};

public type PaymentInvoiceApplicationCreateRequestType record {
    # The amount of the payment associated with the invoice. This amount must be equal to or lesser than the balance of the invoice.
    decimal amount;
    # The unique ID of the invoice that the payment is created on. The balance of the invoice specified must not be `0`.
    string invoiceId?;
    # Container for invoice items. The maximum number of items is 1,000.
    # 
    # **Note:** This field is only available if you have the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/C_Invoice_Item_Settlement) feature enabled. Invoice Item Settlement must be used together with other Invoice Settlement features (Unapplied Payments, and Credit and Debit memos).  If you wish to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    PaymentInvoiceApplicationItemCreateRequestType[] items?;
};

public type GETAccountingPeriodWithoutSuccessType record {
    # ID of the user who created the accounting period.
    string createdBy?;
    # Date and time when the accounting period was created.
    string createdOn?;
    # The end date of the accounting period.
    string endDate?;
    # File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://developer.zuora.com/api-references/api/operation/GET_Files) REST API call.
    GETAccountingPeriodWithoutSuccessType_fileIds fileIds?;
    # Fiscal year of the accounting period.
    string fiscalYear?;
    # 
    int fiscal_quarter?;
    # ID of the accounting period.
    string id?;
    # Name of the accounting period.
    string name?;
    # Any optional notes about the accounting period.
    string notes?;
    # The organization(s) that the object belongs to. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.            
    GETProductType_organizationLabels[] organizationLabels?;
    # Date and time that the trial balance was completed. If the trial balance status is `Pending`, `Processing`, or `Error`, this field is `null`.
    string runTrialBalanceEnd?;
    # If trial balance status is Error, an error message is returned in this field.
    string runTrialBalanceErrorMessage?;
    # Date and time that the trial balance was run. If the trial balance status is `Pending`, this field is `null`.
    string runTrialBalanceStart?;
    # Status of the trial balance for the accounting period. Possible values:
    # 
    # * `Pending`
    # * `Processing`
    # * `Completed`
    # * `Error`
    string runTrialBalanceStatus?;
    # The start date of the accounting period.
    string startDate?;
    # Status of the accounting period. Possible values:
    # 
    # * `Open`
    # * `PendingClose`
    # * `Closed`
    string status?;
    # D of the user who last updated the accounting period.
    string updatedBy?;
    # Date and time when the accounting period was last updated.
    string updatedOn?;
    *AccountingPeriodObjectCustomFields;
};

public type BillToContact record {
    # First line of the contact's address. This is often a street address or a business name.
    @constraint:String {maxLength: 255}
    string address1?;
    # Second line of the contact's address.
    @constraint:String {maxLength: 255}
    string address2?;
    # City of the contact's address.
    @constraint:String {maxLength: 40}
    string city?;
    # Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the bill-to contact to calculate tax.
    @constraint:String {maxLength: 64}
    string country?;
    # County of the contact's address.
    @constraint:String {maxLength: 32}
    string county?;
    # Fax number of the contact.
    @constraint:String {maxLength: 40}
    string fax?;
    # First name of the contact.
    @constraint:String {maxLength: 100}
    string firstName;
    # Home phone number of the contact.
    @constraint:String {maxLength: 40}
    string homePhone?;
    # Last name of the contact.
    @constraint:String {maxLength: 100}
    string lastName;
    # Mobile phone number of the contact.
    @constraint:String {maxLength: 40}
    string mobilePhone?;
    # Nickname of the contact.
    @constraint:String {maxLength: 100}
    string nickname?;
    # Additional phone number of the contact. Use the `otherPhoneType` field to specify the type of phone number.
    @constraint:String {maxLength: 40}
    string otherPhone?;
    # Specifies the type of phone number in the `otherPhone` field.
    "Work"|"Mobile"|"Home"|"Other" otherPhoneType?;
    # Personal email address of the contact.
    @constraint:String {maxLength: 80}
    string personalEmail?;
    # ZIP code or other postal code of the contact's address.
    @constraint:String {maxLength: 20}
    string postalCode?;
    # State or province of the contact's address.
    @constraint:String {maxLength: 40}
    string state?;
    # Region defined in your taxation rules. Only applicable if you use Zuora Tax.
    @constraint:String {maxLength: 32}
    string taxRegion?;
    # Business email address of the contact.
    @constraint:String {maxLength: 80}
    string workEmail?;
    # Business phone number of the contact.
    @constraint:String {maxLength: 40}
    string workPhone?;
    *ContactObjectCustomFields;
};

public type GetOrdersResponse record {
    *CommonResponse;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    Order[] orders?;
};

# Container for the finance information related to the taxation item.
public type POSTTaxationItemTypeForInvoice_financeInformation record {
    # The accounting code for accounts receivable.
    @constraint:String {maxLength: 100}
    string accountsReceivableAccountingCode?;
    # The accounting code for the sales taxes payable.
    @constraint:String {maxLength: 100}
    string salesTaxPayableAccountingCode?;
};

public type PostCustomObjectDefinitionFieldsDefinitionRequest record {|
    PostCustomObjectDefinitionFieldDefinitionRequest...;
|};

public type Deployments_templates_body record {
    # Deployment's name
    string name;
    # Deployment's description.
    string description;
    # Specifies if an email should be sent.
    boolean sendEmail;
    # If sendEmail parameter is set to true, comma separated values of emails can be specified. Example  email1@test.com,email2@test.com.
    string emails?;
    # Content of the email to be sent.
    string comments?;
    # Template file.
    record {byte[] fileContent; string fileName;} template;
};

public type BulkCreateDebitMemosFromChargeRequest record {
    # The type of the source where debit memos are created. 
    #     
    # This enum field has the following values:
    #   - `Invoice`: By setting this field to `Invoice`, you can create multiple debit memos from invoices.
    #   - `Standalone`: By setting this field to `Standalone`, you can create multiple debit memos from product rate plan charges.
    #   
    # The specific schema of the `memos` object field in the request body depends on the value of the `sourceType` field.
    #   - To view the `memos` schema applicable to debit memo creation from invoices, select `Invoice` from the following drop-down list.
    #   - To view the `memos` schema applicable to debit memo creation from product rate plan charges, select `Standalone` from the following drop-down list.
    #   
    "Standalone" sourceType;
    # The container for a list of debit memos. The maximum number of debit memos is 50.
    @constraint:Array {maxLength: 50}
    DebitMemoFromChargeRequest[] memos?;
};

public type PUTSubscriptionPatchSpecificVersionRequestType record {
    # Container for custom fields of a Subscription object.
    SubscriptionObjectCustomFields customFields?;
    PUTSubscriptionPatchSpecificVersionRequestType_ratePlans[] ratePlans?;
};

public type UpdatePaymentType record {
    # Comments about the payment.
    @constraint:String {maxLength: 255}
    string comment?;
    # Container for the finance information related to the payment.
    # 
    # For a standalone payment, the finance information cannot be updated.
    UpdatePaymentType_financeInformation financeInformation?;
    # This field is mainly used for gateway reconciliation. See <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_Operations/DA_Electronic_Payment_Processing#Gateway_Reconciliation_Consideration" target="_blank">Electronic payment processing</a> for details.
    # 
    # You must have the **Edit Payment Gateway Status** <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/User_Roles/e_Payments_Roles" target="_blank">user permission</a> to update this field.
    "NotSubmitted"|"Submitted"|"Settled"|"FailedToSettle" gatewayState?;
    # The unique ID or the number of the payment schedule to be linked with the payment. See [Link payments to payment schedules](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Payment_Schedules/Link_payments_with_payment_schedules) for more information.
    string paymentScheduleKey?;
    # The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
    # 
    # You can only update the reference ID for external payments.
    @constraint:String {maxLength: 100}
    string referenceId?;
    *PaymentObjectNSFields;
    *PaymentObjectCustomFields;
};

public type POSTAccountResponseType record {
    # Auto-generated account ID.
    string accountId?;
    # Account number.
    string accountNumber?;
    # The ID of the bill-to contact.
    string billToContactId?;
    # Contracted monthly recurring revenue of the subscription.
    string contractedMrr?;
    # The credit memo ID, if a credit memo is generated during the subscription process.
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string creditMemoId?;
    # ID of the invoice generated at account creation, if applicable.
    string invoiceId?;
    # Amount collected on the invoice generated at account creation, if applicable.
    string paidAmount?;
    # ID of the payment collected on the invoice generated at account creation, if applicable.
    string paymentId?;
    # ID of the payment method that was set up at account creation, which automatically becomes the default payment method for this account.
    string paymentMethodId?;
    # The ID of the sold-to contact.
    string soldToContactId?;
    # ID of the subscription that was set up at account creation, if applicable.
    string subscriptionId?;
    # Number of the subscription that was set up at account creation, if applicable.
    string subscriptionNumber?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Total contracted value of the subscription.
    string totalContractedValue?;
};

# Pricing information about a one-time charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
public type OneTimeTieredPricingOverride record {
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # List of cumulative pricing tiers in the charge.
    ChargeTier[] tiers?;
};

public type GETProductRatePlanChargePricingTierType record {
    # Decimal defining end of tier range.
    string endingUnit?;
    # The decimal value of the tiered charge model. If the charge model is not a tiered type then this price field will be null and the price field directly under the productRatePlanCharges applies.
    string price?;
    # Tier price format.
    # 
    # Allowed values:
    # - flat fee 
    # - per unit
    string priceFormat?;
    # Decimal defining start of tier range.
    string startingUnit?;
    # Unique number of the tier.
    int tier?;
};

public type GetInvoicePdfStatusResponse record {
    # The ID of the invoice whose pdf status is requested.
    string invoiceId?;
    # The invoice number of the invoice whose pdf status is requested.
    string invoiceNumber?;
    # The generation status of the invoice PDF.
    "None"|"Pending"|"Processing"|"Generated"|"Error"|"Obsolete"|"Archived" pdfGenerationStatus?;
    # The time at which the request to generate the PDF was created.
    string createdOn?;
    # The time at which the request to generate the PDF was updated.
    string updatedOn?;
};

public type CreateStoredCredentialProfileRequest record {
    # Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
    # 
    # - `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
    # 
    #   Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
    #   
    #   If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
    # 
    # 
    # - `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
    "Activate"|"Persist" action?;
    # The date on which the profile is agreed. The date format is `yyyy-mm-dd`.
    string agreedOn?;
    # Specifies the ID of the payment gateway that Zuora will use when activating the stored credential profile.
    string authGateway?;
    # The security code of the credit card.
    string cardSecurityCode?;
    # Specifies your reference for the consent agreement that you have established with the customer.
    @constraint:String {maxLength: 128}
    string consentAgreementRef?;
    # Specifies how the consent agreement has been established with the customer. The allowed value is `External`.
    "External" consentAgreementSrc;
    # The ID of a network transaction. Only applicable if you set the `action` field to `Persist`.
    @constraint:String {maxLength: 128}
    string networkTransactionId?;
    # Specifies the status of the stored credential profile.
    # 
    # - `Active` - Use this value if you are creating the stored credential profile after receiving the customer's consent, or if the stored credential profile represents a stored credential profile in an external system.
    # 
    #   You can use the `action` field to specify how Zuora activates the stored credential profile.
    # 
    # 
    # - `Agreed` - Use this value if you are migrating the payment method to the stored credential transaction framework.
    # 
    #   In this case, Zuora will not send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile.
    "Agreed"|"Active" status;
    # Indicates the type of the stored credential profile to process recurring or unsecheduled transactions.
    "Recurring"|"Unscheduled" 'type;
};

# The JSON object containing the information for a charge update(custom fields only) in the
# 'RemoveProduct' type order action.
# A custom field of rate plan charge can be updated from a subscription through one
# order action.
# - If you update customFields of a charge while removing a rate plan, specify the following fields:
#   - `chargeNumber`
#   - `productRatePlanChargeId`
#   - `productRatePlanNumber`
#   - `uniqueToken`
#   - `customFields`
public type OrderActionRatePlanChargeRemove record {
    # Read only. Identifies the charge to be updated.
    string chargeNumber?;
    # Identifier of the rate plan that was updated.
    string productRatePlanChargeId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.
    string uniqueToken?;
    # Container for custom fields of a Rate Plan Charge object.
    record {|record {}...;|} customFields?;
};

# Charge associated with a rate plan.
public type OrderActionRatePlanChargeOverride record {
    # Billing information about the charge.
    OrderActionRatePlanChargeOverride_billing billing?;
    # Charge number of the charge. For example, C-00000307.
    # 
    # If you do not set this field, Zuora will generate the charge number.
    @constraint:String {maxLength: 50}
    string chargeNumber?;
    # Container for custom fields of a Rate Plan Charge object.
    OrderActionRatePlanRatePlanChargeObjectCustomFields customFields?;
    # Description of the charge.
    @constraint:String {maxLength: 500}
    string description?;
    # Specifies when a charge becomes inactive.
    OrderActionRatePlanEndConditions endDate?;
    # Pricing information about the charge.
    OrderActionRatePlanChargeOverride_pricing pricing?;
    # Internal identifier of the product rate plan charge that the charge is based on.
    string productRatePlanChargeId;
    # Revenue Recognition Code
    @constraint:String {maxLength: 70}
    string revRecCode?;
    # Specifies the revenue recognition trigger condition.
    # 
    #   * `Contract Effective Date`
    #   * `Service Activation Date`
    #   * `Customer Acceptance Date`
    "Contract Effective Date"|"Service Activation Date"|"Customer Acceptance Date" revRecTriggerCondition?;
    # Specifies the revenue recognition rule.
    # 
    #   * `Recognize upon invoicing`
    #   * `Recognize daily over time`
    "Recognize upon invoicing"|"Recognize daily over time" revenueRecognitionRuleName?;
    # Specifies when a charge becomes active.
    OrderActionRatePlanTriggerParams startDate?;
    # Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
};

public type PUTSubscriptionSuspendType record {
    # The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
    string[] applicationOrder?;
    # If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.
    # 
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    boolean applyCredit?;
    # Whether to automatically apply a credit balance to an invoice.
    # 
    # If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.
    # 
    # 
    # To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.
    # 
    # Prerequisite: `invoice` must be `true`. 
    # 
    # **Note:** 
    #   - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.
    #   - This field is deprecated if you have the Invoice Settlement feature enabled.
    boolean applyCreditBalance?;
    # The booking date that you want to set for the amendment contract when you suspend the subscription. If `resume` is `true`, which means you also choose to resume the subscription at some point, then this field is also the booking date for the Resume amendment contract.
    # 
    # This field must be in the `yyyy-mm-dd` format. The default value of this field is the current date when you make the API call. 
    string bookingDate?;
    # Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.
    # 
    # If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.
    # 
    # Prerequisite: The `invoice` or `runBilling` field must be `true`. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    boolean collect = false;
    # The date when the customer notifies you that they want to amend their subscription.
    string contractEffectiveDate?;
    # A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
    string creditMemoReasonCode?;
    # The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
    # 
    # - If this field is specified, the specified date is used as the billing document date. 
    # - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
    string documentDate?;
    # Whether to extend the subscription term by the length of time the suspension is in effect. Values: `true`, `false`.
    boolean extendsTerm?;
    # **Note:** This field has been replaced by the `runBilling` field. The
    # `invoice` field is only available for backward compatibility.
    # 
    # 
    # Creates an invoice for a subscription. The invoice generated in this
    # operation is only for this subscription, not for the entire customer
    # account.
    # 
    # 
    # If the value is `true`, an invoice is created. If the value is
    # `false`, no action is taken. The default value is `false`. 
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `196.0` and `207.0`. To use this field in the method, you
    # must set the zuora-version parameter to the minor version number in
    # the request header.
    boolean invoice?;
    # **Note:** This field has been replaced by the `invoice` field
    # and the `collect` field. `invoiceCollect` is available only for backward
    # compatibility.
    # 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`.
    boolean invoiceCollect?;
    # **Note:** This field has been replaced by the `targetDate` field. The
    # `invoiceTargetDate` field is only available for backward
    # compatibility.
    # 
    # 
    # Date through which to calculate charges if an invoice is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `207.0` and earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string invoiceTargetDate?;
    # The date when the order is signed. If no additinal contractEffectiveDate is provided, this order will use this order date as the contract effective date.
    # This field must be in the `yyyy-mm-dd` format.
    # This field is required for Orders customers only, not applicable to Orders Harmonization customers.
    string orderDate?;
    # Whether to set when to resume a subscription when creating a suspend amendment. Values: `true`, `false`.
    boolean resume?;
    # The length of the period used to specify when the subscription is resumed. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the `resumePeriodsType` field to specify the period.
    # 
    # **Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.
    string resumePeriods?;
    # The period type used to define when the subscription resumption takes effect. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the resumePeriods field to specify the period.
    # 
    # Values: `Day`, `Week`, `Month`, `Year`
    # 
    # **Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.
    string resumePeriodsType?;
    # Resume methods. Specify a way to resume a subscription. Values:
    # 
    # * `Today`: The subscription resumption takes effect on today's date.
    # 
    # * `FixedPeriodsFromSuspendDate`: The subscription resumption takes effect after a specified period based on the suspend date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.
    # 
    # * `SpecificDate`: The subscription resumption takes effect on a specific date. You must define the specific date in the `resumeSpecificDate` field.
    # 
    # * `FixedPeriodsFromToday`: The subscription resumption takes effect after a specified period based on the today's date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.
    # * `suspendDate`: The subscription resumption takes effect on the date of suspension of the subscription.
    string resumePolicy?;
    # A specific date when the subscription resumption takes effect, in the format yyyy-mm-dd.
    # 
    # **Note:** This field is only applicable only when the `resumePolicy` field is set to `SpecificDate`.
    # 
    # The value should not be earlier than the subscription suspension date.
    string resumeSpecificDate?;
    # Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  
    # 
    # 
    # The billing documents generated
    # in this operation is only for this subscription, not for the entire
    # customer account.
    # 
    # 
    # Possible values:
    # 
    # - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.
    # 
    # 
    # - `false`: No invoice is created.
    # 
    # 
    # **Note:** This field is in Zuora REST API version control. Supported
    # minor versions are `211.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method,
    # you must set the `zuora-version` parameter to the minor version number
    # in the request header.
    true|false runBilling = false;
    # The length of the period used to specify when the subscription suspension takes effect. The subscription suspension takes effect after a specified period based on today's date. You must use this field together with the `suspendPeriodsType` field to specify the period.
    # 
    # **Note:** This field is only applicable only when the suspendPolicy field is set to FixedPeriodsFromToday.
    string suspendPeriods?;
    # The period type used to define when the subscription suspension takes effect. The subscription suspension takes effect after a specified period based on today's date. You must use this field together with the suspendPeriods field to specify the period.
    # 
    # Type: string (enum)
    # 
    # Values: `Day`, `Week`, `Month`, `Year`
    # 
    # **Note:** This field is only applicable only when the suspendPolicy field is set to FixedPeriodsFromToday.
    string suspendPeriodsType?;
    # Suspend methods. Specify a way to suspend a subscription. 
    # 
    # Value:
    # 
    # * `Today`: The subscription suspension takes effect on today's date.
    # * `EndOfLastInvoicePeriod`: The subscription suspension takes effect at the end of the last invoice period. The suspend date defaults to a date that is one day after the last invoiced period. You can choose this option to avoid any negative invoices (credits) issued back to the customer after the subscription suspension. 
    # * `SpecificDate`: The subscription suspension takes effect on a specific date. You must define the specific date in the `suspendSpecificDate` field.
    # * `FixedPeriodsFromToday`: The subscription suspension takes effect after a specified period based on today's date. You must specify the `suspendPeriods` and `suspendPeriodsType` fields to define the period.
    string suspendPolicy;
    # A specific date when the subscription suspension takes effect, in the format yyyy-mm-dd.
    # 
    # **Note:** This field is only applicable only when the suspendPolicy field is set to SpecificDate.
    # 
    # The value should not be earlier than the subscription contract effective date, later than the subscription term end date, or within a period for which the customer has been invoiced.
    string suspendSpecificDate?;
    # Date through which to calculate charges if an invoice or a credit memo is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `211.0` and later. To use this field in the method, you
    # must set the  `zuora-version` parameter to the minor version number in
    # the request header.
    string targetDate?;
};

public type GETCancelAdjustmentResponseType record {
    *CommonResponse;
    # The Debit Memo generated to write off the Credit Memo for the delivery adjustment.       
    string debitMemoNumber?;
};

public type GETARPaymentTypeWithPaymentOption record {
    # The ID of the customer account that the payment is for.
    string accountId?;
    # The number of the customer account that the payment is for.
    string accountNumber?;
    # The total amount of the payment.
    decimal amount?;
    # The applied amount of the payment.
    decimal appliedAmount?;
    # The authorization transaction ID from the payment gateway.
    string authTransactionId?;
    # The first six or eight digits of the credit card or debit card used for the payment, when applicable.
    string bankIdentificationNumber?;
    # The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the payment.
    string comment?;
    # The ID of the Zuora user who created the payment.
    string createdById?;
    # The date and time when the payment was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The amount that the payment transfers to the credit balance. The value is not `0` only for those payments that come from legacy payment operations performed without the Invoice Settlement feature.
    decimal creditBalanceAmount?;
    # When Standalone Payment is not enabled, the `currency` of the payment must be the same as the payment currency defined in the customer account settings through Zuora UI.
    # 
    # When Standalone Payment is enabled and `standalone` is `true`, the `currency` of the standalone payment can be different from the payment currency defined in the customer account settings. The amount will not be summed up to the account balance or key metrics regardless of currency.
    string currency?;
    # The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.
    string effectiveDate?;
    # Container for the finance information related to the payment.
    GETARPaymentTypewithSuccess_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the payment.
    string gatewayId?;
    # A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created.  If not specified, the payment number will be passed in instead.
    string gatewayOrderId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the payment. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the payment. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the payment in the gateway; use for reconciliation.
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    # The unique ID of the created payment. For example, 4028905f5a87c0ff015a87eb6b75007f.
    string id?;
    # The date and time when a payment was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # The unique identification number of the payment. For example, P-00000001.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The natural key for the payment gateway.
    string paymentGatewayNumber?;
    # The unique ID of the payment method that the customer used to make the payment.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
    string paymentMethodSnapshotId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # The unique ID or the number of the payment schedule that is linked to the payment. See [Link payments to payment schedules](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Payment_Schedules/Link_payments_with_payment_schedules) for more information.
    string paymentScheduleKey?;
    # The payout ID of the payment from the gateway side.
    string payoutId?;
    # Indicates whether the payment is used as a reserved payment. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.
    boolean prepayment?;
    # The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
    string referenceId?;
    # The amount of the payment that is refunded.
    decimal refundAmount?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondPaymentReferenceId?;
    # The date and time when the payment was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptorPhone?;
    # This field is only available if the support for standalone payment is enabled. This field is not available for transferring, applying, or unapplying a payment.
    # 
    # The value `true` indicates this is a standalone payment that is created and processed in Zuora through Zuora gateway integration but will be settled outside of Zuora. No settlement data will be created. The standalone payment cannot be applied, unapplied, or transferred.
    # 
    # The value `false` indicates this is an ordinary payment that is created, processed, and settled in Zuora.
    boolean standalone?;
    # The status of the payment.
    # 
    # If the <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_Operations/DA_Electronic_Payment_Processing#Asynchronous_payment_flow" target="_blank">Asynchronous Payment Statuses</a> feature is not enabled, possible values are `Draft`, `Processing`, `Processed`, `Error`, `Canceled`, and `Posted`.
    # 
    # If the Asynchronous Payment Statuses feature is enabled, when the ACH or Bank Transfer payment is created, it is in a `Pending` status upon successful network communication with the gateway. To transition from a `Pending` status to another status, use one of our Gateway Reconciliation options or cancel the payment.
    "Draft"|"Processing"|"Processed"|"Error"|"Canceled"|"Posted"|"Pending" status?;
    # The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The type of the payment.
    "External"|"Electronic" 'type?;
    # The unapplied amount of the payment.
    decimal unappliedAmount?;
    # The ID of the Zuora user who last updated the payment.
    string updatedById?;
    # The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *PaymentObjectNSFields;
    *PaymentObjectCustomFields;
};

public type NestedCreditMemoApplicationOnExpand record {|
    # The unique identifier of the credit memo application.
    string id?;
    # The unique identifier of the user who created the credit memo application.
    string createdById?;
    # The date and time when the credit memo application was created.
    string createdDate?;
    # The unique identifier of the user who last updated the credit memo application.
    string updatedById?;
    # The date and time when the credit memo application was last updated.
    string updatedDate?;
    # The application amount of the credit memo.
    decimal amount?;
    # The date when the credit memo application becomes effective.
    string effectiveDate?;
    # The ID of the credit memo associated with the credit memo application.
    string creditMemoId?;
    # The ID of the customer account associated with the credit memo.
    string accountId?;
    # The ID of the application group to which this credit memo application belongs.
    string applicationGroupId?;
    # The ID of the debit memo to which the credit memo is applied.
    string debitMemoId?;
    # The ID of the invoice to which the credit memo is applied.
    string invoiceId?;
    # EXPANDABLE.
    # The credit memo associated with the credit memo application.
    record {} creditMemo?;
|};

public type POSTAccountingPeriodResponseType record {
    # ID of the newly-created accounting period.
    string id?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type RatePlans RatePlan[];

public type GetCreditMemoPdfStatusResponse record {
    # The ID of the credit memo whose pdf status is requested.
    string creditMemoId?;
    # The credit memo number of the credit memo whose pdf status is requested.
    string creditMemoNumber?;
    # The generation status of the credit memo PDF.
    "None"|"Pending"|"Processing"|"Generated"|"Error"|"Obsolete"|"Archived" pdfGenerationStatus?;
    # The time at which the request to generate the PDF was created.
    string createdOn?;
    # The time at which the request to generate the PDF was updated.
    string updatedOn?;
};

public type GETJournalEntryDetailTypeWithoutSuccess record {
    # Name of the accounting period that the journal entry belongs to.
    string accountingPeriodName?;
    # Returns true if the journal entry is aggregating currencies. That is, if the journal entry was created when the `Aggregate transactions with different currencies during a JournalRun` setting was configured to "Yes". Otherwise, returns `false`.
    boolean aggregateCurrency?;
    # Currency used.
    string currency?;
    # Home currency used.
    string homeCurrency?;
    # Date of the journal entry.
    string journalEntryDate?;
    # Key name that represents the list of journal entry items.
    GETJournalEntryItemType[] journalEntryItems?;
    # Additional information about this record.
    # Character limit: 2,000
    string notes?;
    # Journal entry number in the format JE-00000001.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # List of segments that apply to the summary journal entry.
    GETJournalEntrySegmentType[] segments?;
    # Status of journal entry. 
    "Created"|"Cancelled" status?;
    # End date of time period included in the journal entry.
    string timePeriodEnd?;
    # Start date of time period included in the journal entry.
    string timePeriodStart?;
    # Transaction type of the transactions included in the summary journal entry.
    string transactionType?;
    # Date and time that transferredToAccounting was changed to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.
    string transferDateTime?;
    # User ID of the person who changed transferredToAccounting to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.
    string transferredBy?;
    # Status shows whether the journal entry has been transferred to an accounting system. 
    "No"|"Processing"|"Yes"|"Error"|"Ignore" transferredToAccounting?;
    *JournalEntryObjectCustomFields;
};

# The data backfill job type
public type DataBackfillJobType "ProductRatePlanCharge"|"RatePlanCharge"|"InvoiceDetail"|"MemoDetail"|"InvoiceItemAdjustment";

public type PostRefundType record {
    # Comments about the refund.
    @constraint:String {maxLength: 255}
    string comment?;
    # It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item, Reporting currency item, or both).
    # 
    # **Note**: The API custom rate feature is permission controlled.
    @constraint:Array {maxLength: 2}
    PaymentWithCustomRatesType[] customRates?;
    # Container for the finance information related to the refund.
    PostRefundType_financeInformation financeInformation?;
    # The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
    PUTVerifyPaymentMethodType_gatewayOptions gatewayOptions?;
    # How an external refund was issued to a customer. This field is required for an external refund and must be left empty for an electronic refund. You can issue an external refund on an electronic payment.
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    @constraint:String {maxLength: 100}
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.
    string refundDate?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
    @constraint:String {maxLength: 100}
    string secondRefundReferenceId?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    @constraint:String {maxLength: 35}
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    @constraint:String {maxLength: 20}
    string softDescriptorPhone?;
    # The total amount of the refund. The amount cannot exceed the unapplied amount of the associated payment. If the original payment was applied to one or more invoices or debit memos, you have to unapply a full or partial payment from the invoices or debit memos, and then refund the full or partial unapplied payment to your customers. 
    decimal totalAmount;
    # The type of the refund.
    "External"|"Electronic" 'type;
    # The transaction type of the refund.
    "Chargeback"|"PaymentReversal" refundTransactionType?;
    *RefundObjectNSFields;
    *RefundObjectCustomFields;
};

public type CreatePaymentMethodCCReferenceTransaction record {
    # The masked credit card number, such as `*********1112`.
    # This field is specific for the CC Reference Transaction payment method. It is an optional field that you can use to distinguish different CC Reference Transaction payment methods.
    # Though there are no special restrictions on the input string, it is highly recommended to specify a card number that is masked.
    @constraint:String {maxLength: 19}
    string creditCardMaskNumber?;
    # A gateway unique identifier that replaces sensitive payment method data. 
    # 
    # `secondTokenId` is conditionally required only when `tokenId` is being used to represent a gateway customer profile. `secondTokenId` is used in the CC Reference Transaction payment method.
    string secondTokenId?;
    # A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile.
    # 
    # When `tokenId` is used to represent a customer profile, `secondTokenId` is conditionally required for representing the underlying tokenized payment method.
    # 
    # The values for the `tokenId` and `secondTokenId` fields differ for gateways. For more information, see the Knowledge Center article specific to each gateway that supports the CC Reference Transaction payment method.
    string tokenId?;
    # The container of the mandate information for the payment method.
    CreatePaymentMethodCCReferenceTransaction_mandateInfo mandateInfo?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type ApplyPaymentType record {
    # Container for debit memos. The maximum number of debit memos is 1,000.
    PaymentDebitMemoApplicationApplyRequestType[] debitMemos?;
    # The date when the payment application takes effect, in `yyyy-mm-dd` format. The effective date must be later than or equal to the maximum effective date of the payment.
    string effectiveDate?;
    # Container for invoices. The maximum number of invoices is 1,000.
    PaymentInvoiceApplicationApplyRequestType[] invoices?;
};

# 
public type GetDebitMemoPdfStatusBatchResponse record {
    # Array of debit memo PDF statuses requested.
    GetDebitMemoPdfStatusResponse[] debitMemoFiles?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type BillRunScheduleResponseType record {
    # The start date of the scheduled bill run.
    string repeatFrom?;
    # The end date of of the scheduled bill run.
    string repeatTo?;
    # The repeat type of the bill run.
    "None"|"Daily"|"Weekly"|"Monthly" repeatType?;
    # The scheduled run time (hour) of day.
    # 
    # **Values:** 0 - 23
    int runTime?;
    # The repeat day in a week.
    ("Mon"|"Tue"|"Wed"|"Thu"|"Fri"|"Sat"|"Sun")[] weeklyOnDay?;
};

public type GETRefundItemPartCollectionType record {
    # Container for refund part items.
    GETRefundItemPartTypewithSuccess[] itemParts?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type POSTSubscriptionResponseType record {
    # Monthly recurring revenue of the subscription.
    decimal contractedMrr?;
    # The credit memo ID, if a credit memo is generated during the subscription process.
    # 
    # **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string creditMemoId?;
    # Invoice ID, if an invoice is generated during the subscription process.
    string invoiceId?;
    # Payment amount, if a payment is collected.
    decimal paidAmount?;
    # Payment ID, if a payment is collected.
    string paymentId?;
    # 
    string subscriptionId?;
    # 
    string subscriptionNumber?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Total contracted value of the subscription.
    decimal totalContractedValue?;
};

public type GETEmailHistoryVOsType record {
    # A container for email histories.
    GETEmailHistoryVOType[] emailHistories?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type PostOrderResponseType_ramps record {
    # The number of the ramp definition.
    @constraint:String {maxLength: 50}
    string rampNumber?;
    # The number of the subscription that this ramp deal definition is applied to.
    @constraint:String {maxLength: 150}
    string subscriptionNumber?;
};

public type POSTChargeDefinitionRequestBulk record {
    # Container for the array of product charge definition.
    POSTChargeDefinitionRequest[] productChargeDefinitions?;
};

# The account holder information.
public type GETPMAccountHolderInfo record {
    # The full name of the account holder.
    string accountHolderName?;
    # The first line of the address for the account holder.
    string addressLine1?;
    # The second line of the address for the account holder. 
    string addressLine2?;
    # The city where the account holder stays.
    string city?;
    # The country where the account holder stays.
    # 
    # When creating a payment method through a translated UI or Payment Page, a country name in a translated language might be selected. Regardless of the country texts selected when creating the payment method, only the supported country name returns in this field. For a complete list of supported country names, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>. Internationalization is not supported for the API field value.
    string country?;
    # The email address of the account holder.
    string email?;
    # The phone number of the account holder.
    string phone?;
    # The state where the account holder stays.
    string state?;
    # The zip code for the address of the account holder.
    string zipCode?;
};

public type RegenerateBookingRequest record {
    # The item number.
    string itemNumber?;
    # The order line item ID.
    string orderLineItemId?;
    # The order number.
    string orderNumber?;
    # The subscription ID.
    string subscriptionId?;
    # The subscription number.
    string subscriptionNumber?;
    # The subscription version.
    int subscriptionVersion?;
    # The type of business object for which you want to generate the transactions.
    "Subscription"|"OrderLineItem" 'type?;
};

# Container for custom fields of a Journal Entry object.
public type JournalEntryObjectCustomFields record {
};

# Container for custom fields of an Invoice Schedule Item object.
public type InvoiceScheduleItemCustomFields record {
};

public type CreateEInvoicingBusinessRegionRequest record {
    # The first line of the Seller’s address, which is often a street address or business name.
    string addressLine1?;
    # The second line of the Seller’s address, which is often the name of a building.
    string addressLine2?;
    # The full official name that the Seller is registered with the relevant legal authority.
    @constraint:String {maxLength: 255}
    string businessName;
    # The specify the unique identifier number of the legal entity or person that you do business with.
    # 
    # For example, you must use a GSTIN for India and Tax Identification Number (TIN) for Saudi Arabia.
    string businessNumber?;
    # The identification scheme identifier that an official registrar issues to identify the Seller as a legal entity or person.
    string businessNumberSchemaId?;
    # The the name of the city where the business is located.
    string city?;
    # The name of the Seller contact to receive e-invoicing data.
    @constraint:String {maxLength: 255}
    string contactName?;
    # The short name of a country or region where you must comply with e-invoicing requirements. For example, `IN` for India. For the full list of country names and codes, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>.
    string country;
    # Whether the e-invoicing service provider signs PDF files for billing documents.
    boolean digitalSignatureEnable = false;
    # Whether the digital signature box is displayed on PDF files for billing documents.
    boolean digitalSignatureBoxEnable = false;
    # The X-coordinate to determine where the digital signature box is displayed on PDF files for billing documents.
    @constraint:Number {minValue: 0}
    decimal digitalSignatureBoxPosX?;
    # The Y-coordinate to determine where the digital signature box is displayed on PDF files for billing documents. 
    @constraint:Number {minValue: 0}
    decimal digitalSignatureBoxPosY?;
    # The email address of the Seller contact to receive e-invoicing data.
    string email?;
    # The Seller's electronic address, to which the application-level response to the e-invoice file might be delivered.
    string endpointId?;
    # The identification scheme identifier of the Seller’s electronic address.
    string endpointSchemeId?;
    # The business phone number of the Seller contact to receive e-invoicing data.
    string phoneNumber?;
    # The short code that can identify the business address.
    string postalCode?;
    # Container for e-invoicing response field mappings that map values from Sovos response data to fields on the EInvoiceData object in Zuora. Each response field mapping consists of a field name and a field path.
    # 
    # Note that this field is applicable only to the Sovos service provider.
    # 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing/B_Configure_the_E-Invoicing_feature/Configure_e-invoicing_response_field_mappings" target="_blank">Configure e-invoicing response field mappings</a>.
    record {|string...;|} responseMapping?;
    # The unique ID of the e-invoicing service provider that is associated to the business region.
    string serviceProviderId?;
    # The name of the state or province where the business is located.
    string state?;
    # The Seller's VAT identifier (also known as Seller VAT identification number) or the local identification (defined by the Seller’s address) of the Seller for tax purposes, or a reference that enables the Seller to state the registered tax status.
    string taxRegisterNumber?;
    # The name that the Seller is known as, other than the legal business name.
    @constraint:String {maxLength: 100}
    string tradeName?;
};

public type NestedRatePlanChargeOnExpand record {|
    # The unique identifier of the rate plan charge.
    string id?;
    # The unique identifier of the user who created the rate plan charge.
    string createdById?;
    # The date and time when the rate plan charge was created.
    string createdDate?;
    # The unique identifier of the user who last updated the rate plan charge.
    string updatedById?;
    # The date and time when the rate plan charge was last updated.
    string updatedDate?;
    # The unique identifier of the rate plan to which this rate plan charge belongs.
    string ratePlanId?;
    # The unique identifier of the product rate plan charge associated with this product rate plan charge.
    string productRatePlanChargeId?;
    # The accounting code for the charge. Accounting codes group\
    # \ transactions that contain similar accounting attributes.
    # 
    # **Values**: inherited from `ProductRatePlanCharge.AccountingCode`\n\
    # \n**Note**: This value changes if `ProductRatePlanCharge.AccountingCode`\
    # \ is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge`\
    # \ do not change when `ProductRatePlanCharge.AccountingCode` is updated. 
    string accountingCode?;
    # Specifies the type of charges a specific discount applies to. 
    # **Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo` 
    string applyDiscountTo?;
    # Indicates the charge's billing cycle day (BCD), which is\
    # \ when bill runs generate invoices for charges associated with the product\
    # \ rate plan charge or the account. 
    # 
    # **Values**: inherited from `ProductRatePlanCharge.BillCycleDay` 
    int billCycleDay?;
    # Specifies how to determine the billing day for the charge.\n\
    # 
    # **Values**: inherited from `ProductRatePlanCharge.BillCycleType`\
    # \ **Note:** You can override the value inherited from the Product Rate\
    # \ Plan Charge, but only when creating a new subscription or a New Product\
    # \ amendment. 
    string billCycleType?;
    # Allows billing period to be overridden on rate plan charge.\n\
    # ****Values**: **inherited from `ProductRatePlanCharge.BillingPeriod` **Note:**\
    # \ You can override the value inherited from the Product Rate Plan Charge,\
    # \ but only when creating a new subscription or a New Product amendment. 
    string billingPeriod?;
    # Aligns charges within the same subscription if multiple charges\
    # \ begin on different dates.
    # 
    # **Values**: inherited from `ProductRatePlanCharge.BillingPeriodAlignment` 
    string billingPeriodAlignment?;
    # The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.
    # 
    # **Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type.
    "In Advance"|"In Arrears" billingTiming?;
    # The date through which a customer has been billed for the charge.
    @constraint:String {maxLength: 29}
    string chargedThroughDate?;
    # Determines how to evaluate charges. Charge models must be\
    # \ individually activated in the web-based UI.
    # 
    # **Values**: inherited from `ProductRatePlanCharge.ChargeModel` 
    string chargeModel?;
    # A unique number that identifies the charge. This number is returned as a string.
    # 
    # **Values**: one of the following:
    # - automatically generated if left `null`
    # - a unique number of 50 characters or fewer
    string chargeNumber?;
    # Specifies the type of charge.
    # 
    # **Values**: inherited from `ProductRatePlanCharge.ChargeType`
    string chargeType?;
    # A description of the rate plan charge. 
    string description?;
    # Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account" discountLevel?;
    # A delta monthly recurring charge is the change in monthly
    # recurring revenue caused by an amendment or a new subscription. 
    # 
    # **Character limit**: 16 
    # 
    # **Values**: automatically generated
    decimal dMRC?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal drawdownRate?;
    # After an Amendment, the change in the total contract value\
    # \ (TCV) amount for this charge, compared with its previous value.
    # 
    # **Character limit**: 16
    # 
    # **Values**: automatically generated 
    decimal dTCV?;
    # Start date when the rate plan charge becomes active, as `yyyy-mm-dd`.
    string effectiveEndDate?;
    # Final date the rate plan is active, as `yyyy-mm-dd`.
    string effectiveStartDate?;
    # Condition for the charge to become inactive.
    # 
    # - If the value of this field is `Fixed_Period`, the charge is active for a predefined duration based on the value of the `upToPeriodsType` and `upToPeriods` fields.
    # - If the value of this field is `Specific_End_Date`, use the `specificEndDate` field to specify the date when the charge becomes inactive.
    "Subscription_End"|"Fixed_Period"|"Specific_End_Date" endDateCondition?;
    # The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # If both the following features in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing" target="_blank">Advanced Consumption Billing</a> are enabled in your tenant, you must ensure the `excludeItemBillingFromRevenueAccounting` field is set consistently for a prepayment charge and the corresponding drawdown charge. In addition, if the `excludeItemBookingFromRevenueAccounting` field in an Create Subscription or Add Product order action is set to `false`, you must also set the `excludeItemBillingFromRevenueAccounting` field in this order action to `false`.
    #   * Prepaid with Drawdown
    #   * Unbilled Usage
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The flag to exclude rate plan charges from revenue accounting.
    # 
    # If both the following features in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing" target="_blank">Advanced Consumption Billing</a> are enabled in your tenant, you must ensure the `excludeItemBookingFromRevenueAccounting` field is set consistently for a prepayment charge and the corresponding drawdown charge.
    #   * Prepaid with Drawdown
    #   * Unbilled Usage
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting?;
    # The unique identifier of the invoice schedule associated with the subscription.
    string invoiceScheduleId?;
    # Indicates if the segment of the rate plan charge is the most recent segment. **Character limit**: 5 **Values**: automatically generated.
    boolean isLastSegment?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # Indicates whether this charge is a prepayment (topup) charge or a
    # drawdown charge. 
    boolean isPrepaid?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # It determines whether the rollover fields are needed.
    boolean isRollover?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    int rolloverPeriods?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int:Signed32? rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # Indicates whether the rate plan charge has been processed.
    boolean isProcessed?;
    # The list price base for the product rate plan charge.
    "Per Billing Period"|"Per Month"|"Per Week"|"Per Year"|"Per Specific Months" listPriceBase?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `ListPriceBase` field to `Per Specific Months`.
    # 
    # **Notes**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - The value of this field is `null` if you do not set the value of the `ListPriceBase` field to `Per Specific Months`.
    int:Signed32? specificListPriceBase?;
    boolean priceUpsellQuantityStacked?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `133` or higher. Otherwise, an error occurs. 
    # 
    # This field defines the type of commitment. A prepaid charge can be `UNIT` or `CURRENCY`. A minimum commitment(in-arrears) charge can only be `CURRENCY` type. For topup(recurring or one-time) charges, this field indicates what type of funds are created. 
    # * If UNIT, it will create a fund with given prepaidUom.
    # * If CURRENCY, it will create a fund with the currency amount calculated in list price.
    #   
    # For drawdown(usage) charges, this field indicates what type of funds are drawdown from that created from topup charges.
    "UNIT"|"CURRENCY" commitmentType?;
    # Indicates whether the rate plan charge is commited.
    boolean isCommitted?;
    # Monthly recurring revenue (MRR) is the amount of recurring
    # charges in a given month. The MRR calculation doesn't include one-time
    # charges nor usage charges. **Character limit**: 16 **Values**: automatically
    # generated 
    decimal mRR?;
    # The name of the rate plan charge. **Character limit**: 100
    # **Values**: automatically generated 
    string name?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model. **Character limit**: 5 **Values**: inherited from `ProductRatePlanCharge.NumberOfPeriod` 
    int numberOfPeriods?;
    # The original ID of the rate plan charge. **Character limit**: 32 **Values**: automatically generated 
    string originalId?;
    # Determines when to calculate overage charges. If the value of the SmoothingMode field is null (not specified and not inherited from ProductRatePlanCharge.SmoothingMode), the value of this field is ignored. **Character limit**: 20 **Values**: inherited from `ProductRatePlanCharge.OverageCalculationOption` 
    string overageCalculationOption?;
    #  Determines whether to credit the customer with unused units of usage.
    # **Character limit**: 20 **Values**: inherited from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption` 
    string overageUnusedUnitsCreditOption?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The type of this charge. It is either a prepayment (topup) charge or a drawdown charge. 
    "topup"|"drawdown"? prepaidOperationType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal? prepaidQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The total amount of units that end customers can use during a validity period when they subscribe to a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    decimal? prepaidTotalQuantity?;
    # Applies an automatic price change when a termed subscription is renewed.
    # 
    # **Values**: one of the following:
    # 
    # - `NoChange` (default)
    # - `SpecificPercentageValue`
    # - `UseLatestProductCatalogPricing`
    string priceChangeOption?;
    #  Specifies the percentage to increase or decrease the price of renewed subscriptions.
    # **Character limit**: 16 **Values**: a decimal value between -100 and 100 
    decimal priceIncreasePercentage?;
    #  The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.
    # **Character limit**: 29 **Values**: automatically generated 
    string processedThroughDate?;
    # Determines how to prorate charges when a subscription is created or amended.
    string prorationOption?;
    #  The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing.
    # **Character limit**: 16 **Values**: a valid quantity value 
    decimal quantity?;
    # Number of deliveries in the billing period for the charge segment.
    # 
    # The `numberOfDeliveries` is used for the Delivery Pricing charge model only. 
    # 
    # **Note**: The Delivery Pricing charge model is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. To manage and access this feature through the self-service interface, see [Enable billing features by yourself](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Billing_Settings/Manage_Features) in the Knowledge Center. You can check **Delivery Pricing** in **Billing Settings** > **Enable Charge Types / Models**.
    decimal numberOfDeliveries?;
    # A rating group based on which usage records are rated. Only applicable to Usage charges.
    # 
    # Possible values:
    # 
    # - `ByBillingPeriod`: The rating is based on all the usages in a billing period.
    # - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    # - `ByUsageRecord`: The rating is based on each usage record.
    # - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    # - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # For more information, see [Usage rating by group](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Usage/Usage_Rating_by_Group).
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload"|"ByGroupId" ratingGroup?;
    #  Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend calls, you can use this field only for NewProduct amendments. For Update calls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge.
    # 
    # **Character limit**: n/a
    # 
    # **Values**: inherited from `ProductRatePlanCharge.RevenueRecognitionRuleName` or the name of an active Revenue Recognition Rule
    # 
    # **Note**: Unless overridden, this value changes if `ProductRatePlanCharge.RevenueRecognitionRuleName` is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change when `ProductRatePlanCharge.RevenueRecognitionRuleName` is updated. 
    string revenueRecognitionRuleName?;
    # Associates this product rate plan charge with a specific revenue recognition code.
    # 
    # **Character limit**: 70
    # 
    # **Values**: inherited from `ProductRatePlanCharge.RevRecCode` or a valid revenue recognition code
    # 
    # **Note**: Unless overridden, this value changes if `ProductRatePlanCharge.RevRecCode` is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change when `ProductRatePlanCharge.RevRecCode` is updated. 
    string revRecCode?;
    #  Specifies when revenue recognition begins.
    # 
    # **Character limit**: 22
    # 
    # **Values**: inherited from `ProductRatePlanCharge.RevRecTriggerCondition` or one of the following:
    # 
    # -  `ContractEffectiveDate`
    # 
    # -  `ServiceActivationDate`
    # 
    # -  `CustomerAcceptanceDate`
    # 
    # Note: Unless overridden, this value changes if `ProductRatePlanCharge.RevRecTriggerCondition` is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change when `ProductRatePlanCharge.RevRecTriggerCondition` is updated. 
    string revRecTriggerCondition?;
    # The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.
    # **Character limit**: 2 **Values**: automatically generated 
    int:Signed32 segment?;
    # Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`.
    # **Character limit**: 5 **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. 
    int specificBillingPeriod?;
    # The specific date on which the charge ends, in `yyyy-mm-dd` format.
    # 
    # **Character limit**: 29 
    # 
    # **Note**:
    # 
    # - This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`.
    # - If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
    string specificEndDate?;
    #  The total contract value (TCV) is the value of a single rate plan charge in a subscription over the lifetime of the subscription. This value does not represent all charges on the subscription. The TCV includes recurring charges and one-time charges, but it doesn't include usage charge.
    # **Character limit**: 16 **Values**: automatically generated 
    decimal tCV?;
    #  The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is required if the `TriggerEvent` field value is `SpecificDate`.
    # **Character limit**: 29 
    string triggerDate?;
    # Specifies when to start billing the customer for the charge.
    # **Note: **This field can be passed through the Subscribe and Amend calls and will override the default value set on the Product Rate Plan Charge.
    # 
    # **Character limit**: 18 
    # 
    # **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:
    # 
    # - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    # - `ServiceActivation` is when the services or products for a subscription have been activated and the customers have access.
    # - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.
    # - `SpecificDate` is valid only on the RatePlanCharge.
    string triggerEvent?;
    #  Specifies the units to measure usage.
    # **Character limit**: 25 **Values**: inherited from `ProductRatePlanCharge.UOM` 
    string uOM?;
    # Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
    # 
    # **Character limit**: 5 
    # 
    # **Values**: inherited from `ProductRatePlanCharge.UpToPeriods` **Note**:
    # 
    # - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
    # - You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.
    # - Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`.
    # - If you override the value in this field, enter a whole number between 0 and 65535, exclusive.
    # - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
    int upToPeriods?;
    # The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`. 
    # 
    # **Note**:
    # 
    # - You must use this field together with the `UpToPeriods` field to specify the time period.
    # - This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
    "Billing Periods"|"Days"|"Weeks"|"Months"|"Years" upToPeriodsType?;
    # The version of the rate plan charge. Each time a charge is amended, Zuora creates a new version of the rate plan charge. **Character limit**: 5 **Values**: automatically generated.
    int version?;
    # Specifies which day of the week as the bill cycle day (BCD) for the charge.
    "Sunday"|"Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"|"Saturday" weeklyBillCycleDay?;
    # The unique identifier of the subscription to which the rate plan charge belongs.
    string subscriptionId?;
    # ID of the account that owns the subscription.
    string subscriptionOwnerId?;
    # ID of the account that will pay the billing documents for the subscription.
    string invoiceOwnerId?;
    # The date when the rate plan charge is created through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sales order line in Zuora Revenue.
    string originalOrderDate?;
    # The date when the rate plan charge is amended through an order
    # or amendment. This field is to standardize the booking date
    # information to increase audit ability and traceability of data
    # between Zuora Billing and Zuora Revenue. It is mapped as the
    # booking date for a sale order line in Zuora Revenue.
    string amendedByOrderOn?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled. 
    # 
    # The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information.
    "TimeBased"|"ConsumptionBased"|"FullCreditBack" creditOption?;
    # Allow the discount duration to be aligned with the billing period partially.
    # 
    # **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    boolean applyToBillingPeriodPartially?;
    # The unique ID of the product charge definition.
    string productChargeDefinitionId?;
    # ID of the accountReceivableAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a>, <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a>, and <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Get_started_with_Invoice_Settlement/AA_Overview_of_Invoice_Settlement" target="_blank">Invoice Settlement</a> features are enabled.
    string accountReceivableAccountingCodeId?;
    # ID of the deferredRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string deferredRevenueAccountingCodeId?;
    # ID of the recognizedRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string recognizedRevenueAccountingCodeId?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Unit of measurement for a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    string prepaidUOM?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Unit of measurement for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge).
    string drawdownUom?;
    # EXPANDABLE.
    # The rate plan to which this charge belongs.
    record {} ratePlan?;
    # EXPANDABLE.
    # The product rate plan charge associated with this rate plan charge.
    record {} productRatePlanCharge?;
|};

# Definition of a filter rule parameter.
public type FilterRuleParameterDefinition record {
    @constraint:String {maxLength: 255}
    string description?;
    # The display name of the parameter.
    @constraint:String {maxLength: 255}
    string displayName?;
    # The option values of the parameter.
    string[] options?;
    # The type of the value.
    "STRING"|"BYTE"|"SHORT"|"CHARACTER"|"INTEGER"|"LONG"|"FLOAT"|"DOUBLE"|"BOOLEAN"|"BIG_INTEGER"|"BIG_DECIMAL"|"LOCAL_DATE"|"LOCAL_DATE_TIME"|"TIMESTAMP"|"BYTE_ARRAY"|"SHORT_ARRAY"|"CHARACTER_ARRAY"|"INTEGER_ARRAY"|"FLOAT_ARRAY"|"DOUBLE_ARRAY"|"BOOLEAN_ARRAY"|"STRING_ARRAY"|"BIG_INTEGER_ARRAY"|"BIG_DECIMAL_ARRAY"|"LOCAL_DATE_ARRAY"|"LOCAL_DATE_TIME_ARRAY"|"TIMESTAMP_ARRAY" valueType?;
};

# Container for invoices.
# 
# 
#  **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header. Also, the response structure is changed and the following invoice related response fields are moved to this **invoice** container:
#   
#    * amount
#    * amountWithoutTax
#    * taxAmount
#    * invoiceItems
#    * targetDate
public type POSTSubscriptionPreviewResponseType_invoice record {
    # Invoice amount.
    decimal amount?;
    # Invoice amount minus tax.
    decimal amountWithoutTax?;
    # Container for invoice items.
    POSTSubscriptionPreviewInvoiceItemsType[] invoiceItems?;
    # Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.
    # 
    # **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header.
    string targetDate?;
    # The tax amount of the invoice.
    decimal taxAmount?;
};

public type SubmitBatchQueryResponse record {
    # A JSON array object that contains a list of batch objects.
    BatchesQueries[] batches?;
    # If enabled, you must supply the formatting (zip or unzip) first and decrypt it to get the actual contents.      
    "pgp"|"none" encrypted?;
    # The format of the query. The default value is `csv`.
    "csv"|"zip"|"gzip" format?;
    # The job ID created for the AQuA API request. The job ID can be used for querying for the query status. 
    # 
    # The ID exists only if the JSON request can be parsed and validated successfully. Otherwise, the job ID is null.
    string id?;
    # Allows you to override the time from which a Stateful AQuA job incrementally retrieves records that have been created or modified, using the `incrementalTime` parameter. For example, if you set `incrementalTime` = `2015-01-21 10:30:01`, AQuA will retrieve records that have created or modified beginning at 10:30:01. If this parameter is not set, AQuA continues to use the Start Time of the last AQuA session to retrieve records incrementally.
    # 
    # The time zone of `incrementalTime` depends on which Zuora data center you use. For US Data Center customers, the time zone of `incrementalTime` is Pacific Time. For EU Data Center customers, the time zone of `incrementalTime` is UTC. If the time zone of your system is different from the time zone of `incrementalTime`, you will need to convert to the appropriate time zone before setting `incrementalTime`.
    # 
    # **Note**: This field can only be used in Stateful AQuA mode.    
    string incrementalTime?;
    # The name of the job. 32 character limit.
    string name?;
    # If URL is provided, the AQuA job will call this `notifyUrl` once the job has completed. The value of `notifyUrl` needs to have `${JOBID}` and `${STATUS}` placeholders. These placeholders will be replaced by the actual job ID and status when returned in the response. Status will be `Completed` after the AQuA job is done.
    # 
    # If you submit an AQuA query with `notifyUrl` specified, the value of `notifyUrl` will be ignored if your organization has already <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Callout_Notification_for_Completed_AQuA_Jobs" target="_blank">configured a callout notification through the Zuora user interface</a>.           
    string notifyUrl?;
    # This field specifies the time offset for AQuA queries in stateful mode. It is an integer in the range 0 to 3,600 seconds.
    # 
    # For example, if you set this field to 600 seconds and you post a query in stateful mode at 2:00 AM, it will query against data created or updated between the completion time of the previous query and 1:50 AM.
    # 
    # The value of this field will override the value you configured in **Settings** > **Administration** > **AQuA API Stateful Mode Time Offset**.    
    int offset?;
    # The partner field indicates the unique ID of a data integration partner. The dropdown list of this field displays partner IDs for the past thirty days.
    # 
    # It must be used together with "project" field to uniquely identify a data integration target.
    # 
    # For example, if a continuous AQuA session is to retrieve data incrementally for a Salesforce.com Org 00170000011K3Ub, you can use partner as "Salesforce", and "project" as "00170000011K3Ub." 
    # 
    # This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.
    # 
    # **Note**: Zuora highly recommends you use the stateless mode instead of the stateful mode to extract bulk data. See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Bulk_data__extraction_from_Zuora_using_AQuA" target="_blank">Bulk data extraction from Zuora using AQuA</a> for best practices.
    # 
    # **Note**: Submit a request at <a href="http://support.zuora.com" target="_blank">Zuora Global Support</a> to obtain a partner ID.
    string partner?;
    # The project field contains the unique ID of a data integration project for a particular partner. The dropdown list of this field displays project IDs for the past thirty days.
    # 
    # This field must be used together with partner field to uniquely identify a data integration target. 
    # 
    # This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.
    string project?;
    # Indicates the source this aggregate query runs against:
    # 
    # * `LIVE` represents the live transactional databases at Zuora (Data Query Live).
    string sourceData?;
    # The status of the AQuA job:
    # - submitted: The AQuA job was submitted to the query executor for processing.
    # - executing: The AQuA job is being processed.
    # - completed: The AQuA job was successfully executed.
    # - error: The AQuA job was not processed because of validation errors.
    # - aborted: The AQuA job execution failed because one or more queries of this job failed.
    # - cancelled: The AQuA job was cancelled.
    "submitted"|"executing"|"completed"|"error"|"aborted"|"cancelled" status?;
    # If this flag is set to `true`, then all the previous queries are merged with existing queries.
    # 
    # If the flag is set to `false`, then the previous queries are ignored, and only the new query is executed.
    boolean useLastCompletedJobQueries?;
    # The API version you want to use. 
    # 
    # The supported versions are as follows:
    #   - `1.1`. It supports both modes
    #   - `1.0`. Default. It supports stateless modes only.
    # 
    # See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/BA_Stateless_and_Stateful_Modes" target="_blank">Stateless and stateful modes</a> for more information.
    float version?;
};

# It contains information about template schemas with segregation keys.
public type ConfigurationTemplateContent record {
    # Type of Component.
    string componentType?;
    # Error Information.
    string 'error?;
    # Id of Each component.
    string id?;
    # Key value of fields inside component.
    string 'key?;
    # Http method which is used to retrieve the particular component.
    string method?;
    # Json node object contains metadata.
    JsonNode payload?;
    # Contains the response of details fetched regarding selected component.
    string result?;
    # Gives the difference between components and sub components.
    string segregationKey?;
    # Id of the Template.
    string templateId?;
    # Metadata is retrieved from this URL.
    string url?;
};

public type SignUpResponse record {
    # The account id for the order.
    string accountId?;
    # The account number for the order.
    string accountNumber?;
    # An array of the credit memo id generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.
    string creditMemoId?;
    # An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.
    string creditMemoNumber?;
    # The invoice id generated in this order request
    string invoiceId?;
    # The invoice number generated in this order request
    string invoiceNumber?;
    # The order number of the order created.
    string orderNumber?;
    # The total amount collected in this order request.
    string paidAmount?;
    # The payment id that is collected in this order request.
    string paymentId?;
    # The payment number that is collected in this order request.
    string paymentNumber?;
    # The Id of the process that handles the operation.
    string processId?;
    SignUpResponse_reasons[] reasons?;
    # Status of the order. `Pending` is only applicable for an order that contains a `CreateSubscription` order action.
    "Completed"|"Pending" status?;
    # The subscription id of the order.
    string subscriptionId?;
    # The subscription number of the order.
    string subscriptionNumber?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type GETSubscriptionRatePlanChargesType record {
    # The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.
    string amendedByOrderOn?;
    # Specifies the type of charges a specific discount applies to. 
    # 
    # This field is only used when applied to a discount charge model. If you are not using a discount charge model, the value is null.
    # 
    # Possible values:
    # 
    # * `RECURRING`
    # * `USAGE`
    # * `ONETIMERECURRING`
    # * `ONETIMEUSAGE`
    # * `RECURRINGUSAGE`
    # * `ONETIMERECURRINGUSAGE`
    string applyDiscountTo?;
    # Allow the discount duration to be aligned with the billing period partially.
    # 
    # **Note**: This field is only available if you have the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature enabled.
    boolean applyToBillingPeriodPartially?;
    # Billing cycle day (BCD), which is when bill runs generate invoices
    # for charges associated with the product rate plan charge or the account.  
    # 
    # Values:
    # 
    # * `DefaultFromCustomer`
    # * `SpecificDayofMonth(# of the month)`
    # * `SubscriptionStartDay`
    # * `ChargeTriggerDay`
    # * `SpecificDayofWeek/dayofweek`: in which dayofweek is the day in the week you define your billing periods to start.
    # 
    # In the response data, a day-of-the-month ordinal value (`first`-`31st`) appears in place of the hash sign above ("#"). If this value exceeds the number of days in a particular month, the last day of the month is used as the BCD.
    string billingDay?;
    # Allows billing period to be overridden on the rate plan charge.
    string billingPeriod?;
    # Possible values:
    # 
    # * `AlignToCharge`
    # * `AlignToSubscriptionStart`
    # * `AlignToTermStart`
    string billingPeriodAlignment?;
    # The billing timing for the charge. This field is only used if the `ratePlanChargeType` value is `Recurring`.
    # 
    # Possible values are:
    # 
    # * `In Advance`
    # * `In Arrears`
    # 
    # **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    string billingTiming?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `141` or higher. Otherwise, an error occurs.
    # 
    # This field defines what type of charge it is in Advanced Consumption Billing:
    # * Standard: Normal charge with no Prepayment or Commitment or Drawdown.
    # * Prepayment: For recurring charges. Unit or currency based prepaid charge.
    # * CommitmentTrueUp: For recurring charges. Currency based minimum commitment charge.
    # * Drawdown: For usage charges. Drawdown from prepaid funds.
    # * DrawdownAndCreditCommitment: For usage charges. Drawdown from prepaid funds and then credit to minimum commitment funds.
    # * CreditCommitment: For usage charges. Credit to minimum commitment funds.
    "Standard"|"Prepayment"|"CommitmentTrueUp"|"Drawdown"|"CreditCommitment"|"DrawdownAndCreditCommitment" chargeFunction?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `133` or higher. Otherwise, an error occurs. 
    # 
    # This field defines the type of commitment. A prepaid charge can be `UNIT` or `CURRENCY`. A minimum commitment(in-arrears) charge can only be `CURRENCY` type. For topup(recurring or one-time) charges, this field indicates what type of funds are created. 
    # * If UNIT, it will create a fund with given prepaidUom.
    # * If CURRENCY, it will create a fund with the currency amount calculated in list price.
    #   
    # For drawdown(usage) charges, this field indicates what type of funds are drawdown from that created from topup charges.
    "UNIT"|"CURRENCY" commitmentType?;
    # Container for charge model configuration data.
    # 
    # **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    ChargeModelConfigurationType chargeModelConfiguration?;
    # The date through which a customer has been billed for the charge.
    string chargedThroughDate?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled. 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information.
    "TimeBased"|"ConsumptionBased"|"FullCreditBack" creditOption?;
    # Currency used by the account. For example, `USD` or `EUR`.
    string currency?;
    # Description of the rate plan charge.
    string description?;
    # The amount of the discount.
    decimal discountAmount?;
    # Container for the application details about a discount rate plan charge. 
    # 
    # Only discount rate plan charges have values in this field.
    GETDiscountApplyDetailsType[] discountApplyDetails?;
    # The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.
    # 
    # For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).
    string discountClass?;
    # The level of the discount. Values: `RatePlan`, `Subscription`, `Account`.
    string discountLevel?;
    # The amount of the discount as a percentage.
    decimal discountPercentage?;
    # The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription.
    decimal dmrc?;
    # A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not been completed for the charge segment.
    boolean done?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal drawdownRate?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Unit of measurement for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge).
    string drawdownUom?;
    # After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types.
    decimal dtcv?;
    # The effective end date of the rate plan charge.
    string effectiveEndDate?;
    # The effective start date of the rate plan charge.
    string effectiveStartDate?;
    # Defines when the charge ends after the charge trigger date.
    # 
    # If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
    # 
    # Values:
    # 
    # * `Subscription_End`
    # * `Fixed_Period`
    # * `Specific_End_Date`
    # * `One_Time`
    string endDateCondition?;
    # The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The flag to exclude rate plan charges from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting?;
    # Rate plan charge ID.
    string id?;
    # Specifies the number of units in the base set of units.
    decimal includedUnits?;
    # The ID of the invoice schedule associated with the rate plan charge on the subscription.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleId?;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Indicates whether this charge is a prepayment (topup) charge or a drawdown charge. Values: `true` or `false`.
    boolean isPrepaid?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The value is either "True" or "False". It determines whether the rollover fields are needed.
    boolean isRollover?;
    # **Note**: This field is only applicable to the Discount - Percentage charge model.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 130 or higher. Otherwise, an error occurs.
    # 
    # This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:
    #   - `True`: This is a stacked discount, which should be calculated by stacking with other discounts.
    #   - `False`: This is not a stacked discount, which should be calculated in sequence with other discounts.
    # 
    # For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).
    boolean isStackedDiscount?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # List price base; possible values are:
    # 
    # * `Per_Billing_Period`
    # * `Per_Month`
    # * `Per_Week`
    # * `Per_Year`
    # * `Per_Specific_Months`
    string listPriceBase?;
    # Charge model; possible values are:
    # 
    # * `FlatFee`
    # * `PerUnit`
    # * `Overage`
    # * `Volume`
    # * `Tiered`
    # * `TieredWithOverage`
    # * `DiscountFixedAmount`
    # * `DiscountPercentage`
    # * `MultiAttributePricing`
    # * `PreratedPerUnit`
    # * `PreratedPricing`
    # * `HighWatermarkVolumePricing`
    # * `HighWatermarkTieredPricing`
    # * `Delivery`
    string model?;
    # Monthly recurring revenue of the rate plan charge.
    decimal mrr?;
    # Charge name.
    string name?;
    # Charge number.
    string number?;
    # Number of deliveries in the billing period for the charge segment.
    # 
    # The `numberOfDeliveries` is used for the Delivery Pricing charge model only. 
    decimal numberOfDeliveries?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
    int numberOfPeriods?;
    # The original ID of the rate plan charge.
    string originalChargeId?;
    # The date when the rate plan charge is created through an order or amendment.
    # 
    # This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.
    string originalOrderDate?;
    # Determines when to calculate overage charges.
    string overageCalculationOption?;
    # The price for units over the allowed amount.
    decimal overagePrice?;
    # Determines whether to credit the customer with unused units of usage.
    string overageUnusedUnitsCreditOption?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The type of this charge. It is either a prepayment (topup) charge or a drawdown charge. 
    "topup"|"drawdown" prepaidOperationType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal prepaidQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The total amount of units that end customers can use during a validity period when they subscribe to a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    decimal prepaidTotalQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Unit of measurement for a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    string prepaidUom?;
    # The price associated with the rate plan charge expressed as a decimal.
    decimal price?;
    # When the following is true:
    # 
    # 1. AutomatedPriceChange setting is on
    # 
    # 2. Charge type is not one-time
    # 
    # 3. Charge model is not discount percentage
    # 
    # Then an automatic price change can have a value for when a termed subscription is renewed. 
    # 
    # Values (one of the following):
    # 
    # * `NoChange` (default)
    # * `SpecificPercentageValue`
    # * `UseLatestProductCatalogPricing`
    string priceChangeOption?;
    # A planned future price increase amount as a percentage.
    decimal priceIncreasePercentage?;
    # Concise description of rate plan charge model.
    string pricingSummary?;
    # The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.
    string processedThroughDate?;
    # This is used to maintain the product category. 
    # 
    # **Note**: This field is only available if you have the Additional Revenue Fields property enabled.
    string productCategory?;
    # This is used to maintain the product class. 
    # 
    # **Note**: This field is only available if you have the Additional Revenue Fields property enabled.    
    string productClass?;
    # This is used to maintain the product family. 
    # 
    # **Note**: This field is only available if you have the Additional Revenue Fields property enabled.
    string productFamily?;
    # This is used to maintain the product line. 
    # 
    # **Note**: This field is only available if you have the Additional Revenue Fields property enabled.
    string productLine?;
    # 
    string productRatePlanChargeId?;
    # The quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing.
    decimal quantity?;
    # Specifies a rating group based on which usage records are rated.
    # 
    # Possible values:
    # 
    # - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.
    # - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    # - `ByUsageRecord`: The rating is based on each usage record.
    # - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    # - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Note:** 
    # - The `ByBillingPeriod` value can be applied for all charge models. 
    # - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
    # - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    # - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
    string ratingGroup?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled.    
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" revenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" revenueAmortizationMethod?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    decimal rolloverPeriods?;
    # The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.
    int segment?;
    # Specifies when revenue recognition begins. When charge model is `Overage` or `TieredWithOverage`, `smoothingModel` will be one of the following values:
    # 
    # * `ContractEffectiveDate`
    # * `ServiceActivationDate`
    # * `CustomerAcceptanceDate`
    string smoothingModel?;
    # Customizes the number of month or week for the charges billing period. This field is required if you set the value of the `BillingPeriod` field to `Specific_Months` or `Specific_Weeks`.
    int specificBillingPeriod?;
    # The specific date on which the charge ends. If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
    string specificEndDate?;
    # The number of months for the list price base of the charge. 
    # 
    # **Note**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.
    anydata specificListPriceBase?;
    # The `deliverySchedule` is used for the Delivery Pricing charge model only. 
    # 
    # **Note**: The Delivery Pricing charge model is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. To manage and access this feature through the self-service interface, see [Enable billing features by yourself](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Billing_Settings/Manage_Features) in the Knowledge Center. You can check **Delivery Pricing** in **Billing Settings** > **Enable Charge Types / Models**.
    GETDeliveryScheduleType subscriptionChargeDeliverySchedule?;
    # Interval Pricing information. This field is available if the Offers feature is enabled.
    GETIntervalPriceType[] subscriptionChargeIntervalPricing?;
    # The total contract value.
    decimal tcv?;
    # One or many defined ranges with distinct pricing.
    GETTierType[] tiers?;
    # The date that the rate plan charge will be triggered.
    string triggerDate?;
    # The event that will cause the rate plan charge to be triggered.
    # 
    # Possible values: 
    # 
    # * `ContractEffective`
    # * `ServiceActivation`
    # * `CustomerAcceptance`
    # * `SpecificDate`
    string triggerEvent?;
    # Charge type. Possible values are: `OneTime`, `Recurring`, `Usage`.
    string 'type?;
    # Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the 
    # `OverageUnusedUnitsCreditOption` field value is `CreditBySpecificRate`.
    decimal unusedUnitsCreditRates?;
    # The identifier of the original upselling charge associated with the current charge.
    # 
    # For a termed subscription, you can now use the "Create an order" API operation to perform an Add Product order action to make a product quantity upsell for per unit recurring charges. The benefit is that the charge added by this approach will be automatically combined with the original existing charge for which you want to upsell when the subscription is renewed. The approach is as follows:
    # * Use an Add Product order action to add a charge that is of the same charge type, charge model, and charge end date as the existing per unit recurring charge for which you want to make a quantity upsell.
    # 
    # * In the preceding charge to add, use the `upsellOriginChargeNumber` field to specify the existing rate plan charge for which you want to make the quantity upsell.
    # 
    # Note that a termed subscription with such upsell charges can not be changed to an evergreen subscription.   
    # 
    # **Note**: The Quantity Upsell feature is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global
    # Support](https://support.zuora.com).  
    string upsellOriginChargeNumber?;
    # Specifies the units to measure usage. 
    string uom?;
    # Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
    # 
    # If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
    string upToPeriods?;
    # The period type used to define when the charge ends. 
    # 
    # Values:
    # 
    # * `Billing_Periods`
    # * `Days`
    # * `Weeks`
    # * `Months`
    # * `Years`
    string upToPeriodsType?;
    # Determines how Zuora processes usage records for per-unit usage charges. 
    string usageRecordRatingOption?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
    # Rate plan charge revision number.
    int version?;
    *RatePlanChargeObjectCustomFields;
};

public type InvoiceScheduleResponses record {
    # The ID of the customer account that the invoice schedule belongs to.
    string accountId?;
    # The actual amount that needs to be billed during the processing of the invoice schedule.
    # 
    # By default, the actual amount is the same as the total amount. Even if order changes occur like Remove Product or Cancel Subscription, the value of the `totalAmount` field keeps unchanged. The value of the `actualAmount` field reflects the actual amount to be billed.
    string actualAmount?;
    # A list of the numbers of the subscriptions that need to be billed together with the invoice schedule. 
    # 
    # One invoice schedule can have at most 600 additional subscriptions.
    string[] additionalSubscriptionsToBill?;
    # The amount that has been billed during the processing of the invoice schedule.
    string billedAmount?;
    # The currency of the billing documents generated during the processing of the invoice schedule.
    # **Note**:  - This field is available only if you have the <a
    #   href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies"
    #   target="_blank">Multiple Currencies</a> feature enabled.
    # 
    # - If you have the Multiple Currencies feature disabled, the corresponding account's default currency is always used.
    string currency?;
    # The unique ID of the invoice schedule.
    string id?;
    # Whether the invoice items created from the invoice schedule appears on a separate invoice when Zuora generates invoices.
    boolean invoiceSeparately?;
    # The run date of the next execution of invoice schedule. By default, the next run date is the same as run date of next pending invoice schedule item. It can be overwritten with a different date other than the default value. When the invoice schedule has completed the execution, the next run date is null.
    string nextRunDate?;
    # Comments on the invoice schedule.
    @constraint:String {maxLength: 255}
    string notes?;
    # The sequence number of the invoice schedule.
    string number?;
    # A list of the IDs or numbers of the orders associated with the invoice schedule. One invoice schedule can be associated with at most 10 orders.
    string[] orders?;
    # Container for schedule items. One invoice schedule can have at most 50 invoice schedule items.
    ScheduleItemsResponse[] scheduleItems?;
    # A list of the numbers of specific subscriptions associated with the invoice schedule.
    InvoiceScheduleSpecificSubscriptions[] specificSubscriptions?;
    # The status of the invoice schedule.
    "Pending"|"PartiallyProcessed"|"Paused"|"FullyProcessed" status?;
    # The total amount that needs to be billed during the processing of the invoice schedule. 
    # 
    # The value of this field keeps unchanged once invoice schedule items are created.
    string totalAmount?;
    # The amount that is waiting to be billed during the processing of the invoice schedule.
    string unbilledAmount?;
    *InvoiceScheduleCustomFields;
};

# Container for the taxation items of the invoice item. 
public type InvoiceItem_taxationItems record {
    # List of taxation items.
    GETInvoiceTaxItemType[] data?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
};

public type PaymentInvoiceApplicationItemUnapplyRequestType record {
    # The amount of the payment that is unapplied from the specific invoice or taxation item.
    decimal amount;
    # The ID of the specific invoice item.
    string invoiceItemId?;
    # The ID of the specific taxation item.
    string taxItemId?;
};

public type GETPaymentMethodResponseCreditCard record {
    # The masked credit card number.
    # 
    # When `cardNumber` is `null`, the following fields will not be returned:
    #   - `expirationMonth`
    #   - `expirationYear`
    #   - `accountHolderInfo`
    string cardNumber?;
    # One or two digits expiration month (1-12).
    #         
    int expirationMonth?;
    # Four-digit expiration year.
    int expirationYear?;
    # The CVV or CVV2 security code for the credit card or debit card.
    #             Only required if changing expirationMonth, expirationYear, or cardHolderName.
    #             To ensure PCI compliance, this value isn''t stored and can''t be queried.                  
    string securityCode?;
};

public type ExpandedOrders record {|
    # The unique identifier of the order.
    string id?;
    # The unique identifier of the user who created the order.
    string createdById?;
    # The time that the order gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the order.
    string updatedById?;
    # The date and time when the order was last updated.
    string updatedDate?;
    # The description of the order.
    string description?;
    # The date when the order is signed. All the order actions under this
    # order will use this order date as the contract effective date if no
    # additinal contractEffectiveDate is provided.
    string orderDate?;
    # The unique identifier of the order.
    string orderNumber?;
    # The unique identifier of the customer account associated with the
    # order.
    string accountId?;
    # The status of the order. If the order contains any `Pending
    # Activation` or `Pending Acceptance` subscription, the order status
    # will be `Pending`; If the order is in draft status, the order status
    # will be `Draft`; otherwise the order status is `Completed`.
    # 
    # 
    # The available order statuses are as follow:
    # 
    # - `Draft`: The order is in draft status.
    # 
    # - `Pending`: The order is in pending status.
    # 
    # - `Completed`: The order is in completed status.
    # 
    # - `Cancelled`: The draft or scheduled order is cancelled.
    # 
    # - `Scheduled`: The order is in scheduled status and it is only valid
    # if the Scheduled Orders feature is enabled.
    # 
    # - `Executing`: The scheduled order is executed by a scheduler and it
    # is only valid if the Scheduled Orders feature is enabled.
    # 
    # - `Failed`: The scheduled order has failed.
    # 
    # 
    # **Note**: To manage and access the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/AA_Overview_of_Orders/P_Scheduled_Orders"
    # target="_blank">Scheduled Orders</a> feature from the self-service
    # interface, see <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Configure_billing_settings/System_settings/Enable_billing_features_by_yourself"
    # target="_blank">Enable billing features by yourself</a>.
    "Draft"|"Pending"|"Completed"|"Cancelled"|"Scheduled"|"Executing"|"Failed" status?;
    # The state of the bill-to address. The value is a valid state
    #  or province name or 2-character abbreviation.
    string state?;
    # Indicates whether the order is created by migration.
    boolean createdByMigration?;
    string category?;
    # The unique identifier of the invoice schedule associated with the
    # order.
    string invoiceScheduleId?;
    # The date for the order scheduled.
    string scheduledDate?;
    # Date policy of the scheduled order.
    "SpecificDate" scheduledDatePolicy?;
    # The error code of the error response.
    string errorCode?;
    # The error message of the error response.
    string errorMessage?;
    string response?;
    NestedAccountOnExpand account?;
    NestedOrderLineItemOnExpand[] orderLineItems?;
    NestedOrderActionOnExpand[] orderActions?;
|};

public type DeliveryScheduleParams record {
    # Specifies the frequency for delivery schedule
    "Weekly" frequency?;
    # Indicates whether delivery on friday.
    boolean friday?;
    # Indicates whether delivery on monday.
    boolean monday?;
    # Indicates whether delivery on saturday.
    boolean saturday?;
    # Indicates whether delivery on sunday.
    boolean sunday?;
    # Indicates whether delivery on thursday.
    boolean thursday?;
    # Indicates whether delivery on tuesday.
    boolean tuesday?;
    # Indicates whether delivery on wednesday.
    boolean wednesday?;
};

# CreateTemplateRequestContent object contains information for creating template.
public type CreateTemplateRequestContent record {
    # Provides details about the different components that need to be compared and deployed.
    SettingSourceComponentResponse content?;
    # Selected custom fields component or not.
    boolean customFields?;
    # Selected custom objects component or not.
    boolean customObjects?;
    # Creates template description.
    string description;
    # Name of the Template.
    string name;
    # Selected Notification component or not.
    boolean notifications?;
    # ConfigurationTemplateContent object contains the selected meta data information.
    ConfigurationTemplateContent[] selectedComponents?;
    # Selected Settings component or not.
    boolean settings?;
    # ID of the template tenant.
    string templateTenant;
    # Selected Workflow component or not.
    boolean workflows?;
};

public type SettingValueRequest record {
    # Request payload if any
    BodyInSettingValueRequest body?;
    # An array of requests that can only be executed after its parent request has been executed successfully.
    ChildrenSettingValueRequest[] children?;
    # The id of the request. You can set it to any string. It must be unique within the whole batch.
    string id?;
    # One of the HTTP methods supported by the setting endpoint, for example, GET,PUT,POST or DELETE.
    "GET"|"HEAD"|"POST"|"PUT"|"PATCH"|"DELETE"|"OPTIONS"|"TRACE" method?;
    # The relative URL of the setting. It is the same as in the `pathPattern` field in the response body of [Listing all Settings](https://developer.zuora.com/api-references/api/operation/GET_ListAllSettings). For example, `/billing-rules`.
    string url?;
};

public type PUTSubscriptionPatchSpecificVersionRequestType_ratePlans record {
    PUTSubscriptionPatchSpecificVersionRequestType_charges[] charges?;
    # Container for custom fields of a Rate Plan object.
    RatePlanObjectCustomFields customFields?;
    # The rate plan id in any version of the subscription. This will be linked to the only one rate plan in the current version.
    string ratePlanId;
};

public type POSTAuthorizeResponse record {
    # The order ID for the specific gateway.
    # 
    # The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field.
    string gatewayOrderId?;
    # The response data returned from the gateway. This field is available only if the `success` field is `false` and the support for returning additional error information from the gateway is enabled.
    POSTAuthorizeResponse_paymentGatewayResponse paymentGatewayResponse?;
    # The ID of the running process when the exception occurs. This field is available only if the `success` field is `false`.
    string processId?;
    # The container of the error code and message. This field is available only if the `success` field is `false`.
    POSTAuthorizeResponse_reasons[] reasons?;
    # The ID of the request. This field is available only if the `success` field is `false`
    string requestId?;
    # The result code of the request. 
    # 
    # 0 indicates that the request succeeded, and the following values indicate that the request failed:
    #   - 1: The request is declined.
    #   - 7: The field format is not correct.
    #   - 10: Client connection has timed out.
    #   - 11: Host connection has timed out.
    #   - 12: Processor connection has timed out.
    #   - 13: Gateway server is busy.
    #   - 20: The card type is not supported.
    #   - 21: The merchant account information is invalid.
    #   - 22: A generic error occurred on the processor.
    #   - 40: The card type has not been set up yet.
    #   - 41: The limit for a single transaction is exceeded.
    #   - 42: Address checking failed.
    #   - 43: Card security code checking failed.
    #   - 44: Failed due to the gateway security setting.
    #   - 45: Fraud protection is declined.
    #   - 46: Address checking or card security code checking failed (for Authorize.net gateway only).
    #   - 47: The maximum amount is exceeded (for Authorize.net gateway only).
    #   - 48: The IP address is blocked by the gateway (for Authorize.net gateway only).
    #   - 49: Card security code checking failed (for Authorize.net gateway only).
    #   - 60: User authentication failed.
    #   - 61: The currency code is invalid.
    #   - 62: The transaction ID is invalid.
    #   - 63: The credit card number is invalid.
    #   - 64: The card expiration date is invalid.
    #   - 65: The transaction is duplicated.
    #   - 66: Credit transaction error.
    #   - 67: Void transaction error.
    #   - 90: A valid amount is required.
    #   - 91: The BA code is invalid.
    #   - 92: The account number is invalid.
    #   - 93: The ACH transaction is not accepted by the merchant.
    #   - 94: An error occurred for the ACH transaction.
    #   - 95: The version parameter is invalid.
    #   - 96: The transaction type is invalid.
    #   - 97: The transaction method is invalid.
    #   - 98: The bank account type is invalid.
    #   - 99: The authorization code is invalid.
    #   - 200: General transaction error.
    #   - 500: The transaction is queued for submission.
    #   - 999: Unknown error.
    #   - -1: An error occurred in gateway communication.
    #   - -2: Idempotency is not supported.
    #   - -3: Inquiry call is not supported.
    string resultCode?;
    # The corresponding request ID.
    string resultMessage?;
    # Indicates whether the call succeeded.
    boolean success?;
    # The ID of the transaction.
    string transactionId?;
};

public type GETAttachmentsResponseType record {
    # Container for one or more attachments.
    GETAttachmentResponseWithoutSuccessType[] attachments?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type ProxyActionqueryResponse record {
    # Indicates whether the returned records contain all the query results.
    # * If the `queryLocator` field is returned, this field is set to `false`.
    # * If no `queryLocator` field is returned, this field is set to `true`.
    boolean done?;
    # A marker passed to QueryMore to get the next set of results. For more information, see [QueryMore](https://developer.zuora.com/api-references/api/operation/Action_POSTqueryMore/).
    string queryLocator?;
    # A list of queried results.
    ZObject[] records?;
    # The number of the returned query results.
    int:Signed32 size?;
};

# Object records that you want to update. Only applicable when `type` is `update`.
public type CustomObjectRecordBatchUpdateMapping record {|
    record {}...;
|};

public type PaymentScheduleItemCommonResponse_billingDocument record {
    # ID of the billing document. for example, `2c9890306fb2121e016fb21a6b550041`.
    string id?;
    # Number of the billing docuemnt, for example, `INV00002345`.
    string number?;
    # Indicates whether the associated billing document is a debit memo or a invoice.
    string 'type?;
};

public type PostBatchInvoiceResponse record {
    PostBatchInvoiceItemResponse[] invoices?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type PricingUpdate record {
    # Container for charge model configuration data.
    # 
    # **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The High Water Mark and Pre-Rated Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    ChargeModelDataOverride chargeModelData?;
    # Pricing information about a discount charge.
    DiscountPricingUpdate discount?;
    # Pricing information about a recurring charge that uses the "delivery" charge model. This field is only available if you have the Delivery Pricing charge model enabled.
    RecurringDeliveryPricingUpdate recurringDelivery?;
    # Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    RecurringFlatFeePricingUpdate recurringFlatFee?;
    # Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
    RecurringPerUnitPricingUpdate recurringPerUnit?;
    # Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
    RecurringTieredPricingUpdate recurringTiered?;
    # Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
    RecurringVolumePricingUpdate recurringVolume?;
    # Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    UsageFlatFeePricingUpdate usageFlatFee?;
    # Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
    UsageOveragePricingUpdate usageOverage?;
    # Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
    UsagePerUnitPricingUpdate usagePerUnit?;
    # Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
    UsageTieredPricingUpdate usageTiered?;
    # Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
    UsageTieredWithOveragePricingUpdate usageTieredWithOverage?;
    # Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
    UsageVolumePricingUpdate usageVolume?;
};

public type OrderActionRatePlanPricingUpdate record {
    # Container for charge model configuration data.
    OrderActionRatePlanChargeModelDataOverride chargeModelData?;
    # Pricing information about a discount charge.
    OrderActionRatePlanDiscountPricingUpdate discount?;
    # Pricing information about a recurring charge that uses the Delivery Pricing charge model. In this charge model, the charge has a fixed price. This field is only available if you have the Delivery Pricing charge model enabled.
    OrderActionRatePlanRecurringDeliveryPricingUpdate recurringDelivery?;
    # Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    OrderActionRatePlanRecurringFlatFeePricingUpdate recurringFlatFee?;
    # Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
    OrderActionRatePlanRecurringPerUnitPricingUpdate recurringPerUnit?;
    # Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
    OrderActionRatePlanRecurringTieredPricingUpdate recurringTiered?;
    # Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
    OrderActionRatePlanRecurringVolumePricingUpdate recurringVolume?;
    # Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    OrderActionRatePlanUsageFlatFeePricingUpdate usageFlatFee?;
    # Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
    OrderActionRatePlanUsageOveragePricingUpdate usageOverage?;
    # Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
    OrderActionRatePlanUsagePerUnitPricingUpdate usagePerUnit?;
    # Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
    OrderActionRatePlanUsageTieredPricingUpdate usageTiered?;
    # Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
    OrderActionRatePlanUsageTieredWithOveragePricingUpdate usageTieredWithOverage?;
    # Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
    OrderActionRatePlanUsageVolumePricingUpdate usageVolume?;
};

public type ExpandedPayment record {|
    # The unique identifier of the payment.
    string id?;
    # The unique identifier of the user who created the payment.
    string createdById?;
    # The time that the payment gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the payment.
    string updatedById?;
    # The time that the payment gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # The ID of the customer account that the payment is for.
    string accountId?;
    # The accounting code for the charge. Accounting codes group
    # transactions that contain similar accounting attributes.
    string accountingCode?;
    # The total amount of the payment.
    decimal amount?;
    # The applied amount of the payment.
    decimal appliedAmount?;
    # The authorization transaction ID from the payment gateway.
    string authTransactionId?;
    # The amount of the payment to apply to a credit balance. 
    decimal appliedCreditBalanceAmount?;
    # The first six or eight digits of the credit card or debit card used for the payment, when applicable. 
    # Use this field to <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_Operations/DF_Reconciling_Payments_with_Merchant_Accounts" target="_blank">reconcile payments between the gateway and merchant banks</a>.
    string bankIdentificationNumber?;
    # The date when the payment was canceled.
    string cancelledOn?;
    # Comments about the payment.
    string comment?;
    # When Standalone Payment is not enabled, the `currency` of the payment must be the same as the payment currency defined in the customer account settings through Zuora UI.
    # 
    # When Standalone Payment is enabled and `standalone` is `true`, the `currency` of the standalone payment can be different from the payment currency defined in the customer account settings. The amount will not be summed up to the account balance or key metrics regardless of currency.
    string currency?;
    # The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.
    string effectiveDate?;
    # A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created.
    string gatewayOrderId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the payment. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the payment. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the payment in the gateway; use for reconciliation. 
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    string gatewayTransactionState?;
    # Indicates whether the payment is a standalone payment. A standalone
    # payment is a payment that is not associated with any invoice or
    # subscription.
    boolean isStandalone?;
    # The date and time when a charge was marked and waiting for batch
    # submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # The unique ID of the payment method that the customer used to make the payment.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
    string paymentMethodSnapshotId?;
    # ID of the paymentOption object, which describe the transactional level rules for processing payments. 
    string paymentOptionId?;
    # The unique identification number of a payment. 
    string paymentNumber?;
    # The payout ID of the payment from the gateway side.
    string payoutId?;
    # Indicates whether the payment is used as a reserved payment. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.
    boolean prepayment?;
    # The ID of a referenced payment. 
    string referencedPaymentID?;
    # The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
    string referenceId?;
    # The amount of the payment that is refunded.
    decimal refundAmount?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondPaymentReferenceId?;
    # The date and time when the payment was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptorPhone?;
    # Indicates how the payment was created, whether through API, manually, import, or payment run.
    "PaymentRun"|"Import"|"Manually"|"API" 'source?;
    # Name of the source. It can be a payment run number or a file name.
    string sourceName?;
    # The status of the payment.
    "Draft"|"Processing"|"Processed"|"Error"|"Canceled"|"Posted" status?;
    # The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # The type of the payment.
    "External"|"Electronic" 'type?;
    # Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # Payment transaction source used to differentiate the transaction source in Stored Credential Transaction framework.
    #   - `C_Unscheduled`: Cardholder-initiated transaction (CIT) that does not occur on scheduled or regularly occurring dates.
    #   - `M_Recurring`: Merchant-initiated transaction (MIT) that occurs at regular intervals.
    #   - `M_Unscheduled`: Merchant-initiated transaction (MIT) that does not occur on scheduled or regularly occurring dates.
    #   - `M_MOTO`: Mail Order Telephone Order (MOTO) payment transaction. This option is only available for credit card payments on Stripe v2. See [Overview of Stripe payment gateway integration](https://knowledgecenter.zuora.com/Zuora_Collect/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration) for more information.
    "C_Unscheduled"|"M_Recurring"|"M_Unscheduled"|"M_MOTO" transactionSource?;
    # The unapplied amount of the payment.
    decimal unappliedAmount?;
    # The date and time when the last email was sent to the customer for the payment.
    string lastEmailDateTime?;
    # Name of the gateway instance that processes the payment. 
    string gateway?;
    NestedAccountOnExpand account?;
    NestedPaymentMethodOnExpand paymentMethod?;
    ExpandedPaymentApplication[] paymentApplications?;
|};

public type ExpandedPaymentScheduleItem record {|
    # The unique identifier of the payment schedule item.
    string id?;
    # The unique identifier of the user who created the payment schedule item.
    string createdById?;
    # The time that the payment schedule item gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the payment schedule item.
    string updatedById?;
    # The time that the payment schedule item gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # Number of the payment schedule item.
    string number?;
    # ID of the account that owns the payment schedule.
    string accountId?;
    # The unique identifier of the invoice to which the payment is applied.
    string invoiceId?;
    # The unique identifier of the debit memo to which the payment is applied.
    string debitmemoId?;
    # The unique identifier of the payment option that is used to process
    # the payment schedule item.
    string paymentOptionId?;
    # Indicates whether the payments created by the payment schedule are
    # used as a reserved payment. This field is available only if the
    # prepaid cash drawdown permission is enabled. See [Prepaid Cash with
    # Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown)
    # for more information.
    boolean prepayment?;
    # The scheduled date when the payment is processed.
    string scheduledDate?;
    # At which hour in the day in the tenant’s timezone the recurring
    # payment schedule items will be collected.
    # 
    # Return `0` for custom payment schedules.
    @constraint:Int {minValue: 0, maxValue: 23}
    int:Signed32 runHour?;
    # ID of the payment method that will pay the billing documents.
    string paymentMethodId?;
    # ID of the payment gateway that processes the payment.
    string paymentGatewayId?;
    # The total amount of the payment schedule item.
    decimal amount?;
    # The remaining balance of payment schedule item.
    decimal balance?;
    # The currency in which the payment is made.
    # 
    # Note: If this field was not specified, the default value is the currency set for the account.
    string currency?;
    # The status of the payment schedule item.
    # 
    # - Active: There is still payment schedule item to process.
    # 
    # - Canceled: After a payment schedule is canceled by the user, the
    # schedule is marked as `canceled`.
    # 
    # - Completed: After all payment schedule items are processed, the
    # schedule is marked as `Completed`.
    "Active"|"Canceled"|"Completed" status?;
    # The error message indicating if the error is related to the
    # configuration or the payment collection.
    string errorMessage?;
    # ID of the payment that is created by the payment schedule item, or linked to the payment schedule item. 
    # This field is only available if the request doesn’t specify `zuora-version`, or `zuora-version` is set to a value equal to or smaller than\_`336.0`.
    string paymentId?;
    # The description of the payment schedule item.
    string description?;
    # The reason for the cancellation of payment schedule item.  
    string cancellationReason?;
|};

# Additional information about the query results.
public type SubmitDataQueryRequest_output record {
    # Set this field to `S3`.
    "S3" target;
};

public type SubmitDataLabelingJobResponse record {
    # Identifier of the data labeling job.
    @constraint:String {maxLength: 32, minLength: 32}
    string jobId?;
    # Status of the data labeling job.
    # 
    # * `Accepted` - The data labeling job has been accepted by the system.
    # * `Dispatched` - The data labeling job is dispatched to the data labeling service.
    # * `Completed` - The data labeling job has completed. Please note that `Completed` simply means the data labeling job has completed, but it does not mean the data labeling job has labeled all the data. You can check the `progress` field to see how many data have been `labeled`, `failed` or `timeout`.
    "Accepted"|"Dispatched"|"Completed" jobStatus?;
    # Indicates whether the job was submitted successfully.
    boolean success?;
};

# 
public type QueryPrepaidBalanceFundsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedPrepaidBalanceFund[] data?;
|};

public type PostCustomObjectDefinitionsRequest record {
    # The custom object definitions. This object maps types to custom object definitions.
    PostCustomObjectDefinitionsRequestDefinitions definitions?;
};

public type BulkCreateCreditMemosFromInvoiceRequest record {
    # The type of the source where credit memos are created. 
    #     
    # This enum field has the following values:
    #   - `Invoice`: By setting this field to `Invoice`, you can create multiple credit memos from invoices.
    #   - `Standalone`: By setting this field to `Standalone`, you can create multiple credit memos from product rate plan charges.
    #   
    # The specific schema of the `memos` object field in the request body depends on the value of the `sourceType` field.
    #   - To view the `memos` schema applicable to credit memo creation from invoices, select `Invoice` from the following drop-down list.
    #   - To view the `memos` schema applicable to credit memo creation from product rate plan charges, select `Standalone` from the following drop-down list.
    #   
    "Invoice" sourceType;
    # The container for a list of credit memos. The maximum number of credit memos is 50.
    @constraint:Array {maxLength: 50}
    CreditMemoFromInvoiceRequest[] memos?;
};

public type Inline_response_200_7_failed record {
    # Component name.
    string component?;
    # Subcomponent name.
    string subComponent?;
    # Key to identify a particular migration data.
    string 'key?;
    # Error details of the migration.
    string errorInfo?;
};

public type GETDiscountApplyDetailsType record {
    # The name of the product that the discount rate plan charge applies to.
    string appliedProductName?;
    # The ID of the product rate plan charge that the discount rate plan charge applies to.
    string appliedProductRatePlanChargeId?;
    # The name of the product rate plan charge that the discount rate plan charge applies to.
    string appliedProductRatePlanChargeName?;
    # The ID of the product rate plan that the discount rate plan charge applies to.
    string appliedProductRatePlanId?;
    # The name of the product rate plan that the discount rate plan charge applies to.
    string appliedProductRatePlanName?;
};

# Container for custom fields of a Product Feature object.
public type ProductFeatureObjectCustomFields record {
};

public type CreateOrderCreateSubscriptionNewSubscriptionOwnerAccount record {
    # Account number. For example, A00000001.
    @constraint:String {maxLength: 70}
    string accountNumber?;
    # List of additional email addresses to receive emailed invoices. Values should be a comma-separated list of email addresses.
    @constraint:String {maxLength: 1200}
    string additionalEmailAddresses?;
    # Indicates if associated invoices can be edited.
    # Values are: 
    # 
    # * `true`
    # * `false` (default)
    boolean allowInvoiceEdit?;
    # Specifies whether future payments are automatically billed when they are due.
    boolean autoPay?;
    # Name of the billing batch that the account belongs to. For example, Batch1.
    string batch?;
    # Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as "AutoSet".
    @constraint:Int {minValue: 0, maxValue: 31}
    int billCycleDay;
    BillToContactPostOrder billToContact;
    # Internal identifier of the communication profile that Zuora uses when sending notifications to the account's contacts.
    string communicationProfileId?;
    # Default payment method associated with an account. Only credit card payment methods are supported.
    CreditCard creditCard?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.
    string creditMemoTemplateId?;
    # External identifier of the account in a CRM system.
    @constraint:String {maxLength: 100}
    string crmId?;
    # ISO 3-letter currency code (uppercase). For example, USD.
    string currency;
    # Container for custom fields of an Account object.
    AccountObjectCustomFields customFields?;
    # Name of the account's customer service representative, if applicable.
    @constraint:String {maxLength: 50}
    string customerServiceRepName?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.
    string debitMemoTemplateId?;
    # The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.
    # 
    # If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field,
    # but not both.
    # 
    # For the Credit Card Reference Transaction payment method, you can specify the payment method ID in this field or use the `paymentMethod` field to create a CC Reference Transaction payment method for an account.
    string hpmCreditCardPaymentMethodId?;
    # Specifies whether to turn on the invoice delivery method 'Email' for the new account. 
    # Values are: 
    # 
    # * `true` (default). Turn on the invoice delivery method 'Email' for the new account.
    # * `false`. Turn off the invoice delivery method 'Email' for the new account.         
    boolean invoiceDeliveryPrefsEmail?;
    # Specifies whether to turn on the invoice delivery method 'Print' for the new account.
    # Values are: 
    # 
    # * `true`. Turn on the invoice delivery method 'Print' for the new account.
    # * `false` (default). Turn off the invoice delivery method 'Print' for the new account.
    boolean invoiceDeliveryPrefsPrint?;
    # Internal identifier of the invoice template that Zuora uses when generating invoices for the account.
    string invoiceTemplateId?;
    # Account name.
    @constraint:String {maxLength: 255}
    string name;
    # Notes about the account. These notes are only visible to Zuora users.
    @constraint:String {maxLength: 65535}
    string notes?;
    # Identifier of the parent customer account for this Account object. Use this field if you have <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy" target="_blank">Customer Hierarchy</a> enabled.
    string parentId?;
    # The payment gateway that Zuora uses when processing electronic payments and refunds for the account. If you do not specify this field or if the value of this field is null, Zuora uses your default payment gateway.
    @constraint:String {maxLength: 40}
    string paymentGateway?;
    # Payment method information associated with an account.
    POSTPaymentMethodRequest paymentMethod?;
    # Name of the payment term associated with the account. For example, "Net 30". The payment term determines the due dates of invoices.
    string paymentTerm?;
    # The number of the purchase order associated with this account. Purchase order information generally comes from customers.
    @constraint:String {maxLength: 100}
    string purchaseOrderNumber?;
    # The name of the sales representative associated with this account, if applicable.
    @constraint:String {maxLength: 50}
    string salesRep?;
    SoldToContactPostOrder soldToContact?;
    # Information about the tax exempt status of a customer account.
    TaxInfo taxInfo?;
    *DataAccessControlField;
};

public type PostCustomObjectDefinitionsRequestDefinition_relationships record {|
    # The cardinality of the relationship from this object to another object.
    # 
    # Only the `manyToOne` cardinality can be used when creating relationships.  A relationship with `oneToMany` cardinality is created implicitly when a `manyToOne` relationship is created.
    # 
    # A custom object definition can have a maximum of 2 `manyToOne` relationships.
    "manyToOne" cardinality?;
    # Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`. Usually the `<other-object-field-name>` can only be the `Id` field of the related object. Two exceptions are Subscription Name and Rate Plan Charge Number as both of them are unique.
    FieldsAdditionalPropertiesForPostDefinition fields;
    # The namespace where the related object is located
    string namespace;
    # The API name of the related object
    string 'object;
    # Specifies contraints to apply to custom object records.
    PostCustomObjectDefinitionsRequestDefinition_recordConstraints recordConstraints?;
|};

# The result of each type of preview. Returned only when the current request is preview call.
public type PreviewResult record {
    PreviewResult_chargeMetrics[] chargeMetrics?;
    # This field is only available if you have the Invoice Settlement feature enabled.
    PreviewResult_creditMemos[] creditMemos?;
    PreviewResult_invoices[] invoices?;
    # **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the following Order Delta Metrics objects. 
    # * [Order Delta Mrr](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Mrr)
    # * [Order Delta Tcv](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcv)
    # * [Order Delta Tcb](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcb)
    # 
    # It is recommended that all customers use the new [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/).
    PreviewResult_orderDeltaMetrics orderDeltaMetrics?;
    # **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the following Order Delta Metrics objects.  
    # * [Order Delta Mrr](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Mrr) 
    # * [Order Delta Tcv](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcv) 
    # * [Order Delta Tcb](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcb) 
    # 
    # It is recommended that all customers use the new [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/). 
    # 
    # Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported.
    PreviewResult_orderMetrics[] orderMetrics?;
    # **Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.
    # 
    # The ramp metrics.
    OrderRampMetrics[] rampMetrics?;
};

# Container for charge model configuration data.
# 
# **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The High Water Mark and Pre-Rated Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
public type ChargeModelDataOverride record {
    ChargeModelDataOverride_chargeModelConfiguration chargeModelConfiguration?;
    # Number of units purchased. This field is used if the Multi-Attribute Pricing formula uses the `quantity()` function.
    # 
    # This field is only available for one-time and recurring charges that use the Multi-Attribute Pricing charge model.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # List of cumulative pricing tiers in the charge.
    # 
    # **Note**: When you override the tiers of a usage-based charge using High Water Mark Pricing charge model, you have to provide all of the tiers, including the ones you do not want to change. The new tiers will completely override the previous ones. The High Water Mark Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    ChargeTier[] tiers?;
};

public type WorkflowError record {
    # A short error code describing the error
    "invalid" code?;
    # The http status code for this error
    int status?;
    # A human readable description describing the error
    string title?;
};

public type PostOrderResponseType_subscriptions record {
    # Status of the subscription. `Pending Activation` and `Pending Acceptance` are only applicable for an order that contains a `CreateSubscription` order action.
    "Active"|"Pending Activation"|"Pending Acceptance"|"Cancelled"|"Suspended" status?;
    # Subscription ID of the subscription included in this order. This field is returned instead of the `subscriptionNumber` field if the `returnIds` query parameter is set to `true`.
    @constraint:String {maxLength: 32}
    string subscriptionId?;
    # Subscription number of the subscription included in this order.
    @constraint:String {maxLength: 150}
    string subscriptionNumber?;
};

public type POSTCreateBillingAdjustmentRequestType_exclusion record {
    # The charge numbers to be excluded from delivery adjustment on the specified delivery date.
    string[] chargeNumbers?;
    # The date on which the delivery adjustment has to be excluded, in `yyyy-mm-dd` format.
    string deliveryDate?;
};

public type PUTPaymentScheduleItemRequest record {
    # The amount of the payment.
    decimal amount?;
    # The currency of the payment.
    string currency?;
    # The description of the payment schedule item.
    string description?;
    # Container for payments linked to the payment schedule item.
    string[] linkPayments?;
    # ID of the payment gateway of the payment schedule item.
    string paymentGatewayId?;
    # ID of the payment to be linked to the payment schedule item.
    # 
    # **Note**: This feild is version controlled. To enable this field, you must set `zuora-version` to equal or smaller than `336.0`.
    string paymentId?;
    # ID of the payment method of the payment schedule item.
    string paymentMethodId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # Here is an example:
    # ```
    # "paymentOption": [
    #   {
    #     "type": "GatewayOptions",
    #     "detail": {
    #       "SecCode":"WEB"
    #     }
    #   }
    # ]
    # ```
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # At which hour of the day in the tenant’s timezone this payment will be collected. If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs.
    int runHour?;
    # The scheduled date when the payment is processed.
    string scheduledDate?;
    # Container for payments to be unlinked from the payment schedule item.
    string[] unlinkPayments?;
    *PaymentScheduleItemCustomFields;
};

public type PutEventTriggerRequest record {
    # The status of the trigger.
    boolean active?;
    # The JEXL expression to be evaluated against object changes. See above for more information and an example.
    @constraint:String {maxLength: 5000, minLength: 1}
    string condition?;
    # The description of the trigger.
    @constraint:String {maxLength: 1000}
    string description?;
    # The type of events to be triggered.
    PutEventTriggerRequest_eventType eventType?;
};

public type CreateEInvoicingServiceProviderRequest record {
    # The identifier of the company used to create a sender system ID, which serves to identify the system where the transactions are sent.
    string companyIdentifier?;
    # The name of the e-invoicing service provider.
    @constraint:String {maxLength: 100}
    string name;
    # The name of the e-invoicing service provider that can help you generate e-invoice files for billing documents.
    "Sovos"|"PEPPOL" provider;
    # Whether the e-invoicing service provider's configuration is intended for testing. 
    # 
    # - If you set this field to `true`, requests are directed to the testing integration endpoints.
    # - If you set this field to `false`, requests are directed to the production integration endpoints.
    boolean test?;
    # The API key is used to authenticate the e-invoicing service provider's requests. This field is required for configuring Sovos as the service provider.
    string apiKey?;
    # The secret key is used to authenticate the e-invoicing service provider's requests. This field is required for configuring Sovos as the service provider.
    string secretKey?;
    # The client certificate is used to authenticate the e-invoicing service provider's requests, which should be in base64 encoded format. This field is required for configuring Sovos as the service provider.
    string clientCertificate?;
    # The client certificate type is used to specify the type of the client certificate. This field is required for configuring Sovos as the service provider.
    string clientCertificateType = "PKCS12";
    # The client certificate password is the password to protect the client certificate. This field is required for configuring Sovos as the service provider.
    string clientCertificatePassword?;
};

public type ErrorResponse_reasons record {
    # The error code of response.
    string code?;
    # The detail information of the error response
    string message?;
};

public type PostFulfillmentsRequestType record {
    FulfillmentPost[] fulfillments?;
    # Processing options for generating billing documents.
    ProcessingOptions processingOptions?;
};

public type GETRampByRampNumberResponseType record {
    RampResponse ramp?;
    *CommonResponse;
};

# Container for custom fields of a Debit Memo object.
public type DebitMemoObjectCustomFieldsCMWriteOff record {
};

# Container for custom fields of a payment method object.
public type PUTPaymentMethodObjectCustomFields record {
};

public type POSTCreateOrUpdateEmailTemplateRequest record {
    # When set to `false`, the call will fail if one or multiple instances fail to import, and a `200` response is returned if all email templates have been successfully updated.
    # When set to `true`, a success (`200`) response is returned if one or more instances have imported successfully. All failed instances are also returned in the response.
    boolean allowPartialSuccess?;
    # A container for email templates.
    POSTCreateOrUpdateEmailTemplateRequestFormat[] emailTemplates?;
};

# The credit memo apply information.
public type Transactions record {
    # The credit memo applied amopunt.
    decimal appliedAmount?;
    # The credit memo amount.
    string creditMemoAmount?;
    # The unique identification number of the credit memo.
    string creditMemoNumber?;
    # The status of the credit memo. 
    "Draft"|"Posted"|"Canceled"|"Error"|"PendingForTax"|"Generating"|"CancelInProgress" creditMemoStatus?;
    # The unique identification number of the invoice.
    string invoiceNumber?;
};

# Container for the taxation items of the credit memo item. 
# 
# **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
public type GETCreditMemoItemTypewithSuccess_taxationItems record {
    # List of taxation items.
    GETCMTaxItemTypeNew[] data?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
};

# A container for providing a customer account information if you do not have an existing customer account. This customer account information is only used for subscription preview.
# 
# You must specify the account information either in this field or in the `accountKey` field with the following conditions:
# 
# * If you already have a customer account, specify the account number or ID in the accountKey field.
# * If you do not have a customer account, provide account information in this field.
public type POSTSubscriptionPreviewTypePreviewAccountInfo record {
    # The account's bill cycle day (BCD), when bill runs generate invoices for the account. Specify any day of the month (`1`-`31`, where `31` = end-of-month), or `0` for auto-set.
    int billCycleDay;
    # Container for bill-to contact information of this account.
    POSTSubscriptionPreviewTypePreviewAccountInfo_billToContact billToContact;
    # A currency as defined in Billing Settings.
    string currency;
    *AccountObjectNSFields;
    *AccountObjectCustomFields;
};

public type PostInvoiceItemType record {
    # The accounting code associated with the invoice item.
    string accountingCode?;
    # The accounting code for adjustment liability. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string adjustmentLiabilityAccountingCode?;
    # The accounting code for adjustment revenue. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string adjustmentRevenueAccountingCode?;
    # The amount of the invoice item. 
    # 
    # - For tax-inclusive invoice items, the amount indicates the invoice item amount including tax. 
    # - For tax-exclusive invoice items, the amount indicates the invoice item amount excluding tax.
    string amount;
    # The booking reference of the invoice item.
    string bookingReference?;
    # The date when the invoice item is charged, in `yyyy-mm-dd hh:mm:ss` format.
    string chargeDate?;
    # The name of the charge associated with the invoice item. 
    # 
    # This field is required if the `productRatePlanChargeId` field is not specified in the request.
    string chargeName?;
    # The accounting code for contract asset. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractAssetAccountingCode?;
    # The accounting code for contract liability. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractLiabilityAccountingCode?;
    # The accounting code for contract recognized revenue. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractRecognizedRevenueAccountingCode?;
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string deferredRevenueAccountingCode?;
    # The description of the invoice item.
    string description?;
    # Container for discount items. The maximum number of discount items is 10.
    PostDiscountItemType[] discountItems?;
    # The flag to exclude the invoice item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The type of the invoice item.
    string itemType?;
    # The ID of the product rate plan charge that the invoice item is created from.
    # 
    # If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding product rate plan charge, regardless of the values specified in the request body:
    # - `chargeName`
    # - `sku`
    # - `uom`
    # - `taxCode`
    # - `taxMode`
    # - `accountingCode`
    # - `deferredRevenueAccountingCode` 
    # - `recognizedRevenueAccountingCode`
    string productRatePlanChargeId?;
    # The purchase order number associated with the invoice item.
    string purchaseOrderNumber?;
    # The number of units for the invoice item.
    string quantity = "1";
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string recognizedRevenueAccountingCode?;
    # The revenue recognition code.
    string revRecCode?;
    # The date when revenue recognition is triggered.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate" revRecTriggerCondition?;
    # The name of the revenue recognition rule governing the revenue schedule.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string revenueRecognitionRuleName?;
    # The service end date of the invoice item.
    string serviceEndDate?;
    # The service start date of the invoice item.
    string serviceStartDate;
    # The SKU of the invoice item. The SKU of the invoice item must be different from the SKU of any existing product.
    string sku?;
    # The tax code identifies which tax rules and tax rates to apply to the invoice item.
    # 
    # **Note**: This field is only available only if you have Taxation enabled.
    string taxCode?;
    # Container for taxation items. The maximum number of taxation items is 5.
    # 
    # **Note**: This field is only available only if you have Taxation enabled.
    PostTaxationItemType[] taxItems?;
    # The tax mode of the invoice item, indicating whether the amount of the invoice item includes tax.
    # 
    # **Note**: This field is only available only if you have Taxation enabled.
    "TaxInclusive"|"TaxExclusive" taxMode?;
    # The accounting code for unbilled receivables. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string unbilledReceivablesAccountingCode?;
    # The per-unit price of the invoice item. To pass Level 3 data to the gateway, this field is required and must be greater than zero.
    string unitPrice?;
    # The unit of measure.
    string uom?;
    *InvoiceItemObjectNSFields;
    *InvoiceItemObjectCustomFields;
};

# Container for the finance information related to the product rate plan charge associated with the credit memo.
public type CreditMemoFromChargeDetailType_financeInformation record {
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    @constraint:String {maxLength: 100}
    string deferredRevenueAccountingCode?;
    # The accounting code that maps to an on account in your accounting system.
    @constraint:String {maxLength: 100}
    string onAccountAccountingCode?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccountingCode?;
    # The name of the revenue recognition rule governing the revenue schedule.
    @constraint:String {maxLength: 100}
    string revenueRecognitionRuleName?;
};

public type GETCreditMemoTypewithSuccess record {
    # The ID of the customer account associated with the credit memo.
    string accountId?;
    # The number of the account associated with the credit memo.
    string accountNumber?;
    # The total amount of the credit memo.
    decimal amount?;
    # The applied amount of the credit memo.
    decimal appliedAmount?;
    # Whether the credit memo automatically applies to the invoice upon posting.
    boolean autoApplyUponPosting?;
    # The ID of the bill-to contact associated with the credit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string billToContactId?;
    # The ID of the Zuora user who cancelled the credit memo.
    string cancelledById?;
    # The date and time when the credit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the credit memo.
    string comment?;
    # The ID of the Zuora user who created the credit memo.
    string createdById?;
    # The date and time when the credit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The date when the credit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.
    string creditMemoDate?;
    # The currency of the credit memo.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # The error code returned when the e-invoice file status is `Failed`. This code can either be a Zuora-generated error code or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorCode?;
    # The error message returned when the e-invoice file status is `Failed`. This message can either be a Zuora-generated error message or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorMessage?;
    # The ID of the e-invoice file generated for the credit memo.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceFileId?;
    # The status of the e-invoice file generation for the credit memo. 
    # 
    # - If e-invoice file generation succeeds, this field is either `Generated` or `Success`, and both the error code and message are empty, and the `eInvoiceFileId` field stores the ID of the generated e-invoice file.
    # - If a failure occurs during e-invoice file generation, this field is `Failed` and an error code and an error message are returned respectively in the `einvoiceErrorCode` and `einvoiceErrorMessage` fields. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    "Processing"|"Generated"|"Success"|"Failed" einvoiceStatus?;
    # Whether the credit memo is excluded from the rule of automatically applying unapplied credit memos to invoices and debit memos during payment runs.
    boolean excludeFromAutoApplyRules?;
    # The unique ID of the credit memo.
    string id?;
    # The number of the invoice group associated with the credit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string? invoiceGroupNumber?;
    # The ID of the latest PDF file generated for the credit memo.
    string latestPDFFileId?;
    # The unique identification number of the credit memo.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the Zuora user who posted the credit memo.
    string postedById?;
    # The date and time when the credit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.
    string postedOn?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty.
    string reasonCode?;
    # The ID of a referred invoice.
    string referredInvoiceId?;
    # The amount of the refund on the credit memo.
    decimal refundAmount?;
    # Whether the credit memo is reversed.
    boolean reversed?;
    # The ID of the sequence set associated with the credit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string sequenceSetId?;
    # The source of the credit memo.
    # 
    # Possible values:
    # - `BillRun`: The credit memo is generated by a bill run.
    # - `API`: The credit memo is created by calling the [Invoice and collect](https://developer.zuora.com/api-references/api/operation/POST_TransactionInvoicePayment) operation, or by calling the Orders, Order Line Items, or Fulfillments API operations.
    # - `ApiSubscribe`: The credit memo is created by calling the [Create subscription](https://developer.zuora.com/api-references/api/operation/POST_Subscription) and [Create account](https://developer.zuora.com/api-references/api/operation/POST_Account) operation.
    # - `ApiAmend`: The credit memo is created by calling the [Update subscription](https://developer.zuora.com/api-references/api/operation/PUT_Subscription) operation.
    # - `AdhocFromPrpc`: The credit memo is created from a product rate plan charge through the Zuora UI or by calling the [Create a credit memo from a charge](https://developer.zuora.com/api-references/api/operation/POST_CreditMemoFromPrpc) operation.
    # - `AdhocFromInvoice`: The credit memo is created from an invoice or created by reversing an invoice. You can create a credit memo from an invoice through the Zuora UI or by calling the [Create credit memo from invoice](https://developer.zuora.com/api-references/api/operation/POST_CreditMemoFromInvoice) operation. You can create a credit memo by reversing an invoice through the Zuora UI or by calling the [Reverse invoice](https://developer.zuora.com/api-references/api/operation/PUT_ReverseInvoice) operation.
    string 'source?;
    # The ID of the credit memo source. 
    # 
    # If a credit memo is generated from a bill run, the value is the number of the corresponding bill run. Otherwise, the value is `null`.
    string sourceId?;
    # The type of the credit memo source.
    "Subscription"|"Standalone"|"Invoice"|"Order"|"CreditMemo"|"Consolidation" sourceType?;
    # The status of the credit memo. 
    "Draft"|"Posted"|"Canceled"|"Error"|"PendingForTax"|"Generating"|"CancelInProgress" status?;
    # The target date for the credit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.
    string targetDate?;
    # The amount of taxation.
    decimal taxAmount?;
    # The message about the status of tax calculation related to the credit memo. If tax calculation fails in one credit memo, this field displays the reason for the failure.
    string taxMessage?;
    # The status of tax calculation related to the credit memo.
    # 
    # **Note**: This field is only applicable to tax calculation by third-party tax engines.
    "Complete"|"Error" taxStatus?;
    # The calculated tax amount excluded due to the exemption.
    decimal totalTaxExemptAmount?;
    # Whether the credit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The unapplied amount of the credit memo.
    decimal unappliedAmount?;
    # The ID of the Zuora user who last updated the credit memo.
    string updatedById?;
    # The date and time when the credit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *CreditMemoObjectNSFields;
    *CreditMemoObjectCustomFields;
};

public type CreditMemoResponseType record {
    # The ID of the generated credit memo.
    string id?;
};

public type PaymentScheduleItemCommonResponse record {
    # ID of the customer account that owns the payment schedule item, for example `402880e741112b310149b7343ef81234`.
    string accountId?;
    # The total amount of the payment schedule.
    decimal amount?;
    # The remaining balance of payment schedule item.
    decimal balance?;
    PaymentScheduleItemCommonResponse_billingDocument billingDocument?;
    # The ID of the user who created the payment schedule item.
    string createdById?;
    # The date and time when the payment schedule item was created.
    string createdDate?;
    # The currency of the payment.
    string currency?;
    # The description of the payment schedule item.
    string description?;
    # The error message indicating if the error is related to configuration or payment collection.
    string errorMessage?;
    # ID of the payment schedule item. For example, `412880e749b72b310149b7343ef81346`.
    string id?;
    # Number of the payment schedule item.
    string number?;
    # ID of the payment gateway of the payment schedule item.
    string paymentGatewayId?;
    # ID of the payment that is created by the payment schedule item， or ID of the first payment linked to the payment schedule item. This field is only available if the request doesn’t specify `zuora-version`, or `zuora-version` is set to a value equal to or smaller than `336.0`. 
    string paymentId?;
    # ID of the payment method of the payment schedule item.
    string paymentMethodId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # ID of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`.
    string paymentScheduleId?;
    # Number of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`.
    string paymentScheduleNumber?;
    # Container for payments linked to the payment schedule item. 
    LinkedPaymentID[] psiPayments?;
    # At which hour in the day in the tenant’s timezone this payment will be collected.
    int runHour?;
    # The scheduled date when the payment is processed.
    string scheduledDate?;
    # Indicates if the payment created by the payment schedule item is a standalone payment or not.
    boolean standalone?;
    # ID of the payment method of the payment schedule item.
    # 
    # - `Pending`: Payment schedule item is waiting for processing.
    # - `Processed`: The payment has been collected.
    # - `Error`: Failed to collect the payment.
    # - `Canceled`: After a pending payment schedule item is canceled by the user, the item is marked as `Canceled`.
    "Pending"|"Processed"|"Error"|"Canceled" status?;
    # The ID of the user who updated the payment schedule item.
    string updatedById?;
    # The date and time when the payment schedule item was last updated.
    string updatedDate?;
    *PaymentScheduleItemCustomFields;
};

public type PreviewOrderOrderAction record {
    # Information about an order action of type `AddProduct`.
    PreviewOrderRatePlanOverride addProduct?;
    # Information about an order action of type `CancelSubscription`.
    CancelSubscription cancelSubscription?;
    # Information about an order action of type `ChangePlan`. 
    # 
    # Use the change plan type of order action to replace the existing rate plans in a subscription with other rate plans.
    # 
    # **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.
    # 
    # If you want to create a pending order through the "change plan" order action, and if the charge's trigger condition is `Specific Date`, you must set a charge number in the `chargeNumber` field for the "change plan" order action. In this case, if you do not set it, Zuora will not generate the charge number for you.
    # 
    # See more information about pending orders in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Orders/AA_Overview_of_Orders/Pending_orders_and_subscriptions" target="_blank">Pending orders and subscriptions</a>.
    CreateChangePlan changePlan?;
    # The change reason set for an order action when an order is created.
    string changeReason?;
    # Information about an order action of type `CreateSubscription`.
    PreviewOrderCreateSubscription createSubscription?;
    # Container for custom fields of an Order Action object.
    OrderActionObjectCustomFields customFields?;
    # Information about an order action of type `OwnerTransfer`.
    # 
    # **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    OwnerTransfer ownerTransfer?;
    # Information about an order action of type `RemoveProduct`.
    RemoveProduct removeProduct?;
    # Information about an order action of type `RenewSubscription`.
    RenewSubscription renewSubscription?;
    # Information about an order action of type `Resume`.
    CreateOrderResume resume?;
    # Information about an order action of type `Suspend`.
    CreateOrderSuspend suspend?;
    # Information about an order action of type `TermsAndConditions`.
    CreateOrderTermsAndConditions termsAndConditions?;
    # Container for the contract effective, service activation, and customer acceptance dates of the order action. 
    # 
    # If the service activation date is set as a required field in Default Subscription Settings, skipping this field in a `CreateSubscription` order action of your JSON request will result in a `Pending` order and a `Pending Activation` subscription.
    # 
    # If the customer acceptance date is set as a required field in Default Subscription Settings, skipping this field in a `CreateSubscription` order action of your JSON request will result in a `Pending` order and a `Pending Acceptance` subscription. If the service activation date field is at the same time required and skipped (or set as null), it will be a `Pending Activation` subscription.
    TriggerDate[] triggerDates?;
    # Type of order action.
    # 
    # Unless the type of order action is `RenewSubscription`, you must use the corresponding field to provide information about the order action. For example, if the type of order action is `AddProduct`, you must set the `addProduct` field.
    # 
    # Zuora returns an error if you set a field that corresponds to a different type of order action. For example, if the type of order action is `AddProduct`, Zuora returns an error if you set the `updateProduct` field.
    # 
    # **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.
    "CreateSubscription"|"TermsAndConditions"|"AddProduct"|"UpdateProduct"|"RemoveProduct"|"RenewSubscription"|"CancelSubscription"|"OwnerTransfer"|"Suspend"|"Resume"|"ChangePlan" 'type;
    # Information about an order action of type `UpdateProduct`.
    PreviewOrderRatePlanUpdate updateProduct?;
};

# 
public type QueryPaymentMethodsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedPaymentMethod[] data?;
|};

public type ExpandedValidityPeriodSummary record {|
    # The unique identifier of the validity period summary.
    string id?;
    # The unique identifier of the user who created the validity period summary.
    string createdById?;
    # The date and time when the validity period summary was created.
    string createdDate?;
    # The unique identifier of the user who last updated the validity period summary.
    string updatedById?;
    # The date and time when the validity period summary was last updated.
    string updatedDate?;
    # The unique identifier of the prepaid balance.
    string prepaidBalanceId?;
    # The start date of the validity period.
    string startDate?;
    # The end date of the validity period.
    string endDate?;
    # The total prepaid balance for the current validity period.
    decimal totalBalance?;
    # The remaining prepaid balance for the current validity period.
    decimal remainingBalance?;
    decimal totalBilledAmount?;
    decimal billedBalanceAmount?;
    # The number of the subscription the validity period belongs to.
    string subscriptionNumber?;
    # The UOM of the validity period.
    string uom?;
    # The number of the account to which the prepaid balance belongs.
    string accountNumber?;
    # The ID of the account to which the prepaid balance belongs.
    string accountId?;
    # The overage rated quantity for the validity period.
    decimal overageRatedQuantity?;
    # The overage rated amount for the validity period.
    decimal overageRatedAmount?;
    NestedAccountOnExpand account?;
    NestedPrepaidBalanceOnExpand prepaidBalance?;
|};

public type POSTCatalogGroupRequest record {
    # The description of the catalog group.
    string description?;
    # The unique name of the catalog group.
    string name?;
    # The list of product rate plans to be added to the catalog group.
    POSTorPUTCatalogGroupAddProductRatePlan[] productRatePlans?;
    # The type of the catalog group. 
    "Grading"|"Display" 'type?;
};

public type PaymentWithCustomRatesType record {
    # The currency code for either Reporting or Home currency.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions/Minor-Version).
    string currency;
    # The Custom FX conversion rate between Home/Reporting and Transactional currency items.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions/Minor-Version).
    decimal customFxRate;
    # The date on which a particular currency rate is fixed or obtained on.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions/Minor-Version).
    string rateDate?;
};

# Specifies contraints to apply to custom object records.
public type CustomObjectDefinitionUpdateActionResponse_relationship_recordConstraints record {
    CustomObjectDefinitionUpdateActionResponse_relationship_recordConstraints_create create?;
};

public type PutDiscountItemType record {
    # The accounting code associated with the discount item.
    string accountingCode?;
    # The accounting code for adjustment liability.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string adjustmentLiabilityAccountingCode?;
    # The accounting code for adjustment revenue.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string adjustmentRevenueAccountingCode?;
    # The amount of the discount item.
    # - Should be a negative number. For example, `-10`.
    # - Always a fixed amount no matter whether the discount charge associated with the discount item uses the [fixed-amount model or percentage model](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models#Fixed_amount_model_and_percentage_model).
    # - For tax-exclusive discount items, this amount indicates the discount item amount excluding tax.
    # - For tax-inclusive discount items, this amount indicates the discount item amount including tax.
    string amount;
    # The booking reference of the discount item.
    string bookingReference?;
    # The date when the discount item is charged, in `yyyy-mm-dd hh:mm:ss` format.
    string chargeDate?;
    # The name of the charge associated with the discount item.
    # This field is required if the `productRatePlanChargeId` field is not specified in the request.
    string chargeName?;
    # The accounting code for contract asset.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string contractAssetAccountingCode?;
    # The accounting code for contract liability.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string contractLiabilityAccountingCode?;
    # The accounting code for contract recognized revenue.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string contractRecognizedRevenueAccountingCode?;
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string deferredRevenueAccountingCode?;
    # The description of the discount item.
    string description?;
    # The unique ID of the discount item.
    string id?;
    # The type of the discount item.
    string itemType?;
    # The purchase order number associated with the discount item.
    string purchaseOrderNumber?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string recognizedRevenueAccountingCode?;
    # The revenue recognition code.
    string revRecCode?;
    # The date when revenue recognition is triggered.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate" revRecTriggerCondition?;
    # The name of the revenue recognition rule governing the revenue schedule.
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string revenueRecognitionRuleName?;
    # The SKU of the invoice item. The SKU of the discount item must be different from the SKU of any existing product.
    string sku?;
    # The accounting code for unbilled receivables.
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    string unbilledReceivablesAccountingCode?;
    # The per-unit price of the discount item.
    # If the discount charge associated with the discount item uses the percentage model, the unit price will display as a percentage amount in PDF. For example: if unit price is 5.00, it will display as 5.00% in PDF.
    string unitPrice?;
    *DiscountItemObjectNSFields;
    *DiscountItemObjectCustomFields;
};

public type POSTJournalRunResponseType record {
    # Journal run number.
    string journalRunNumber?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type OrderLineItemRetrieveOrder record {
    # The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.
    string amendedByOrderOn?;
    # The calculated gross amount for the Order Line Item.
    decimal amount?;
    # The calculated gross amount for an order line item excluding tax. If the tax mode is tax exclusive, the value of this field equals that of the `amount` field.
    # 
    # If the tax mode of an order line item is not set, the system treats it as tax exclusive by default. The value of the `amountWithoutTax` field equals that of the `amount` field.
    # 
    # If you create an order line item from the product catalog, the tax mode and tax code of the product rate plan charge are used for the order line item by default. You can still overwrite this default set-up by setting the tax mode and tax code of the order line item.
    decimal amountWithoutTax?;
    # The sytem generated Id for the Order Line Item.
    string id?;
    # The number of the invoice group associated with the order line item. 
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string? invoiceGroupNumber?;
    # The number for the Order Line Item.
    string itemNumber?;
    # The date when the rate plan charge is created through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.
    string originalOrderDate?;
    # The quantity that has been fulfilled by fulfillments for the order line item. This field will be updated automatically when related fulfillments become 'SentToBilling' or 'Complete' state.
    decimal quantityFulfilled?;
    # The quantity that's need to be fulfilled by fulfillments for the order line item. This field will be updated automatically when related fulfillments become 'SentToBilling' or 'Complete' state.
    decimal quantityPendingFulfillment?;
    *OrderLineItemCommonRetrieveOrder;
};

# Information about an order action of type `Suspend`.
public type GetOrderSuspend record {
    # The suspend date when the suspension takes effect. 
    string suspendDate?;
    # This field is applicable only when the `suspendPolicy` field is set to `FixedPeriodsFromToday`. It must be used together with the `suspendPeriodsType` field. Note this field is not applicable in a Suspend order action auto-created by the Order Metrics migration.
    # 
    # The total number of the periods used to specify when a subscription suspension takes effect. The subscription suspension will take place after the specified time frame (`suspendPeriods` multiplied by `suspendPeriodsType`) from today's date. 
    int suspendPeriods?;
    # This field is applicable only when the `suspendPolicy` field is set to `FixedPeriodsFromToday`. It must be used together with the `suspendPeriods` field. Note this field is not applicable in a Suspend order action auto-created by the Order Metrics migration.
    # 
    # The period type used to specify when a subscription suspension takes effect. The subscription suspension will take place after the specified time frame (`suspendPeriods` multiplied by `suspendPeriodsType`) from today's date. 
    "Day"|"Week"|"Month"|"Year" suspendPeriodsType?;
    # Suspend methods. Specify a way to suspend a subscription. See [Suspend Date](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions/Suspend_a_Subscription#Suspend_Date) for more information. Note this field is not applicable in a Suspend order action auto-created by the Order Metrics migration.
    "Today"|"EndOfLastInvoicePeriod"|"FixedPeriodsFromToday"|"SpecificDate" suspendPolicy?;
    # This field is applicable only when the `suspendPolicy` field is set to `SpecificDate`. Note this field is not applicable in a Suspend order action auto-created by the Order Metrics migration.
    # 
    # A specific date when the subscription suspension takes effect, in YYYY-MM-DD format. The value should not be earlier than the subscription's contract effective date or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) than the subscription's term end date.
    string suspendSpecificDate?;
};

public type PutOrderCancelResponse record {
    *CommonResponse;
    # The account number for the order.
    string accountNumber?;
    # The reason for cancelling the order.
    string cancelReason?;
    # The order number of the order created.
    string orderNumber?;
    # Status of the order. `Cancelled` is only valid value.
    "Cancelled" status?;
};

public type InvoicePostType record {
    # The ID of the invoice to be posted.
    string id?;
    # The date that appears on the invoice being created, in `yyyy-mm-dd` format. The value cannot fall in a closed accounting period.
    string invoiceDate?;
    *InvoiceObjectCustomFields;
};

# Represents the processed order action.
public type OrderActionRatePlanOrderAction record {
    # Rate plan associated with a subscription.
    OrderActionRatePlanRatePlanOverride addProduct?;
    # Container for custom fields of an Order Action object.
    OrderActionRatePlanOrderActionObjectCustomFields customFields?;
    # The Id of the order action processed in the order.
    string id?;
    # Information about an order action of type `RemoveProduct`.
    OrderActionRatePlanRemoveProduct removeProduct?;
    # Type of the order action.
    "AddProduct"|"UpdateProduct"|"RemoveProduct" 'type?;
    # Information about an order action of type `UpdateProduct`.
    OrderActionRatePlanRatePlanUpdate updateProduct?;
};

# 
public type QueryContactsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedContact[] data?;
|};

public type CreditMemoTaxItemFromInvoiceTaxItemType record {
    # The amount of the credit memo taxation item.
    decimal amount?;
    # Container for the finance information related to the source taxation item.
    CreditMemoTaxItemFromInvoiceTaxItemType_financeInformation financeInformation?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city. 
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The ID of the source taxation item.
    string sourceTaxItemId?;
    # The tax code identifies which tax rules and tax rates to apply to a specific credit memo. 
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the credit memo, in `yyyy-mm-dd` format.
    string taxDate?;
    # The calculated tax amount excluded due to the exemption.
    decimal taxExemptAmount?;
    # The name of taxation.
    string taxName?;
    # The tax rate applied to the credit memo.
    decimal taxRate?;
    # The description of the tax rate. 
    string taxRateDescription?;
    # The type of the tax rate applied to the credit memo. 
    "Percentage"|"FlatFee" taxRateType?;
};

# It contains a collection of all the templates that have been created.
public type TemplateResponse record {
    # Contains list of template details.
    TemplateDetailResponse[] templates?;
};

public type CustomObjectDefinition_schema_relationships record {|
    # The cardinality of the relationship from this object to another object.
    # 
    # A `manyToOne` relationship means this object is the child object (the "many" side), and the referenced object (the "one" side) is the parent.
    # 
    # A `oneToMany` relationship means this object is the parent object (the "one" side), and the referenced object (the "many" side) is the child.
    "manyToOne"|"oneToMany" cardinality?;
    # Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`.
    FieldsAdditionalProperties fields?;
    # The namespace where the related object is located
    string namespace?;
    # The API name of the related object
    string 'object?;
    # Specifies contraints to apply to custom object records.
    CustomObjectDefinition_schema_recordConstraints recordConstraints?;
|};

# The account holder information.
public type GETAccountPMAccountHolderInfo record {
    # The full name of the account holder.
    @constraint:String {maxLength: 60}
    string accountHolderName?;
    # The first line of the address for the account holder.
    string addressLine1?;
    # The second line of the address for the account holder. 
    string addressLine2?;
    # The city where the account holder stays. 
    string city?;
    # The country where the account holder stays.
    # 
    # When creating a payment method through a translated UI or Payment Page, a country name in a translated language might be selected. Regardless of the country texts selected when creating the payment method, only the supported country name returns in this field. For a complete list of supported country names, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>. Internationalization is not supported for the API field value.
    string country?;
    # The email address of the account holder.
    string email?;
    # The phone number of the account holder.
    string phone?;
    # The state where the account holder stays.
    string state?;
    # The zip code for the address of the account holder.
    string zipCode?;
};

public type CreditMemoUnapplyDebitMemoItemRequestType record {
    # The amount that is unapplied from the specific item. 
    decimal amount;
    # The ID of the credit memo item.
    string creditMemoItemId?;
    # The ID of the credit memo taxation item.
    string creditTaxItemId?;
    # The ID of the debit memo item that the credit memo item is unapplied from.
    string debitMemoItemId?;
    # The ID of the debit memo taxation item that the credit memo taxation item is unapplied from.
    string taxItemId?;
};

public type UpdateScheduleItems record {
    # The amount of the invoice to be generated during the processing of the invoice schedule item. 
    # 
    # You can only specify either the `amount` field or `percentage` field in one request. 
    # - If you choose to specify the `amount` field in the request, `null` is returned as the value of the `percentage` field in the corresponding response. 
    # - If you choose to specify the `percentage` field in the request, the value of the `amount` field returned in the corresponding response is calculated based on the percentage of the total amount.
    string amount?;
    # The unique ID of the invoice schedule item to be updated. 
    # 
    # If this field is not provided, a new invoice schedule item is added to the invoice schedule.
    string id?;
    # The name of the invoice schedule item.
    @constraint:String {maxLength: 100}
    string name?;
    # The percentage of the total amount to be billed during the processing of the invoice schedule item. 
    # 
    # You can only specify either the `amount` field or `percentage` field in one request. 
    # - If you choose to specify the `amount` field in the request, `null` is returned as the value of the `percentage` field in the corresponding response. 
    # - If you choose to specify the `percentage` field in the request, the value of the `amount` field returned in the corresponding response is calculated based on the percentage of the total amount.              
    anydata percentage?;
    # The date in the tenant’s time zone when the invoice schedule item is planned to be processed to generate an invoice.
    string runDate?;
    # The date in the tenant's time zone used by the invoice schedule to determine which fixed-period regular charges to be billed together with the invoice schedule item. 
    # 
    # The regular charges must come from the subscriptions specified in the `additionalSubscriptionsToBill` field.
    string targetDateForAdditionalSubscriptions?;
    *InvoiceScheduleItemCustomFields;
};

# Information about the cardholder of a credit card payment method associated with an account. If you do not provide information about the cardholder, Zuora uses the account's bill-to contact.
public type AccountCreditCardHolder record {
    # First line of the cardholder's address.
    @constraint:String {maxLength: 255}
    string addressLine1?;
    # Second line of the cardholder's address.
    @constraint:String {maxLength: 255}
    string addressLine2?;
    # Full name of the cardholder as it appears on the card. For example, "John J Smith".
    @constraint:String {maxLength: 50}
    string cardHolderName?;
    # City of the cardholder's address.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    @constraint:String {maxLength: 40}
    string city?;
    # Country of the cardholder's address. The value of this field must be a valid country name or abbreviation.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    @constraint:String {maxLength: 64}
    string country?;
    # Email address of the cardholder.
    @constraint:String {maxLength: 80}
    string email?;
    # Phone number of the cardholder.
    @constraint:String {maxLength: 40}
    string phone?;
    # State or province of the cardholder's address.
    @constraint:String {maxLength: 50}
    string state?;
    # ZIP code or other postal code of the cardholder's address.
    @constraint:String {maxLength: 20}
    string zipCode?;
};

# Container for the taxation items of the debit memo item.
# 
# **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
public type GETDebitMemoItemType_taxationItems record {
    # List of taxation items.
    GETDMTaxItemTypeNew[] data?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
};

public type GetOrderActionRatePlanResponse record {
    *CommonResponse;
    # The amendment that is related to the subscription rate plan.
    OrderActionRatePlanAmendment amendment?;
    # The unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string externallyManagedPlanId?;
    # Unique subscription rate-plan ID.
    string id?;
    # Latest change type. Possible values are:
    # 
    # - New
    # - Update
    # - Remove
    string lastChangeType?;
    # The order that is related to the subscription rate plan.
    OrderActionRatePlanOrder 'order?;
    # Product ID
    string productId?;
    # The name of the product.
    string productName?;
    # Product rate plan ID
    string productRatePlanId?;
    # The unique SKU for the product.
    string productSku?;
    # The name of the rate plan.
    string ratePlanName?;
    # Subscription ID.
    string subscriptionId?;
    # The version of the subscription.
    anydata subscriptionVersion?;
};

public type SignUpCreatePMPayPalECPayPalNativeEC record {
    # ID of a PayPal billing agreement, for example, I-1TJ3GAGG82Y9.
    string BAID?;
    # Email address associated with the payment method. This field is only supported for PayPal payment methods and is required if you want to create any of the following PayPal payment methods:
    #   - PayPal Express Checkout payment method 
    #   - PayPal Adaptive payment method
    #   - PayPal Commerce Platform payment method
    string email?;
};

public type POSTReverseRolloverRequestType record {
    # Date range of the destination validity period to which the funds are transferred. It should be close to the source validity period.
    DestinationValidityPeriodInfo destinationValidityPeriod;
    # Specifies the units of measure for prepayment charge. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.
    # 
    # **Values**: a valid unit of measure
    string prepaymentUom;
    # Date range of the source validity period from which the funds are transferred. It should be close to the destination validity period.
    SourceValidityPeriodInfo sourceValidityPeriod;
    # The unique identifier number of the subscription.
    @constraint:String {maxLength: 100}
    string subscriptionNumber;
};

public type GETAdjustmentsResponseType record {
    *CommonResponse;
    # Container for delivery adjustments of a subscription.
    POSTAdjustmentResponseType[] adjustments?;
    # Container for ineligible delivery adjustments of a subscription.
    POSTIneligibleAdjustmentResponseType[] ineligibleAdjustments?;
    # The total amount of all the delivery adjustments.
    string totalAmount?;
    # The total number of all delivery adjustments.
    decimal totalNumberOfDeliveries?;
};

public type GETRefundCreditMemoType record {
    # The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.
    string accountId?;
    # The total amount of the refund.
    decimal amount?;
    # The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the refund.
    string comment?;
    # The ID of the Zuora user who created the refund.
    string createdById?;
    # The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-06 15:31:10.
    string createdDate?;
    # The ID of the credit memo that is refunded.
    string creditMemoId?;
    # Container for the finance information related to the refund.
    GETRefundCreditMemoType_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the refund.
    string gatewayId?;
    # The message returned from the payment gateway for the refund. This message is gateway-dependent.
    string gatewayResponse?;
    # The response code returned from the payment gateway for the refund. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the refund in the gateway.
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    # The ID of the created refund.
    string id?;
    # The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # How an external refund was issued to a customer.
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The unique identification number of the refund.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the payment associated with the refund.
    string paymentId?;
    # The unique ID of the payment method that the customer used to make the refund.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.
    string paymentMethodSnapshotId?;
    # A code identifying the reason for the transaction.
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The date when the refund takes effect, in yyyy-mm-dd format.
    string refundDate?;
    # The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
    string refundTransactionTime?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondRefundReferenceId?;
    # The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptorPhone?;
    # The status of the refund.
    "Processed"|"Canceled"|"Error"|"Processing" status?;
    # The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The type of the refund.
    "External"|"Electronic" 'type?;
    # The ID of the Zuora user who last updated the refund.
    string updatedById?;
    # The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-07 15:36:10.
    string updatedDate?;
    *RefundObjectNSFields;
    *RefundObjectCustomFields;
};

# Used to represent the relationship between workflow tasks
public type Linkage record {
    "Start"|"Success"|"Failure"|"Iterate"|"True"|"False"|"Approve"|"Reject" linkage_type?;
    # the task that spawned the target task
    int source_task_id?;
    # the workflow the target task is associated with
    int source_workflow_id?;
    # the task that the source task is linked to.
    int target_task_id?;
};

public type DebitMemoItemFromInvoiceItemType record {
    # The amount of the debit memo item.
    decimal amount;
    # Comments about the debit memo item.
    # **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string comment?;
    # The description of the debit memo item.
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string description?;
    # Container for the finance information related to the debit memo item.
    PUTDebitMemoItemType_financeInformation financeInformation?;
    # The ID of the invoice item.
    string invoiceItemId?;
    # The number of units for the debit memo item.
    decimal quantity?;
    # The service end date of the debit memo item.
    string serviceEndDate?;
    # The service start date of the debit memo item. 
    string serviceStartDate?;
    # The name of the charge associated with the invoice.
    string skuName;
    # Container for taxation items.
    DebitMemoTaxItemFromInvoiceTaxItemType[] taxItems?;
    # The tax mode of the debit memo item, indicating whether the amount of the debit memo item includes tax.
    # 
    # **Note**: You can set this field to `TaxInclusive` only if the `taxAutoCalculation` field is set to `true`.
    # 
    # If you set `taxMode` to `TaxInclusive`, you cannot input tax amounts for debit memo items. The corresponding invoice item must use the same tax engine as the debit memo item to calculate tax amounts.
    "TaxExclusive"|"TaxInclusive" taxMode = "TaxExclusive";
    # The definable unit that you measure when determining charges.
    string unitOfMeasure?;
    *DebitMemoItemObjectCustomFields;
};

public type NestedPrepaidBalanceOnExpand record {|
    # The unique identifier of the prepaid balance.
    string id?;
    # The unique identifier of the user who created the payment application.
    string createdById?;
    # The date and time when the payment application was created.
    string createdDate?;
    # The unique identifier of the user who last updated the payment application.
    string updatedById?;
    # The date and time when the payment application was last updated.
    string updatedDate?;
    # The name of the prepaid balance.
    string name?;
    # The total amount of all prepaid balance funds.
    decimal totalFund?;
    # The current prepaid balance.
    decimal balance?;
    # End date of the validity period.
    string endDate?;
    # Start date of the validity period.
    string startDate?;
    # The ID of the customer account to which the prepaid balance belongs.
    string accountId?;
    # If it belongs to a subscription, the original subscription ID.
    string origSubscriptionId?;
    # The units of measure for prepayment charge. Units of measure
    # are configured in the web-based UI. Your values depend on your
    # configuration in **Billing Settings**.
    # 
    # **Values**: a valid unit of measure
    string uOM?;
    # The state of the prepaid balance. 
    "ACTIVE"|"EXPIRED" prepaidBalanceState?;
    # The type of the prepaid balance.
    int? prepaidType?;
    # EXPANDABLE.
    # The account associated with the prepaid balance.
    record {} account?;
    # EXPANDABLE.
    # The subscription associated with the prepaid balance.
    record {} origSubscription?;
|};

public type ExpandedRatePlanCharge record {|
    # The unique identifier of the rate plan charge.
    string id?;
    # The unique identifier of the user who created the rate plan charge.
    string createdById?;
    # The date and time when the rate plan charge was created.
    string createdDate?;
    # The unique identifier of the user who last updated the rate plan charge.
    string updatedById?;
    # The date and time when the rate plan charge was last updated.
    string updatedDate?;
    # The unique identifier of the rate plan to which this rate plan charge belongs.
    string ratePlanId?;
    # The unique identifier of the product rate plan charge associated with this product rate plan charge.
    string productRatePlanChargeId?;
    # The accounting code for the charge. Accounting codes group\
    # \ transactions that contain similar accounting attributes.
    # 
    # **Values**: inherited from `ProductRatePlanCharge.AccountingCode`\n\
    # \n**Note**: This value changes if `ProductRatePlanCharge.AccountingCode`\
    # \ is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge`\
    # \ do not change when `ProductRatePlanCharge.AccountingCode` is updated. 
    string accountingCode?;
    # Specifies the type of charges a specific discount applies to. 
    # **Values**: inherited from `ProductRatePlanCharge.ApplyDiscountTo` 
    string applyDiscountTo?;
    # Indicates the charge's billing cycle day (BCD), which is\
    # \ when bill runs generate invoices for charges associated with the product\
    # \ rate plan charge or the account. 
    # 
    # **Values**: inherited from `ProductRatePlanCharge.BillCycleDay` 
    int billCycleDay?;
    # Specifies how to determine the billing day for the charge.\n\
    # 
    # **Values**: inherited from `ProductRatePlanCharge.BillCycleType`\
    # \ **Note:** You can override the value inherited from the Product Rate\
    # \ Plan Charge, but only when creating a new subscription or a New Product\
    # \ amendment. 
    string billCycleType?;
    # Allows billing period to be overridden on rate plan charge.\n\
    # ****Values**: **inherited from `ProductRatePlanCharge.BillingPeriod` **Note:**\
    # \ You can override the value inherited from the Product Rate Plan Charge,\
    # \ but only when creating a new subscription or a New Product amendment. 
    string billingPeriod?;
    # Aligns charges within the same subscription if multiple charges\
    # \ begin on different dates.
    # 
    # **Values**: inherited from `ProductRatePlanCharge.BillingPeriodAlignment` 
    string billingPeriodAlignment?;
    # The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.
    # 
    # **Note:** You can override the value inherited from the Product Rate Plan Charge when a subscription has a recurring charge type.
    "In Advance"|"In Arrears" billingTiming?;
    # The date through which a customer has been billed for the charge.
    @constraint:String {maxLength: 29}
    string chargedThroughDate?;
    # Determines how to evaluate charges. Charge models must be\
    # \ individually activated in the web-based UI.
    # 
    # **Values**: inherited from `ProductRatePlanCharge.ChargeModel` 
    string chargeModel?;
    # A unique number that identifies the charge. This number is returned as a string.
    # 
    # **Values**: one of the following:
    # - automatically generated if left `null`
    # - a unique number of 50 characters or fewer
    string chargeNumber?;
    # Specifies the type of charge.
    # 
    # **Values**: inherited from `ProductRatePlanCharge.ChargeType`
    string chargeType?;
    # A description of the rate plan charge. 
    string description?;
    # Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account" discountLevel?;
    # A delta monthly recurring charge is the change in monthly
    # recurring revenue caused by an amendment or a new subscription. 
    # 
    # **Character limit**: 16 
    # 
    # **Values**: automatically generated
    decimal dMRC?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal drawdownRate?;
    # After an Amendment, the change in the total contract value\
    # \ (TCV) amount for this charge, compared with its previous value.
    # 
    # **Character limit**: 16
    # 
    # **Values**: automatically generated 
    decimal dTCV?;
    # Start date when the rate plan charge becomes active, as `yyyy-mm-dd`.
    string effectiveEndDate?;
    # Final date the rate plan is active, as `yyyy-mm-dd`.
    string effectiveStartDate?;
    # Condition for the charge to become inactive.
    # 
    # - If the value of this field is `Fixed_Period`, the charge is active for a predefined duration based on the value of the `upToPeriodsType` and `upToPeriods` fields.
    # - If the value of this field is `Specific_End_Date`, use the `specificEndDate` field to specify the date when the charge becomes inactive.
    "Subscription_End"|"Fixed_Period"|"Specific_End_Date" endDateCondition?;
    # The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # If both the following features in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing" target="_blank">Advanced Consumption Billing</a> are enabled in your tenant, you must ensure the `excludeItemBillingFromRevenueAccounting` field is set consistently for a prepayment charge and the corresponding drawdown charge. In addition, if the `excludeItemBookingFromRevenueAccounting` field in an Create Subscription or Add Product order action is set to `false`, you must also set the `excludeItemBillingFromRevenueAccounting` field in this order action to `false`.
    #   * Prepaid with Drawdown
    #   * Unbilled Usage
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The flag to exclude rate plan charges from revenue accounting.
    # 
    # If both the following features in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing" target="_blank">Advanced Consumption Billing</a> are enabled in your tenant, you must ensure the `excludeItemBookingFromRevenueAccounting` field is set consistently for a prepayment charge and the corresponding drawdown charge.
    #   * Prepaid with Drawdown
    #   * Unbilled Usage
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting?;
    # The unique identifier of the invoice schedule associated with the subscription.
    string invoiceScheduleId?;
    # Indicates if the segment of the rate plan charge is the most recent segment. **Character limit**: 5 **Values**: automatically generated.
    boolean isLastSegment?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # Indicates whether this charge is a prepayment (topup) charge or a
    # drawdown charge. 
    boolean isPrepaid?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # It determines whether the rollover fields are needed.
    boolean isRollover?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    int rolloverPeriods?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int:Signed32? rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # Indicates whether the rate plan charge has been processed.
    boolean isProcessed?;
    # The list price base for the product rate plan charge.
    "Per Billing Period"|"Per Month"|"Per Week"|"Per Year"|"Per Specific Months" listPriceBase?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `ListPriceBase` field to `Per Specific Months`.
    # 
    # **Notes**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - The value of this field is `null` if you do not set the value of the `ListPriceBase` field to `Per Specific Months`.
    int:Signed32? specificListPriceBase?;
    boolean priceUpsellQuantityStacked?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `133` or higher. Otherwise, an error occurs. 
    # 
    # This field defines the type of commitment. A prepaid charge can be `UNIT` or `CURRENCY`. A minimum commitment(in-arrears) charge can only be `CURRENCY` type. For topup(recurring or one-time) charges, this field indicates what type of funds are created. 
    # * If UNIT, it will create a fund with given prepaidUom.
    # * If CURRENCY, it will create a fund with the currency amount calculated in list price.
    #   
    # For drawdown(usage) charges, this field indicates what type of funds are drawdown from that created from topup charges.
    "UNIT"|"CURRENCY" commitmentType?;
    # Indicates whether the rate plan charge is commited.
    boolean isCommitted?;
    # Monthly recurring revenue (MRR) is the amount of recurring
    # charges in a given month. The MRR calculation doesn't include one-time
    # charges nor usage charges. **Character limit**: 16 **Values**: automatically
    # generated 
    decimal mRR?;
    # The name of the rate plan charge. **Character limit**: 100
    # **Values**: automatically generated 
    string name?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model. **Character limit**: 5 **Values**: inherited from `ProductRatePlanCharge.NumberOfPeriod` 
    int numberOfPeriods?;
    # The original ID of the rate plan charge. **Character limit**: 32 **Values**: automatically generated 
    string originalId?;
    # Determines when to calculate overage charges. If the value of the SmoothingMode field is null (not specified and not inherited from ProductRatePlanCharge.SmoothingMode), the value of this field is ignored. **Character limit**: 20 **Values**: inherited from `ProductRatePlanCharge.OverageCalculationOption` 
    string overageCalculationOption?;
    #  Determines whether to credit the customer with unused units of usage.
    # **Character limit**: 20 **Values**: inherited from `ProductRatePlanCharge.OverageUnusedUnitsCreditOption` 
    string overageUnusedUnitsCreditOption?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The type of this charge. It is either a prepayment (topup) charge or a drawdown charge. 
    "topup"|"drawdown"? prepaidOperationType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal? prepaidQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The total amount of units that end customers can use during a validity period when they subscribe to a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    decimal? prepaidTotalQuantity?;
    # Applies an automatic price change when a termed subscription is renewed.
    # 
    # **Values**: one of the following:
    # 
    # - `NoChange` (default)
    # - `SpecificPercentageValue`
    # - `UseLatestProductCatalogPricing`
    string priceChangeOption?;
    #  Specifies the percentage to increase or decrease the price of renewed subscriptions.
    # **Character limit**: 16 **Values**: a decimal value between -100 and 100 
    decimal priceIncreasePercentage?;
    #  The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.
    # **Character limit**: 29 **Values**: automatically generated 
    string processedThroughDate?;
    # Determines how to prorate charges when a subscription is created or amended.
    string prorationOption?;
    #  The default quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing.
    # **Character limit**: 16 **Values**: a valid quantity value 
    decimal quantity?;
    # Number of deliveries in the billing period for the charge segment.
    # 
    # The `numberOfDeliveries` is used for the Delivery Pricing charge model only. 
    # 
    # **Note**: The Delivery Pricing charge model is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. To manage and access this feature through the self-service interface, see [Enable billing features by yourself](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Billing_Settings/Manage_Features) in the Knowledge Center. You can check **Delivery Pricing** in **Billing Settings** > **Enable Charge Types / Models**.
    decimal numberOfDeliveries?;
    # A rating group based on which usage records are rated. Only applicable to Usage charges.
    # 
    # Possible values:
    # 
    # - `ByBillingPeriod`: The rating is based on all the usages in a billing period.
    # - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    # - `ByUsageRecord`: The rating is based on each usage record.
    # - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    # - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # For more information, see [Usage rating by group](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Usage/Usage_Rating_by_Group).
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload"|"ByGroupId" ratingGroup?;
    #  Specifies the Revenue Recognition Rule that you want the Rate Plan Charge to use. This field can be updated when **Status** is `Draft`. By default, the Revenue Recognition Rule is inherited from the Product Rate Plan Charge. For Amend calls, you can use this field only for NewProduct amendments. For Update calls, you can use this field only to update subscriptions in draft status. Note that if you use this field to specify a Revenue Recognition Rule for the Rate Plan Charge, the rule will remain as specified even if you later change the rule used by the corresponding Product Rate Plan Charge.
    # 
    # **Character limit**: n/a
    # 
    # **Values**: inherited from `ProductRatePlanCharge.RevenueRecognitionRuleName` or the name of an active Revenue Recognition Rule
    # 
    # **Note**: Unless overridden, this value changes if `ProductRatePlanCharge.RevenueRecognitionRuleName` is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change when `ProductRatePlanCharge.RevenueRecognitionRuleName` is updated. 
    string revenueRecognitionRuleName?;
    # Associates this product rate plan charge with a specific revenue recognition code.
    # 
    # **Character limit**: 70
    # 
    # **Values**: inherited from `ProductRatePlanCharge.RevRecCode` or a valid revenue recognition code
    # 
    # **Note**: Unless overridden, this value changes if `ProductRatePlanCharge.RevRecCode` is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change when `ProductRatePlanCharge.RevRecCode` is updated. 
    string revRecCode?;
    #  Specifies when revenue recognition begins.
    # 
    # **Character limit**: 22
    # 
    # **Values**: inherited from `ProductRatePlanCharge.RevRecTriggerCondition` or one of the following:
    # 
    # -  `ContractEffectiveDate`
    # 
    # -  `ServiceActivationDate`
    # 
    # -  `CustomerAcceptanceDate`
    # 
    # Note: Unless overridden, this value changes if `ProductRatePlanCharge.RevRecTriggerCondition` is updated. The values of `UpdatedById` and `UpdatedDate` for the `RatePlanCharge` do not change when `ProductRatePlanCharge.RevRecTriggerCondition` is updated. 
    string revRecTriggerCondition?;
    # The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.
    # **Character limit**: 2 **Values**: automatically generated 
    int:Signed32 segment?;
    # Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`.
    # **Character limit**: 5 **Values**: inherited from `ProductRatePlanCharge.BillingPeriod` **Note:** You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment. 
    int specificBillingPeriod?;
    # The specific date on which the charge ends, in `yyyy-mm-dd` format.
    # 
    # **Character limit**: 29 
    # 
    # **Note**:
    # 
    # - This field is only applicable when the `EndDateCondition` field is set to `SpecificEndDate`.
    # - If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
    string specificEndDate?;
    #  The total contract value (TCV) is the value of a single rate plan charge in a subscription over the lifetime of the subscription. This value does not represent all charges on the subscription. The TCV includes recurring charges and one-time charges, but it doesn't include usage charge.
    # **Character limit**: 16 **Values**: automatically generated 
    decimal tCV?;
    #  The date when the charge becomes effective and billing begins, in `yyyy-mm-dd` format. This field is required if the `TriggerEvent` field value is `SpecificDate`.
    # **Character limit**: 29 
    string triggerDate?;
    # Specifies when to start billing the customer for the charge.
    # **Note: **This field can be passed through the Subscribe and Amend calls and will override the default value set on the Product Rate Plan Charge.
    # 
    # **Character limit**: 18 
    # 
    # **Values**: inherited from `ProductRatePlanCharge.TriggerEvent` and can be one of the following values:
    # 
    # - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    # - `ServiceActivation` is when the services or products for a subscription have been activated and the customers have access.
    # - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.
    # - `SpecificDate` is valid only on the RatePlanCharge.
    string triggerEvent?;
    #  Specifies the units to measure usage.
    # **Character limit**: 25 **Values**: inherited from `ProductRatePlanCharge.UOM` 
    string uOM?;
    # Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
    # 
    # **Character limit**: 5 
    # 
    # **Values**: inherited from `ProductRatePlanCharge.UpToPeriods` **Note**:
    # 
    # - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
    # - You can override the value inherited from the Product Rate Plan Charge, but only when creating a new subscription or a New Product amendment.
    # - Use this field to override the value in `ProductRatePlanCharge.UpToPeriod`.
    # - If you override the value in this field, enter a whole number between 0 and 65535, exclusive.
    # - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
    int upToPeriods?;
    # The period type used to define when the charge ends. This field can be updated when **Status** is `Draft`. 
    # 
    # **Note**:
    # 
    # - You must use this field together with the `UpToPeriods` field to specify the time period.
    # - This field is only applicable only when the `EndDateCondition` field is set to `FixedPeriod`.
    "Billing Periods"|"Days"|"Weeks"|"Months"|"Years" upToPeriodsType?;
    # The version of the rate plan charge. Each time a charge is amended, Zuora creates a new version of the rate plan charge. **Character limit**: 5 **Values**: automatically generated.
    int version?;
    # Specifies which day of the week as the bill cycle day (BCD) for the charge.
    "Sunday"|"Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"|"Saturday" weeklyBillCycleDay?;
    # The unique identifier of the subscription to which the rate plan charge belongs.
    string subscriptionId?;
    # ID of the account that owns the subscription.
    string subscriptionOwnerId?;
    # ID of the account that will pay the billing documents for the subscription.
    string invoiceOwnerId?;
    # The date when the rate plan charge is created through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sales order line in Zuora Revenue.
    string originalOrderDate?;
    # The date when the rate plan charge is amended through an order
    # or amendment. This field is to standardize the booking date
    # information to increase audit ability and traceability of data
    # between Zuora Billing and Zuora Revenue. It is mapped as the
    # booking date for a sale order line in Zuora Revenue.
    string amendedByOrderOn?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled. 
    # 
    # The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information.
    "TimeBased"|"ConsumptionBased"|"FullCreditBack" creditOption?;
    # Allow the discount duration to be aligned with the billing period partially.
    # 
    # **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    boolean applyToBillingPeriodPartially?;
    # The unique ID of the product charge definition.
    string productChargeDefinitionId?;
    # ID of the accountReceivableAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a>, <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a>, and <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Get_started_with_Invoice_Settlement/AA_Overview_of_Invoice_Settlement" target="_blank">Invoice Settlement</a> features are enabled.
    string accountReceivableAccountingCodeId?;
    # ID of the deferredRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string deferredRevenueAccountingCodeId?;
    # ID of the recognizedRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string recognizedRevenueAccountingCodeId?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Unit of measurement for a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    string prepaidUOM?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Unit of measurement for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge).
    string drawdownUom?;
    NestedRatePlanOnExpand ratePlan?;
    NestedPrpcOnExpand productRatePlanCharge?;
|};

public type OpenPaymentMethodTypeRequestFields record {
    # The checksum value of a payment method is used to identify if this payment method is the same as another one, or if this payment method is altered to another new payment method.
    # 
    # Set this flag to `true` for the following scenarios:
    #   - The field should be part of checksum calculation.
    #   - The field is a critical differentiator for this type. 
    # 
    #     
    # For example, if you select the credit card number and expiration date as the checksum fields for the CreditCard payment method type, when you modified the expiration date, Zuora considers this payment method as a different payment method compared to the original one.
    # 
    # This field cannot be `null` or empty.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    boolean checksum?;
    # The default value of the field. `null` is supported.
    # 
    # If a required field is added after the custom payment method type is published, `defaultValue` is required.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    @constraint:String {maxLength: 255}
    string defaultValue?;
    # An explanation of this field. It can be an empty string.
    @constraint:String {maxLength: 70}
    string description?;
    # Specify `true` if this field can be updated through PUT API or UI.
    # 
    # This field cannot be `null` or empty.
    # 
    # Note: If `editable` is set to `false`, you can specify the value of this field in the UI and POST API when creating a payment method. However, after you created the payment method, you cannot edit this field through PUT API or UI.
    boolean editable?;
    # The order of the field in this type, starting from 1. It must be unique.
    # 
    # This field cannot be `null` or empty.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    int index?;
    # The label that is used to refer to this field in the Zuora UI.
    # 
    # An alphanumeric string, excluding JSON preserved characters e.g.  * \ ’ ”
    # 
    # This field cannot be `null` or empty or any reserved field name.
    @constraint:String {maxLength: 30}
    string label?;
    # A maximum length limitation of the field value. The specified value must be in the range of [1,8000]. `maxLength` must be greater than or equal to `minLength`.
    # 
    # After the custom payment method type is created, you can only increase the value of `maxLength`. Decreasing the value is not supported.
    int maxLength?;
    # A minimal length limitation of the field value.
    #     
    # 0 <= `minLength` <= `maxLength`
    # 
    # The value of this metadata does not determine whether the field is a required field. It only defines the minimal length of the field value.
    # 
    # After the custom payment method type is created, you can only decrease the value of `minLength`. Increasing the value is not supported.
    int minLength?;
    # The API name of this field. It must be uinique.
    # 
    # An alphanumeric string starting with a capital letter, excluding JSON preserved characters e.g.  * \ ’ ”
    # 
    # Though this field must be defined with a string starting with a capital letter, use this string with the first letter in lowercase when you specify it in other API operations. For example, `AmazonPayToken` is the defined value for `name`. In the request of the "Create a payment method" API operation, use `amazonPayToken`.
    # 
    # This field cannot be `null` or empty or any reserved field name.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    @constraint:String {maxLength: 30}
    string name?;
    # This flag determines whether this field will be used for identifying this payment method in the Zuora UI. The field will be shown in the Payment Method field in the UI.
    # 
    # This field cannot be `null` or empty.
    # 
    # Notes:
    #   - In one custom payment method type, set `representer` to `true` for at least one field .
    #   - In one custom payment method type, you can set `representer` to `true` for multiple fields.
    boolean representer?;
    # Specify whether this field is required.
    # 
    # This field cannot be `null` or empty.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    boolean required?;
    # The type of this field.
    # 
    # For the `date` type, ISO_LOCAL_DATE format is supported, such as `2011-12-03`. The timezone is not expected for the `date` type. For example, `2011-12-03+01:00` will be rejected.
    # 
    # For the `datetime` type, only ISO_OFFSET_DATE_TIME format is supported, such as `2011-12-03T10:15:30+01:00`. Timezone must be included. A string like `2011-12-03T10:15:30` or `2011-12-03T10:15:30+01:00[Europe/Paris]` will be rejected.
    # 
    # If you need to define a `date` type with timezone or a `datetime` type without timezone, use the `string` type for now.
    # 
    # This field cannot be `null` or empty.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    "string"|"date"|"datetime"|"number"|"boolean" 'type?;
    # Specify `true` if this field can be retrieved through GET API or UI for displaying payment method details.
    # 
    # This field cannot be `null` or empty.
    # 
    # Notes: 
    #   - If `visible` is set to `false`, you can still specify the value of this field in the UI and POST API when creating the payment method.
    #   - If `visible` is set to `false` and `editable` is set to `true`, this field is not accessible through GET API or UI for displaying details, but you can still see it and edit the value in the UI and PUT API when updating this payment method.
    boolean visible?;
};

# Container for the finance information related to the source taxation item.
public type DebitMemoTaxItemFromInvoiceTaxItemType_financeInformation record {
    # The accounting code for the sales taxes payable.
    @constraint:String {maxLength: 100}
    string salesTaxPayableAccountingCode?;
};

public type GETProductType_organizationLabels record {
    # The organization ID.
    string organizationId?;
    # The organization name.
    string organizationName?;
};

# Information about the first term of the subscription.
public type TermInfo_initialTerm record {
    # Duration of the first term in months, years, days, or weeks, depending on the value of the `periodType` field. Only applicable if the value of the `termType` field is `TERMED`.
    int period?;
    # Unit of time that the first term is measured in. Only applicable if the value of the `termType` field is `TERMED`.
    "Month"|"Year"|"Day"|"Week" periodType?;
    # Start date of the first term, in YYYY-MM-DD format.
    string startDate?;
    # Type of the first term. If the value of this field is `TERMED`, the first term has a predefined duration based on the value of the `period` field. If the value of this field is `EVERGREEN`, the first term does not have a predefined duration.
    "TERMED"|"EVERGREEN" termType;
};

public type ProxyModifyUsage record {
    #  The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation.
    # **Character limit**: 29 **Values**: a valid date and time value 
    string EndDateTime?;
    # Indicates the number of units used.
    # 
    # **Character limit**: 16 
    # 
    # **Values**: A valid decimal amount. It could be a negative amount. Negative quantity usage records are used to adjust the previously uploaded usage records.
    decimal Quantity?;
    #  Indicates if the rating and billing engine (RBE) processed usage data for an invoice.
    # **Character limit**: 9 **Values**: automatically generated to be one of the following values: `Importing`, `Pending`, `Processed` 
    string RbeStatus?;
    #  The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation.
    # **Character limit**: 29 **Values**: a valid date and time value 
    string StartDateTime?;
    #  Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.
    # **Character limit**: **Values**: a valid unit of measure 
    string UOM?;
    *UsageObjectCustomFields;
};

# Container for bill-to contact information.
public type GETAccountTypeBillToContact record {
    # First address line, 255 characters or less.
    string address1?;
    # Second address line, 255 characters or less.
    string address2?;
    # City, 40 characters or less.
    string city?;
    # Full country name. This field does not contain the ISO-standard abbreviation of the country name.
    string country?;
    # County; 32 characters or less. Zuora Tax uses this information to calculate county taxation.          
    string county?;
    # Fax phone number, 40 characters or less.
    string fax?;
    # First name, 100 characters or less.
    string firstName?;
    # Home phone number, 40 characters or less.
    string homePhone?;
    # ID of the person to bill for the account, 32 characters or less.
    string id?;
    # Last name, 100 characters or less.
    string lastName?;
    # Mobile phone number, 40 characters or less.
    string mobilePhone?;
    # Nickname for this contact.
    string nickname?;
    # Other phone number, 40 characters or less.
    string otherPhone?;
    # Possible values are: `Work`, `Mobile`, `Home`, `Other`.
    string otherPhoneType?;
    # Personal email address, 80 characters or less.
    string personalEmail?;
    # Full state name. This field does not contain the ISO-standard abbreviation of the state name.
    string state?;
    # A region string, defined in your Zuora tax rules.
    string taxRegion?;
    # Work email address, 80 characters or less.
    string workEmail?;
    # Work phone number, 40 characters or less.
    string workPhone?;
    # Zip code, 20 characters or less.
    string zipCode?;
    *ContactObjectCustomFields;
};

public type PUTSubscriptionType record {
    # Container for adding one or more rate plans.
    PUTSrpAddType[] add?;
    # The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
    string[] applicationOrder?;
    # Whether to automatically apply credit memos or unapplied payments, or both to an invoice.
    # 
    # If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the invoice. If no value is specified or the value is `false`, no action is taken.
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    boolean applyCredit?;
    # Whether to automatically apply a credit balance to an invoice.
    # 
    # If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.
    # 
    # 
    # To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.
    # 
    # Prerequisite: `invoice` must be `true`. 
    # 
    # **Note:** 
    #   - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.
    #   - This field is deprecated if you have the Invoice Settlement feature enabled.
    boolean applyCreditBalance?;
    # If `true`, this subscription automatically renews at the end of the subscription term. Default is `false`.
    boolean autoRenew?;
    # The booking date that you want to set for the contract when you change the `termType` field of the subscription and as a result get a new version of subscription created. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call. 
    string bookingDate?;
    # Use this field to change one or more rate plans - to replace the existing rate plans in a subscription with other rate plans.
    # 
    # **Note**: Changing rate plans is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, changing rate plans will no longer be applicable in Zuora Billing.
    PUTSrpChangeType[] change?;
    # Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.
    # 
    # If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.
    # 
    # Prerequisite: The `invoice` or `runBilling` field must be `true`. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    boolean collect?;
    # A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
    string creditMemoReasonCode?;
    # The length of the period for the current subscription term. If `termType` is `TERMED`, this field is required and must be greater than `0`. If `termType` is `EVERGREEN`, this value is ignored.
    int currentTerm?;
    # The period type for the current subscription term.
    # 
    # This field is used with the `CurrentTerm` field to specify the current subscription term.
    # 
    # Values are:
    # 
    # * `Month` (default)
    # * `Year`
    # * `Day`
    # * `Week`
    string currentTermPeriodType?;
    # The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
    # 
    # - If this field is specified, the specified date is used as the billing document date. 
    # - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
    string documentDate?;
    # An enum field on the Subscription object to indicate the name of a third-party store. This field is used to represent subscriptions created through third-party stores.
    "Amazon"|"Apple"|"Google"|"Roku" externallyManagedBy?;
    # Specifies whether to include draft invoice items in subscription previews.
    # Values are:
    # 
    # * `true` (default). Includes draft invoice items in the preview result.
    # * `false`. Excludes draft invoice items in the preview result.
    # 
    # **Note:** This field is in Zuora REST API version control. Supported minor versions are 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method, you must set the **zuora-version** parameter to the minor version number in the request header.
    boolean includeExistingDraftDocItems?;
    # Specifies whether to include draft invoice items in subscription previews.
    # Values are:
    # 
    # * `true` (default). Includes draft invoice items in the preview result.
    # * `false`. Excludes draft invoice items in the preview result.
    # 
    # **Note:** This field is in Zuora REST API version control. Supported minor versions are 186.0, 187.0, 188.0, 189.0, 196.0, and 206.0. .
    boolean includeExistingDraftInvoiceItems?;
    # **Note:** This field has been replaced by the `runBilling` field. The
    # `invoice` field is only available for backward compatibility.
    # 
    # 
    # Creates an invoice for a subscription. The invoice generated in this
    # operation is only for this subscription, not for the entire customer
    # account.
    # 
    # 
    # If the value is `true`, an invoice is created. If the value is
    # `false`, no action is taken. The default value is `false`. 
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `196.0` and `207.0`. To use this field in the method, you
    # must set the zuora-version parameter to the minor version number in
    # the request header.
    boolean invoice?;
    # **Note:** This field has been replaced by the `invoice` field
    # and the `collect` field. `invoiceCollect` is available only for backward
    # compatibility.
    # 
    # 
    # If `true`, an invoice is generated and payment collected automatically during
    # the subscription process. If `false`, no invoicing or payment
    # takes place.  The invoice generated in this operation is only for this subscription,
    # not for the entire customer account.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`.
    boolean invoiceCollect?;
    # Separates a single subscription from other subscriptions and invoices the charge independently. 
    # 
    # If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.
    # 
    # The default value is `false`.
    # Prerequisite: The default subscription setting Enable Subscriptions to be Invoiced Separately must be set to Yes.
    boolean invoiceSeparately?;
    # **Note:** This field has been replaced by the `targetDate` field. The
    # `invoiceTargetDate` field is only available for backward
    # compatibility.
    # 
    # 
    # Date through which to calculate charges if an invoice is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `207.0` and earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string invoiceTargetDate?;
    # String of up to 500 characters.
    string notes?;
    # If `true` the update is made in preview mode. The default setting is `false`.
    boolean preview?;
    # The type of preview you will receive. 
    # 
    # This field is in Zuora REST API version control. The supported values of this field depend on the REST API minor version you specified in the request header.
    # 
    # 
    # * If you do not specify the REST API minor version or specify the minor version number to one of following values in the request header:
    # 
    #   * 186.0
    #   * 187.0
    #   * 188.0
    #   * 189.0
    #   * 196.0
    #   * 206.0
    # 
    #   The following values are supported in the **previewType** field:
    # 
    #   * InvoiceItem
    #   * ChargeMetrics
    #   * InvoiceItemChargeMetrics
    # 
    #   The default value is InvoiceItem.
    # 
    # * If you specify the REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, the following values are supported in the **previewType** field:
    # 
    #   - LegalDoc
    #   - ChargeMetrics
    #   - LegalDocChargeMetrics
    # 
    #   The default value is LegalDoc.
    # 
    # .
    string previewType?;
    # Container for removing one or more rate plans.
    PUTSrpRemoveType[] remove?;
    # Specifies whether a termed subscription will remain `TERMED` or change to `EVERGREEN` when it is renewed. 
    # 
    # Values are:
    # 
    # * `RENEW_WITH_SPECIFIC_TERM` (default)
    # * `RENEW_TO_EVERGREEN`
    string renewalSetting?;
    # The length of the period for the subscription renewal term. Default is `0`.
    int renewalTerm?;
    # 
    # The period type for the subscription renewal term.
    # 
    # This field is used with the `renewalTerm` field to specify the subscription renewal term.
    # 
    # Values are:
    # 
    # * `Month` (default)
    # * `Year`
    # * `Day`
    # * `Week`
    string renewalTermPeriodType?;
    # Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  
    # 
    # 
    # The billing documents generated
    # in this operation is only for this subscription, not for the entire
    # customer account.
    # 
    # 
    # Possible values:
    # 
    # - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.
    # 
    # 
    # - `false`: No invoice is created.
    # 
    # 
    # **Note:** This field is in Zuora REST API version control. Supported
    # minor versions are `211.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method,
    # you must set the `zuora-version` parameter to the minor version number
    # in the request header.
    true|false runBilling?;
    # Date through which to calculate charges if an invoice or a credit memo is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `211.0` and later. To use this field in the method, you
    # must set the  `zuora-version` parameter to the minor version number in
    # the request header.
    string targetDate?;
    # Date the subscription term begins, as yyyy-mm-dd. If this is a renewal subscription, this date is different from the subscription start date. 
    string termStartDate?;
    # Possible values are: `TERMED`, `EVERGREEN`.
    string termType?;
    # Container for updating one or more rate plans.
    PUTSrpUpdateType[] update?;
    *SubscriptionObjectQTFields;
    *SubscriptionObjectNSFields;
    *SubscriptionObjectCustomFields;
};

# 
public type QueryProductRatePlanChargesResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedProductRatePlanCharge[] data?;
|};

public type GETTaxationItemsOfDebitMemoItemType record {
    # Container for the taxation items of the debit memo item.
    GETDMTaxItemTypeNew[] data?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type POSTCreatePaymentSessionResponse record {
    # The token for the payment session data. Send the token back to your client side for identifying your website to Zuora.
    # 
    # For more information, see [Set up Apple Pay through the JavaScript SDK approach](https://knowledgecenter.zuora.com/Zuora_Payments/Payment_Methods/B_Define_Payment_Methods/Set_up_Apple_Pay_for_gateway_integrations_other_than_Adyen_Integration_v2.0).
    string token?;
};

public type POSTMemoPdfResponse record {
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type GETCreditMemoPartTypewithSuccess record {
    # The amount of the credit memo part.
    decimal amount?;
    # The ID of the Zuora user who created the credit memo part.
    string createdById?;
    # The date and time when the credit memo part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the debit memo associated with the credit memo part.
    string debitMemoId?;
    # The ID of the credit memo part.
    string id?;
    # The ID of the invoice associated with the credit memo part.
    string invoiceId?;
    # The ID of the Zuora user who last updated the credit memo part.
    string updatedById?;
    # The date and time when the credit memo part was last upated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

public type PutBatchInvoiceType record {
    # Container for invoice update details.
    BatchInvoiceType[] invoices?;
};

# The container for payment method processing options.
public type CreatePaymentMethodCreditCard_processingOptions record {
    # Indicates whether to perform a duplication check when you create a payment method.
    # 
    # The default value is `false`.
    # 
    # With this field set to `true`, Zuora will check the active and closed payment methods associated with the same billing account to ensure that no duplicate payment methods are created. 
    # 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_Methods/D1_Duplication_check_on_payment_methods" target="_blank">Duplication check on payment methods</a>.
    boolean checkDuplicated?;
};

# Container for account metrics of the account's default currency. 
# If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled, the `metricsData` field provides account metrics of different currencies.
public type GETAccountType_metrics record {
    # The customer's total invoice balance minus credit balance.
    string balance?;
    # Future expected MRR that accounts for future upgrades, downgrades, upsells and cancellations.
    string contractedMrr?;
    # Current credit balance.
    string creditBalance?;
    # The Reserved Payment Amount of the customer account. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information. 
    float reservedPaymentAmount?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # Total balance of all posted debit memos.
    string totalDebitMemoBalance?;
    # Total balance of all posted invoices.
    string totalInvoiceBalance?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # Total unapplied amount of all posted credit memos.
    string unappliedCreditMemoAmount?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # Total unapplied amount of all posted payments.
    string unappliedPaymentAmount?;
};

# Container for Refund fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type RefundObjectNSFields record {
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Origin__NS?;
    # Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
    # Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SynctoNetSuite__NS?;
};

public type POSTPaymentRunRequest record {
    # The ID of the customer account associated with the payment run.
    # 
    # This field conflicts with each of the `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields. If there are such conflicts, an error occurs and an error message is returned.
    string accountId?;
    # If `applyCreditBalance` is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.
    boolean applyCreditBalance?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # Whether to automatically apply a posted credit memo to one or more receivables in the payment run.
    boolean autoApplyCreditMemo?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # Whether to automatically apply unapplied payments to  one or more receivables in the payment run.
    boolean autoApplyUnappliedPayment?;
    # The alias name given to a batch. The batch name is a string of 50 characters or less.
    # 
    # This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned. 
    # 
    # **Note**: By default, you have 50 configurable account batches. To increase the limit to 200 batches, you must have the <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Performance_Booster_Elite" target="_blank">Performance Booster Elite</a> package.
    string batch?;
    # The billing cycle day (BCD), the day of the month when a bill run generates invoices for the account. The value must be equal to or less then 31, and 31 is mean the EOM.
    # 
    # This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.
    string billCycleDay?;
    # The ID of a bill run.
    # 
    # This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.
    string billingRunId?;
    # Whether to process electronic payments during the execution of payment runs. 
    # 
    # If the Payment user permission "Process Electronic Payment" is disabled, this field will be ignored.
    boolean collectPayment?;
    # **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information. 
    # 
    # Whether to process a single payment for all receivables that are due on an account.
    boolean consolidatedPayment?;
    # A currency defined in the web-based UI administrative settings.
    # 
    # This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.
    string currency?;
    # 
    # The array of data for specifying records of accounts and invoices/debit memos that will be collected and processed by a payment run.
    # 
    # When you specify the data array, ensure that at least one record is passed in. If an empty array is specified, `accountId`, `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields will be used to define the billing documents to be collected. If the [Multiple Currencies](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies) feature is enabled, you can filter the accounts by `currency` based on the customer's billing document.
    # 
    # A maximum of 50K records are allowed to be passed into the `data` array.
    # 
    # Here is an example:
    # ```
    #   {
    #     "accountId": "60c81b5bc51649e8a7d1b48303194790",
    #     "documentId": "2c9081a03c63c94c013c6894af5602dd",
    #     "documentType": "Invoice",
    #     "amount": 80,
    #     "paymentMethodId": "2c9081a03c6d7b51013c6d7e4ada0a1c",
    #     "paymentGatewayId": "d2abe8342e1811ea80e774b9452e17ea",
    #     "comment": "Payment Comments",
    #     "customField1__c": "cf_value1",
    #     "customField2__c": "cf_value2"
    #   }
    # ```
    # 
    # Here is another example for a standalone payment:
    # ```
    #   {
    #     "accountId": "account2",
    #     "amount": 100,
    #     "currency": "GBP",
    #     "standalone": true
    #   }
    # ```
    POSTPaymentRunDataElementRequest[] data?;
    # The organizations that the run is created for. 
    # 
    # For each item in the array, either the `organizationId` or the `organizationName` field is required.
    # 
    # This field is only required when you have already turned on Multi-Org feature.
    GETProductType_organizationLabels[] organizationLabels?;
    # The ID of the gateway instance that processes the payment.
    # 
    # This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.
    string paymentGatewayId?;
    # **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information. 
    # 
    # Whether to process payments even if the default payment method is closed.
    boolean processPaymentWithClosedPM?;
    # The date and time when the scheduled payment run is to be executed, in `yyyy-mm-dd hh:mm:ss` format. The backend will ignore mintues and seconds in the field value. For example, if you specify `2017-03-01 11:30:37` for this value, this payment run will be run at 2017-03-01 11:00:00.
    # 
    # You must specify either the `runDate` field or the `targetDate` field in the request body. If you specify the `runDate` field, the scheduced payment run is to be executed on the run date. If you specify the `targetDate` field, the payment run is executed immediately after it is created. 
    string runDate?;
    # The target date used to determine which receivables to be paid in the payment run. The payments are collected for all receivables with the due date no later than the target date.
    # 
    # You must specify either the `runDate` field or the `targetDate` field in the request body. If you specify the `runDate` field, the scheduced payment run is to be executed on the run date. If you specify the `targetDate` field, the payment run is executed immediately after it is created. 
    string targetDate?;
};

public type ChargeDefinitions record {
    # Indicates which type of charge the discount charge applies to.
    "ONETIME"|"RECURRING"|"USAGE"|"ONETIMERECURRING"|"ONETIMEUSAGE"|"RECURRINGUSAGE"|"ONETIMERECURRINGUSAGE"? applyDiscountTo?;
    # The bill cycle type for the charge.
    string billingDay?;
    # The billing period for the product charge definition.
    string billingPeriod?;
    # The billing period alignment setting for the charge.
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart"|"AlignToTermEnd" billingPeriodAlignment?;
    # The billing timing setting for the product charge definition.
    "IN_ADVANCE"|"IN_ARREARS" billingTiming?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    "DiscountFixedAmount"|"DiscountPercentage"|"FlatFee"|"PerUnit"|"Overage"|"Tiered"|"TieredWithOverage"|"Volume"|"Delivery"|"MultiAttributePricing"|"PreratedPerUnit"|"PreratedPricing"|"HighWatermarkVolumePricing"|"HighWatermarkTieredPricing" chargeModel?;
    # Indicates the type of charge.
    "OneTime"|"Recurring"|"Usage" chargeType?;
    # Container for custom fields of a Product Charge Definition object.
    ProductChargeDefinitionObjectCustomFields customFields?;
    # The default quantity. 
    # 
    # This field is applicable only for one-time and recurring charges.
    decimal? defaultQuantity?;
    GETDeliverySchedule? deliverySchedule?;
    # The description for the charge.
    string description?;
    # The class that the discount belongs to. The discount class defines the order in which discount product rate plan charges are applied.
    # 
    # For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).
    string? discountClass?;
    # The application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account"? discountLevel?;
    # The effective end date of the product charge definition.
    string effectiveEndDate?;
    # The effective start date of the product charge definition.
    string effectiveStartDate?;
    # The end date condition for this charge.
    "Subscription_End"|"One_Time"|"Fixed_Period"|"Specific_End_Date" endDateCondition?;
    # Indicates whether to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Indicates whether to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled.
    boolean excludeItemBookingFromRevenueAccounting?;
    # Indicates whether the charge segment is allocation eligible in revenue recognition. The default value is `false`.
    # 
    # **Values**: `true`, `false`
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.
    boolean isAllocationEligible?;
    # Specifies how to perform the accounting during revenue recognition. The default value is `false`.
    # 
    # **Values**: `true`, `false`
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.     
    boolean isUnbilled?;
    # This field is used to maintain the product category for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.    
    string productCategory?;
    # This field is used to maintain the product class for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.    
    string productClass?;
    # This field is used to maintain the product family for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.
    string productFamily?;
    # This field is used to maintain the product line for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.
    string productLine?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" revenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" revenueAmortizationMethod?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
    # This field is ued when overage smoothing model is `RollingWindow` or `Rollover`.
    int? numberOfPeriods?;
    # Container for finance information of the rate plan charge.
    FinanceInformation_2 financeInformation?;
    # Indicates whether this charge definition is the default one for the charge.
    boolean isDefault?;
    # **Note**: This field is only applicable to the Discount - Percentage charge model.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 130 or higher. Otherwise, an error occurs.
    # 
    # This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:
    #   - `True`: This is a stacked discount, which should be calculated by stacking with other discounts.
    #   - `False`: This is not a stacked discount, which should be calculated in sequence with other discounts.
    # 
    # For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).
    boolean isStackedDiscount?;
    # The list price base. 
    # 
    # This field is applicable only for recurring charges.
    # 
    # **Note**: The `Per_Year` enum value is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year" listPriceBase?;
    # Indicates the number of periods to use when calculating charges in an overage smoothing charge model. The valid value is a positive whole number.
    int numberOfPeriod?;
    # Determines when to calculate overage charges. If the value of the `SmoothingMode` field is not specified, the value of this field is ignored.
    # 
    # **Values**: 
    #   - `EndOfSmoothingPeriod`: This option is used by default. The overage is charged at the end of the smoothing period.
    #   - `PerBillingPeriod`: The overage is charged on-demand rather than waiting until the end of the smoothing period.
    "EndOfSmoothingPeriod"|"PerBillingPeriod"? overageCalculationOption?;
    # Determines whether to credit the customer with unused units of usage.
    "NoCredit"|"CreditBySpecificRate"? overageUnusedUnitsCreditOption?;
    # Applies an automatic price change when a termed subscription is renewed.
    "NoChange"|"SpecificPercentageValue"|"UseLatestProductCatalogPricing"? priceChangeOption?;
    # Applies an automatic price change when a termed subscription is renewed.
    "FromTenantPercentageValue"|"SpecificPercentageValue" priceIncreaseOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `priceIncreaseOption` value to `SpecificPercentageValue`.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a decimal value between -100 and 100
    decimal? priceIncreasePercentage?;
    # Container for the prices of the product charge definition.
    GETProductChargeDefinitionPricing[] prices?;
    # The unique ID of the product charge definition.
    string productChargeDefinitionId?;
    # The unique number (natural key) of the product charge definition.
    string productChargeDefinitionNumber?;
    # Container for the application details about a discount product rate plan charge. 
    # 
    # Only discount product rate plan charges have values for this field.
    GETProductDiscountApplyDetailsType[] productDiscountApplyDetails?;
    # The unique ID of the product charge of the charge definition.
    string productRatePlanChargeId?;
    # The unique number (natural key) of the product charge of the charge definition.
    string? productRatePlanChargeNumber?;
    # The unique ID of the product rate plan that uses this charge definition.
    string? productRatePlanId?;
    # Th name of the product rate plan that uses this charge definition.
    string? productRatePlanName?;
    # The unique number (natural key) of the product rate plan that uses this charge definition.
    string? productRatePlanNumber?;
    # The rating group based on which usage records are rated.
    # 
    # Possible values:                
    #   - `ByBillingPeriod`: The rating is based on all the usages in a billing period. 
    #   - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    #   - `ByUsageRecord`: The rating is based on each usage record.
    #   - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    #   - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Notes:** 
    #   - The `ByBillingPeriod` value can be applied for all charge models. 
    #   - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for Per Unit, Volume Pricing, and Tiered Pricing charge models. 
    #   - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    #   - Use this field only for Usage charges. One-time charges and recurring charges return `NULL`.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload"|"ByGroupId"? ratingGroup?;
    # The name of the recognized revenue account for this charge.
    #   - Required when the Allow Blank Accounting Code setting is No.
    #   - Optional when the Allow Blank Accounting Code setting is Yes.
    # 
    #   This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccount?;
    # Associates this product rate plan charge with a specific revenue recognition code.
    string? revRecCode?;
    # Indicates when revenue recognition begins.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate"? revRecTriggerCondition?;
    # Determines when to recognize the revenue for this charge.
    "Recognize upon invoicing"|"Recognize daily over time" revenueRecognitionRuleName?;
    # Indicates the smoothing model for an overage smoothing charge model.
    "RollingWindow"|"Rollover"? smoothingModel?;
    # The specific number of billing period for the product charge definition.
    decimal? specificBillingPeriod?;
    # The number of months for the list price base of the charge definition.  
    # This field is `null` if the `listPriceBase` field is not set to `Per_Specific_Months`.
    int:Signed32? specificListPriceBase?;
    # Specifies the tax code for taxation rules.
    # 
    # **Note**: This value affects the tax calculation of the rate plan charge.
    @constraint:String {maxLength: 64}
    string taxCode?;
    # Determines how to define taxation for the charge.
    # 
    # **Note**: This value affects the tax calculation of the rate plan charge.
    "TaxExclusive"|"TaxInclusive"? taxMode?;
    # Determines whether the charge definition is taxable.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    # 
    # **Note**: This value affects the tax calculation of the rate plan charge.
    boolean taxable?;
    # The number of periods of a termed subscription that is eligible for this charge definition. This field is applicable when the `termType` field is set to `TERMED`, 
    # and is to be used together with the `termPeriodType` field.
    decimal? term?;
    # The period type for the subscription term that is eligible for this charge definition.
    "Month"|"Year"|"Day"|"Week"? termPeriodType?;
    # The type of the subscription that is eligible for this charge definition.
    "TERMED"|"EVERGREEN"? termType?;
    # Specifies when to start billing the customer for the charge definition.
    # 
    # **Values**:
    #   - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    #   - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
    #   - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance" triggerEvent?;
    # Indicates the unit of measure (UOM) that is configured in **Settings > Billing** for the product rate plan charge.
    string? uom?;
    # The number of up-to periods for this charge.
    decimal? upToPeriods?;
    # The up-to-periods type for this charge.
    "Billing_Periods"|"Days"|"Weeks"|"Months"|"Years"? upToPeriodsType?;
    # Determines how Zuora processes usage records for per-unit usage charges.
    "EndOfBillingPeriod"|"OnDemand"? usageRecordRatingOption?;
    # Determines whether to define a new accounting code for the new discount charge.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    boolean? useDiscountSpecificAccountingCode?;
    # Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. 
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    boolean useTenantDefaultForPriceChange?;
};

public type ResendEmailNotificationsFailedResponse record {|
    record {
        # The error code of response.
        string code?;
        # The detail information of the error response
        string message?;
    }...;
|};

public type BulkDebitMemosResponseType record {
    # The container for a list of debit memos.
    @constraint:Array {maxLength: 50}
    GETDebitMemoType[] memos?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type SignUpCreatePaymentMethodPayPalAdaptive record {
    # The PayPal preapproval key.
    string preapprovalKey?;
};

# Order Delta Tcv. This is a metric that reflects the change to the TCV on Rate Plan Charge object, or the Total Contracted Value for an Order Line Item as the result of the order
public type OrderDeltaTcv record {
    *OrderDeltaMetric;
    # The sytem generated Id for the Order Line Item. This field can be null if the metric is generated for subscriptions.
    string orderLineItemId?;
};

public type GETPaymentRunCollectionType record {
    # The URL for requesting the next page of the response, if it exists; otherwise absent.
    string nextPage?;
    # Container for payment runs.
    GETPaymentRunType[] paymentRuns?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type ZObject_update record {
    # 
    string Id;
    # Used to set a list of fields to null.
    string[] fieldsToNull?;
    *ZObject;
};

public type RampIntervalMetrics record {
    # The short description of the interval.
    string description?;
    # The discount amount for the TCB.
    decimal discountTcb?;
    # The discount amount for the TCV.
    decimal discountTcv?;
    # The end date of the interval.
    string endDate?;
    # The gross TCB value before discount charges are applied.
    decimal grossTcb?;
    # The gross TCV value before discount charges are applied.
    decimal grossTcv?;
    # Container for the detailed metrics for each rate plan charge in each ramp interval.
    RampIntervalChargeMetrics[] intervalMetrics?;
    # The name of the interval.
    string name?;
    # The net TCB value after discount charges are applied.
    decimal netTcb?;
    # The net TCV value after discount charges are applied.
    decimal netTcv?;
    # The start date of the interval.
    string startDate?;
};

public type POSTPaymentSchedulesEach record {
    # The ID of the created payment schedule.
    string id?;
    # The number of the created payment schedule.
    string paymentScheduleNumber?;
};

public type CustomObjectDefinitionUpdateActionResponse_relationship_recordConstraints_create record {
    # Specifies whether Zuora validates the values of mapped fields
    # in custom object records.
    boolean enforceValidMapping?;
};

public type PUTBatchDebitMemosRequest record {
    # Container for debit memo update details.
    BatchDebitMemoType[] debitMemos?;
};

public type POSTResendCalloutNotifications string[];

public type POSTAccountType record {
    # A unique account number, up to 50 characters that do not begin with the default account number prefix.  If no account number is specified, one is generated.
    string accountNumber?;
    # A list of additional email addresses to receive email notifications. Use commas to separate email addresses.
    string[] additionalEmailAddresses?;
    # The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
    string[] applicationOrder?;
    # Whether to automatically apply credit memos or unapplied payments, or both to an invoice.
    # 
    # If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the invoice. If no value is specified or the value is `false`, no action is taken.
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    boolean applyCredit?;
    # Applies a credit balance to an invoice.
    # 
    # If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.
    # 
    # Prerequisite: `invoice` must be `true`.
    # 
    # To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.
    # 
    # 
    # **Note:** 
    #   - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.
    #   - This field is deprecated if you have the Invoice Settlement feature enabled. 
    boolean applyCreditBalance?;
    # Whether future payments are to be automatically billed when they are due. 
    # 
    # - If this field is set to `true`, you must specify either the `creditCard` field or the `hpmCreditCardPaymentMethodId` field, but not both.
    # - If this field is set to `false`, you can specify neither the `creditCard` field nor the `hpmCreditCardPaymentMethodId` field.
    boolean autoPay?;
    # The alias name given to a batch. A string of 50 characters or
    # less.
    # 
    # **Note**: By default, you have 50 configurable account batches. To increase the limit to 200 batches, you must have the <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Performance_Booster_Elite" target="_blank">Performance Booster Elite</a> package.
    string batch?;
    # The account's bill cycle day (BCD), when bill runs generate invoices for the account.  Specify any day of the month (1-31, where 31 = end-of-month), or 0 for auto-set.
    # 
    # Required if no subscription will be created. 
    # 
    # Optional if a subscription is created and defaults to the day-of-the-month of the subscription's `contractEffectiveDate`.
    int billCycleDay?;
    # Container for bill-to contact information for this account. If you do not provide a sold-to contact, the bill-to contact is copied to sold-to contact. Once the sold-to contact is created, changes to billToContact will not affect soldToContact and vice versa.
    POSTAccountTypeBillToContact billToContact;
    # Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.
    # 
    # If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.
    # 
    # Prerequisite: The `invoice` or `runBilling` field must be `true`. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    boolean collect = true;
    # The ID of the communication profile that this account is linked to.
    # 
    # You can provide either or both of the `communicationProfileId` and `profileNumber` fields.
    # 
    # If both are provided, the request will fail if they do not refer to the same communication profile.
    string communicationProfileId?;
    # **Note:** This field has been deprecated, and is currently available only for backward compatibility. Use the `paymentMethod` field instead to create a payment method associated with this account.
    # 
    # Container for information on a credit card to associate with this account. 
    # If the `autoPay` field is set to `true`, you must provide one of the `paymentMethod`, `creditCard`, or `hpmCreditCardPaymentMethodId` field, but not multiple.
    POSTAccountTypeCreditCard creditCard?;
    # A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
    string creditMemoReasonCode?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.
    string creditMemoTemplateId?;
    # CRM account ID for the account, up to 100 characters.
    string crmId?;
    # A currency as defined in Billing Settings in the Zuora UI.
    # 
    # For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.
    string currency;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.
    string debitMemoTemplateId?;
    # The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
    # 
    # - If this field is specified, the specified date is used as the billing document date. 
    # - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
    string documentDate?;
    # Container for e-invoicing profile information for this account.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    PostAccountEInvoiceProfile einvoiceProfile?;
    # The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.
    # 
    # If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field, but not both.
    # 
    # For the Credit Card Reference Transaction payment method, you can specify the payment method ID in this field or use the `paymentMethod` field to create a CC Reference Transaction payment method for an account.
    string hpmCreditCardPaymentMethodId?;
    # **Note:** This field has been replaced by the `runBilling` field. The
    # `invoice` field is only available for backward compatibility. 
    # 
    # Creates an invoice for a subscription. The invoice generated in this
    # operation is only for this subscription, not for the entire customer
    # account.
    # 
    # If the value is `true`, an invoice is created. If the value is
    # `false`, no action is taken.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or `207.0`.
    boolean invoice = true;
    # **Note:** This field has been replaced by the `invoice` field
    # and the `collect` field. `invoiceCollect` is available only for backward
    # compatibility.
    # 
    # 
    # If this field is set to `true`, and a subscription is created, an invoice is generated at account creation time and payment is immediately collected using the account's default payment method.
    # 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`. The default field value is `true`.
    boolean invoiceCollect?;
    # Whether the customer wants to receive invoices through email. 
    boolean invoiceDeliveryPrefsEmail = false;
    # Whether the customer wants to receive printed invoices, such as through postal mail.
    boolean invoiceDeliveryPrefsPrint = false;
    # **Note:** This field has been replaced by the `targetDate` field. The
    # `invoiceTargetDate` field is only available for backward
    # compatibility.  
    # 
    # 
    # Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.
    # 
    # 
    # This field is in REST API minor version control. To use this field in
    # the method, you can set the `zuora-version` parameter to the minor
    # version number in the request header. Supported minor versions are
    # `207.0` and earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). 
    string invoiceTargetDate?;
    # Invoice template ID, configured in Billing Settings in the Zuora UI.
    string invoiceTemplateId?;
    # Account name, up to 255 characters.
    string name;
    # A string of up to 65,535 characters.
    string notes?;
    # Name of the organization that the account belongs to.  
    # 
    # This field is only required when you have already turned on Multi-Org feature.    
    string organizationLabel?;
    # Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy" target="_blank">Customer Hierarchy</a> enabled.
    string parentId?;
    # Whether the customer account is a partner, distributor, or reseller. 
    # 
    # 
    # You can set this field to `true` if you have business with distributors or resellers, or operating in B2B model to manage numerous subscriptions through concurrent API requests. After this field is set to `true`, the calculation of account metrics is performed asynchronously during operations such as subscription creation, order changes, invoice generation, and payments.
    # 
    #  
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account" target="_blank">Reseller Account</a> feature enabled.
    boolean partnerAccount = false;
    # The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.
    string paymentGateway?;
    # Payment method information associated with an account.
    POSTPaymentMethodRequest paymentMethod?;
    # Payment terms for this account. Possible values are: `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.
    # 
    # **Note**: If you want to specify a payment term when creating a new account, you must set a value in this field. If you do not set a value in this field, Zuora will use `Due Upon Receipt` as the value instead of the default value set in **Billing Settings** > **Payment Terms** from Zuora UI.
    string paymentTerm?;
    # The number of the communication profile that this account is linked to.
    # 
    # You can provide either or both of the `communicationProfileId` and `profileNumber` fields.
    # 
    # If both are provided, the request will fail if they do not refer to the same communication profile.
    string profileNumber?;
    # Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/B_Credit_and_Debit_Memos/Rules_for_generating_invoices_and_credit_memos). 
    # 
    # 
    # The billing documents generated
    # in this operation is only for this subscription, not for the entire
    # customer account.
    # 
    # 
    # Possible values:
    # 
    # - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.
    # 
    # 
    # - `false`: No invoice is created.
    # 
    # 
    # **Note:** This field is in Zuora REST API version control. Supported
    # minor versions are `211.0` and later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method,
    # you must set the `zuora-version` parameter to the minor version number
    # in the request header.
    true|false runBilling = true;
    # The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.
    string salesRep?;
    # The ID of the billing document sequence set to assign to the customer account. 
    # 
    # The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.
    # 
    # If a customer account has no assigned billing document sequence set, billing documents generated for this account adopt the prefix and starting document number from the default sequence set.
    string sequenceSetId?;
    # Container for optional sold-to contact; uses the same field structure as the bill-to contact (above). If a sold-to contact is not specified, one is created from the bill-to contact. Once created, these are two separate data entities, and future changes to one do not affect the other.
    POSTAccountTypeSoldToContact soldToContact?;
    # Whether the sold-to contact and bill-to contact are the same entity. 
    # 
    # The created account has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:
    # 
    # - This field is set to `true`. 
    # - A bill-to contact is specified.
    # - No sold-to contact is specified.
    boolean soldToSameAsBillTo?;
    # Container for subscription information, used if creating a subscription for the new account at the time of account creation.
    POSTAccountTypeSubscription subscription?;
    # 
    string tagging?;
    # Date through which to calculate charges if an invoice or a credit memo is generated, as yyyy-mm-dd. Default is current date.
    # 
    # **Note:** The credit memo is only available only if you have the Invoice Settlement feature enabled.
    # 
    # This field is in Zuora REST API version control. Supported minor versions are `211.0` and later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method, you must set the  `zuora-version` parameter to the minor version number in the request header.
    string targetDate?;
    # Container for tax exempt information, used to establish the tax exempt status of a customer account.
    POSTAccountType_taxInfo taxInfo?;
    *AccountObjectNSFields;
    *AccountObjectCustomFields;
};

public type POSTPublicEmailTemplateRequest record {
    # The status of the email template. The default value is `true`.
    boolean active = true;
    # The email bcc address.
    string bccEmailAddress?;
    # The email CC address.
    string ccEmailAddress?;
    # Email CC type.
    # * When the base object for the event is associated with `Account`, `ccEmailType` can be any values in the enum list. 
    # * When the base object for the event is not associated with `Account`, `ccEmailType` must be `TenantAdmin`, `RunOwner`, or `SpecificEmail`. 
    "BillToContact"|"SoldToContact"|"SpecificEmails"|"TenantAdmin"|"BillToAndSoldToContacts"|"RunOwner"|"AllContacts"|"InvoiceOwnerBillToContact"|"InvoiceOwnerSoldToContact"|"InvoiceOwnerBillToAndSoldToContacts"|"InvoiceOwnerAllContacts" ccEmailType = "SpecificEmails";
    # The description of the email template.
    @constraint:String {maxLength: 255}
    string description?;
    # The email body. You can add merge fields in the email body using angle brackets or double curly brackets. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Events_and_Notifications/Create_Email_Templates/A_Merge_field_syntax_for_email_templates" target="_blank">Merge field syntax for email templates</a>.
    # 
    # You can also embed HTML tags if `isHtml` is `true`.
    string emailBody;
    # Container for custom email headers. Each custom email header consists of a header name and a header value.
    record {|string...;|} emailHeaders?;
    # The email subject. You can add merge fields in the email subject using angle brackets or double curly brackets. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Events_and_Notifications/Create_Email_Templates/A_Merge_field_syntax_for_email_templates" target="_blank">Merge field syntax for email templates</a>.
    string emailSubject;
    # The endcode type of the email body.
    "UTF8"|"Shift_JIS"|"ISO_2022_JP"|"EUC_JP"|"X_SJIS_0213" encodingType = "UTF8";
    # If you specify this field, the email template is created based on a standard event. See [Standard Event Categories](https://knowledgecenter.zuora.com/Central_Platform/Notifications/A_Standard_Events/Standard_Event_Category_Code_for_Notification_Histories_API) for all standard event category codes. 
    decimal eventCategory?;
    # The name of the custom event or custom scheduled event. If you specify this field, the email template is created based on the corresponding custom event or custom scheduled event.
    string eventTypeName?;
    # The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default. 
    # 
    # Note that if the `eventTypeName` is a standard event type, you must specify the `com.zuora.notification` namespace; otherwise, you will get an error.
    # 
    # For example, if you want to create an email template on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.         
    string eventTypeNamespace?;
    # If fromEmailType is SpecificEmail, this field is required.
    string fromEmailAddress?;
    # The type of the email.
    "TenantEmail"|"RunOwner"|"SpecificEmail" fromEmailType;
    # The name of the email sender.
    string fromName?;
    # Indicates whether the style of email body is HTML. The default value is `false`.
    boolean isHtml = false;
    # The name of the email template, a unique name in a tenant.
    @constraint:String {maxLength: 255}
    string name;
    # If replyToEmailType is SpecificEmail, this field is required.
    string replyToEmailAddress?;
    # Type of the replyTo email.
    "TenantEmail"|"RunOwner"|"SpecificEmail" replyToEmailType?;
    # If toEmailType is SpecificEmail, this field is required.
    string toEmailAddress?;
    # Email receive type.
    # * When the base object for the event is associated with `Account`, `toEmailType` can be any values in the enum list. 
    # * When the base object for the event is not associated with `Account`, `toEmailType` must be `TenantAdmin`, `RunOwner`, or `SpecificEmail`. 
    "BillToContact"|"SoldToContact"|"SpecificEmails"|"TenantAdmin"|"BillToAndSoldToContacts"|"RunOwner"|"AllContacts"|"InvoiceOwnerBillToContact"|"InvoiceOwnerSoldToContact"|"InvoiceOwnerBillToAndSoldToContacts"|"InvoiceOwnerAllContacts" toEmailType;
};

# Information about an order action of type `UpdateProduct`.
public type OrderActionRatePlanRatePlanUpdate record {
    OrderActionRatePlanChargeUpdate[] chargeUpdates?;
    # Container for custom fields of a Rate Plan object.
    OrderActionRatePlanRatePlanObjectCustomFields customFields?;
    # Internal identifier of the updated rate plan in the new subscription version.
    string newRatePlanId?;
    # Internal identifier of the rate plan that was updated.
    string ratePlanId?;
    # 
    # The date when the Update Product order action takes effect. This field is only applicable if there is already a future-dated Update Product order action on the subscription. The format of the date is yyyy-mm-dd.
    # 
    # See [Update a Product on Subscription with Future-dated Updates](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AC_Orders_Tutorials/C_Update_a_Product_in_a_Subscription/Update_a_Product_on_Subscription_with_Future-dated_Updates) for more information about this feature.
    string specificUpdateDate?;
    # A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.
    string uniqueToken?;
};

# 
public type GETPublicNotificationDefinitionResponse_filterRule record {
    # The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/).
    # The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects). Notifications with invalid merge fields will fail to evaluate, thus will not be invoked. For example, to trigger an event when an invoice is posted with the amount over 1000, you would define the following condition on the `Invoice` object:
    # 
    # ```changeType == 'UPDATE' && Invoice.Status == 'Posted' && Invoice.Status_old != 'Posted' && Invoice.Amount > 1000```
    # 
    # There are conventions and keywords you need to be aware of. For example:
    # 
    # * `changeType` is a keyword to specify what kind of change happened to the object. Allowed values are `INSERT`, `UPDATE` or `DELETE`.
    # 
    # * `Invoice.Status` refers to field `Status` of the Zuora object `Invoice`.
    # 
    # * A variable with the `_old` suffix means it’s a previous value of the corresponding object field. The "_old" fields are only available on the base objects.
    string condition?;
    # The description of the filter rule.
    @constraint:String {maxLength: 255}
    string description?;
    # The value is `null`.
    @constraint:String {minLength: 1}
    string eventTypeName?;
    # The ID of the filter rule. If not specified or null, the notification definition is always qualified to process events of "eventType".
    string id?;
    # The parameters of the filter rule and their name must match those in the filter rule. And all parameters must be defined in the event type payload. The name of parameters can't be duplicate. The following reserved keywords should not be used as a parameter name: `AttachmentList`, `RecipientList`, `RecipientType`, `Exceptions`, `OCP_OBJECT_TYPE`, `OCP_OBJECT_ID`, `OCP_TRIGGER_BY`
    FilterRuleParameterDefinitions parameters?;
};

public type SignUpResponse_reasons record {
    # The error code of response.
    string code?;
    # The detail information of the error response
    string message?;
};

public type PUTRenewSubscriptionType record {
    # The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
    string[] applicationOrder?;
    # If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    boolean applyCredit?;
    # Whether to automatically apply a credit balance to an invoice.
    # 
    # If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.
    # 
    # 
    # To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.
    # 
    # Prerequisite: `invoice` must be `true`. 
    # 
    # **Note:** 
    #   - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.
    #   - This field is deprecated if you have the Invoice Settlement feature enabled.
    boolean applyCreditBalance?;
    # Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.
    # 
    # If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.
    # 
    # Prerequisite: The `invoice` or `runBilling` field must be `true`. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    boolean collect?;
    # A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
    string creditMemoReasonCode?;
    # The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
    # 
    # - If this field is specified, the specified date is used as the billing document date. 
    # - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
    string documentDate?;
    # **Note:** This field has been replaced by the `runBilling` field. The
    # `invoice` field is only available for backward compatibility.
    # 
    # 
    # Creates an invoice for a subscription. The invoice generated in this
    # operation is only for this subscription, not for the entire customer
    # account.
    # 
    # 
    # If the value is `true`, an invoice is created. If the value is
    # `false`, no action is taken. The default value is `false`. 
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `196.0` and `207.0`. To use this field in the method, you
    # must set the zuora-version parameter to the minor version number in
    # the request header.
    boolean invoice?;
    # **Note:** This field has been replaced by the `invoice` field
    # and the `collect` field. `invoiceCollect` is available only for backward compatibility.
    # 
    # 
    # If this field is set to `true`, an invoice is generated and payment collected automatically during the subscription process. If `false`, no invoicing or payment takes place. The invoice generated in this operation is only for this subscription, not for the entire customer account.
    # 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`.
    boolean invoiceCollect?;
    # **Note:** This field has been replaced by the `targetDate` field. The
    # `invoiceTargetDate` field is only available for backward
    # compatibility.
    # 
    # 
    # Date through which to calculate charges if an invoice is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `207.0` and earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string invoiceTargetDate?;
    # The date when the order is signed. If no additinal contractEffectiveDate is provided, this order will use this order date as the contract effective date.
    # This field must be in the `yyyy-mm-dd` format.
    # This field is required for Orders customers only, not applicable to Orders Harmonization customers.
    string orderDate?;
    # Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  
    # 
    # 
    # The billing documents generated
    # in this operation is only for this subscription, not for the entire
    # customer account.
    # 
    # 
    # Possible values:
    # 
    # - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.
    # 
    # 
    # - `false`: No invoice is created.
    # 
    # 
    # **Note:** This field is in Zuora REST API version control. Supported
    # minor versions are `211.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method,
    # you must set the `zuora-version` parameter to the minor version number
    # in the request header.
    true|false runBilling?;
    # Date through which to calculate charges if an invoice or a credit memo is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `211.0` and later. To use this field in the method, you
    # must set the  `zuora-version` parameter to the minor version number in
    # the request header.
    string targetDate?;
};

public type PostDebitMemoEmailType record {
    # The valid email addresses you want to email a debit memo to. Use commas to separate email addresses.
    # 
    # **Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`.
    string emailAddresses?;
    # Indicates whether to send a debit memo to the additional email addresses of the memo account. 
    # 
    # 
    # You can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information.
    true|false includeAdditionalEmailAddresses?;
    # The ID of the PDF file that you want to send in the email. 
    # 
    # If you do not specify any PDF file ID, the latest PDF file generated for the debit memo is sent in the email.
    string pdfFileId?;
    # Indicates whether to email a debit memo based on the email template setting. 
    # 
    # If you set this field to `true`, the debit memo is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.
    true|false useEmailTemplateSetting?;
};

# Charge associated with a rate plan.
public type ChangePlanChargeOverride record {
    # The accountReceivableAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a>, <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a>, and <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Get_started_with_Invoice_Settlement/AA_Overview_of_Invoice_Settlement" target="_blank">Invoice Settlement</a> features are enabled.
    string accountReceivableAccountingCode?;
    # The adjustmentLiabilityAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string adjustmentLiabilityAccountingCode?;
    # The adjustmentRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string adjustmentRevenueAccountingCode?;
    # Billing information about the charge.
    PreviewOrderChargeOverride_billing billing?;
    # The chargeModel of a standalone charge.
    # 
    # 
    # Supported charge models:
    # 
    # * `FlatFee`
    # 
    # * `PerUnit`
    # 
    # * `Volume`
    # 
    # * `Tiered`
    # 
    # * `DiscountFixedAmount`
    # 
    # * `DiscountPercentage`
    # 
    # 
    # **Note:** This field is available when the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders"
    # target="_blank">Standalone Orders</a> feature is enabled.
    string chargeModel?;
    # Charge number of the charge. For example, C-00000307.
    # 
    # If you do not set this field, Zuora will generate the charge number.
    @constraint:String {maxLength: 50}
    string chargeNumber?;
    # The chargeType of a standalone charge.
    # 
    # Supported charge types:
    # 
    # * `OneTime`
    # 
    # * `Recurring`
    # 
    # * `Usage`
    # 
    # **Note:** This field is available when the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders"
    # target="_blank">Standalone Orders</a> feature is enabled.
    string chargeType?;
    # The contractAssetAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractAssetAccountingCode?;
    # The contractLiabilityAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractLiabilityAccountingCode?;
    # The contractRecognizedRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractRecognizedRevenueAccountingCode?;
    # Container for custom fields of a Rate Plan Charge object.
    RatePlanChargeObjectCustomFields customFields?;
    # The deferredRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string deferredRevenueAccountingCode?;
    # Description of the charge.
    @constraint:String {maxLength: 500}
    string description?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal drawdownRate?;
    # Specifies when a charge becomes inactive.
    EndConditions endDate?;
    # The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting = false;
    # The flag to exclude rate plan charges from revenue accounting.
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting = false;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The value is either "True" or "False". It determines whether the rollover fields are needed.
    boolean isRollover?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The name of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string name?;
    # The pobPolicy of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string pobPolicy?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal prepaidQuantity?;
    # Pricing information about the charge.
    PreviewOrderChargeOverride_pricing pricing?;
    # The productCategory of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productCategory?;
    # The productClass of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productClass?;
    # The productFamily of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productFamily?;
    # The productLine of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productLine?;
    # Internal identifier of the product rate plan charge that the charge is based on.
    string productRatePlanChargeId;
    # Number of a product rate-plan charge for this subscription.
    string productRatePlanChargeNumber?;
    # The recognizedRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string recognizedRevenueAccountingCode?;
    # Revenue Recognition Code
    @constraint:String {maxLength: 70}
    string revRecCode?;
    # Specifies the revenue recognition trigger condition.
    # 
    #   * `Contract Effective Date` 
    #   * `Service Activation Date`
    #   * `Customer Acceptance Date`
    "Contract Effective Date"|"Service Activation Date"|"Customer Acceptance Date" revRecTriggerCondition?;
    # Specifies the revenue recognition rule, such as `Recognize upon invoicing` or `Recognize daily over time`.
    string revenueRecognitionRuleName?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    decimal rolloverPeriods?;
    # Specifies when a charge becomes active.
    CreateOrderTriggerParams startDate?;
    # The taxCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string taxCode?;
    # The taxMode of a standalone charge. 
    # 
    # Values:
    # * `TaxExclusive`
    # * `TaxInclusive`
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string taxMode?;
    # The unBilledReceivablesAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string unBilledReceivablesAccountingCode?;
    # Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
    # The identifier of the original upselling charge associated with the current charge.
    # 
    # For a termed subscription, you can now use the "Create an order" API operation to perform an Add Product order action to make a product quantity upsell for per unit recurring charges. The benefit is that the charge added by this approach will be automatically combined with the original existing charge for which you want to upsell when the subscription is renewed. The approach is as follows:
    # * Use an Add Product order action to add a charge that is of the same charge type, charge model, and charge end date as the existing per unit recurring charge for which you want to make a quantity upsell.
    # 
    # * In the preceding charge to add, use the `upsellOriginChargeNumber` field to specify the existing rate plan charge for which you want to make the quantity upsell.
    # 
    # Note that a termed subscription with such upsell charges can not be changed to an evergreen subscription.   
    # 
    # **Note**: The Quantity Upsell feature is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global
    #   Support](https://support.zuora.com).  
    string upsellOriginChargeNumber?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
};

# Order Delta Tcb. This is a metric that reflects the change to the estimated billing on Rate Plan Charge object, or the estimated billing for an Order Line Item as the result of the order
public type OrderDeltaTcb record {
    *OrderDeltaMetric;
    # The sytem generated Id for the Order Line Item. This field can be null if the metric is generated for a Rate Plan Charge.
    string orderLineItemId?;
};

public type CreditMemoFromInvoiceRequest record {
    # Whether the credit memo automatically applies to the invoice upon posting.
    boolean autoApplyToInvoiceUponPosting?;
    # Whether to automatically post the credit memo after it is created. 
    # Setting this field to `true`, you do not need to separately call the [Post credit memo](https://developer.zuora.com/api-references/api/operation/PUT_PostCreditMemo) operation to post the credit memo.
    boolean autoPost?;
    # Comments about the credit memo.
    @constraint:String {maxLength: 255}
    string comment?;
    # The date when the credit memo takes effect.
    string effectiveDate?;
    # Whether the credit memo is excluded from the rule of automatically applying credit memos to invoices.
    boolean excludeFromAutoApplyRules?;
    # The ID of the invoice that the credit memo is created from.
    # * If this field is specified, its value must be the same as the value of the `invoiceId` path parameter. Otherwise, its value overrides the value of the `invoiceId` path parameter. 
    # * If this field is not specified, the value of the `invoiceId` path parameter is used.
    string invoiceId?;
    # Container for items. The maximum number of items is 1,000.
    @constraint:Array {maxLength: 1000}
    CreditMemoItemFromInvoiceItemType[] items?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    string reasonCode?;
    # Whether to automatically calculate taxes in the credit memo.
    boolean taxAutoCalculation?;
    *CreditMemoObjectNSFields;
    *CreditMemoObjectCustomFields;
};

public type POSTCreateOrUpdateEmailTemplateRequestFormat record {
    # The status of the email template. The default value is `true`.
    boolean active = true;
    # The email bcc address.
    string bccEmailAddress?;
    # The email CC address.
    string ccEmailAddress?;
    # Email CC type.
    # * When the base object for the event is associated with `Account`, `ccEmailType` can be any values in the enum list. 
    # * When the base object for the event is not associated with `Account`, `ccEmailType` must be `TenantAdmin`, `RunOwner`, or `SpecificEmail`. 
    "BillToContact"|"SoldToContact"|"SpecificEmails"|"TenantAdmin"|"BillToAndSoldToContacts"|"RunOwner"|"AllContacts"|"InvoiceOwnerBillToContact"|"InvoiceOwnerSoldToContact"|"InvoiceOwnerBillToAndSoldToContacts"|"InvoiceOwnerAllContacts" ccEmailType = "SpecificEmails";
    # The description of the email template.
    @constraint:String {maxLength: 255}
    string description?;
    # The email body. You can add merge fields in the email body using angle brackets or double curly brackets. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Events_and_Notifications/Create_Email_Templates/A_Merge_field_syntax_for_email_templates" target="_blank">Merge field syntax for email templates</a>. 
    # 
    # You can also embed HTML tags if `isHtml` is `true`.
    string emailBody;
    # Container for custom email headers. Each custom email header consists of a header name and a header value.
    record {|string...;|} emailHeaders?;
    # The email subject. You can add merge fields in the email subject using angle brackets or double curly brackets. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Events_and_Notifications/Create_Email_Templates/A_Merge_field_syntax_for_email_templates" target="_blank">Merge field syntax for email templates</a>.
    string emailSubject;
    # The endcode type of the email body.
    "UTF8"|"Shift_JIS"|"ISO_2022_JP"|"EUC_JP"|"X_SJIS_0213" encodingType = "UTF8";
    # If you specify this field, the email template is created based on a standard event. See [Standard Event Categories](https://knowledgecenter.zuora.com/Central_Platform/Notifications/A_Standard_Events/Standard_Event_Category_Code_for_Notification_Histories_API) for all standard event category codes.    
    decimal eventCategory?;
    # The name of the custom event or custom scheduled event. If you specify this field, the email template is created based on the corresponding custom event or custom scheduled event.
    string eventTypeName?;
    # The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default. 
    # 
    # Note that if the `eventTypeName` is a standard event type, you must specify the `com.zuora.notification` namespace; otherwise, you will get an error.
    # 
    # For example, if you want to create an email template on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.         
    string eventTypeNamespace?;
    # If fromEmailType is SpecificEmail, this field is required.
    string fromEmailAddress?;
    # The type of the email.
    "TenantEmail"|"RunOwner"|"SpecificEmail" fromEmailType;
    # The name of the email sender.
    string fromName?;
    # ID of an existing email template. Specify this field if you want to update an existing email template.
    string id?;
    # Indicates whether the style of email body is HTML. The default value is `false`.
    boolean isHtml = false;
    # The name of the email template, a unique name in a tenant.
    @constraint:String {maxLength: 255}
    string name;
    # If `replyToEmailType` is `SpecificEmail`, this field is required.
    string replyToEmailAddress?;
    # Type of the replyTo email.
    "TenantEmail"|"RunOwner"|"SpecificEmail" replyToEmailType?;
    # If toEmailType is SpecificEmail, this field is required.
    string toEmailAddress?;
    # Email receive type.
    # * When the base object for the event is associated with `Account`, `toEmailType` can be any values in the enum list. 
    # * When the base object for the event is not associated with `Account`, `toEmailType` must be `TenantAdmin`, `RunOwner`, or `SpecificEmail`. 
    "BillToContact"|"SoldToContact"|"SpecificEmails"|"TenantAdmin"|"BillToAndSoldToContacts"|"RunOwner"|"AllContacts"|"InvoiceOwnerBillToContact"|"InvoiceOwnerSoldToContact"|"InvoiceOwnerBillToAndSoldToContacts"|"InvoiceOwnerAllContacts" toEmailType;
};

# Represents the order information that will be returned in the GET call.
public type Order record {
    # Category of the order to indicate a product sale or return. Default value is `NewSales`.
    "NewSales"|"Return" category?;
    # The ID of the user who created this order.
    string createdBy?;
    # The time that the order gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # Currency code.
    string currency?;
    # Container for custom fields of an Order object.
    OrderObjectCustomFields customFields?;
    # A description of the order.
    @constraint:String {maxLength: 500}
    string description?;
    # The account number that this order has been created under. This is also the invoice owner of the subscriptions included in this order.
    string existingAccountNumber?;
    # The ID of the invoice schedule associated with the order.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    int invoiceScheduleId?;
    # The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if no additinal contractEffectiveDate is provided.
    string orderDate?;
    # [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services. 
    # 
    # With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models. 
    # 
    # **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.       
    OrderLineItemRetrieveOrder[] orderLineItems?;
    # The order number of the order.
    string orderNumber?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs.
    @constraint:String {maxLength: 255}
    string reasonCode?;
    # Information of scheduled order.
    Order_schedulingOptions schedulingOptions?;
    # Response information of orders.
    PostOrderResponseType scheduledOrderActivationResponse?;
    # The status of the order. If the order contains any `Pending Activation` or `Pending Acceptance` subscription, the order status will be `Pending`; If the order is in draft status, the order status will be `Draft`; otherwise the order status is `Completed`.
    # 
    # The available order statuses are as follow:
    # - `Draft`: The order is in draft status.
    # - `Pending`: The order is in pending status.
    # - `Completed`: The order is in completed status.
    # - `Cancelled`: The draft or scheduled order is cancelled.
    # - `Scheduled`: The order is in scheduled status and it is only valid if the Scheduled Orders feature is enabled.
    # - `Executing`: The scheduled order is executed by a scheduler and it is only valid if the Scheduled Orders feature is enabled.
    # - `Failed`: The scheduled order has failed.
    "Draft"|"Pending"|"Completed"|"Cancelled"|"Scheduled"|"Executing"|"Failed" status?;
    # Represents a processed subscription, including the origin request (order actions) that create this version of subscription and the processing result (order metrics). The reference part in the request will be overridden with the info in the new subscription version.
    Order_subscriptions[] subscriptions?;
    # The ID of the user who updated this order.
    string updatedBy?;
    # The time that the order gets updated in the system(for example, an order description update), in the `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
};

public type NestedPrpcOnExpand record {|
    # The unique identifier of the product rate plan charge.
    string id?;
    # The unique identifier of the user who created the product rate plan charge.
    string createdById?;
    # The date and time when the product rate plan charge was created.
    string createdDate?;
    # The unique identifier of the user who last updated the product rate plan charge.
    string updatedById?;
    # The date and time when the product rate plan charge was last updated.
    string updatedDate?;
    # The accounting code for the charge. Accounting codes group
    # transactions that contain similar accounting attributes.
    @constraint:String {maxLength: 100}
    string accountingCode?;
    # Indicates which type of charge the discount charge applies to.
    "ONETIME"|"RECURRING"|"USAGE"|"ONETIMERECURRING"|"ONETIMEUSAGE"|"RECURRINGUSAGE"|"ONETIMERECURRINGUSAGE"? applyDiscountTo?;
    # Sets the bill cycle day (BCD) for the charge. The BCD determines which
    # day of the month customer is billed. The BCD value in the account can
    # override the BCD in this object.
    @constraint:Int {minValue: 1, maxValue: 31}
    int billCycleDay?;
    # Specifies how to determine the billing day for the
    # charge.               
    "DefaultFromCustomer"|"SpecificDayofMonth"|"SubscriptionStartDay"|"ChargeTriggerDay"|"SpecificDayofWeek"|"TermStartDay"|"TermEndDay" billCycleType?;
    # The billing period for the charge. The start day of the billing period
    # is also called the bill cycle day (BCD).
    "Month"|"Quarter"|"Annual"|"Semi-Annual"|"Specific Months"|"Subscription Term"|"Week"|"Specific Weeks"|"Specific Days" billingPeriod?;
    # The billing period alignment setting for this charge.
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart"|"AlignToTermEnd" billingPeriodAlignment?;
    # The billing timing for this charge.
    "IN_ADVANCE"|"IN_ARREARS" billingTiming?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    "Discount-Fixed Amount"|"Discount-Percentage"|"Flat Fee Pricing"|"Per Unit Pricing"|"Overage Pricing"|"Tiered Pricing"|"Tiered with Overage Pricing"|"Volume Pricing"|"Delivery Pricing"|"MultiAttributePricing"|"PreratedPerUnit"|"PreratedPricing`"|"HighWatermarkVolumePricing"|"HighWatermarkTieredPricing" chargeModel?;
    # Specifies the type of charge.
    "OneTime"|"Recurring"|"Usage" chargeType?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # The way to calculate credit. See [Credit
    # Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option)
    # for more information. 
    "TimeBased"|"ConsumptionBased"|"FullCreditBack" creditOption?;
    # The default quantity. 
    # 
    # This field is applicable only for one-time and recurring charges.
    decimal? defaultQuantity?;
    # The name of the deferred revenue account for this charge.
    # 
    # 
    # This feature is in **Limited Availability**. If you wish to have
    # access to the feature, submit a request at [Zuora Global
    # Support](http://support.zuora.com/). 
    @constraint:String {maxLength: 100}
    string deferredRevenueAccount?;
    # Description of the product rate plan charge.
    string description?;
    # ID of the class the discount belongs to. The discount class defines the order in which discount product rate plan charges are applied.
    # 
    # For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).
    string? discountClassId?;
    # The application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account"? discountLevel?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal? drawdownRate?;
    # The end date condition for this charge.
    "Subscription_End"|"One_Time"|"Fixed_Period"|"Specific_End_Date" endDateCondition?;
    # Indicates whether to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Indicates whether to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled.
    boolean excludeItemBookingFromRevenueAccounting?;
    # Specifies the number of units in the base set of units.
    decimal includedUnits?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # Indicates whether this charge is a prepayment (topup) charge or a
    # drawdown charge. 
    boolean isPrepaid?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # It determines whether the rollover fields are needed.
    boolean isRollover?;
    # **Note**: This field is only applicable to the Discount - Percentage charge model.
    # 
    # This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:
    #   - `True`: This is a stacked discount, which should be calculated by stacking with other discounts.
    #   - `False`: This is not a stacked discount, which should be calculated in sequence with other discounts.
    # 
    # For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).
    boolean isStackedDiscount?;
    # Indicates whether to use the legacy revenue reporting for this charge.
    boolean legacyRevenueReporting?;
    # The list price base for the product rate plan charge.
    # 
    # This field is only applicable for recurring charges.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # The number of months for the list price base of the charge. The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.
    int:Signed32? specificListPriceBase?;
    # The maximum number of units for this charge. This field and the `minQuantity` field can be used to create a range of units allowed in a product rate plan charge.
    decimal maxQuantity?;
    # The minimum number of units for this charge. This field and the `maxQuantity` field can be used to create a range of units allowed in a product rate plan charge.
    decimal minQuantity?;
    # Name of the product rate-plan charge. Not required to be unique.
    string name?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
    # This field is ued when overage smoothing model is `RollingWindow` or `Rollover`.
    int? numberOfPeriod?;
    # Value specifies when to calculate overage charges.
    "EndOfSmoothingPeriod"|"PerBillingPeriod"? overageCalculationOption?;
    # Determines whether to credit the customer with unused units of usage.
    "NoCredit"|"CreditBySpecificRate" overageUnusedUnitsCreditOption?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The type of this charge. It is either a prepayment (topup) charge or a drawdown charge. 
    "topup"|"drawdown"? prepaidOperationType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal? prepaidQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The total amount of units that end customers can use during a validity period when they subscribe to a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    decimal? prepaidTotalQuantity?;
    # Applies an automatic price change when a termed subscription is
    # renewed and the following applies:
    # 
    # 
    # 1. AutomatedPriceChange setting is on
    # 
    # 2. Charge type is not one-time
    # 
    # 3. Charge model is not discount fixed amount
    "NoChange"|"SpecificPercentageValue"|"UseLatestProductCatalogPricing" priceChangeOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `PriceChangeOption` value to `SpecificPercentageValue`.
    # 
    # 1. AutomatedPriceChange setting is on
    # 2. Charge type is not one-time
    # 3. Charge model is not discount fixed amount
    # 
    # Values: a decimal between -100 and 100
    decimal? priceIncreasePercentage?;
    # The natural key of the product rate plan charge.
    string productRatePlanChargeNumber?;
    # Specifies a rating group based on which usage records are rated.
    # 
    # Possible values:
    # 
    # - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.
    # - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    # - `ByUsageRecord`: The rating is based on each usage record.
    # - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    # - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Note:** 
    # - The `ByBillingPeriod` value can be applied for all charge models. 
    # - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
    # - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    # - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
    string? ratingGroup?;
    # Specifies when revenue recognition begins.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate"? revRecTriggerCondition?;
    # The name of the revenue recognition rule governing the revenue schedule.
    string revenueRecognitionRuleName?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int:Signed32 rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    int rolloverPeriods?;
    # The name of the recognized revenue account for this charge.
    #   - Required when the Allow Blank Accounting Code setting is No.
    #   - Optional when the Allow Blank Accounting Code setting is Yes.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccount?;
    # Specifies the smoothing model for an overage smoothing charge model or
    # an tiered with overage model, which is an advanced type of a usage
    # model that avoids spikes in usage charges. If a customer's usage
    # spikes in a single period, then an overage smoothing model eases
    # overage charges by considering usage and multiple periods.
    # 
    # 
    # One of the following values shows which smoothing model will be
    # applied to the charge when `Overage` or `Tiered with Overage` is used:
    # 
    # 
    # - `RollingWindow` considers a number of periods to smooth usage. The
    # rolling window starts and increments forward based on billing
    # frequency. When allowed usage is met, then period resets and a new
    # window begins.
    # 
    # - `Rollover` considers a fixed number of periods before calculating
    # usage. The net balance at the end of a period is unused usage, which
    # is carried over to the next period's balance.
    string? smoothingModel?;
    # When the billing period is set to `Specific` Months then this positive
    # integer reflects the number of months for billing period charges.
    int? specificBillingPeriod?;
    # Specifies whether the charge is taxable; used by Zuora Tax. 
    boolean taxable?;
    # Specifies the tax code for taxation rules; used by Zuora Tax.
    string taxCode?;
    # Specifies how to define taxation for the charge; used by Zuora Tax.
    "TaxExclusive"|"TaxInclusive"? taxMode?;
    # Specifies when to start billing the customer for the charge.
    # 
    # Values: one of the following:
    # - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    # - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
    # - `CustomerAcceptance` is when the customer accepts the services or products for a subscription. 
    # - `SpecificDate` is the date specified.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance"|"SpecificDate" triggerEvent?;
    # Specifies the length of the period during which the charge is active.
    # If this period ends before the subscription ends, the charge ends when
    # this period ends.
    # 
    # If the subscription end date is subsequently changed through a
    # Renewal, or Terms and Conditions amendment, the charge end date will
    # change accordingly up to the original period end.
    int? upToPeriods?;
    # The period type used to define when the charge ends.
    "Billing_Periods"|"Days"|"Weeks"|"Months"|"Years"? upToPeriodsType?;
    # Determines how Zuora processes usage records for per-unit usage
    # charges. 
    string? usageRecordRatingOption?;
    # Determines whether to define a new accounting code for the new
    # discount charge.
    boolean? useDiscountSpecificAccountingCode?;
    # Shows the tenant-level percentage uplift value for an automatic price
    # change to a termed subscription's renewal. You set the tenant uplift
    # value in the web-based UI: **Settings > Billing > Define Default
    # Subscription Settings**.
    boolean useTenantDefaultForPriceChange?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # The period in which the prepayment units are valid to use as defined
    # in a [prepayment
    # charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
    # Specifies which day of the week as the bill cycle day (BCD) for the
    # charge.
    # 
    # 
    # This feature is in **Limited Availability**. If you wish to have
    # access to the feature, submit a request at [Zuora Global
    # Support](http://support.zuora.com/). 
    "Sunday"|"Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"|"Saturday" weeklyBillCycleDay?;
    # Indicates whether the price upsell quantity is stacked.
    boolean priceUpsellQuantityStacked?;
    # The unique identifier of the delivery schedule associated with the
    # product rate plan charge. This field is applicable only when this charge is
    # using Delivery Pricing charge model.
    string deliveryScheduleId?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `133` or higher. Otherwise, an error occurs. 
    # 
    # This field defines the type of commitment. A prepaid charge can be `UNIT` or `CURRENCY`. A minimum commitment(in-arrears) charge can only be `CURRENCY` type. For topup(recurring or one-time) charges, this field indicates what type of funds are created. 
    # * If UNIT, it will create a fund with given prepaidUom.
    # * If CURRENCY, it will create a fund with the currency amount calculated in list price.
    #   
    # For drawdown(usage) charges, this field indicates what type of funds are drawdown from that created from topup charges.
    "UNIT"|"CURRENCY" commitmentType?;
    # Indicates whether the charge is commited.
    boolean isCommitted?;
    # The unique identifier of the product rate plan to which this product rate plan charge belongs.
    string productRatePlanId?;
    # The type of the accounting code for accounts receivable.
    string accountReceivableAccountingCodeId?;
    # The accounting code for recognized revenue, such as Monthly Recurring
    # Charges or Overage Charges. 
    string recognizedRevenueAccountingCodeId?;
    # The type associated with the deferred revenue accounting code, such as
    # Deferred Revenue. 
    string? deferredRevenueAccountingCodeId?;
    # The type associated with the adjustment liability accounting code. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string adjustmentLiabilityAccountingCodeId?;
    # The type associated with the adjustment revenue accounting code. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string adjustmentRevenueAccountingCodeId?;
    # The type associated with the contract asset accounting code. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string contractAssetAccountingCodeId?;
    # The accounting code for contract liability. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string contractLiabilityAccountingCodeId?;
    # The accounting code for contract recognized revenue. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string contractRecognizedRevenueAccountingCodeId?;
    # The accounting code for unbilled receivables. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string? unbilledReceivablesAccountingCodeId?;
    # Associates this product rate plan charge with a specific revenue
    # recognition code.
    string? revRecCode?;
    # Describes the Units of Measure (uom) configured in **Settings >
    # Billing** for the productRatePlanCharges.
    string? uOM?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # Unit of measurement for a [drawdown
    # charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge).
    string drawdownUom?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # Unit of measurement for a [prepayment
    # charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    string? prepaidUom?;
    # EXPANDABLE.
    # The product rate plan that contains this product rate plan charge.
    record {} productRatePlan?;
    # EXPANDABLE.
    # The product rate plan charge tiers contained in this product rate plan charge.
    record {}[] productRatePlanChargeTiers?;
|};

public type PUTCancelPaymentScheduleRequest record {
    # Specifies when the payment schedule will be canceled.
    string cancelDate;
};

public type GETTaxationItemListType record {
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Container for taxation items.
    GETTaxationItemTypewithSuccess[] taxationItems?;
};

public type POSTCreateBillRunRequestType record {
    # Whether to automatically send emails after Auto-Post is complete.
    # 
    # **Note:** To use this field, you must first set the <a href="https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules" target="_blank">Support Bill Run Auto-Post?</a> billing rule to **Yes** through the Zuora UI.
    boolean autoEmail?;
    # Whether to automatically post the bill run after the bill run is created.
    # 
    # **Note:** To use this field, you must first set the <a href="https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Billing_Rules" target="_blank">Support Bill Run Auto-Post?</a> billing rule to **Yes** through the Zuora UI.
    boolean autoPost?;
    # Whether to automatically renew auto-renew subscriptions that are up for renewal.
    boolean autoRenewal?;
    # The batch of accounts for this bill run. 
    # 
    # You can only specify either this field or the `billRunFilters` field.
    # 
    # **Values:** `AllBatches` or an array of `Batch*n*` where *n* is one of numbers 1 - 50, for example, `Batch7`.
    # 
    # **Note**: By default, you have 50 configurable account batches. To increase the limit to 200 batches, you must have the <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Performance_Booster_Elite" target="_blank">Performance Booster Elite</a> package.
    string[] batches?;
    # The day of the bill cycle. This field is only valid if the `batches` field is specified.
    # 
    # **Values:** 
    # - `AllBillCycleDays` or one of numbers 1 - 31 for an ad-hoc bill run
    # - `AllBillCycleDays`, one of numbers 1 - 31, or `AsRunDay` for a scheduled bill run
    string billCycleDay?;
    # The target account or subscriptions for this bill run. You can only specify either this field or the `batches` field.
    BillRunFilterRequestType[] billRunFilters?;
    # The type of the bill run. If you do not specify any value for this field, the default value is `Regular`.
    # 
    # - You can use this field only if the "Catch-Up Bill Run" feature is enabled. 
    # - You must specify this field to create a catch up bill run.
    # 
    # **Values:** 
    # - `Regular`
    # - `CatchUp`
    string billRunType?;
    # The types of the charges to be excluded from the generation of billing documents. You can specify at most two charge types in the array.
    ("OneTime"|"Recurring"|"Usage")[] chargeTypeToExclude?;
    # The invoice date for the bill run.
    # 
    # - When creating an ad-hoc bill run, if you do not specify any value for this field, the default value is the current date.
    # - When creating a scheduled bill run, if you do not specify any value for this field, the invoice date is the value of the `repeatFrom` field. 
    string invoiceDate?;
    # The name of the bill run.
    string name?;
    # Whether to suppress emails for invoices with zero total amount generated in this bill run after the bill run is complete. 
    # 
    # It is best practice to not send emails for invoices with zero amount.
    boolean noEmailForZeroAmountInvoice?;
    # The organization(s) that the bill run is created for. 
    # 
    # For each item in the array, either the `organizationId` or the `organizationName` field is required.
    # 
    # This field is only required when you have already turned on Multi-Org feature.
    GETProductType_organizationLabels[] organizationLabels?;
    BillRunScheduleRequestType schedule?;
    # The target date for this bill run. 
    # 
    # - You must specify this field when creating an ad-hoc bill run.
    # - For scheduled bill runs, if you do not specify any value for this field, the target date is the value of the `repeatFrom` field.
    string targetDate?;
};

public type POSTInvoiceCollectResponseType record {
    # Payment amount applied.
    decimal amountCollected?;
    # Information on one or more credit memos associated with this operation.
    POSTInvoiceCollectCreditMemosType[] creditMemos?;
    # Information on one or more invoices associated with this operation.
    POSTInvoiceCollectInvoicesType[] invoices?;
    # Payment ID.
    string paymentId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type OrderLineItemCommonRetrieveOrder record {
    # Specifies the units to measure usage.
    string UOM?;
    # The accounting code for the Order Line Item.
    string accountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string adjustmentLiabilityAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string adjustmentRevenueAccountingCode?;
    # The actual charged amount per unit for the Order Line Item.
    decimal amountPerUnit?;
    # The target date for the Order Line Item to be picked up by bill run for billing.
    string billTargetDate?;
    # The ID of a contact that belongs to the billing account of the order line item. Use this field to assign an existing account as the bill-to contact of an order line item.
    string billTo?;
    # The snapshot of the ID for an account used as the bill-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `billToSnapshotId` field is exposed while retrieving the order line item details.
    string billToSnapshotId?;
    # The billing rule of the Order Line Item.
    "TriggerWithoutFulfillment"|"TriggerAsFulfillmentOccurs" billingRule?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractAssetAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractLiabilityAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractRecognizedRevenueAccountingCode?;
    # The currency for the order line item. You can specify a currency when creating an order line item through the "Create an order" operation.
    string currency?;
    # Container for custom fields of an Order Line Item object.
    OrderLineItemCustomFields customFields?;
    # The deferred revenue accounting code for the Order Line Item.
    string deferredRevenueAccountingCode?;
    # The description of the Order Line Item.
    string description?;
    # This field shows the total discount amount that is applied to an order line item after the `inlineDiscountType`, `inlineDiscountPerUnit` and `quantity` fields are set.
    # 
    # The inline discount is applied to the list price of an order line item (see the `listPrice` field).
    decimal discount?;
    # The flag to exclude Order Line Item related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The flag to exclude Order Line Item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting?;
    # This field is used in accordance with the `inlineDiscountType` field, in the following manner:
    # * If the `inlineDiscountType` field is set as `Percentage`, this field specifies the discount percentage for each unit of the order line item. For exmaple, if you specify `5` in this field, the discount percentage is 5%.
    # * If the `inlineDiscountType` field is set as `FixedAmount`, this field specifies the discount amount on each unit of the order line item. For exmaple, if you specify `10` in this field, the discount amount on each unit of the order line item is 10.
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    decimal inlineDiscountPerUnit?;
    # This field is used to specify the inline discount type, which can be `Percentage`, `FixedAmount`, or `None`. The default value is `Percentage`.
    # 
    # This field is used together with the `inlineDiscountPerUnit` field to specify inline discounts for order line items. The inline discount is applied to the list price of an order line item. 
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    "Percentage"|"FixedAmount"|"None" inlineDiscountType?;
    # The account ID of the invoice owner of the order line item.
    string invoiceOwnerAccountId?;
    # The account name of the invoice owner of the order line item.
    string invoiceOwnerAccountName?;
    # The account number of the invoice owner of the order line item.
    string invoiceOwnerAccountNumber?;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The category of the Order Line Item, to indicate a product sale or return.
    "Sales"|"Return" itemCategory?;
    # The name of the Order Line Item.
    string itemName?;
    # The state of an Order Line Item. See [State transitions for an order, order line item, and fulfillment](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
    "Executing"|"Booked"|"SentToBilling"|"Complete"|"Cancelled" itemState?;
    # The type of the Order Line Item. 
    "Product"|"Fee"|"Services" itemType?;
    # The extended list price for an order line item, calculated by the formula: listPrice = listPricePerUnit * quantity
    decimal listPrice?;
    # The list price per unit for the Order Line Item.
    decimal listPricePerUnit?;
    # The ID of the original sale order for a return order line item. 
    string originalOrderId?;
    # The ID of the original sale order line item for a return order line item. 
    string originalOrderLineItemId?;
    # The number of the original sale order line item for a return order line item. 
    string originalOrderLineItemNumber?;
    # The number of the original sale order for a return order line item. 
    string originalOrderNumber?;
    # The account ID of the owner of the order line item.
    string ownerAccountId?;
    # The account name of the owner of the order line item.
    string ownerAccountName?;
    # The account number of the owner of the order line item.
    string ownerAccountNumber?;
    # The product code for the Order Line Item.
    string productCode?;
    # Id of a Product Rate Plan Charge. Only one-time charges are supported.
    string productRatePlanChargeId?;
    # Used by customers to specify the Purchase Order Number provided by the buyer.
    string purchaseOrderNumber?;
    # The quantity of units, such as the number of authors in a hosted wiki service.
    decimal quantity?;
    # The quantity that can be returned for an order line item. 
    decimal quantityAvailableForReturn?;
    # The fulfilled quantity for an order line item.
    decimal quantityFulfilled?;
    # The quantity to fulfill for an order line item. 
    decimal quantityPendingFulfillment?;
    # The recognized revenue accounting code for the Order Line Item.
    string recognizedRevenueAccountingCode?;
    # Use this field to relate an order line item to a subscription when you create the order line item.
    # 
    # * To relate an order line item to a new subscription which is yet to create in the same "Create an order" call, use this field in combination with the `subscriptions` > `subscriptionNumber` field in the "Create order" operation. Specify this field to the same value as that of the 'subscriptions' > `subscriptionNumber` field when you make the "Create order" call.
    # * To relate an order line item to an existing subscription, specify this field to the subscription number of the existing subscription.
    string relatedSubscriptionNumber?;
    # The flag to show whether fulfillment is needed or not. It's derived from billing rule of the Order Line Item.
    boolean requiresFulfillment?;
    # The Revenue Recognition rule for the Order Line Item.
    string revenueRecognitionRule?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" revenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" revenueAmortizationMethod?;
    # The ID of the sequence set associated with the OrderLineItem.
    string sequenceSetId?;
    # The ID of a contact that belongs to the owner acount or billing account of the order line item. Use this field to assign an existing account as the sold-to contact of an order line item.
    string soldTo?;
    # The snapshot of the ID for an account used as the sold-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `soldToSnapshotId` field is exposed while retrieving the order line item details.
    string soldToSnapshotId?;
    # The tax code for the Order Line Item.
    string taxCode?;
    # The tax mode for the Order Line Item.
    "TaxInclusive"|"TaxExclusive" taxMode?;
    # The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the `transactionStartDate` field.
    string transactionEndDate?;
    # The date a transaction starts. The default value of this field is the order date.
    string transactionStartDate?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string unbilledReceivablesAccountingCode?;
};

public type BulkCreditMemosResponseType record {
    # The container for a list of credit memos.
    @constraint:Array {maxLength: 50}
    GETCreditMemoType[] memos?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
public type OrderActionRatePlanUsageTieredPricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    # Specifies how Zuora groups usage records when rating usage. See [Usage Rating by Group](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Usage/Usage_Rating_by_Group) for more information.
    #   * ByBillingPeriod (default): The rating is based on all the usages in a billing period.
    #   * ByUsageStartDate: The rating is based on all the usages on the same usage start date.
    #   * ByUsageRecord: The rating is based on each usage record.
    #   * ByUsageUpload: The rating is based on all the usages in a uploaded usage file (.xls or .csv). If you import a mass usage in a single upload, which contains multiple usage files in .xls or .csv format, usage records are grouped for each usage file.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload" ratingGroup?;
    # List of cumulative pricing tiers in the charge.
    OrderActionRatePlanChargeTier[] tiers?;
};

public type BillToContactPostOrder record {
    # First line of the contact's address. This is often a street address or a business name.
    @constraint:String {maxLength: 255}
    string address1?;
    # Second line of the contact's address.
    @constraint:String {maxLength: 255}
    string address2?;
    # City of the contact's address.
    @constraint:String {maxLength: 40}
    string city?;
    # A description for the contact.
    @constraint:String {maxLength: 100}
    string contactDescription?;
    # Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the bill-to contact to calculate tax.
    @constraint:String {maxLength: 64}
    string country?;
    # County of the contact's address.
    @constraint:String {maxLength: 32}
    string county?;
    # Fax number of the contact.
    @constraint:String {maxLength: 40}
    string fax?;
    # First name of the contact.
    @constraint:String {maxLength: 100}
    string firstName;
    # Home phone number of the contact.
    @constraint:String {maxLength: 40}
    string homePhone?;
    # Last name of the contact.
    @constraint:String {maxLength: 100}
    string lastName;
    # Mobile phone number of the contact.
    @constraint:String {maxLength: 40}
    string mobilePhone?;
    # Nickname of the contact.
    @constraint:String {maxLength: 100}
    string nickname?;
    # Additional phone number of the contact. Use the `otherPhoneType` field to specify the type of phone number.
    @constraint:String {maxLength: 40}
    string otherPhone?;
    # Specifies the type of phone number in the `otherPhone` field.
    "Work"|"Mobile"|"Home"|"Other" otherPhoneType?;
    # Personal email address of the contact.
    @constraint:String {maxLength: 80}
    string personalEmail?;
    # ZIP code or other postal code of the contact's address.
    @constraint:String {maxLength: 20}
    string postalCode?;
    # State or province of the contact's address.
    @constraint:String {maxLength: 40}
    string state?;
    # Region defined in your taxation rules. Only applicable if you use Zuora Tax.
    @constraint:String {maxLength: 32}
    string taxRegion?;
    # Business email address of the contact.
    @constraint:String {maxLength: 80}
    string workEmail?;
    # Business phone number of the contact.
    @constraint:String {maxLength: 40}
    string workPhone?;
    *ContactObjectCustomFields;
};

# Container for the write-off information to create credit memo.
public type PostRefundwithAutoUnapplyType_writeOffOptions record {
    # Comments about the credit memo which is created as a result of the write off.
    @constraint:String {maxLength: 100}
    string comment?;
    # The date when the credit memo takes effect.
    string memoDate?;
    # A code identifying the reason for the credit memo.
    string reasonCode?;
};

public type ProxyGetProductRatePlanCharge record {
    # The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.
    @constraint:String {maxLength: 100}
    string AccountingCode?;
    # Specifies the type of charges that you want a specific discount to apply to. All field values are case sensitive and in all-caps.
    "ONETIME (1)"|"RECURRING (2)"|"USAGE (4)"|"ONETIMERECURRING (3)"|"ONETIMEUSAGE (5)"|"RECURRINGUSAGE (6)"|"ONETIMERECURRINGUSAGE (7)" ApplyDiscountTo?;
    # Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed. The BCD value in the account can override the BCD in this object.
    # 
    # **Character limit**: 2
    # 
    # **Values**: a valid BCD integer, 1 - 31
    int:Signed32 BillCycleDay?;
    # Specifies how to determine the billing day for the charge.               
    "DefaultFromCustomer"|"SpecificDayofMonth"|"SubscriptionStartDay"|"ChargeTriggerDay"|"SpecificDayofWeek"|"TermStartDay"|"TermEndDay" BillCycleType?;
    # The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).
    "Month"|"Quarter"|"Annual"|"Semi-Annual"|"Specific Months"|"Subscription Term"|"Week"|"Specific Weeks"|"Specific Days" BillingPeriod?;
    # Aligns charges within the same subscription if multiple charges begin on different dates.
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart"|"AlignToTermEnd" BillingPeriodAlignment?;
    # The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    "In Advance"|"In Arrears" BillingTiming?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `141` or higher. Otherwise, an error occurs.
    # 
    # This field defines what type of charge it is in Advanced Consumption Billing:
    # * Standard: Normal charge with no Prepayment or Commitment or Drawdown.
    # * Prepayment: For recurring charges. Unit or currency based prepaid charge.
    # * CommitmentTrueUp: For recurring charges. Currency based minimum commitment charge.
    # * Drawdown: For usage charges. Drawdown from prepaid funds.
    # * DrawdownAndCreditCommitment: For usage charges. Drawdown from prepaid funds and then credit to minimum commitment funds.
    # * CreditCommitment: For usage charges. Credit to minimum commitment funds.
    "Standard"|"Prepayment"|"CommitmentTrueUp"|"Drawdown"|"CreditCommitment"|"DrawdownAndCreditCommitment" ChargeFunction?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `133` or higher. Otherwise, an error occurs. 
    # 
    # This field defines the type of commitment. A prepaid charge can be `UNIT` or `CURRENCY`. A minimum commitment(in-arrears) charge can only be `CURRENCY` type. For topup(recurring or one-time) charges, this field indicates what type of funds are created. 
    # * If UNIT, it will create a fund with given prepaidUom.
    # * If CURRENCY, it will create a fund with the currency amount calculated in list price.
    #   
    # For drawdown(usage) charges, this field indicates what type of funds are drawdown from that created from topup charges.
    "UNIT"|"CURRENCY" CommitmentType?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    "Discount-Fixed Amount"|"Discount-Percentage"|"Flat Fee Pricing"|"Per Unit Pricing"|"Overage Pricing"|"Tiered Pricing"|"Tiered with Overage Pricing"|"Volume Pricing"|"Delivery Pricing"|"MultiAttributePricing"|"PreratedPerUnit"|"PreratedPricing`"|"HighWatermarkVolumePricing"|"HighWatermarkTieredPricing" ChargeModel?;
    # Specifies the type of charge.
    "OneTime"|"Recurring"|"Usage" ChargeType?;
    # The automatically generated ID of the Zuora user who created the `ProductRatePlanCharge` object.
    @constraint:String {maxLength: 32}
    string CreatedById?;
    # The date when the `ProductRatePlanCharge` object was created.
    @constraint:String {maxLength: 29}
    string CreatedDate?;
    # The default quantity of units, such as the number of authors in a hosted wiki service. This field is required if you use a per-unit pricing model.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a valid quantity value.
    # 
    # **Note**: When `ChargeModel` is `Tiered Pricing` or `Volume Pricing`, if this field is not specified, the value will default to `0`.
    decimal DefaultQuantity?;
    # The name of the deferred revenue account for this charge.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    @constraint:String {maxLength: 100}
    string DeferredRevenueAccount?;
    # A description of the charge.
    @constraint:String {maxLength: 500}
    string Description?;
    # Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account.
    "rateplan"|"subscription"|"account" DiscountLevel?;
    # Defines when the charge ends after the charge trigger date.
    # 
    # **Values**: 
    #   - `SubscriptionEnd`: The charge ends on the subscription end date after a specified period based on the trigger date of the charge. 
    #   - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields. 
    # 
    #   **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
    "SubscriptionEnd"|"FixedPeriod" EndDateCondition?;
    # The flag to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Notes**: 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `115` or later. Otherwise, an error occurs.
    #   - This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean ExcludeItemBillingFromRevenueAccounting?;
    # The flag to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Notes**: 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `115` or later. Otherwise, an error occurs.
    #   - This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean ExcludeItemBookingFromRevenueAccounting?;
    # Object identifier.
    string Id?;
    # Specifies the number of units in the base set of units.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a positive decimal value
    decimal IncludedUnits?;
    # 
    boolean LegacyRevenueReporting?;
    # The list price base for the product rate plan charge.
    "Per Billing Period"|"Per Month"|"Per Week"|"Per Year"|"Per Specific Months" ListPriceBase?;
    # Specifies the maximum number of units for this charge. Use this field and the `MinQuantity` field to create a range of units allowed in a product rate plan charge.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a positive decimal value
    decimal MaxQuantity?;
    # Specifies the minimum number of units for this charge. Use this field and the `MaxQuantity` field to create a range of units allowed in a product rate plan charge.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a positive decimal value
    decimal MinQuantity?;
    # The name of the product rate plan charge.
    @constraint:String {maxLength: 100}
    string Name?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model. The valid value is a positive whole number.
    int NumberOfPeriod?;
    # Determines when to calculate overage charges. If the value of the SmoothingMode field is not specified, the value of this field is ignored.
    # 
    # **Values**: 
    #   - `EndOfSmoothingPeriod`: This option is used by default. The overage is charged at the end of the smoothing period.
    #   - `PerBillingPeriod`: The overage is charged on-demand rather than waiting until the end of the smoothing period.
    "EndOfSmoothingPeriod"|"PerBillingPeriod"? OverageCalculationOption?;
    # Determines whether to credit the customer with unused units of usage.
    "NoCredit"|"CreditBySpecificRate"? OverageUnusedUnitsCreditOption?;
    # Applies an automatic price change when a termed subscription is renewed.
    "NoChange"|"SpecificPercentageValue"|"UseLatestProductCatalogPricing"? PriceChangeOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the value to `SpecificPercentageValue`.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a decimal value between -100 and 100
    decimal? PriceIncreasePercentage?;
    # The ID of the product rate plan associated with this product rate plan charge.
    @constraint:String {maxLength: 32}
    string ProductRatePlanId?;
    # A rating group based on which usage records are rated. Only applicable to Usage charges.
    # 
    # Possible values:
    #   - `ByBillingPeriod`: The rating is based on all the usages in a billing period.
    #   - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    #   - `ByUsageRecord`: The rating is based on each usage record.
    #   - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    #   - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # For more information, see [Usage rating by group](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Usage/Usage_Rating_by_Group).
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload"|"ByGroupId"? RatingGroup?;
    # The name of the recognized revenue account for this charge.
    #   - Required when the Allow Blank Accounting Code setting is No.
    #   - Optional when the Allow Blank Accounting Code setting is Yes.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    @constraint:String {maxLength: 100}
    string RecognizedRevenueAccount?;
    # Associates this product rate plan charge with a specific revenue recognition code.
    string? RevRecCode?;
    # Specifies when revenue recognition begins.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate"? RevRecTriggerCondition?;
    # Determines when to recognize the revenue for this charge.
    "Recognize upon invoicing"|"Recognize daily over time" RevenueRecognitionRuleName?;
    # Specifies the smoothing model for an overage smoothing charge model.
    "RollingWindow"|"Rollover"? SmoothingModel?;
    # Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`.
    # The valid value is a positive integer.
    int? SpecificBillingPeriod?;
    # The number of months for the list price base of the charge. The value of this field is `null` if you do not set the value of the `ListPriceBase` field to `Per Specific Months`.
    # 
    # **Notes**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `129` or later. Otherwise, an error occurs.
    #   - The value of this field is `null` if you do not set the value of the `ListPriceBase` field to `Per Specific Months`.
    int? SpecificListPriceBase?;
    # Specifies the tax code for taxation rules. Required when the Taxable field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.
    @constraint:String {maxLength: 64}
    string TaxCode?;
    # Determines how to define taxation for the charge. Required when the Taxable field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.
    "TaxExclusive"|"TaxInclusive"? TaxMode?;
    # Determines whether the charge is taxable. When set to `True`, the TaxMode and TaxCode fields are required when creating or updating th ProductRatePlanCharge object.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `True`, `False`
    # 
    # **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.
    boolean Taxable?;
    # Specifies when to start billing the customer for the charge.
    # 
    # **Values**:
    #   - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    #   - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
    #   - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance" TriggerEvent?;
    # Specifies the units to measure usage. 
    # 
    # **Note**: You must specify this field when creating the following charge models:
    #   - Per Unit Pricing
    #   - Volume Pricin
    #   - Overage Pricing
    #   - Tiered Pricing
    #   - Tiered with Overage Pricing
    string? UOM?;
    # Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
    # 
    # **Character limit**: 5
    # 
    # **Values**: a whole number between 0 and 65535, exclusive
    # 
    # **Notes**:
    #   - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`. 
    #   - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
    int? UpToPeriods?;
    # The period type used to define when the charge ends.
    # 
    # **Notes**: 
    #  - You must use this field together with the `UpToPeriods` field to specify the time period.
    #  - This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`. 
    "Billing Periods"|"Days"|"Weeks"|"Months"|"Years"? UpToPeriodsType?;
    # The ID of the last user to update the object.
    @constraint:String {maxLength: 32}
    string UpdatedById?;
    # The date when the object was last updated.
    @constraint:String {maxLength: 29}
    string UpdatedDate?;
    # Determines whether to define a new accounting code for the new discount charge.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `True`, `False`
    boolean? UseDiscountSpecificAccountingCode?;
    # Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. 
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    boolean UseTenantDefaultForPriceChange?;
    # Specifies which day of the week as the bill cycle day (BCD) for the charge.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    "Sunday"|"Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"|"Saturday" WeeklyBillCycleDay?;
    # Indicates whether the charge segment is allocation eligible in revenue recognition. The default value is `False`.
    # 
    # **Values**: `True`, `False`
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.
    boolean IsAllocationEligible?;
    # Specifies how to perform the accounting during revenue recognition. The default value is `False`.
    # 
    # **Values**: `True`, `False`
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.   
    boolean IsUnbilled?;
    # This field is used to maintain the product category for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.
    string ProductCategory?;
    # This field is used to maintain the product class for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled. 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.   
    string ProductClass?;
    # This field is used to maintain the product family for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.
    string ProductFamily?;
    # This field is used to maintain the product line for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled. 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.           
    string ProductLine?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" RevenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" RevenueAmortizationMethod?;
    # Allow the discount duration to be aligned with the billing period partially.
    # 
    # **Note**: You must enable the [Enhanced Discount](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    boolean ApplyToBillingPeriodPartially?;
    # The price lookup formula defined for the product rate plan charge, which is used to identify
    # the correct and relevant charge definition based on the context.
    # 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Attribute-based_pricing/Price_lookup_in_Attribute-based_Pricing"  target="_blank">Price lookup in Attribute-based Pricing</a>.
    # 
    # 
    # **Notes**: 
    #   - This field is available only if the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Attribute-based_pricing" target="_blank">Attribute-based Pricing</a> feature is enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 138 or higher.
    string Formula?;
    *ProductRatePlanChargeObjectNSFields;
    *ProductRatePlanChargeObjectCustomFields;
};

public type PaymentDebitMemoApplicationItemUnapplyRequestType record {
    # The amount of the payment that is unapplied from the specific debit mem or taxation item.
    decimal amount;
    # The ID of the specific debit memo item.
    string debitMemoItemId?;
    # The ID of the specific taxation item.
    string taxItemId?;
};

public type GETPaymentRunDataElementResponse record {
    # The customer account ID specified in the `data` field when creating the payment run.
    string accountId?;
    # The customer account number specified in the `data` field when creating the payment run.
    string accountNumber?;
    # The amount specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
    decimal amount?;
    # The amount that is collected.
    decimal amountCollected?;
    # The amount to be collected.
    decimal amountToCollect?;
    # The comment specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
    string comment?;
    # This field is only available if support for standalone payments is enabled.
    # 
    # The currency of the standalone payment. The currency of the standalone payment can be different from the payment currency defined in the customer account settings.
    string currency?;
    # The billing document ID specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
    string documentId?;
    # The billing document number specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
    string documentNumber?;
    # The billing document type specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
    "Invoice"|"DebitMemo" documentType?;
    # The error code of the response.
    string errorCode?;
    # The detailed information of the error response.
    string errorMessage?;
    # The payment gateway ID specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
    string paymentGatewayId?;
    # The payment method ID specified in the `data` field when creating the payment run. `null` is returned if it was not specified.
    string paymentMethodId?;
    # Indicates whether the data is processed successfully or not.
    "Processed"|"Error" result?;
    # This field is only available if the support for standalone payment is enabled.
    # 
    # The value `true` indicates this is a standalone payment that is created and processed in Zuora through Zuora gateway integration but will be settled outside of Zuora. No settlement data will be created. The standalone payment cannot be applied, unapplied, or transferred.
    boolean standalone?;
    # Container for transactions that apply to the current request. Each element contains an array of the settlement/payment applied to the record.
    GETPaymentRunDataTransactionElementResponse[] transactions?;
    *PaymentObjectCustomFields;
};

public type CreditMemoUnapplyInvoiceRequestType record {
    # The credit memo amount to be unapplied from the invoice.
    decimal amount;
    # The unique ID of the invoice that the credit memo is unapplied from.
    string invoiceId;
    # Container for items. The maximum number of items is 1,000.
    CreditMemoUnapplyInvoiceItemRequestType[] items?;
};

public type UpdateEInvoicingServiceProviderRequest record {
    # The identifier of the company used to create a sender system ID, which serves to identify the system where the transactions are sent.
    string companyIdentifier?;
    # The name of the e-invoicing service provider.
    @constraint:String {maxLength: 100}
    string name?;
    # Whether the e-invoicing service provider's configuration is intended for testing. 
    # 
    # - If you set this field to `true`, requests are directed to the testing integration endpoints.
    # - If you set this field to `false`, requests are directed to the production integration endpoints.
    boolean test?;
    # The API key is used to authenticate the e-invoicing service provider's requests.
    string apiKey?;
    # The secret key is used to authenticate the e-invoicing service provider's requests.
    string secretKey?;
    # The client certificate is used to authenticate the e-invoicing service provider's requests, which should be in base64 encoded format.
    string clientCertificate?;
    # The client certificate type is used to specify the type of the client certificate. 
    string clientCertificateType?;
    # The client certificate password is the password to protect the client certificate.
    string clientCertificatePassword?;
};

# Container for tax exempt information, used to establish the tax exempt status of a customer account.
public type POSTAccountType_taxInfo record {
    # EU Value Added Tax ID. 
    # 
    # **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
    string VATId?;
    # Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.
    # 
    # **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). 
    string companyCode?;
    # ID of the customer tax exemption certificate. Requires Zuora Tax.
    string exemptCertificateId?;
    # Type of tax exemption certificate that the customer holds. Requires Zuora Tax.
    string exemptCertificateType?;
    # Description of the tax exemption certificate that the customer holds. Requires Zuora Tax.
    string exemptDescription?;
    # Date when the customer tax exemption starts. Requires Zuora Tax.
    # 
    # Format: `yyyy-mm-dd`. Defaults to the current date.
    string exemptEffectiveDate?;
    # A unique entity use code to apply exemptions in Avalara AvaTax.
    # 
    # This account-level field is required only when you choose Avalara as your tax engine. See [Exempt Transactions](https://developer.avalara.com/avatax/handling-tax-exempt-customers/)for more details.
    @constraint:String {maxLength: 64}
    string exemptEntityUseCode?;
    # Date when the customer tax exemption expires. Requires Zuora Tax.
    # 
    # Format: `yyyy-mm-dd`. Defaults to the current date.
    string exemptExpirationDate?;
    # Jurisdiction in which the customer tax exemption certificate was issued.
    string exemptIssuingJurisdiction?;
    # Status of the account tax exemption. Requires Zuora Tax.
    # 
    # Required if you use Zuora Tax. This field is unavailable if Zuora Tax is not used.
    # 
    # Values: `Yes`, `No`(default), `pendingVerification`. Note that the value will be set to `No` if no input.
    string exemptStatus?;
};

# Information about the new product rate plan to add. 
public type ChangePlanRatePlanOverride record {
    # List of charges associated with the rate plan.
    ChangePlanChargeOverride[] chargeOverrides?;
    # Specifies whether all features in the rate plan will be cleared.
    boolean clearingExistingFeatures?;
    # Container for custom fields of the Rate Plan or Subscription Offer object. The custom fields of the Rate Plan object are used when rate plans are subscribed, and the custom fields of the Subscription Offer object are used when product offers are subscribed.
    OrdersRatePlanObjectCustomFields customFields?;
    # Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string externallyManagedPlanId?;
    # Internal identifier of the product rate plan that the rate plan is based on.
    string productRatePlanId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # List of features associated with the rate plan.
    # The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows:
    # * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared.
    # * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.
    RatePlanFeatureOverride[] subscriptionProductFeatures?;
    # Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the rate plan. Then when you update the product, you can use the same unique identifier to specify which rate plan to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
};

# Container for the data access control field.
public type DataAccessControlField record {|
    string...;
|};

# Container for custom fields.
public type CustomFields record {
};

# Container for custom fields of an Accounting Period object.
public type AccountingPeriodObjectCustomFields record {
};

public type TokenResponse record {
    # The generated token.
    string access_token?;
    # The number of seconds until the token expires.
    decimal expires_in?;
    # A globally unique identifier for the token.
    string jti?;
    # A space-delimited list of scopes that the token can be used to access.
    string scope?;
    # The type of token that was generated, i.e., `bearer`.
    string token_type?;
};

# Container for the finance information related to the taxation item.
public type GETDMTaxItemTypeNew_financeInformation record {
    # The accounting code for the sales taxes payable.
    string salesTaxPayableAccountingCode?;
    # The type of the accounting code for the sales taxes payable.
    string salesTaxPayableAccountingCodeType?;
};

public type SignUpRequest record {
    # The information of the account that you are to create through the "Sign up" operation.
    AccountData accountData?;
    # Specify the name of the field that holds external account id
    string accountIdentifierField?;
    # Container for custom fields.
    CustomFields customFields?;
    # Invoice or Payment.
    Options options?;
    PaymentData paymentData?;
    SubscriptionData subscriptionData?;
};

public type POSTJournalRunTransactionType record {
    # Transaction type. Invoice Adjustment is deprecated on Production. Zuora recommends that you use the Invoice Item Adjustment instead.
    # 
    # If you enable the Invoice Settlement feature, Debit Memo Item, Credit Memo Item, and Credit Memo Application Item are available, Payment and Refund will be replaced by Payment Application and Refund Application. 
    # 
    # If you enable both the Invoice Settlement feature and the Invoice Item Settlement feature, Payment and Refund will be replaced by Payment Application Item and Refund Application Item. 
    "Invoice Item"|"Taxation Item"|"Invoice Item Adjustment (Invoice)"|"Invoice Item Adjustment (Tax)"|"Invoice Adjustment"|"Electronic Payment"|"External Payment"|"Electronic Refund"|"External Refund"|"Electronic Credit Balance Payment"|"External Credit Balance Payment"|"Electronic Credit Balance Refund"|"External Credit Balance Refund"|"Credit Balance Adjustment (Applied from Credit Balance)"|"Credit Balance Adjustment (Transferred to Credit Balance)"|"Revenue Event Item"|"Debit Memo Item (Charge)"|"Debit Memo Item (Tax)"|"Credit Memo Item (Charge)"|"Credit Memo Item (Tax)"|"Credit Memo Application Item"|"Electronic Payment Application"|"External Payment Application"|"Electronic Refund Application"|"External Refund Application"|"Electronic Payment Application Item"|"External Payment Application Item"|"Electronic Refund Application Item"|"External Refund Application Item" 'type;
};

# Request of processing custom object records in batch.
public type CustomObjectRecordBatchRequest record {
    # The batch action on custom object records
    CustomObjectRecordBatchAction action;
};

public type ExpandedProduct record {|
    # The unique identifier of the product.
    string id?;
    # The unique identifier of the user who created the product.
    string createdById?;
    # The date and time when the product was created.
    string createdDate?;
    # The unique identifier of the user who last updated the product.
    string updatedById?;
    # The date and time when the product was last updated.
    string updatedDate?;
    # Controls whether to allow your users to add or remove features while creating or amending a subscription.
    boolean allowFeatureChanges?;
    # A description of the product. 
    string description?;
    # The name of the product. This information is displayed in the product
    # catalog pages in the web-based UI.
    string name?;
    # The date when the product expires and can't be subscribed to anymore,
    # in the `yyyy-mm-dd` format.
    string effectiveEndDate?;
    # The date when the product becomes available and can be subscribed to, in the `yyyy-mm-dd` format.
    string effectiveStartDate?;
    # The unique SKU for the product.
    string sKU?;
    # The product number of the product.
    string productNumber?;
    # Category of the product. Used by Zuora Quotes Guided Product Selector.
    "Base Products"|"Add On Services"|"Miscellaneous Products" category?;
    NestedProductRatePlanOnExpand[] productRatePlans?;
|};

# The financial information of the credit memo items generated to write off the invoice balance. 
# 
# **Note:** 
#   - All the credit memo items that are used to write off the invoice will be applied with the same financial information.
#   - Credit memo items generated from the unconsumed services of the canceled subscription will not be applied with the finance information specified here.
public type ProcessingOptionsOrdersWithDelayedCapturePayment_writeOffBehavior record {
    # Container for the finance information related to the credit memo items that are created for invoice write-off.
    ProcessingOptionsOrdersWithDelayedCapturePayment_writeOffBehavior_financeInformation financeInformation?;
};

# Container for pricing information associated with the product rate plan charge.
public type ProxyCreateOrModifyProductRatePlanChargeTierData record {
    # Array of product rate plan charge tiers.
    # 
    # You should specify all relevant fields of all tiers, including pricing information for each currency.
    # 
    # For each currency, ensure that the tiers appear in ascending order of `StartingUnit`.
    # 
    # For example:
    # 
    # ```
    # [
    #   {
    #     "StartingUnit": "1",
    #     "EndingUnit": "150",
    #     "Currency": "USD",
    #     "Price": 1.95,
    #     "PriceFormat": "Per Unit"
    #   },
    #   {
    #     "StartingUnit": "151",
    #     "EndingUnit": "300",
    #     "Currency": "USD",
    #     "Price": 1.45,
    #     "PriceFormat": "Per Unit"
    #   },
    #   {
    #     "StartingUnit": "1",
    #     "EndingUnit": "150",
    #     "Currency": "EUR",
    #     "Price": 1.75,
    #     "PriceFormat": "Per Unit"
    #   },
    #   {
    #     "StartingUnit": "151",
    #     "EndingUnit": "300",
    #     "Currency": "EUR",
    #     "Price": 1.30,
    #     "PriceFormat": "Per Unit"
    #   }
    # ]
    # ```
    ProxyCreateOrModifyProductRatePlanChargeTierData_ProductRatePlanChargeTier[] ProductRatePlanChargeTier?;
};

# Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
public type UsageFlatFeePricingOverride record {
    *PriceChangeParams;
    # Price of the charge.
    decimal listPrice?;
    # The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.
    decimal originalListPrice?;
};

public type InvoiceItem record {
    # The accounting code associated with the invoice item.
    string accountingCode?;
    # The accounting code for adjustment liability. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string adjustmentLiabilityAccountingCode?;
    # The accounting code for adjustment revenue. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string adjustmentRevenueAccountingCode?;
    # The unique ID of the invoice item that the discount charge is applied to.
    string appliedToItemId?;
    # The amount of the invoice item that is available to credit.        
    decimal availableToCreditAmount?;
    # The balance of the invoice item.
    # 
    # **Note**: This field is only available if you have the Invoice Settlement feature enabled.
    string balance?;
    # The booking reference of the invoice item.
    string bookingReference?;
    # The amount of the charge. 
    # 
    # This amount does not include taxes regardless if the charge's tax mode is inclusive or exclusive.
    string chargeAmount?;
    # The date when the invoice item is charged, in `yyyy-mm-dd hh:mm:ss` format.
    string chargeDate?;
    # The description of the charge.
    string chargeDescription?;
    # The unique ID of the charge.
    string chargeId?;
    # The name of the charge.
    string chargeName?;
    # The type of the charge. 
    "OneTime"|"Recurring"|"Usage" chargeType?;
    # The accounting code for contract asset. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractAssetAccountingCode?;
    # The accounting code for contract liability. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractLiabilityAccountingCode?;
    # The accounting code for contract recognized revenue. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractRecognizedRevenueAccountingCode?;
    # The deferred revenue accounting code associated with the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string deferredRevenueAccountingCode?;
    # The description of the invoice item.
    string description?;
    # The flag to exclude the invoice item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The reference ID of the fulfillment associated with the invoice item.
    string fulfillmentId?;
    # Item ID.
    string id?;
    # The ID of the invoice schedule item by which Invoice Schedule Item the invoice item is generated by when the Invoice Schedule Item is executed.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleId?;
    # The ID of the invoice schedule item associated with the invoice item.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleItemId?;
    # The type of the invoice item.
    string itemType?;
    # The number of deliveries dedicated to the Delivery Pricing charges.
    # **Note**: This field is available only if you have the Delivery Pricing feature enabled.
    decimal numberOfDeliveries?;
    # The reference ID of the oder line item associated with the invoice item.
    string orderLineItemId?;
    # The kind of the charge for the invoice item. 
    "Charge"|"Discount"|"Prepayment"|"Tax"|"Rounding" processingType?;
    # Name of the product associated with this item.
    string productName?;
    # The ID of the product rate plan charge that the invoice item is created from.
    string productRatePlanChargeId?;
    # The purchase order number associated with the invoice item.
    string purchaseOrderNumber?;
    # The quantity of this item, in the configured unit of measure for the charge.
    string quantity?;
    # The recognized revenue accounting code associated with the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string recognizedRevenueAccountingCode?;
    # The revenue recognition code.
    string revRecCode?;
    # The date when revenue recognition is triggered.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate" revRecTriggerCondition?;
    # The revenue recognition rule of the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string revenueRecognitionRuleName?;
    # The end date of the service period for this item, i.e., the last day of the service period, as _yyyy-mm-dd_.
    string serviceEndDate?;
    # The start date of the service period for this item, as _yyyy-mm-dd_. For a one-time fee item, the date of the charge.
    string serviceStartDate?;
    # The SKU of the invoice item.
    string sku?;
    # The ID of the sold-to contact associated with the invoice item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string soldToContactId?;
    # The ID of the sold-to contact snapshot associated with the invoice item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string soldToContactSnapshotId?;
    # The type of the source item.
    "SubscriptionComponent"|"Rounding"|"ProductRatePlanCharge"|"None"|"OrderLineItem" sourceItemType?;
    # The ID of the subscription for this item.
    string subscriptionId?;
    # The name of the subscription for this item.
    string subscriptionName?;
    # Tax applied to the charge.
    string taxAmount?;
    # The tax code of the invoice item.
    # **Note** Only when taxation feature is enabled, this field can be presented.
    string taxCode?;
    # The tax mode of the invoice item.
    # **Note** Only when taxation feature is enabled, this field can be presented.
    string taxMode?;
    # Container for the taxation items of the invoice item. 
    InvoiceItem_taxationItems taxationItems?;
    # The accounting code for unbilled receivables. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string unbilledReceivablesAccountingCode?;
    # Unit used to measure consumption.
    string unitOfMeasure?;
    # The per-unit price of the invoice item.
    decimal unitPrice?;
    *InvoiceItemObjectNSFields;
    *InvoiceItemObjectCustomFields;
};

public type PUTPublicNotificationDefinitionRequest record {
    # The status of the notification definition. The default value is `true`.
    boolean active?;
    # The account on which the histories of this notification will be displayed. The associated account does not enforce where the merge fields come from.
    # Available values are as follows:
    # * `Account.Id`: ID of the primary customer account related to the notification. It is also the default value.
    # * `ParentAccount.Id`: this option is available only if you have <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy" target="_blank">Customer Hierarchy</a> enabled for your tenant.
    # * `SubscriptionOwnerAccount.Id`: this option is available if the base object of the notification is Order Action.
    # 
    # **Note:** before specifying this field, we recommend that you use [Data Source](https://knowledgecenter.zuora.com/Billing/Reporting/D_Data_Sources_and_Exports/C_Data_Source_Reference) to check the available types of accounts for the current notification.  
    string associatedAccount?;
    PUTPublicNotificationDefinitionCalloutCommon|PUTPublicNotificationDefinitionCalloutBasicAuthentication|PUTPublicNotificationDefinitionCalloutOauth2Authentication callout?;
    # The status of the callout action. The default value is `false`.
    boolean calloutActive?;
    # The profile that notification definition belongs to. If you want to
    # update the notification to a system notification, you should pass
    # 'SystemNotification'. '
    string communicationProfileId?;
    # The description of the notification definition.
    @constraint:String {maxLength: 255}
    string description?;
    # The status of the email action. The default value is `false`.
    boolean emailActive?;
    # The ID of the email template. If emailActive is updated from
    # false to true, an email template is required, and the EventType of
    # the email template MUST be the same as the EventType of the notification definition.
    string emailTemplateId?;
    # 
    PUTPublicNotificationDefinitionRequest_filterRule filterRule?;
    # The parameter values used to configure the filter rule.
    FilterRuleParameterValues filterRuleParams?;
    # The name of the notification definition, which is unique in the profile.
    @constraint:String {maxLength: 255}
    string name?;
};

# Information about an order action of type `RemoveProduct`.
public type RemoveProduct record {
    # An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.
    # 
    # **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalCatalogPlanId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # ID of the rate plan to remove. This can be the latest version or any history version of ID.
    string ratePlanId?;
    # Number of a rate plan for this subscription.
    string subscriptionRatePlanNumber?;
    # Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.
    string uniqueToken?;
    # Container for custom fields of a Rate Plan object.
    record {|record {}...;|} customFields?;
    OrderActionRatePlanChargeRemove[] chargeUpdates?;
};

public type BatchDebitMemoType record {
    # The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.
    string dueDate?;
    # The unique ID or number of the debit memo to be updated. For example, 402890555a87d7f5015a892f2ba10057 or or DM00000001.
    string id?;
};

public type NestedPaymentMethodOnExpand record {|
    # The unique identifier of the payment method.
    string id?;
    # The unique identifier of the user who created the payment method.
    string createdById?;
    # The time that the payment method gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the payment method.
    string updatedById?;
    # The time that the payment method gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # The unique identifier of the account that the payment method is
    # associated with.
    string accountId?;
    # The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.
    string achAbaCode?;
    # The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.
    string achAccountName?;
    # The masked bank account number associated with the ACH payment method. This field is only required if the `type` field is set to `ACH`.
    string achAccountNumberMask?;
    # The type of bank account associated with the ACH payment method. This field is only required if the `type` field is set to `ACH`.
    # 
    # When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify any of the allowed values as a dummy value, `Checking` preferably.
    "BusinessChecking"|"Checking"|"Saving" achAccountType?;
    # First address line for the ACH payment method.
    @constraint:String {maxLength: 255}
    string achAddress1?;
    # Second address line for the ACH payment method.
    @constraint:String {maxLength: 255}
    string achAddress2?;
    # The name of the bank where the ACH payment account is held.
    # 
    # When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.
    @constraint:String {maxLength: 70}
    string achBankName?;
    # City for the ACH payment method.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    @constraint:String {maxLength: 40}
    string achCity?;
    # Country for the ACH payment method. Must be a valid country name or abbreviation.
    # 
    # See <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a> for the list of supported country names and abbreviations.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    string achCountry?;
    # Zip code or postal code for the ACH payment method.
    @constraint:String {maxLength: 20}
    string achPostalCode?;
    # State for the ACH payment method. Must be a valid state name or 2-character abbreviation.
    # 
    # See [United States Standard State Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes) and [Canadian Standard Province Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/C_Canadian_Province_Names_and_2-Digit_Codes) for the list of supported names and abbreviations.
    string achState?;
    # Indicates whether the payment method is active.
    boolean active?;
    # Indicates whether the payment method is a system-generated payment method.
    boolean isSystem?;
    # The branch code of the bank used for Direct Debit.  
    string bankBranchCode?;
    # The check digit in the international bank account number, which confirms the validity of the account. Applicable to direct debit payment methods.
    string bankCheckDigit?;
    # The city of the direct debit bank.
    string bankCity?;
    # The sort code or number that identifies the bank. This is also known as the sort code. 
    string bankCode?;
    # The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.
    string bankIdentificationNumber?;
    # The name of the direct debit bank.
    string bankName?;
    # The zip code or postal code of the direct debit bank.
    string bankPostalCode?;
    # The name of the street of the direct debit bank.
    string bankStreetName?;
    # The number of the direct debit bank.
    string bankStreetNumber?;
    # The name on the direct debit bank account.
    string bankTransferAccountName?;
    # This is a masked displayable version of the bank account number, used for
    # security purposes. For example: `XXXXXXXXX54321`.
    string bankTransferAccountNumberMask?;
    # The type of the customer's bank account. Applicable to direct debit
    # payment methods.
    string bankTransferAccountType?;
    # Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user.
    # 
    # Possible Values: 
    # 
    # 
    # * `AutomatischIncasso` (NL)
    # 
    # * `LastschriftDE` (Germany)
    # 
    # * `LastschriftAT` (Austria)
    # 
    # * `DemandeDePrelevement` (FR)
    # 
    # * `DirectDebitUK` (UK)
    # 
    # * `Domicil` (Belgium)
    # 
    # * `LastschriftCH` (CH)
    # 
    # * `RID` (Italy)
    # 
    # * `OrdenDeDomiciliacion` (Spain)
    # * `Autogiro` (Sweden)
    # * `Betalingsservice` (Denmark)
    "AutomatischIncasso"|"LastschriftDE"|"LastschriftAT"|"DemandeDePrelevement"|"DirectDebitUK"|"Domicil"|"LastschriftCH"|"RID"|"OrdenDeDomiciliacion"|"Autogiro"|"Betalingsservice" bankTransferType?;
    # The business identification code for Swiss direct payment methods that use
    # the Global Collect payment gateway. Only applicable to direct debit
    # payment methods in Switzerland with Global Collect.
    string businessIdentificationCode?;
    # The city of the customer's address. Applicable to debit payment methods.
    string city?;
    # The two-letter country code of the customer's address. Applicable to direct debit payment methods.
    string country?;
    # The first line of the card holder's address, which is often a street
    # address or business name. Applicable to credit card and direct debit
    # payment methods.
    string creditCardAddress1?;
    # The second line of the card holder's address. Applicable to credit card
    # and direct debit payment methods.
    string creditCardAddress2?;
    # The city of the card holder's address. Applicable to credit card and
    # direct debit payment methods.
    string creditCardCity?;
    # The country where the credit card holder stays.
    # 
    # When creating a payment method through a translated UI or Payment Page, a country name in a translated language might be selected. 
    # Regardless of the country texts selected when creating the payment method, only the supported country name returns in this field. 
    # For a complete list of supported country names, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>. 
    # Internationalization is not supported for the API field value.
    string creditCardCountry?;
    # One or two digits expiration month.
    @constraint:Int {minValue: 1, maxValue: 12}
    int:Signed32 creditCardExpirationMonth?;
    # Four-digit expiration year.
    int:Signed32 creditCardExpirationYear?;
    # The full name of the credit card holder.
    string creditCardHolderName?;
    # The masked credit card number, such as `*********1112`.
    string creditCardMaskNumber?;
    # The postal code for the address of the credit card holder.
    string creditCardPostalCode?;
    # The state where the credit card holder stays.
    string creditCardState?;
    # The type of the credit card or debit card.
    # 
    # Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # **Note:** This field is only returned for the Credit Card and Debit Card payment types.
    string creditCardType?;
    # The session ID of the user when the `PaymentMethod` was created or updated.
    string deviceSessionId?;
    # Indicates whether the mandate is an existing mandate.
    "Yes"|"No" existingMandate?;
    # The email address of the payment method holder.
    string email?;
    # The customer's first name. Only applicable to direct debit payment methods.
    string firstName?;
    # The International Bank Account Number used to create the SEPA payment method. The value is masked.
    string iBAN?;
    # The IP address of the user when the payment method was created or updated.
    string iPAddress?;
    # The identity number of the account holder or the cardholder.
    string identityNumber?;
    # The name of the company.
    string companyName?;
    # Whether the customer account is a company.
    boolean isCompany?;
    # The date of the last failed attempt to collect payment with this payment
    # method.
    string lastFailedSaleTransactionDate?;
    # The customer's last name. Only applicable to direct debit payment methods.
    string lastName?;
    # The date and time of the most recent transaction.
    string lastTransactionDateTime?;
    # The status of the most recent transaction.
    string lastTransactionStatus?;
    # The date on which the mandate was created.
    string mandateCreationDate?;
    # The mandate ID.
    string mandateId?;
    # The reason of the mandate from the gateway side.
    string mandateReason?;
    # Indicates whether the mandate is received from the gateway.
    "Yes"|"No" mandateReceived?;
    # The status of the mandate from the gateway side.
    string mandateStatus?;
    # The date on which the mandate was updated.
    string mandateUpdateDate?;
    # The number of allowable consecutive failures Zuora attempts with the payment method before stopping.
    int:Signed32 maxConsecutivePaymentFailures?;
    # The name of the payment method.
    string name?;
    # The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. 
    int:Signed32 numConsecutiveFailures?;
    # The status of the payment method.
    "Active"|"Closed"|"Scrubbed" paymentMethodStatus?;
    # The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.
    int:Signed32 paymentRetryWindow?;
    # ID of a PayPal billing agreement. 
    string paypalBaid?;
    # Email address associated with the PayPal payment method. 
    string paypalEmail?;
    # The PayPal preapproval key.
    string paypalPreapprovalKey?;
    # The type of the PayPal payment method.
    string paypalType?;
    # The phone number that the account holder registered with the bank. This
    # field is used for credit card validation when passing to a gateway.
    string phone?;
    # The zip code of the customer's address. Only applicable to direct debit
    # payment methods.
    string postalCode?;
    # A gateway unique identifier that replaces sensitive payment method data.
    # 
    # **Note:** This field is only returned for the Credit Card Reference Transaction payment type.
    string secondTokenId?;
    # The state of the customer's address. Only applicable to direct debit
    # payment methods.
    string state?;
    # The street name of the customer's address. Only applicable to direct debit
    # payment methods.
    string streetName?;
    # The street number of the customer's address. Only applicable to direct
    # debit payment methods.
    string streetNumber?;
    # A gateway unique identifier that replaces sensitive payment method data or
    # represents a gateway's unique customer profile. Applicable to CC Reference
    # Transaction payment methods.
    string tokenId?;
    # The number of error payments that used this payment method.
    int:Signed32 totalNumberOfErrorPayments?;
    # The number of successful payments that used this payment method.
    int:Signed32 totalNumberOfProcessedPayments?;
    # The type of the payment method. For example, `CreditCard`.
    string 'type?;
    # Indicates whether this payment method uses the default retry rules configured in the Zuora Payments settings.
    boolean useDefaultRetryRule?;
    # The identification reference of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Payment Method Data Source Exports and Data Query.
    string methodReferenceId?;
    # The identification reference of the user or customer account.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string userReferenceId?;
    # The identification reference indicating the subtype of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string subType?;
    # Other method-specific data of the payment method.
    string methodSpecificData?;
    # EXPANDABLE.
    # The account to which the payment method belongs.
    record {} account?;
|};

# Information about the first term of the subscription.
public type PreviewOrderCreateSubscription_terms_initialTerm record {
    # Duration of the first term in months, years, days, or weeks, depending on the value of the `periodType` field. Only applicable if the value of the `termType` field is `TERMED`.
    int period?;
    # Unit of time that the first term is measured in. Only applicable if the value of the `termType` field is `TERMED`.
    "Month"|"Year"|"Day"|"Week" periodType?;
    # Start date of the first term, in YYYY-MM-DD format.
    string startDate?;
    # End date of the first term, in YYYY-MM-DD format.
    string endDate?;
    # Type of the first term. If the value of this field is `TERMED`, the first term has a predefined duration based on the value of the `period` field. If the value of this field is `EVERGREEN`, the first term does not have a predefined duration.
    "TERMED"|"EVERGREEN" termType;
};

public type PUTOrderActionTriggerDatesRequestType_orderActions record {
    PUTOrderActionTriggerDatesRequestType_charges[] charges?;
    # Identifies which order action will have its triggering dates updated. 
    int sequence;
    # Container for the service activation and customer acceptance dates of the order action.
    PUTOrderActionTriggerDatesRequestType_triggerDates[] triggerDates?;
};

public type GETDebitMemoType record {
    # The ID of the customer account associated with the debit memo.
    string accountId?;
    # The number of the customer account associated with the debit memo.       
    string accountNumber?;
    # The total amount of the debit memo.
    decimal amount?;
    # Whether debit memos are automatically picked up for processing in the corresponding payment run.
    # 
    # By default, debit memos are automatically picked up for processing in the corresponding payment run.
    boolean autoPay?;
    # The balance of the debit memo.
    decimal balance?;
    # The amount that is applied to the debit memo.
    decimal beAppliedAmount?;
    # The ID of the bill-to contact associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string billToContactId?;
    # The ID of the bill-to contact snapshot associated with the debit memo.
    # 
    # The value of this field is `null` if the bill rule [Preserve snapshot of bill-to and sold-to contacts when billing documents are posted](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Billing_Rules#Preserve_snapshot_of_bill-to_and_sold-to_contacts_when_billing_documents_are_posted) is disabled.
    string billToContactSnapshotId?;
    # The ID of the Zuora user who cancelled the debit memo.
    string cancelledById?;
    # The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # The currency of the debit memo.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # Comments about the debit memo.
    string comment?;
    # The ID of the Zuora user who created the debit memo.
    string createdById?;
    # The date and time when the debit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The date when the debit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.
    string debitMemoDate?;
    # The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.
    string dueDate?;
    # The error code returned when the e-invoice file status is `Failed`. This code can either be a Zuora-generated error code or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorCode?;
    # The error message returned when the e-invoice file status is `Failed`. This message can either be a Zuora-generated error message or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorMessage?;
    # The ID of the e-invoice file generated for the debit memo.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceFileId?;
    # The status of the e-invoice file generation for the debit memo. 
    # 
    # - If e-invoice file generation succeeds, this field is either `Generated` or `Success`, and both the error code and message are empty, and the `eInvoiceFileId` field stores the ID of the generated e-invoice file.
    # - If a failure occurs during e-invoice file generation, this field is `Failed` and an error code and an error message are returned respectively in the `einvoiceErrorCode` and `einvoiceErrorMessage` fields. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    "Processing"|"Generated"|"Success"|"Failed" einvoiceStatus?;
    # The flag to exclude the debit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The unique ID of the debit memo.
    string id?;
    # The number of the invoice group associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string? invoiceGroupNumber?;
    # The ID of the latest PDF file generated for the debit memo.
    string latestPDFFileId?;
    # The unique identification number of the debit memo.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The name of the payment term assoicated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string paymentTerm?;
    # The ID of the Zuora user who posted the debit memo.
    string postedById?;
    # The date and time when the debit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.
    string postedOn?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty.
    string reasonCode?;
    # The ID of the credit memo from which the debit memo was created.
    string referredCreditMemoId?;
    # The ID of a referred invoice.
    string referredInvoiceId?;
    # The ID of the sequence set associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    #              
    string sequenceSetId?;
    # The type of the debit memo source.
    "Subscription"|"Standalone"|"Order"|"Consolidation"|"Invoice"|"CreditMemo" sourceType?;
    # The status of the debit memo.
    "Draft"|"Posted"|"Canceled"|"Error"|"PendingForTax"|"Generating"|"CancelInProgress" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The target date for the debit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.
    string targetDate?;
    # The amount of taxation.
    decimal taxAmount?;
    # The message about the status of tax calculation related to the debit memo. If tax calculation fails in one debit memo, this field displays the reason for the failure.
    string taxMessage?;
    # The status of tax calculation related to the debit memo.
    # 
    # **Note**: This field is only applicable to tax calculation by third-party tax engines.
    "Complete"|"Error" taxStatus?;
    # The calculated tax amount excluded due to the exemption.
    decimal totalTaxExemptAmount?;
    # Whether the debit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The ID of the Zuora user who last updated the debit memo.
    string updatedById?;
    # The date and time when the debit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *DebitMemoObjectNSFields;
    *DebitMemoObjectCustomFields;
};

public type GETCalloutHistoryVOType record {
    # The number of times the callout was retried.
    string attemptedNum?;
    # The time that the calloutHistory record was made.
    string createTime?;
    # The event category for the callout.
    string eventCategory?;
    # The context of the callout event.
    string eventContext?;
    # The name of the notification.
    string notification?;
    # The request method set in notifications settings.
    string requestMethod?;
    # The base url set in notifications settings.
    string requestUrl?;
    # The responseCode of the request.
    string responseCode?;
    # 
    string responseContent?;
};

public type POSTPaymentMethodDecryption record {
    # The ID of the customer account associated with this payment method.
    # To create an orphan payment method that is not associated with any customer account, you do not need to specify this field during creation. However, you must associate the orphan payment method with a customer account within 10 days. Otherwise, this orphan payment method will be deleted.
    string accountID?;
    # Container for cardholder information. The nested `cardHolderName` field is required.
    CreatePaymentMethodCardholderInfo cardHolderInfo?;
    # Field to identify the token decryption type.
    # 
    # **Note:** The only value at this time is `ApplePay`.
    string integrationType;
    # The id of invoice this payment will apply to.
    # 
    # **Note:** When `processPayment` is `true`, this field is required.
    # Only one invoice can be paid; for scenarios where you want to pay for multiple invoices, set `processPayment` to `false` and call payment API separately.
    string invoiceId?;
    # The Merchant ID that was configured for use with Apple Pay in the Apple iOS Developer Center.
    string merchantID;
    # This field is only available for the following gateway integrations to create stored credential profiles within payment methods:
    #   - Chase Paymentech Orbital Gateway
    #   - CyberSource Payment API v2.0
    #   - Stripe v2
    #   - Vantiv (Now Worldpay)
    # 
    # Specify how the consent agreement has been established with the customer. The allowed value is `External`. It is required if the `mitProfileAction` field is specified. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `External` set to this field.
    "External" mitConsentAgreementSrc?;
    # This field is only available for the following gateway integrations to create stored credential profiles within payment methods:
    #   - Chase Paymentech Orbital Gateway
    #   - CyberSource Payment API v2.0
    #   - Stripe v2
    #   - Vantiv (Now Worldpay)
    # 
    # Specify either of the following values in this field:
    #     
    #   - `Activate` - Use this value if you are creating the stored credential profile after receiving the customer's consent.
    #     
    #     Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
    #       
    #     If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
    #     
    #   - `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
    # 
    #   If you do not specify this field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Activate` set to this field.
    #     
    "Activate"|"Persist" mitProfileAction?;
    # This field is only available for the following gateway integrations to create stored credential profiles within payment methods:
    #   - Chase Paymentech Orbital Gateway
    #   - CyberSource Payment API v2.0
    #   - Stripe v2
    #   - Vantiv (Now Worldpay)
    # 
    # This field indicates the type of the stored credential profile to process recurring or unsecheduled transactions. It is required if the `mitProfileAction` field is specified. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Recurring` set to this field.
    #     
    "Recurring"|"Unscheduled" mitProfileType?;
    # The label name of the gateway instance configured in Zuora that should process the payment. When creating a Payment, this must be a valid gateway instance ID and this gateway must support the specific payment method. If not specified, the default gateway of your Zuora customer account will be used.
    # 
    # **Note:** When `processPayment` is `true`, this field is required. When `processPayment` is `false`, the default payment gateway of your Zuora customer account will be used no matter whether a payment gateway instance is specified in the `paymentGateway` field.
    string paymentGateway?;
    # The complete JSON Object representing the encrypted payment token payload returned in the response from the Apple Pay session.
    record {} paymentToken;
    # A boolean flag to control whether a payment should be processed after creating payment method. The payment amount will be equivalent to the amount the merchant supplied in the ApplePay session. Default is false.
    # 
    # If this field is set to `true`, you must specify the `paymentGateway` field with the payment gateway instance name.
    # 
    # If this field is set to `false`:
    #   - The default payment gateway of your Zuora customer account will be used no matter whether a payment gateway instance is specified in the `paymentGateway` field. 
    #   - You must select the **Verify new credit card** check box on the gateway instance settings page. Otherwise, the cryptogram will not be sent to the gateway.
    #   - A separate subscribe or payment API call is required after this payment method creation call.
    boolean processPayment?;
};

# Common information for callout notifications.
public type POSTPublicNotificationDefinitionCalloutCommon record {
    # The status of the callout. The default is `true`.
    boolean active = true;
    # The callout URL. It must start with 'https://'
    @constraint:String {minLength: 10}
    string calloutBaseurl;
    # A key-value map of merge fields of this callout.
    CalloutMergeFields calloutParams?;
    # Specified whether to retry the callout when the callout fails. The default value is `true`.
    boolean calloutRetry = true;
    # Description for the callout.
    @constraint:String {maxLength: 255}
    string description?;
    # The name of the event type. The value must be the same as the parent-level `eventTypeName` field.
    @constraint:String {minLength: 1}
    string eventTypeName?;
    # The HTTP method of the callout.
    "GET"|"PUT"|"POST"|"DELETE" httpMethod;
    # The name of the created callout.
    @constraint:String {maxLength: 255}
    string name;
};

# Container for charge metrics.
public type POSTSubscriptionPreviewResponseType_chargeMetrics record {
    # Change in monthly recurring revenue.
    string dmrr?;
    # Change in total contract value.
    string dtcv?;
    # Monthly recurring revenue.
    string mrr?;
    # The charge number of the subscription. Only available for update subscription.
    string number?;
    # The origin rate plan ID. Only available for update subscription.
    string originRatePlanId?;
    # The original rate plan charge ID. Only available for update subscription.
    string originalId?;
    # The product rate plan charge ID.
    string productRatePlanChargeId?;
    # The product rate plan ID.
    string productRatePlanId?;
    # Total contract value.
    string tcv?;
};

public type GETUsageWrapper record {
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Contains one or more usage items.
    GETUsageType[] usage?;
};

public type GETSubscriptionWrapper record {
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Array of subscriptions.
    GETSubscriptionType[] subscriptions?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# The mandate information for the Credit Card, Credit Card Reference Transaction, ACH, or Bank Transfer payment method.
public type PUTPaymentMethodRequest_mandateInfo record {
    # The mandate ID.
    @constraint:String {maxLength: 36}
    string mandateId?;
    # The reason of the mandate from the gateway side.
    @constraint:String {maxLength: 64}
    string mandateReason?;
    # The status of the mandate from the gateway side.
    @constraint:String {maxLength: 64}
    string mandateStatus?;
};

public type PostCreditMemoEmailRequestType record {
    # The valid email addresses you want to email a credit memo to. Use commas to separate email addresses.
    # 
    # **Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`.
    string emailAddresses?;
    # Indicates whether to send a credit memo to the additional email addresses of the memo account. 
    # 
    # 
    # You can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information.
    true|false includeAdditionalEmailAddresses?;
    # The ID of the PDF file that you want to send in the email. 
    # 
    # If you do not specify any PDF file ID, the latest PDF file generated for the credit memo is sent in the email.
    string pdfFileId?;
    # Indicates whether to email a credit memo based on the email template setting. 
    # 
    # If you set this field to `true`, the credit memo is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.
    true|false useEmailTemplateSetting?;
};

public type PostCustomObjectDefinitionsRequestDefinition record {
    # The set of fields which Audit Trail tracks and records changes of. You can change auditable fields to non-auditable, and vice versa. One custom object can have a maximum of five auditable fields.
    string[] auditable?;
    # Indicates whether to audit the creation of custom object records of this custom object definition.
    # 
    # Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record creation. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings" target="_blank">Manage audit trail settings</a>.
    boolean enableCreateRecordAuditing = false;
    # Indicates whether to audit the deletion of custom object records of this custom object definition.
    # 
    # Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record deletion. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings" target="_blank">Manage audit trail settings</a>.
    boolean enableDeleteRecordAuditing = false;
    # The set of fields that are allowed to be queried on. Queries on non-filterable fields will be rejected. You can not change a non-filterable field to filterable.
    string[] filterable?;
    # A UI label for the custom object
    string label;
    # The API name of the custom object
    string 'object;
    PostCustomObjectDefinitionFieldsDefinitionRequest properties?;
    # An array of relationships with Zuora objects or other custom objects. You can add at most 2 `manyToOne` relationships when creating a custom field definition.
    PostCustomObjectDefinitionsRequestDefinition_relationships[] relationships?;
    # The required fields of the custom object. You can change required fields to optional. However, you can only change optional fields to required on the custom objects with no records.
    string[] required?;
    # The fields with unique constraints. You can remove the unique constraint on a field. However, you can only add a unique constraint to a filterable field if the custom object contains no record. One custom object can have a maximum of five fields with unique constraints.
    string[] unique?;
};

public type GetBillingDocVolumeSummaryResponse record {
    # List of billing documents summary, including total generated invoices and credit memos, also a total number of accounts that failed to process.
    BillingDocVolumeSummaryRecord[] data?;
};

public type GETRefundPartCollectionType record {
    # Container for refund parts.
    RefundPartResponseTypewithSuccess[] parts?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Container for Subscription fields provided by Zuora Quotes.
public type SubscriptionObjectQTFields record {
    # The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.
    @constraint:String {maxLength: 32}
    string CpqBundleJsonId__QT?;
    # The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
    string OpportunityCloseDate__QT?;
    # The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
    @constraint:String {maxLength: 100}
    string OpportunityName__QT?;
    # The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
    @constraint:String {maxLength: 32}
    string QuoteBusinessType__QT?;
    # The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
    @constraint:String {maxLength: 32}
    string QuoteNumber__QT?;
    # The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
    @constraint:String {maxLength: 32}
    string QuoteType__QT?;
};

public type PriceIntervalWithTiers record {
    # Duration period of this interval.
    @constraint:Int {minValue: 1}
    int duration?;
    # Index of the interval in the interval pricing.
    @constraint:Int {minValue: 1}
    int sequence?;
    # List of cumulative pricing tiers in the charge.
    ChargeTier[] tiers?;
    # Interval type of this pricing.
    "Day"|"Month"|"Infinity" 'type?;
};

public type PUTVerifyPaymentMethodType record {
    # The currency used for payment method authorization. 
    string currencyCode?;
    # The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
    PUTVerifyPaymentMethodType_gatewayOptions gatewayOptions?;
    # The name of the payment gateway instance. If no value is specified for this field, the default payment gateway of the customer account will be used.
    string paymentGatewayName?;
    # The CVV or CVV2 security code for the credit card or debit card. To ensure PCI compliance, the value of this field is not stored and cannot be queried.
    string securityCode?;
};

public type GETJournalRunTransactionType record {
    # Transaction type. Invoice Adjustment is deprecated on Production. Zuora recommends that you use the Invoice Item Adjustment instead.
    # 
    # If you enable the Invoice Settlement feature, Debit Memo Item, Credit Memo Item, and Credit Memo Application Item are available, Payment and Refund will be replaced by Payment Application and Refund Application. 
    # 
    # If you enable both the Invoice Settlement feature and the Invoice Item Settlement feature, Payment and Refund will be replaced by Payment Application Item and Refund Application Item. 
    "Invoice Item"|"Taxation Item"|"Invoice Item Adjustment (Invoice)"|"Invoice Item Adjustment (Tax)"|"Invoice Adjustment"|"Electronic Payment"|"External Payment"|"Electronic Refund"|"External Refund"|"Electronic Credit Balance Payment"|"External Credit Balance Payment"|"Electronic Credit Balance Refund"|"External Credit Balance Refund"|"Credit Balance Adjustment (Applied from Credit Balance)"|"Credit Balance Adjustment (Transferred to Credit Balance)"|"Revenue Event Item"|"Debit Memo Item (Charge)"|"Debit Memo Item (Tax)"|"Credit Memo Item (Charge)"|"Credit Memo Item (Tax)"|"Credit Memo Application Item"|"Electronic Payment Application"|"External Payment Application"|"Electronic Refund Application"|"External Refund Application"|"Electronic Payment Application Item"|"External Payment Application Item"|"Electronic Refund Application Item"|"External Refund Application Item" 'type?;
};

public type ExpandedProductRatePlan record {|
    # The unique identifier of the product rate plan.
    string id?;
    # The unique identifier of the user who created the product rate plan.
    string createdById?;
    # The date and time when the product rate plan was created.
    string createdDate?;
    # The unique identifier of the user who last updated the product rate plan.
    string updatedById?;
    # The date and time when the product rate plan was last updated.
    string updatedDate?;
    # The unique identifier of the product to which this product rate
    # plan belongs.
    string productId?;
    # The name of the product rate plan.
    string name?;
    # A description of the product rate plan.
    string description?;
    # First date the rate plan is active (i.e., available to be subscribed
    # to), as `yyyy-mm-dd`.  Before this date, the status is `NotStarted`.
    string effectiveStartDate?;
    # Final date the rate plan is active, as `yyyy-mm-dd`. After this date,
    # the rate plan status is `Expired`.
    string effectiveEndDate?;
    # The grade of the product rate plan.
    # 
    # 
    # **Note**: This field is in the **Early Adopter** phase. We are
    # actively soliciting feedback from a small set of early adopters before
    # releasing it as generally available. If you want to join this early
    # adopter program, submit a request at [Zuora Global
    # Support](http://support.zuora.com/).
    int:Signed32 grade?;
    # The natural key of the product rate plan. 
    string productRatePlanNumber?;
    NestedProductOnExpand product?;
    NestedPrpcOnExpand[] productRatePlanCharges?;
|};

# The order that is related to the subscription rate plan.
public type OrderActionRatePlanOrder record {
    # The order ID.
    string id?;
    OrderActionRatePlanOrderAction[] orderActions?;
    # The order number of the order.
    string orderNumber?;
};

public type POSTCreateInvoiceScheduleRequest record {
    # The ID or number of the account associated with the invoice schedule.
    string accountKey?;
    # A list of the numbers of the subscriptions that need to be billed together with the invoice schedule. 
    # 
    # One invoice schedule can have at most 600 additional subscriptions.
    string[] additionalSubscriptionsToBill?;
    # Whether the invoice items created from the invoice schedule appears on a separate invoice when Zuora generates invoices.
    boolean invoiceSeparately?;
    # Comments on the invoice schedule.
    @constraint:String {maxLength: 255}
    string notes?;
    # A list of the IDs or numbers of the orders associated with the invoice schedule. One invoice schedule can be associated with at most 10 orders.
    string[] orders?;
    # Container for invoice schedule items. One invoice schedule can have at most 50 invoice schedule items.
    POSTScheduleItemType[] scheduleItems?;
    # A list of the numbers of specific subscriptions associated with the invoice schedule.
    # 
    # - If the subscriptions specified in this field belong to the orders specified in the `orders` field, only the specific subscriptions instead of the orders are associated with the invoice schedule. 
    # - If only the `orders` field is specified, all the subscriptions from the order are associated with the invoice schedule.
    # 
    # Example:
    # ```
    # {
    #   "orders": [
    #     "O-00000001", "O-00000002"
    #   ],
    #   "specificSubscriptions": [
    #     {
    #       "orderKey": "O-00000001",
    #       "subscriptionKey": "S-00000001"
    #     }
    #   ]
    # }
    # ```
    # - For the order with number O-00000001, only subscription S-00000001 contained in the order is associated with the invoice schedule.
    # - For the order with number O-00000002, all subscriptions contained in the order are associated with the invoice schedule.
    InvoiceScheduleSpecificSubscriptions[] specificSubscriptions?;
    *InvoiceScheduleCustomFields;
};

# Record data from an object
public type CustomObjectRecordWithAllFields record {
    # The creator's Id
    string CreatedById?;
    # The record creation time in the date-time format
    string CreatedDate?;
    # The unique Id of the custom object record
    @constraint:String {maxLength: 36, minLength: 36}
    string Id?;
    # The modifier's Id
    string UpdatedById?;
    # The record modification time in the date-time format
    string UpdatedDate?;
    # The type of the custom object record. It is the API name of the custom object definition.
    string 'type?;
    *CustomObjectRecordWithOnlyCustomFields;
};

public type GETCreditMemoItemTypewithSuccess record {
    # The amount of the credit memo item. For tax-inclusive credit memo items, the amount indicates the credit memo item amount including tax. For tax-exclusive credit memo items, the amount indicates the credit memo item amount excluding tax.
    decimal amount?;
    # The credit memo item amount excluding tax.
    decimal amountWithoutTax?;
    # The applied amount of the credit memo item.
    decimal appliedAmount?;
    # The unique ID of the credit memo item that the discount charge is applied to.
    string appliedToItemId?;
    # Comments about the credit memo item.
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string comment?;
    # The ID of the Zuora user who created the credit memo item.
    string createdById?;
    # The date and time when the credit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the credit from item.
    string creditFromItemId?;
    # The type of the credit from item.
    "InvoiceItem"|"CreditMemoItem" creditFromItemSource?;
    # Container for the taxation items of the credit memo item. 
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    GETCMTaxItemType[] creditTaxItems?;
    # The description of the credit memo item.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string description?;
    # The flag to exclude the credit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Container for the finance information related to the credit memo item.
    GETCreditMemoItemTypewithSuccess_financeInformation financeInformation?;
    # The ID of the credit memo item.
    string id?;
    # The ID of the invoice schedule associated with the credit memo item. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleId?;
    # The ID of the invoice schedule item associated with the credit memo item. The credit memo item is generated during the processing of the invoice schedule item.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleItemId?;
    # The number of deliveries dedicated to the Delivery Pricing charges. The value might be different, as follows:
    # - For the credit memo generated by a bill run, this field has a value. 
    # - For the credit memo generated from an invoice, this field is blank.
    # **Note**: This field is available only if you have the Delivery Pricing feature enabled.
    decimal numberOfDeliveries?;
    # The kind of the charge for the credit memo item. Its possible values are `Charge` and `Discount`. 
    string processingType?;
    # The number of units for the credit memo item.
    decimal quantity?;
    # The amount of the refund on the credit memo item.
    decimal refundAmount?;
    # The service end date of the credit memo item. 
    string serviceEndDate?;
    # The service start date of the credit memo item.
    string serviceStartDate?;
    # The SKU for the product associated with the credit memo item.
    string sku?;
    # The name of the SKU.
    string skuName?;
    # The ID of the sold-to contact associated with the credit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string soldToContactId?;
    # The ID of the sold-to contact snapshot associated with the credit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string soldToContactSnapshotId?;
    # The ID of the source item.
    # 
    # - If the value of the `sourceItemType` field is `SubscriptionComponent` , the value of this field is the ID of the corresponding rate plan charge.
    # - If the value of the `sourceItemType` field is `InvoiceDetail`, the value of this field is the ID of the corresponding invoice item.
    # - If the value of the `sourceItemType` field is `ProductRatePlanCharge` , the value of this field is the ID of the corresponding product rate plan charge.
    # - If the value of the `sourceItemType` field is `OrderLineItem` , the value of this field is the ID of the corresponding return order line item.
    string sourceItemId?;
    # The type of the source item.
    # 
    # - If a credit memo is not created from an invoice or a product rate plan charge or a return order line item, the value of this field is `SubscriptionComponent`. 
    # - If a credit memo is created from an invoice, the value of this field is `InvoiceDetail`.
    # - If a credit memo is created from a product rate plan charge, the value of this field is `ProductRatePlanCharge`.
    # - If a credit memo is created from a return order line item, the value of this field is `OrderLineItem`.
    #              
    "SubscriptionComponent"|"InvoiceDetail"|"ProductRatePlanCharge"|"OrderLineItem" sourceItemType?;
    # The ID of the subscription associated with the credit memo item.
    string subscriptionId?;
    # The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # Container for the taxation items of the credit memo item. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    GETCreditMemoItemTypewithSuccess_taxationItems taxationItems?;
    # The unapplied amount of the credit memo item.
    decimal unappliedAmount?;
    # The units to measure usage.
    string unitOfMeasure?;
    # The per-unit price of the credit memo item.
    decimal unitPrice?;
    # The ID of the Zuora user who last updated the credit memo item.
    string updatedById?;
    # The date and time when the credit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *CreditMemoItemObjectCustomFields;
};

# get billingPreviewRun response
public type GetBillingPreviewRunResponse record {
    # 
    string assumeRenewal?;
    # The customer batch included in the billing preview run.       
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `314.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string batch?;
    # The customer batches included in the billing preview run. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `314.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string batches?;
    # The charge types excluded from the forecast run.
    string chargeTypeToExclude?;
    # The ID of the user who created the billing preview run.
    string createdById?;
    # The date and time when the billing preview run was created.
    string createdDate?;
    # The date and time when the billing preview run completes.
    string endDate?;
    # The error message generated by a failed billing preview run.
    string errorMessage?;
    # Whether draft document items are included in the billing preview run. By default, draft document items are not included.
    boolean includingDraftItems?;
    # Indicates if evergreen subscriptions are included in the billing preview run.
    boolean includingEvergreenSubscription?;
    # The organization(s) that the object belongs to. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.            
    GETProductType_organizationLabels[] organizationLabels?;
    # The URL of the zipped CSV result file generated by the billing preview run. This file contains the preview invoice item data and credit memo item data for the specified customers.
    # 
    # If the value of `storageOption` field is `Database`, the returned `resultFileUrl` field is null.
    # 
    # **Note:** The credit memo item data is only available if you have Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string resultFileUrl?;
    # The run number of the billing preview run.
    string runNumber?;
    # The date and time when the billing preview run starts.
    string startDate?;
    # The status of the >billing preview run.
    # 
    # **Possible values:** 
    # 
    # * 0: Pending
    # * 1: Processing
    # * 2: Completed
    # * 3: Error
    # * 4: Canceled
    string status?;
    # The saving options. The default value is `Csv`.    
    "Csv"|"Database" storageOption?;
    # The number of accounts for which preview invoice item data and credit memo item data was successfully generated during the billing preview run.
    # 
    # **Note:** The credit memo item data is only available if you have Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    int succeededAccounts?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The target date for the billing preview run.          
    string targetDate?;
    # The total number of accounts in the billing preview run.
    int:Signed32 totalAccounts?;
    # The ID of the user who last updated the billing preview run.
    string updatedById?;
    # The date and time when the billing preview run was last updated.
    string updatedDate?;
};

public type POSTAccountingCodeType record {
    # Name of the account in your general ledger.
    # 
    # Field only available if you have Zuora Finance enabled. Maximum of 255 characters.
    string glAccountName?;
    # Account number in your general ledger.
    # 
    # Field only available if you have Zuora Finance enabled. Maximum of 255 characters.
    string glAccountNumber?;
    # Name of the accounting code.
    # 
    # Accounting code name must be unique. Maximum of 100 characters.
    string name;
    # Maximum of 2,000 characters.
    string notes?;
    # If you want to create multiple accounting codes of the type `AccountsReceivable`, you need to have [Invoice Item Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/C_Invoice_Item_Settlement) enabled and contact [Zuora Global Support](http://support.zuora.com) to access the Multiple AR Accounting Codes feature. 
    # 
    # Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature. 
    "AccountsReceivable"|"On-Account Receivable"|"Cash"|"OtherAssets"|"CustomerCashOnAccount"|"DeferredRevenue"|"SalesTaxPayable"|"OtherLiabilities"|"SalesRevenue"|"SalesDiscounts"|"OtherRevenue"|"OtherEquity"|"BadDebt"|"OtherExpenses" 'type;
    *AccountingCodeObjectCustomFields;
};

# Container for sold-to contact information. Uses the same field structure as billToContact.
public type GETAccountTypeSoldToContact record {
    # First address line, 255 characters or less.
    string address1?;
    # Second address line, 255 characters or less.
    string address2?;
    # City, 40 characters or less.
    string city?;
    # Full country name. This field does not contain the ISO-standard abbreviation of the country name.
    string country?;
    # County; 32 characters or less. Zuora tax uses this information to calculate county taxation.          
    string county?;
    # Fax phone number, 40 characters or less.
    string fax?;
    # First name, 100 characters or less.
    string firstName?;
    # Home phone number, 40 characters or less.
    string homePhone?;
    # ID of the person who bought the subscription associated with the account, 32 characters or less.
    string id?;
    # Last name, 100 characters or less.
    string lastName?;
    # Mobile phone number, 40 characters or less.
    string mobilePhone?;
    # Nickname for this contact.
    string nickname?;
    # Other phone number, 40 characters or less.
    string otherPhone?;
    # Possible values are: `Work`, `Mobile`, `Home`, `Other`.
    string otherPhoneType?;
    # Personal email address, 80 characters or less.
    string personalEmail?;
    # Full state name. This field does not contain the ISO-standard abbreviation of the state name.
    string state?;
    # A region string, defined in your Zuora tax rules.
    string taxRegion?;
    # Work email address, 80 characters or less.
    string workEmail?;
    # Work phone number, 40 characters or less.
    string workPhone?;
    # Zip code, 20 characters or less.
    string zipCode?;
    *ContactObjectCustomFields;
};

public type InvoicePostResponseType record {
    # The ID of the invoice that was posted.
    string id?;
    # Returns `true` if the invoice was posted successfully.
    boolean success?;
};

# Represents the processed order action.
public type OrderAction record {
    # Rate plan associated with a subscription.
    RatePlanOverride addProduct?;
    # Information about an order action of type `CancelSubscription`.
    CancelSubscription cancelSubscription?;
    # Information about an order action of type `ChangePlan`.
    # 
    # **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.
    ChangePlan changePlan?;
    # The change reason set for an order action when an order is created.
    string changeReason?;
    # Information about an order action of type `CreateSubscription`.
    CreateSubscription createSubscription?;
    # Container for custom fields of an Order Action object.
    OrderActionObjectCustomFields customFields?;
    # The Id of the order action processed in the order.
    string id?;
    # The `orderItems` nested field is only available to existing Orders customers who already have access to the field.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    OrderItem[] orderItems?;
    # The container for order metrics.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    # 
    # **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the following Order Delta Metrics objects. 
    # * [Order Delta Mrr](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Mrr)
    # * [Order Delta Tcv](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcv)
    # * [Order Delta Tcb](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcb)
    # 
    # It is recommended that all customers use the new [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/).
    # 
    # Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported.
    OrderMetric[] orderMetrics?;
    # Information about an order action of type `OwnerTransfer`.
    # 
    # **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    OwnerTransfer ownerTransfer?;
    # Information about an order action of type `RemoveProduct`.
    RemoveProduct removeProduct?;
    # Information about an order action of type `RenewSubscription`.
    RenewSubscription renewSubscription?;
    # Information about an order action of type `Resume`.
    GetOrderResume resume?;
    # The sequence of the order actions processed in the order.
    int sequence?;
    # Information about an order action of type `Suspend`.
    GetOrderSuspend suspend?;
    # Information about an order action of type `TermsAndConditions`.
    TermsAndConditions termsAndConditions?;
    # Container for the contract effective, service activation, and customer acceptance dates of the order action. 
    # 
    # If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.
    # 
    # If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.
    # 
    # If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    #  * AddProduct
    #  * UpdateProduct
    #  * RemoveProduct
    #  * RenewSubscription
    #  * TermsAndConditions
    # 
    # If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    #  * AddProduct
    #  * UpdateProduct
    #  * RemoveProduct
    #  * RenewSubscription
    #  * TermsAndConditions
    TriggerDate[] triggerDates?;
    # Type of the order action.
    # 
    # **Note**: The change plan type of order action is currently not supported for Billing - Revenue Integration. When Billing - Revenue Integration is enabled, the change plan type of order action will no longer be applicable in Zuora Billing.
    "CreateSubscription"|"TermsAndConditions"|"AddProduct"|"UpdateProduct"|"RemoveProduct"|"RenewSubscription"|"CancelSubscription"|"OwnerTransfer"|"Suspend"|"Resume"|"ChangePlan" 'type?;
    # Information about an order action of type `UpdateProduct`.
    RatePlanUpdate updateProduct?;
};

# The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
# 
# Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
public type CreatePaymentType_gatewayOptions record {
    # The name of a gateway-specific parameter.
    @constraint:String {maxLength: 255}
    string 'key?;
    # The value of the gateway-specific parameter.
    @constraint:String {maxLength: 255}
    string value?;
};

public type POSTMassUpdateResponseType record {
    # String of 32 characters that identifies the mass action. The bulkKey is generated before the mass action is processed. You can use the bulkKey to Get the Mass Action Result.
    string bulkKey?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type InvoiceItemPreviewResult record {
    InvoiceItemPreviewResult_additionalInfo additionalInfo?;
    decimal amountWithoutTax?;
    # Available when the chargeNumber of the charge that discount applies to was specified in the request or when the order is amending an existing subscription.
    string appliedToChargeNumber?;
    string chargeDescription?;
    string chargeName?;
    # Available when the `chargeNumber` field was specified in the request or when the order is amending an existing subscription.
    string chargeNumber?;
    # A sequential number auto-assigned for each of order line items in a order, used as an index, for example, "1".
    string orderLineItemNumber?;
    "Charge"|"Discount"|"Tax" processingType?;
    string productName?;
    string productRatePlanChargeId?;
    string serviceEndDate?;
    string serviceStartDate?;
    string subscriptionNumber?;
    decimal taxAmount?;
    # List of taxation items.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `309.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    InvoiceItemPreviewResult_taxationItems[] taxationItems?;
    # The per-unit price of the invoice item.
    decimal unitPrice?;
};

public type GETTaxationItemTypewithSuccess record {
    # The ID of the Zuora user who created the taxation item.
    string createdById?;
    # The date and time when the taxation item was created in the Zuora system, in `yyyy-mm-dd hh:mm:ss` format.
    string createdDate?;
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # Container for the finance information related to the taxation item.
    GETTaxationItemTypewithSuccess_financeInformation financeInformation?;
    # The ID of the taxation item.
    string id?;
    # The ID of the invoice associated with the taxation item.
    string invoiceItemId?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The name of the taxation item.
    string name?;
    # The amount of the tax applied to the invoice.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific invoice.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date when the tax is applied to the invoice.
    string taxDate?;
    # The tax mode of the invoice item, indicating whether the amount of the invoice item includes tax.
    "TaxInclusive"|"TaxExclusive" taxMode?;
    # The tax rate applied to the invoice.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate applied to the invoice.
    "Percentage"|"FlatFee" taxRateType?;
    # The ID of the Zuora user who last updated the taxation item.
    string updatedById?;
    # The date and time when the taxation item was last updated, in `yyyy-mm-dd hh:mm:ss` format.
    string updatedDate?;
    *TaxationItemObjectCustomFields;
};

public type PUTSubscriptionPatchSpecificVersionRequestType_charges record {
    # Use either this field or the `chargeNumber` field to specify the charge for which you will be updating the custom fields. By using this field you actually specify a specific charge segment of a charge. See [Segmented rate plan charges](https://knowledgecenter.zuora.com/Central_Platform/API/G_SOAP_API/E1_SOAP_API_Object_Reference/RatePlanCharge#Segmented_rate_plan_charges) for more information about charge segments.
    string chargeId?;
    # Use either this field or the `chargeId` field to specify the charge for which you will be updating the custom fields. By using this field you actually specify the last charge segment of a charge. See [Segmented rate plan charges](https://knowledgecenter.zuora.com/Central_Platform/API/G_SOAP_API/E1_SOAP_API_Object_Reference/RatePlanCharge#Segmented_rate_plan_charges) for more information about charge segments.
    string chargeNumber?;
    # Container for custom fields of a Rate Plan Charge object.
    RatePlanChargeObjectCustomFields customFields?;
};

# Container for custom fields of an Discount Item object.
public type DiscountItemObjectCustomFields record {
};

public type POSTBulkPdfGenerationJobResponseType record {
    *CommonResponse;
    # Unique Id for the Job Triggered.
    string jobId?;
    # Collection of Ids that are not valid. 
    # 
    #  Id is considered to be invalid if,
    #   
    #   * Billing Document Id doesn't exist in the database for the corresponding Billing Document Type
    #   * generateMissingPDF property is false in the Job Request and Valid PDF doesn't exist for the Billing Document Id
    string[] invalidIds?;
};

public type PreviewExistingSubscriptionInvoiceItemResult record {
    # Service start date as yyyy-mm-dd. If the charge is a one-time fee, this is the date of that charge.
    string serviceStartDate?;
    # End date of the service period for this item, i.e., the last day of the period, as yyyy-mm-dd.
    string serviceEndDate?;
    # Invoice amount minus tax.
    decimal amountWithoutTax?;
    # The tax amount of the invoice item.
    decimal taxAmount?;
    # Description of the charge.
    string chargeDescription?;
    # Name of the charge.
    string chargeName?;
    # Available when the `chargeNumber` field was specified in the request or when the order is amending an existing subscription.
    string chargeNumber?;
    # Name of the product.
    string productName?;
    # The ID of the product rate plan charge.
    string productRatePlanChargeId?;
    # The processing type of the invoice item.
    "Charge"|"Discount"|"Tax" processingType?;
    # The unit price of the charge.
    decimal unitPrice?;
    # The quantity of the charge.
    decimal quantity?;
    # The unit of measure of the charge.
    string? unitOfMeasure?;
    # Container for discount details.
    PreviewExistingSubscriptionDiscountDetails[] discountDetails?;
};

public type GETPaymentMethodResponseGooglePayForAccount record {
    # This field is only available for Google Pay payment methods.
    string googleBIN?;
    # This field is only available for Google Pay payment methods.
    string googleCardNumber?;
    # This field is only available for Google Pay payment methods.
    # 
    # For Google Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field.
    string googleCardType?;
    # This field is only available for Google Pay payment methods.
    string googleExpiryDate?;
    # This field is only available for Google Pay payment methods.
    string googleGatewayToken?;
};

# Container for the prefix and starting number of refunds.
public type RefundEntityPrefix record {
    # The prefix of refunds.
    string prefix?;
    # The starting number of refunds.
    int startNumber?;
};

public type GETPaymentMethodResponseBankTransfer record {
    # The International Bank Account Number used to create the SEPA payment method. The value is masked.
    string IBAN?;
    # The number of the customer's bank account and it is masked.
    string accountNumber?;
    # The sort code or number that identifies the bank. This is also known as the sort code.         
    string bankCode?;
    # The type of the Bank Transfer payment method. For example, `SEPA`.
    string bankTransferType?;
    # The branch code of the bank used for Direct Debit.          
    string branchCode?;
    # The BIC code used for SEPA. The value is masked.       
    string businessIdentificationCode?;
    # The identity number of the account holder or the cardholder.
    string identityNumber?;
};

public type POSTSubscriptionPreviewTaxationItemsType record {
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the taxCode field.
    string locationCode?;
    # The name of the taxation item.
    string name?;
    # The tax amount of the invoice item.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific invoice.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date when the tax is applied to the invoice.
    string taxDate?;
    # The tax rate applied to the invoice. 
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # Enum:"Percentage" "FlatFee". The type of the tax rate applied to the invoice.
    "Percentage"|"FlatFee" taxRateType?;
};

# Container for the finance information related to the product rate plan charge associated with the debit memo.
public type DebitMemoFromChargeDetailType_financeInformation record {
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    @constraint:String {maxLength: 100}
    string deferredRevenueAccountingCode?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccountingCode?;
    # The name of the revenue recognition rule governing the revenue schedule.
    @constraint:String {maxLength: 100}
    string revenueRecognitionRuleName?;
};

public type POSTVoidAuthorize record {
    # The ID of the customer account. This field is generally required, but is optional if you are using the Ingenico ePayments gateway.
    string accountId?;
    # The number of the customer account. This field is generally required, but is optional if you are using the Ingenico ePayments gateway.
    string accountNumber?;
    # The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
    PUTVerifyPaymentMethodType_gatewayOptions gatewayOptions?;
    # The order ID for the specific gateway.
    # 
    # The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field.
    string gatewayOrderId;
    # The ID of the payment gateway instance. This field is required if you do not specify the `accountId` and `accountNumber` fields.
    string paymentGatewayId?;
    # The ID of the transaction.
    string transactionId;
};

public type POSTEmailBillingDocfromBillRunType record {
    # Whether to send out emails for all the billing documents that are associated with the bill run. If the value is `false`, emails are sent out only for the billing documents that never have emails sent out.
    boolean resend?;
};

public type ProxyGetProduct record {
    # Controls whether to allow your users to add or remove features while creating or amending a subscription.
    # 
    # **Values**: true, false (default)
    boolean AllowFeatureChanges?;
    # Category of the product. Used by Zuora Quotes Guided Product Selector.
    # 
    # **Values**:
    #   - Base Products
    #   - Add On Services
    #   - Miscellaneous Products
    @constraint:String {maxLength: 100}
    string Category?;
    # The automatically generated ID of the Zuora user who created the `Product` object.
    @constraint:String {maxLength: 32}
    string CreatedById?;
    # The date when the `Product` object was created.
    string CreatedDate?;
    # A description of the product. 
    @constraint:String {maxLength: 500}
    string Description?;
    # The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format.
    string EffectiveEndDate?;
    # The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format.
    string EffectiveStartDate?;
    # Object identifier.
    string Id?;
    # The name of the product. This information is displayed in the product catalog pages in the web-based UI.
    @constraint:String {maxLength: 100}
    string Name?;
    # The unique SKU for the product.
    @constraint:String {maxLength: 50}
    string SKU?;
    # The ID of the last user to update the object.
    @constraint:String {maxLength: 32}
    string UpdatedById?;
    # The date when the object was last updated.
    string UpdatedDate?;
    *ProductObjectNSFields;
    *ProductObjectCustomFields;
};

public type RampIntervalChargeMetrics record {
    # The number of the charge.
    string chargeNumber?;
    # The discount amount for the TCB.
    decimal discountTcb?;
    # The discount amount for the TCV.
    decimal discountTcv?;
    # The end date of the rate plan charge in the current ramp interval.
    string endDate?;
    # The gross TCB value before discount charges are applied.
    decimal grossTcb?;
    # The gross TCV value before discount charges are applied.
    decimal grossTcv?;
    # The MRR changing history of the current rate plan charge in the current ramp interval.
    RampIntervalChargeMetrics_mrr[] mrr?;
    # The net TCB value after discount charges are applied.
    decimal netTcb?;
    # The net TCV value after discount charges are applied.
    decimal netTcv?;
    # The ID of the corresponding product rate plan charge.
    string productRatePlanChargeId?;
    # The quantity of the rate plan charge.
    decimal quantity?;
    # The ID of the rate plan charge.
    string ratePlanChargeId?;
    # The start date of the rate plan charge in the current ramp interval.
    string startDate?;
    # The number of the subscription that the current rate plan charge belongs to.
    string subscriptionNumber?;
};

public type PaymentDebitMemoApplicationItemApplyRequestType record {
    # The amount of the payment that is applied to the specific debit memo or taxation item.
    decimal amount;
    # The ID of the specific debit memo item.
    string debitMemoItemId?;
    # The ID of the specific taxation item.
    string taxItemId?;
};

public type SaveResult record {
    # 
    ActionsErrorResponse[] Errors?;
    # 
    string Id?;
    # 
    boolean Success?;
};

public type PUTCreditMemosWithIdType record {
    # The ID of the credit memo.
    string id?;
    *PUTCreditMemoType;
};

# Container for custom fields of a Debit Memo Item object.
public type DebitMemoItemObjectCustomFields record {
};

# Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
public type OrderActionRatePlanUsageOveragePricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    # Number of free units that may be consumed.
    @constraint:Number {minValue: 0}
    decimal includedUnits?;
    # Number of periods that Zuora considers when calculating overage charges with overage smoothing.
    @constraint:Int {minValue: 1}
    int numberOfPeriods?;
    # Price per overage unit consumed.
    decimal overagePrice?;
    # Specifies whether to credit the customer for unused units.
    # 
    # If the value of this field is `CreditBySpecificRate`, use the `unusedUnitsCreditRates` field to specify the rate at which to credit the customer for unused units.
    "NoCredit"|"CreditBySpecificRate" overageUnusedUnitsCreditOption?;
    # Per-unit rate at which to credit the customer for unused units. Only applicable if the value of the `overageUnusedUnitsCreditOption` field is `CreditBySpecificRate`.
    decimal unusedUnitsCreditRates?;
};

# Container for the payment schedule items to be added to the payment schedule.
public type POSTAddItemsToPaymentScheduleRequest record {
    PaymentScheduleItemCommon[] items?;
};

# Container for tax exempt information, used to establish the tax exempt status of a customer account.
public type GETAccountType_taxInfo record {
    # EU Value Added Tax ID.
    string VATId?;
    # Unique code that identifies a company account in Avalara.
    string companyCode?;
    # ID of the customer tax exemption certificate.
    string exemptCertificateId?;
    # Type of tax exemption certificate that the customer holds.
    string exemptCertificateType?;
    # Description of the tax exemption certificate that the customer holds.
    string exemptDescription?;
    # Date when the customer tax exemption starts.
    string exemptEffectiveDate?;
    # A unique entity use code to apply exemptions in Avalara AvaTax.
    # 
    # This account-level field is required only when you choose Avalara as your tax engine. See [Exempt Transactions](https://developer.avalara.com/avatax/handling-tax-exempt-customers/)for more details.
    @constraint:String {maxLength: 64}
    string exemptEntityUseCode?;
    # Date when the customer tax exemption expires.
    string exemptExpirationDate?;
    # Jurisdiction in which the customer tax exemption certificate was issued.
    string exemptIssuingJurisdiction?;
    # Status of the account tax exemption.
    string exemptStatus?;
};

# 
public type POSTSequenceSetsResponse record {
    # Array of sequence sets configured for billing documents, payments, and refunds.
    GETSequenceSetResponse[] sequenceSets?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type ExpandedPaymentSchedule record {|
    # The unique identifier of the payment schedule.
    string id?;
    # The unique identifier of the user who created the payment schedule.
    string createdById?;
    # The time that the payment schedule gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the payment schedule.
    string updatedById?;
    # The time that the payment schedule gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # Number of the payment schedule.
    string number?;
    # ID of the account that owns the payment schedule.
    string accountId?;
    # The unique identifier of the invoice to which the payment is applied.
    string invoiceId?;
    # The unique identifier of the debit memo to which the payment is applied.
    string debitmemoId?;
    # The unique identifier of the payment option that is used to process
    # the payment schedule.
    string paymentOptionId?;
    # The date when the first payment of this payment schedule is
    # proccessed.
    string startDate?;
    # At which hour in the day in the tenant’s timezone the recurring
    # payment schedule items will be collected.
    # 
    # Return `0` for custom payment schedules.
    @constraint:Int {minValue: 0, maxValue: 23}
    int:Signed32 runHour?;
    # For recurring payment schedule only. The period of payment generation.
    # 
    # Returns `null` for custom payment schedules.
    "Monthly"|"Weekly"|"BiWeekly"? period?;
    # Indicates whether the payments created by the payment schedule are
    # used as a reserved payment. This field is available only if the
    # prepaid cash drawdown permission is enabled. See [Prepaid Cash with
    # Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown)
    # for more information.
    boolean prepayment?;
    # The number of payment schedule items that are created by this payment schedule.
    int:Signed32 occurrences?;
    # The status of the payment schedule.
    # 
    # - Active: There is still payment schedule item to process.
    # 
    # - Canceled: After a payment schedule is canceled by the user, the
    # schedule is marked as `canceled`.
    # 
    # - Completed: After all payment schedule items are processed, the
    # schedule is marked as `Completed`.
    "Active"|"Canceled"|"Completed" status?;
    # The description of the payment schedule.
    string description?;
    # The date the next payment will be processed.
    string nextPaymentDate?;
    # The date the last payment was processed.
    string recentPaymentDate?;
    # The number of processed payments.
    int:Signed32 totalPaymentsProcessed?;
    # The number of errored payments.
    int:Signed32 totalPaymentsErrored?;
    # The total amount that will be collected by the payment
    # schedule.            
    decimal totalAmount?;
|};

# Container for charge model configuration data.
# 
# **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
public type ChargeModelConfigurationType record {
    # The custom field that carries the per-unit rate for each usage record. For example, `perUnitAmount__c`.
    #     
    # This field is only available for the usage-based charges that use the Pre-Rated Per Unit Pricing charge model. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string customFieldPerUnitRate?;
    # The custom field that carries the total amount to charge for a usage record. For example, `totalAmount__c`. 
    #     
    # This field is only available for the usage-based charges that use the Pre-Rated Pricing charge model. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string customFieldTotalAmount?;
    # The pricing formula to calculate actual rating amount for each usage record.
    # 
    # This field is only available for the usage-based charges that use the Multi-Attribute Pricing charge model. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string formula?;
};

public type PaymentInvoiceApplicationItemCreateRequestType record {
    # The amount of the payment associated with the specific invoice or taxation item.
    decimal amount;
    # The ID of the specific invoice item.
    string invoiceItemId?;
    # The ID of the specific taxation item.
    string taxItemId?;
};

public type ScheduleItemsResponse record {
    # The actual amount that needs to be billed during the processing of the invoice schedule item.
    # 
    # By default, the actual amount is the same as the total amount. Even if order changes occur like Remove Product or Cancel Subscription, the value of the `amount` field keeps unchanged. The value of the `actualAmount` field reflects the actual amount to be billed.
    string actualAmount?;
    # The amount of the invoice generated during the processing of the invoice schedule item.
    # 
    # You can only specify either the `amount` field or `percentage` field in one request. 
    # - If you choose to specify the `amount` field in the request, `null` is returned as the value of the `percentage` field in the corresponding response. 
    # - If you choose to specify the `percentage` field in the request, the value of the `amount` field returned in the corresponding response is calculated based on the percentage of the total amount.
    # 
    # The value of this field keeps unchanged once invoice schedule items are created. 
    string amount?;
    # The ID of the credit memo that is generated during the processing of the invoice schedule item.
    string creditMemoId?;
    # The unique ID of the invoice schedule item.
    string id?;
    # The ID of the invoice that is generated during the processing of the invoice schedule item.
    string invoiceId?;
    # The name of the invoice schedule item.
    @constraint:String {maxLength: 100}
    string name?;
    # The percentage of the total amount to be billed during the processing of the invoice schedule item. 
    # 
    # You can only specify either the `amount` field or `percentage` field in one request. 
    # - If you choose to specify the `amount` field in the request, `null` is returned as the value of the `percentage` field in the corresponding response. 
    # - If you choose to specify the `percentage` field in the request, the value of the `amount` field returned in the corresponding response is calculated based on the percentage of the total amount.
    anydata percentage?;
    # The date in the tenant’s time zone when the invoice schedule item is processed to generate an invoice.
    string runDate?;
    # The status of the invoice schedule item.
    "Pending"|"Executing"|"Processed" status?;
    # The date in the tenant's time zone used by the invoice schedule to determine which fixed-period regular charges to be billed together with the invoice schedule item. 
    # 
    # The regular charges must come from the subscriptions specified in the `additionalSubscriptionsToBill` field.
    string targetDateForAdditionalSubscriptions?;
    *InvoiceScheduleItemCustomFields;
};

public type ExpandedRatePlan record {|
    # The unique identifier of the rate plan.
    string id?;
    # The unique identifier of the user who created the rate plan.
    string createdById?;
    # The date and time when the rate plan was created.
    string createdDate?;
    # The unique identifier of the user who last updated the rate plan.
    string updatedById?;
    # The date and time when the rate plan was last updated.
    string updatedDate?;
    # The unique identifier of the product associated with the rate plan.
    string productId?;
    # The unique identifier of the amendment made to the subscription.
    string amendmentId?;
    # The type of amendment associated with the rate plan. This field only applies to amendment rate plans.
    string amendmentType?;
    # The name of the rate plan.
    string name?;
    # The unique identifier of the product rate plan that the rate plan is based on.
    string productRatePlanId?;
    # The unique identifier of the subscription associated with the rate plan.
    string subscriptionId?;
    # The unique identifier of the account that owns the subscription.
    string subscriptionOwnerId?;
    # The unique identifier of the account that will pay the invoice.
    string invoiceOwnerId?;
    # Indicates the unique identifier for the rate plan purchased on a
    # third-party store. This field is used to represent a subscription rate
    # plan created through third-party stores.
    string externallyManagedPlanId?;
    # The original ID of the subscription rate plan, which is the ID of the subscription rate plan in the version-1 subscription.
    string originalRatePlanId?;
    # The unique identifier of the subscription offer associated with the rate plan.
    string subscriptionOfferId?;
    # The number of the rate plan in the subscription.
    string subscriptionRatePlanNumber?;
    NestedSubscriptionOnExpand subscription?;
    NestedProductRatePlanOnExpand productRatePlan?;
    NestedRatePlanChargeOnExpand[] ratePlanCharges?;
|};

# Container for the credit memo that is automatically generated when during the invoice reversal.
public type PutReverseInvoiceResponseType_creditMemo record {
    # The ID of the credit memo.
    string id?;
};

public type DataBackfillJob record {
    # Job ID
    string id?;
    # The data backfill job type
    DataBackfillJobType importType?;
    # ID of the uploaded file
    string uploadedFileId?;
    # Name of the uploaded file
    string uploadedFileName?;
    # URL of the uploaded file. You can download the uploaded file via this url.
    string uploadedFileUrl?;
    # Size of the uploaded file
    string uploadedFileSize?;
    # Size of the uploaded file, in the `int64` format
    int inputFileSize?;
    # Size of the output file. 
    string outputSize?;
    # Type of the output file.
    string outputType?;
    # Size of the output file, in the `int64` format. 
    int outputFileSize?;
    # ID of the output result file that you can download when a data backfill job is completed. 
    string resultFileId?;
    # Name of the result file that you can download when a data backfill job is completed
    string resultFileName?;
    # URL of the result file that you can download when a data backfill job is completed. You can download the result file via this URL. In the result file, you can see the data that you uploaded and the result for each record in the `Success` column of the file. For the record that fails to be updated, you can see the reason for failure in the `Error Message` column of the file.
    string resultFileUrl?;
    # The user who uploads the file
    string uploadedBy?;
    # The date and time when the file is uploaded
    string uploadedOn?;
    # The date and time when the data backfill action is completed
    string completedOn?;
    # The date and time when the data backfill action is started
    string startedProcessingOn?;
    # The total count of the data records to backfill
    int:Signed32 totalCount?;
    # The count of the data records that failed to be backfilled
    int:Signed32 failedCount?;
    # The status of the data backfill job
    DataBackfillJobStatus status?;
    # Message for the failure
    string failureMessage?;
    # The count of the data records that are being processed
    int processedCount?;
    # The count of the data records that are successfully backfilled
    int successCount?;
    # The remaining time for the data backfill job, in the `int64` format
    int remainingTime?;
    # The remaining time for the data backfill job, in the text format
    string remainingTimeText?;
    # The percentage of the completed data records
    int:Signed32 completedPercentage?;
};

public type ProxyGetProductRatePlan record {
    # A list of 3-letter currency codes representing active currencies for the product rate plan. 
    # 
    # This field cannot be queried in conjunction with any other fields except `id` at the same time. 
    string[] ActiveCurrencies?;
    # The automatically generated ID of the Zuora user who created the `ProductRatePlan` object.
    @constraint:String {maxLength: 32}
    string CreatedById?;
    # The date when the `ProductRatePlan` object was created.
    @constraint:String {maxLength: 29}
    string CreatedDate?;
    # A description of the product rate plan.
    @constraint:String {maxLength: 500}
    string Description?;
    # The date when the product rate plan expires and can't be subscribed to, in `yyyy-mm-dd` format.
    @constraint:String {maxLength: 29}
    string EffectiveEndDate?;
    # The date when the product rate plan becomes available and can be subscribed to, in `yyyy-mm-dd` format.
    @constraint:String {maxLength: 29}
    string EffectiveStartDate?;
    # The grade that is assigned for the product rate plan.
    # 
    # **Notes**: 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `116` or later. Otherwise, an error occurs.
    #   - This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).
    decimal Grade?;
    # Object identifier.
    string Id?;
    # The name of the product rate plan. The name doesn't have to be unique in a Product Catalog, but the name has to be unique within a product.
    @constraint:String {maxLength: 255}
    string Name?;
    # The ID of the product that contains the product rate plan.
    @constraint:String {maxLength: 32}
    string ProductId?;
    # The automatically generated ID of the last user to update the object.
    @constraint:String {maxLength: 32}
    string UpdatedById?;
    # The date when the object was last updated.
    @constraint:String {maxLength: 29}
    string UpdatedDate?;
    *ProductRatePlanObjectNSFields;
    *ProductRatePlanObjectCustomFields;
};

# Preview the existing subscription by subscription ID or number.
public type PreviewExistingSubscriptionRequest record {
    # The start date of the preview.
    PreviewStartDate previewStartDate?;
    # The preview through date.
    PreviewThroughDate previewThroughDate?;
    # Container for usage charges.
    QuantityForUsageCharges[] quantityForUsageCharges?;
};

public type GETAttachmentResponseType record {
    # Zuora user id who added this attachment to the object.
    string createdBy?;
    # Date and time when the attachment was added to the object.
    string createdOn?;
    # Description of the attachment.
    string description?;
    # File type.
    string fileContentType?;
    # File ID of the attached file. Use this file ID with [Get files](https://developer.zuora.com/api-references/api/operation/GET_Files) to download the file.
    string fileId?;
    # Attachment file name.
    string fileName?;
    # Id of this attachment.
    string id?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Zuora user id who last updated the attachment.
    string updatedBy?;
    # Date and time when the attachment was last updated.
    string updatedOn?;
};

public type CustomObjectRecordsBatchUpdatePartialSuccessResponse record {
    CustomObjectRecordsErrorResponse 'error?;
};

public type GETRampMetricsByRampNumberResponseType record {
    RampMetrics rampMetrics?;
    *CommonResponse;
};

public type GetEInvoicingServiceProviderResponse record {
    # The identifier of the company used to create a sender system ID, which serves to identify the system where the transactions are sent.
    string companyIdentifier?;
    # The ID of the e-invoicing service provider.
    string id?;
    # The name of the e-invoicing service provider.
    @constraint:String {maxLength: 100}
    string name?;
    # The name of the e-invoicing service provider that can help you generate e-invoice files for billing documents.
    "Sovos"|"PEPPOL" provider?;
    # The unique number of the e-invoicing service provider.
    string serviceProviderNumber?;
    # Whether the e-invoicing service provider's configuration is intended for testing. 
    # 
    # - If you set this field to `true`, requests are directed to the testing integration endpoints.
    # - If you set this field to `false`, requests are directed to the production integration endpoints.
    boolean test?;
    # The API key is used to authenticate the e-invoicing service provider's requests.
    string apiKey?;
    # The client certificate is used to authenticate the e-invoicing service provider's requests, which should be in base64 encoded format.
    string clientCertificate?;
    # The client certificate type is used to authenticate the e-invoicing service provider's requests. 
    string clientCertificateType?;
};

public type ExpandedOrderLineItem record {|
    # The unique identifier of the order line item.
    string id?;
    # The unique identifier of the user who created the order line item.
    string createdById?;
    # The time that the order line item gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the order line item.
    string updatedById?;
    # The date and time when the order line item was last updated.
    string updatedDate?;
    # The accountingCode for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string accountingCode?;
    # The target date for the Order Line Item (OLI) to be picked up by bill run for generating billing documents.
    # 
    # To generate billing documents for an OLI, you must set this field and set the `itemState` field to `SentToBilling`.
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string billTargetDate?;
    # The actual charged amount per unit for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    decimal amountPerUnit?;
    # The description of the Order Line Item.
    string description?;
    # The total amount for the Order Line Item (OLI).
    decimal amount?;
    # The total amount for the Order Line Item (OLI) excluding tax.
    decimal amountWithoutTax?;
    # The name of the Order Line Item (OLI).
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string itemName?;
    # The number for the Order Line Item (OLI).
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string itemNumber?;
    # The state of the Order Line Item (OLI). See [State transitions for an order, order line item, and fulfillment](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
    # 
    # To generate invoice for an OLI, you must set this field to `SentToBilling` and set the `billTargetDate` field .
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` or 'Booked' or `SentToBilling`state (when the `itemState` field is set as `Executing` or `SentToBilling`).
    "Executing"|"Booked"|"SentToBilling"|"Complete"|"Cancelled" itemState?;
    # The type of the Order Line Item (OLI). 
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    "Product"|"Fee"|"Services" itemType?;
    # The list price per unit for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    decimal listPricePerUnit?;
    # The extended list price for an order line item, calculated by the formula:
    # listPrice = listPricePerUnit * quantity
    decimal listPrice?;
    # The ID of the order that the order line item belongs to.
    string orderId?;
    # The product code for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string productCode?;
    # Used by customers to specify the Purchase Order Number provided by the buyer.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string purchaseOrderNumber?;
    # The quantity of units, such as the number of authors in a hosted wiki service.
    # 
    # You can update this field for a sales or return OLI only when the OLI in the `Executing` state (when the `itemState` field is set as `Executing`).
    decimal quantity?;
    # The Revenue Recognition rule for the Order Line Item.
    string revenueRecognitionRule?;
    # ID of a Product Rate Plan Charge. Only one-time charges are supported.
    string productRatePlanChargeId?;
    # The ID of a contact that belongs to the billing account of the order line item. Use this field to assign an existing account as the bill-to contact of an order line item.
    string billToId?;
    # The snapshot of the ID for an account used as the bill-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `billToSnapshotId` field is exposed while retrieving the order line item details.
    string billToSnapshotId?;
    # The ID of a contact that belongs to the owner acount or billing account of the order line item. Use this field to assign an existing account as the sold-to contact of an order line item.
    string soldTo?;
    # The snapshot of the ID for an account used as the sold-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `soldToSnapshotId` field is exposed while retrieving the order line item details.
    string soldToSnapshotId?;
    # The ID of the sold-to contact for the order.
    string soldToOrderContactId?;
    # The account ID of the owner of the order line item.
    string ownerAccountId?;
    # The account ID of the invoice owner of the order line item.
    string invoiceOwnerAccountId?;
    # The tax code for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string taxCode?;
    # The tax mode for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    "TaxInclusive"|"TaxExclusive" taxMode?;
    # The date when the transaction occurs.
    string transactionDate?;
    # Specifies the units to measure usage.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string uOM?;
    # This field is used to relate an order line item to an subscription. 
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string relatedSubscriptionNumber?;
    # The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the `transactionStartDate` field.
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string transactionEndDate?;
    # The date a transaction starts. The default value of this field is the order date.
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string transactionStartDate?;
    # Indicates whether to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Indicates whether to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled.
    boolean excludeItemBookingFromRevenueAccounting?;
    # The date of the original sale order for a return order line item.
    string originalOrderDate?;
    # The date of the amended order for a return order line item.
    string amendedByOrderOn?;
    # The category of the Order Line Item, to indicate a product sale or return.
    "Sales"|"Return" itemCategory?;
    # The ID of the original sale order for a return order line item. 
    string originalOrderId?;
    # The ID of the original sale order line item for a return order line item. 
    string originalOrderLineItemId?;
    # The number of the original sale order line item for a return order line item. 
    string originalOrderLineItemNumber?;
    # The number of the original sale order for a return order line item. 
    string originalOrderNumber?;
    # The quantity that can be returned for an order line item. 
    decimal quantityAvailableForReturn?;
    # The fulfilled quantity for an order line item.
    decimal quantityFulfilled?;
    # The quantity to fulfill for an order line item. 
    decimal quantityPendingFulfillment?;
    # The flag to show whether fulfillment is needed or not. It's derived from billing rule of the Order Line Item.
    boolean requiresFulfillment?;
    # The billing rule of the Order Line Item.
    "TriggerWithoutFulfillment"|"TriggerAsFulfillmentOccurs" billingRule?;
    # This field is used in accordance with the `inlineDiscountType` field, in the following manner:
    # * If the `inlineDiscountType` field is set as `Percentage`, this field specifies the discount percentage for each unit of the order line item. For exmaple, if you specify `5` in this field, the discount percentage is 5%.
    # * If the `inlineDiscountType` field is set as `FixedAmount`, this field specifies the discount amount on each unit of the order line item. For exmaple, if you specify `10` in this field, the discount amount on each unit of the order line item is 10.
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    decimal inlineDiscountPerUnit?;
    # This field is used to specify the inline discount type, which can be `Percentage`, `FixedAmount`, or `None`. The default value is `Percentage`.
    # 
    # This field is used together with the `inlineDiscountPerUnit` field to specify inline discounts for order line items. The inline discount is applied to the list price of an order line item. 
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    "Percentage"|"FixedAmount"|"None" inlineDiscountType?;
    # This field shows the total discount amount that is applied to an order line item after the `inlineDiscountType`, `inlineDiscountPerUnit` and `quantity` fields are set.
    # 
    # The inline discount is applied to the list price of an order line item.
    decimal discount?;
    # The recognized revenue accounting code for the Order Line Item.
    string recognizedRevenueAccountingCodeId?;
    # The deferred revenue accounting code for the Order Line Item.
    string deferredRevenueAccountingCodeId?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractAssetAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractLiabilityAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractRecognizedRevenueAccountingCodeId?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string unbilledReceivablesAccountingCodeId?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string adjustmentRevenueAccountingCodeId?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string adjustmentLiabilityAccountingCodeId?;
    NestedInvoiceItemOnExpand[] invoiceItems?;
|};

# Pricing information about the charge.
public type ChargeOverride_pricing record {
    # Container for charge model configuration data.
    # 
    # **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The High Water Mark and Pre-Rated Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    ChargeModelDataOverride chargeModelData?;
    # Pricing information about a discount charge.
    DiscountPricingOverride discount?;
    # Pricing information about a one-time charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    OneTimeFlatFeePricingOverride oneTimeFlatFee?;
    # Pricing information about a one-time charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
    OneTimePerUnitPricingOverride oneTimePerUnit?;
    # Pricing information about a one-time charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
    OneTimeTieredPricingOverride oneTimeTiered?;
    # Pricing information about a one-time charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
    OneTimeVolumePricingOverride oneTimeVolume?;
    # Pricing information about a recurring charge that uses the Delivery Pricing charge model. In this charge model, the charge has a fixed price. This field is only available if you have the Delivery Pricing charge model enabled.
    RecurringDeliveryPricingOverride recurringDelivery?;
    # Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    RecurringFlatFeePricingOverride recurringFlatFee?;
    # Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
    RecurringPerUnitPricingOverride recurringPerUnit?;
    # Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
    RecurringTieredPricingOverride recurringTiered?;
    # Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
    RecurringVolumePricingOverride recurringVolume?;
    # Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    UsageFlatFeePricingOverride usageFlatFee?;
    # Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
    UsageOveragePricingOverride usageOverage?;
    # Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
    UsagePerUnitPricingOverride usagePerUnit?;
    # Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
    UsageTieredPricingOverride usageTiered?;
    # Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
    UsageTieredWithOveragePricingOverride usageTieredWithOverage?;
    # Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
    UsageVolumePricingOverride usageVolume?;
};

public type PutDebitMemoTaxItemType record {
    # The amount of the taxation item in the debit memo item.
    decimal amount?;
    # Container for the finance information related to the taxation item in the debit memo item.
    PutDebitMemoTaxItemType_financeInformation financeInformation?;
    # The ID of the taxation item in the debit memo item.
    string id;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The tax code identifies which tax rules and tax rates to apply to a specific debit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the debit memo, in `yyyy-mm-dd` format.
    string taxDate?;
    # The calculated tax amount excluded due to the exemption.
    decimal taxExemptAmount?;
    # The name of taxation.
    string taxName?;
    # The tax rate applied to the debit memo.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate applied to the debit memo.
    "Percentage"|"FlatFee" taxRateType?;
    *DebitTaxationItemObjectCustomFields;
};

public type CreateOrUpdateEmailTemplatesResponse record {
    # Returns an empty array if the request succeeds.
    string[] reasons?;
};

# Information about an order action of type `AddProduct`.
public type PreviewOrderRatePlanOverride record {
    # List of charges associated with the rate plan.
    PreviewOrderChargeOverride[] chargeOverrides?;
    # Specifies whether all features in the rate plan will be cleared.
    boolean clearingExistingFeatures?;
    # Container for custom fields of the Rate Plan or Subscription Offer object. The custom fields of the Rate Plan object are used when rate plans are subscribed, and the custom fields of the Subscription Offer object are used when product offers are subscribed.
    OrdersRatePlanObjectCustomFields customFields?;
    # Indicates whether the rate plan is created from the Zuora product catalog or from an external product catalog.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    boolean isFromExternalCatalog?;
    # Internal identifier of the product rate plan that the rate plan is based on.
    string productRatePlanId;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # Name of the standalone rate plan.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string ratePlanName?;
    # List of features associated with the rate plan.
    # The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows:
    # * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared.
    # * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.
    CreateOrderRatePlanFeatureOverride[] subscriptionProductFeatures?;
    # Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the rate plan. Then when you update the product, you can use the same unique identifier to specify which rate plan to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
    # Number of a subscription rate plan for this subscription.
    @constraint:String {maxLength: 50}
    string subscriptionRatePlanNumber?;
};

public type POSTCreateBillingAdjustmentRequestType record {
    # The account number for which the delivery adjustment is created.  
    # 
    # **Note**: 
    #   - The account number should be of the subscription owner.
    #   - Only one of accountNumber or subscriptionNumber should be provided.
    string accountNumber?;
    # An optional container to specify charge numbers in the subscription for which the delivery adjustment needs to be created.
    string[] chargeNumbers?;
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string deferredRevenueAccountingCode?;
    # The end date of the delivery adjustment, in `yyyy-mm-dd` format. This is inclusive.
    string endDate;
    # The charge numbers and the corresponding dates for exclusion of delivery adjustment.
    POSTCreateBillingAdjustmentRequestType_exclusion[] exclusion?;
    # The reason for the delivery adjustment.
    string reason?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string recognizedRevenueAccountingCode?;
    # The name of the revenue recognition rule governing the revenue schedule.
    # 
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string revenueRecognitionRuleName?;
    # The start date of the delivery adjustment, in `yyyy-mm-dd` format. This is inclusive.
    string startDate;
    # The subscription number for which the delivery adjustment is created.
    # 
    # **Note**: Only one of accountNumber or subscriptionNumber should be provided.
    string subscriptionNumber?;
    # The type of delivery adjustment.
    "DeliveryCredit" 'type?;
};

public type PUTOrderPatchRequestType_subscriptions record {
    PUTOrderPatchRequestType_orderActions[] orderActions?;
    string subscriptionNumber?;
};

public type JobResult_ramps record {
    # The number of the ramp definition.
    string rampNumber?;
    # The number of the subscription that this ramp deal definition is applied to.
    string subscriptionNumber?;
};

public type PutTasksRequest record {
    # The list of tasks to update.
    UpdateTask[] data?;
};

# Container for charge metrics.
public type PUTSubscriptionResponseType_chargeMetrics record {
    # Change in total contract value.
    string dmrr?;
    # Change in monthly recurring revenue.
    string dtcv?;
    # Monthly recurring revenue.
    string mrr?;
    # The charge number of the subscription. Only available for update subscription.
    string number?;
    # The origin rate plan ID. Only available for update subscription.
    string originRatePlanId?;
    # The original rate plan charge ID. Only available for update subscription.
    string originalId?;
    # 
    string productRatePlanChargeId?;
    # 
    string productRatePlanId?;
    # Total contract value.
    string tcv?;
};

# The JSON object containing the information for a charge update in the 'UpdateProduct' type order action.
public type ChargeUpdate record {
    BillingUpdate billing?;
    # The number of the charge to be updated. The value of this field is inherited from the `subscriptions` > `orderActions` > `addProduct` > `chargeOverrides` > `chargeNumber` field. 
    string chargeNumber?;
    # Container for custom fields of a Rate Plan Charge object.
    RatePlanChargeObjectCustomFields customFields?;
    string description?;
    # Specifies when a charge becomes active.
    TriggerParams effectiveDate?;
    # Pricing information about the charge.
    PricingUpdate pricing?;
    # description: |
    #   A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan charge. For example, if you want to add and update a product in the same order, assign a unique token to the newly added rate plan charge and use that token in future order actions.
    string uniqueToken?;
};

# Container for custom fields of a Taxation Item object.
public type TaxationItemObjectCustomFields record {
};

public type CreditMemoFromChargeCustomRatesType record {
    # The currency code for either Reporting or Home currency.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string currency;
    # The Custom FX conversion rate between Home/Reporting and Transactional currency items.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    decimal customFxRate;
    # The date on which a particular currency rate is fixed or obtained on.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string rateDate?;
    *CreditMemoItemObjectCustomFields;
};

public type PUTSubscriptionPatchRequestType record {
    # Container for custom fields of a Subscription object.
    SubscriptionObjectCustomFields customFields?;
    PUTSubscriptionPatchRequestType_ratePlans[] ratePlans?;
};

public type GETCreditMemoFilesResponse record {
    # Container for credit memo PDF files.
    CreditMemoFile[] creditMemoFiles?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# 
public type QueryProductsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedProduct[] data?;
|};

public type CreditMemoFromChargeDetailType record {
    # The amount of the credit memo item.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    decimal amount?;
    # The ID of the product rate plan charge that the credit memo is created from.
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string chargeId;
    # The flag to exclude the credit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    boolean excludeItemBillingFromRevenueAccounting = false;
    # Comments about the product rate plan charge.
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    @constraint:String {maxLength: 255}
    string comment?;
    # The description of the product rate plan charge.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    @constraint:String {maxLength: 255}
    string description?;
    # Container for the finance information related to the product rate plan charge associated with the credit memo.
    CreditMemoFromChargeDetailType_financeInformation financeInformation?;
    # The amount of the credit memo item.
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    decimal memoItemAmount?;
    # The ID of the product rate plan charge that the credit memo is created from.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string productRatePlanChargeId;
    # The number of units for the credit memo item.
    decimal quantity?;
    # The service end date of the credit memo item. If not specified, the effective end date of the corresponding product rate plan will be used.
    string serviceEndDate?;
    # The service start date of the credit memo item. If not specified, the effective start date of the corresponding product rate plan will be used.
    string serviceStartDate?;
    *CreditMemoItemObjectCustomFields;
};

public type GETRatePlanChargePricing record {
    # The currency for the price.
    string currency?;
    # The specific amount for a fixed discount. This field is applicable for charges based on the Discount-Fixed Amount charge model.
    decimal? discountAmount?;
    # The percentage of discount for a percentage discount. This field is applicable for charges based on the Discount-Percentage charge model.
    decimal? discountPercentage?;
    # The number of units included in this price item. 
    # 
    # This field is only applicable for charges based on the Overage Pricing charge model.
    decimal? includedUnits?;
    # The overage price of the price item. 
    # 
    # This field is only applicable for charges based on the Overage Pricing or Tiered with Overage Pricing charge model.
    decimal? overagePrice?;
    # The price. 
    # 
    # This field is only applicable for charges based on the following charge models:
    #   - Flat Fee
    #   - Per Unit
    #   - Delivery Pricing
    decimal price?;
    # Container for the tiers of the price item. 
    # 
    # This field is only applicable for charges based on the following charge models:
    #   - Tiered Pricing
    #   - Volume Pricing
    #   - Tiered with Overage Pricing
    GETRatePlanChargePricingTier[]? tiers?;
};

public type POSTSubscriptionCancellationType record {
    # The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
    string[] applicationOrder?;
    # If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    boolean applyCredit?;
    # Whether to automatically apply a credit balance to an invoice.
    # 
    # If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.
    # 
    # 
    # To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.
    # 
    # Prerequisite: `invoice` must be `true`. 
    # 
    # **Note:** 
    #   - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.
    #   - This field is deprecated if you have the Invoice Settlement feature enabled.
    boolean applyCreditBalance?;
    # The booking date that you want to set for the amendment contract when you cancel the subscription. The default value is the current date when you make the API call.
    string bookingDate?;
    # Date the cancellation takes effect, in the format yyyy-mm-dd.  Use only if `cancellationPolicy` is `SpecificDate`. Should not be earlier than the subscription contract-effective date, later than the subscription term-end date, or within a period for which the customer has been invoiced.
    string cancellationEffectiveDate?;
    # Cancellation method. Possible values are: `EndOfCurrentTerm`, `EndOfLastInvoicePeriod`, `SpecificDate`. If using `SpecificDate`, the `cancellationEffectiveDate` field is required.
    string cancellationPolicy;
    # Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.
    # 
    # If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.
    # 
    # Prerequisite: The `invoice` or `runBilling` field must be `true`. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    boolean collect = false;
    # The date when the customer notifies you that they want to cancel their subscription.
    string contractEffectiveDate?;
    # A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
    string creditMemoReasonCode?;
    # The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
    # 
    # - If this field is specified, the specified date is used as the billing document date. 
    # - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
    string documentDate?;
    # **Note:** This field has been replaced by the `runBilling` field. The
    # `invoice` field is only available for backward compatibility.
    # 
    # 
    # Creates an invoice for a subscription. The invoice generated in this
    # operation is only for this subscription, not for the entire customer
    # account.
    # 
    # 
    # If the value is `true`, an invoice is created. If the value is
    # `false`, no action is taken. The default value is `false`. 
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `196.0` and `207.0`. To use this field in the method, you
    # must set the zuora-version parameter to the minor version number in
    # the request header.
    boolean invoice?;
    # This field has been replaced by the `invoice` field and the
    # `collect` field. `invoiceCollect` is available only for backward compatibility.
    # 
    # If this field is set to `true`, an invoice is generated and payment automatically collected.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`.
    boolean invoiceCollect = false;
    # **Note:** This field has been replaced by the `targetDate` field. The
    # `invoiceTargetDate` field is only available for backward
    # compatibility.
    # 
    # 
    # Date through which to calculate charges if an invoice is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `207.0` and earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string invoiceTargetDate?;
    # The date when the order is signed. If no additinal contractEffectiveDate is provided, this order will use this order date as the contract effective date.
    # This field must be in the `yyyy-mm-dd` format.
    # This field is required for Orders customers only, not applicable to Orders Harmonization customers. 
    string orderDate?;
    # Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  
    # 
    # 
    # The billing documents generated
    # in this operation is only for this subscription, not for the entire
    # customer account.
    # 
    # 
    # Possible values:
    # 
    # - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.
    # 
    # 
    # - `false`: No invoice is created.
    # 
    # 
    # **Note:** This field is in Zuora REST API version control. Supported
    # minor versions are `211.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method,
    # you must set the `zuora-version` parameter to the minor version number
    # in the request header.
    true|false runBilling = false;
    # Date through which to calculate charges if an invoice or a credit memo is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `211.0` and later. To use this field in the method, you
    # must set the  `zuora-version` parameter to the minor version number in
    # the request header.
    string targetDate?;
};

public type POSTTriggerRolloverResponseType record {
    # Indicates the result.
    string message?;
    # Indicates the number of funds which have been rolled over.
    int rolloverFundCount?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type POSTWorkflowDefinitionImportRequest record {
    Linkage[] linkages?;
    Task[] tasks?;
    # A workflow.
    Workflow workflow?;
};

public type GetDataLabelingJobResponse_progress record {
    # The number of objects that have failed to be labeled.
    int failed?;
    # The number of objects that have been labeled.
    int labeled?;
    # The number of objects that have timed out to be labeled.          
    int timeout?;
};

# Information about an order action of type `UpdateProduct`.
public type CreateOrderRatePlanUpdate record {
    # Array of the JSON objects containing the information for a charge update in the `updateProduct` type of order action.
    CreateOrderChargeUpdate[] chargeUpdates?;
    # Specifies whether all features in the rate plan will be cleared.
    boolean clearingExistingFeatures?;
    # Container for custom fields of the Rate Plan or Subscription Offer object. The custom fields of the Rate Plan object are used when rate plans are subscribed, and the custom fields of the Subscription Offer object are used when product offers are subscribed.
    OrdersRatePlanObjectCustomFields customFields?;
    # An external ID of the rate plan to be updated. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to update the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.
    # 
    # **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalCatalogPlanId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # The id of the rate plan to be updated. It can be the latest version or any history version id.
    string ratePlanId?;
    # The date when the Update Product order action takes effect. This field is only applicable if there is already a future-dated Update Product order action on the subscription. The format of the date is yyyy-mm-dd.
    # 
    # See [Update a Product on Subscription with Future-dated Updates](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AC_Orders_Tutorials/C_Update_a_Product_in_a_Subscription/Update_a_Product_on_Subscription_with_Future-dated_Updates) for more information about this feature.
    string specificUpdateDate?;
    # List of features associated with the rate plan.
    # The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows:
    # * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared.
    # * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.
    CreateOrderRatePlanFeatureOverride[] subscriptionProductFeatures?;
    # Number of a rate plan for this subscription.
    string subscriptionRatePlanNumber?;
    # A unique string to represent the rate plan in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added rate plan and use that token in future order actions.
    string uniqueToken?;
};

public type POSTJournalEntryItemType record {
    # Name of the accounting code.
    string accountingCodeName;
    # Accounting code type. This field is required if `accountingCodeName` is not unique.
    # 
    # Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature. 
    "AccountsReceivable"|"On-Account Receivable"|"Cash"|"OtherAssets"|"CustomerCashOnAccount"|"DeferredRevenue"|"SalesTaxPayable"|"OtherLiabilities"|"SalesRevenue"|"SalesDiscounts"|"OtherRevenue"|"OtherEquity"|"BadDebt"|"OtherExpenses" accountingCodeType?;
    # Journal entry item amount in transaction currency.
    string amount;
    # Journal entry item amount in home currency.
    # 
    # This field is required if you have set your home currency for foreign currency conversion. Otherwise, do not pass this field.
    string homeCurrencyAmount?;
    # Type of journal entry item. 
    "Credit"|"Debit" 'type;
    *JournalEntryItemObjectCustomFields;
};

public type OpenPaymentMethodTypeResponseFields record {
    # The checksum value of a payment method is used to identify if this payment method is the same as another one, or if this payment method is altered to another new payment method.
    # 
    # For example, if you select the credit card number and expiration date as the checksum fields for the CreditCard payment method type, when you modified the expiration date, Zuora considers this payment method as a different payment method compared to the original one.
    boolean checksum?;
    # The default value of the field.
    string defaultValue?;
    # An explanation of this field.
    string description?;
    # Specify `true` if this field can be updated through PUT API or UI.
    # 
    # Note: If `editable` is set to `false`, you can specify the value of this field in the UI and POST API when creating a payment method. However, after you created the payment method, you cannot edit this field through PUT API or UI.
    boolean editable?;
    # The order of the field in this type, starting from 1.
    int index?;
    # The label that is used to refer to this field in the Zuora UI.
    string label?;
    # A maximum length limitation of the field value.
    int maxLength?;
    # A minimal length limitation of the field value.
    int minLength?;
    # The API name of this field. It must be uinique.
    string name?;
    # This flag determines whether this field will be used for identifying this payment method in the Zuora UI. The field will be shown in the Payment Method field in the UI.
    boolean representer?;
    # Specify whether this field is required.
    boolean required?;
    # The type of this field.
    "string"|"date"|"datetime"|"number"|"boolean" 'type?;
    # Specify `true` if this field can be retrieved through GET API or UI for displaying payment method details.
    # 
    # Notes: 
    #   - If `visible` is set to `false`, you can still specify the value of this field in the UI and POST API when creating the payment method.
    #   - If `visible` is set to `false` and `editable` is set to `true`, this field is not accessible through GET API or UI for displaying details, but you can still see it and edit the value in the UI and PUT API when updating this payment method.
    boolean visible?;
};

public type OrderLineItemCommonPostOrder record {
    # Specifies the units to measure usage.
    string UOM?;
    # The accounting code for the Order Line Item.
    string accountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string adjustmentLiabilityAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string adjustmentRevenueAccountingCode?;
    # The actual charged amount per unit for the Order Line Item.
    # 
    # If you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    decimal amountPerUnit?;
    # The target date for the Order Line Item to be picked up by bill run for billing.
    string billTargetDate?;
    # The ID of a contact that belongs to the billing account of the order line item. Use this field to assign an existing account as the bill-to contact of an order line item.
    string billTo?;
    # The billing rule for the Order Line Item.
    "TriggerWithoutFulfillment"|"TriggerAsFulfillmentOccurs" billingRule?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractAssetAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractLiabilityAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractRecognizedRevenueAccountingCode?;
    # The currency for the order line item. You can specify a currency when creating an order line item through the "Create an order" operation.
    string currency?;
    # Container for custom fields of an Order Line Item object.
    OrderLineItemCustomFields customFields?;
    # The deferred revenue accounting code for the Order Line Item.
    string deferredRevenueAccountingCode?;
    # The description of the Order Line Item.
    string description?;
    # The flag to exclude Order Line Item related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The flag to exclude Order Line Item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.
    boolean excludeItemBookingFromRevenueAccounting?;
    # Use this field in accordance with the `inlineDiscountType` field, in the following manner:
    # * If the `inlineDiscountType` field is set as `Percentage`, this field specifies the discount percentage for each unit of the order line item. For exmaple, if you specify `5` in this field, the discount percentage is 5%.
    # * If the `inlineDiscountType` field is set as `FixedAmount`, this field specifies the discount amount on each unit of the order line item. For exmaple, if you specify `10` in this field, the discount amount on each unit of the order line item is 10.
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    decimal inlineDiscountPerUnit?;
    # The number of the invoice group associated with the order line item.
    # 
    # After enabling the Invoice Grouping feature, you can specify invoice group numbers to bill subscriptions and order line items based on specific criteria. For the same account, Zuora generates separate invoices for subscriptions and order line items, each identified by unique invoice group numbers. For more information, see [Invoice Grouping](https://knowledgecenter.zuora.com/Billing/Subscriptions/Invoice_Grouping).
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request during subscription creation, the value of this field is automatically set to `null` in the response body.
    string? invoiceGroupNumber?;
    # Use this field to specify the inline discount type, which can be `Percentage`, `FixedAmount`, or `None`. The default value is `Percentage`.
    # 
    # Use this field together with the `inlineDiscountPerUnit` field to specify inline discounts for order line items. The inline discount is applied to the list price of an order line item. 
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    "Percentage"|"FixedAmount"|"None" inlineDiscountType?;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The category for the Order Line Item, to indicate a product sale or return.
    "Sales"|"Return" itemCategory?;
    # The name of the Order Line Item.
    string itemName?;
    # The number of the Order Line Item. Use this field to specify a custom item number for your Order Line Item. If you are to use this field,  you must set all the item numbers in an order when there are several order line items in the order.
    string itemNumber?;
    # The state of an Order Line Item. If you want to generate billing documents for order line items, you must set this field to `SentToBilling`. For invoice preview, you do not need to set this field.
    # 
    # See [State transitions for an order, order line item, and fulfillment](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
    "Executing"|"Booked"|"SentToBilling"|"Complete"|"Cancelled" itemState?;
    # The type of the Order Line Item. 
    "Product"|"Fee"|"Services" itemType?;
    # The list price per unit for the Order Line Item.
    decimal listPricePerUnit?;
    # The number of the original sale order line item for a return order line item. 
    string originalOrderLineItemNumber?;
    # The number of the original sale order for a return order line item. 
    string originalOrderNumber?;
    # Use this field to assign an existing account as the owner of an order line item.
    string ownerAccountNumber?;
    # The product code for the Order Line Item.
    string productCode?;
    # Id of a Product Rate Plan Charge. Only one-time charges are supported.
    string productRatePlanChargeId?;
    # Used by customers to specify the Purchase Order Number provided by the buyer.
    string purchaseOrderNumber?;
    # The quantity of units, such as the number of authors in a hosted wiki service.
    decimal quantity?;
    # The recognized revenue accounting code for the Order Line Item.
    string recognizedRevenueAccountingCode?;
    # Use this field to relate an order line item to a subscription when you create the order line item.
    # 
    # * To relate an order line item to a new subscription which is yet to create in the same "Create an order" call, use this field in combination with the `subscriptions` > `subscriptionNumber` field in the "Create an order" operation. Specify this field to the same value as that of the `subscriptions` > `subscriptionNumber` field when you make the "Create an order" call.
    # * To relate an order line item to an existing subscription, specify this field to the subscription number of the existing subscription.
    string relatedSubscriptionNumber?;
    # The Revenue Recognition rule for the Order Line Item.
    string revenueRecognitionRule?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" revenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" revenueAmortizationMethod?;
    # The ID of the sequence set associated with the OrderLineItem.
    string sequenceSetId?;
    # Use this field to assign an existing account as the sold-to contact of an order line item, by the following rules:
    # 
    # * If the `ownerAccountNumber` field is set, then this field must be the ID of a contact that belongs to the owner account of the order line item. 
    # * If the `ownerAccountNumber` field is not set, then this field must be the ID of a contact that belongs to the billing account of the order line item.
    string soldTo?;
    # The tax code for the Order Line Item.
    string taxCode?;
    # The tax mode for the Order Line Item.
    "TaxInclusive"|"TaxExclusive" taxMode?;
    # The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the `transactionStartDate` field.
    string transactionEndDate?;
    # The date a transaction starts. The default value of this field is the order date.
    string transactionStartDate?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string unbilledReceivablesAccountingCode?;
};

public type PUTPaymentScheduleRequest record {
    # Indicates the updated amount of the pending payment schedule items.
    decimal amount?;
    # Indicates the updated currency of the pending payment schedule items.      
    string currency?;
    # Indicates the updated number of payment schedule items that are created by the payment schedule.
    # 
    # **Note:**
    #   - If "updated `occurrences` > existing `occurrences`", the following number of pending payment schedule item will be added to the payment schedule: “updated `occurrences` - existing `occurrences`”.
    #   - If "existing `occurrences` > updated `occurrences` >= the number of `processed`/`errored`/`canceled` payment schedule items", the following number of pending items will be removed by descending order of the schedule dates: "existing `occurrences` - updated `occurrences`".
    #   - If "updated `occurrences` < the number of `processed`/`erroed`/`canceled` payment schedule items", a validation error will be returned.
    int occurrences?;
    # Indicates the updated payment gateway ID of the pending payment schedule items.
    string paymentGatewayId?;
    # Indicates the updated payment method ID of the pending payment schedule items. 
    string paymentMethodId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # Here is an example:
    # ```
    # "paymentOption": [
    #   {
    #     "type": "GatewayOptions",
    #     "detail": {
    #       "SecCode":"WEB"
    #     }
    #   }
    # ]
    # ```
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    # 
    #  **Note:** To enable this field, submit a request at [Zuora Global Support](https://support.zuora.com/).
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # Indicates the updated period of the pending payment schedule items.
    "Monthly"|"Weekly"|"BiWeekly" period?;
    # Indicates the updated collection date for the next pending payment schedule item.
    string periodStartDate?;
    # Specifies at which hour of the day in the tenant’s time zone this payment will be collected. Available values: `[0,1,2,~,22,23]`.
    #   
    # If the time difference between your tenant’s timezone and the timezone where Zuora servers are is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half hour later than your scheduled time. If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs.
    int runHour?;
    *PaymentScheduleCustomFields;
};

public type PUTScAddType record {
    # The date when the rate plan charge is amended through an order or amendment. This field is not updatable.
    # 
    # This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.
    string amendedByOrderOn?;
    # Specifies the type of charges that you want a specific discount to apply to.
    # 
    # Values:
    # 
    # * `ONETIME`
    # * `RECURRING`
    # * `USAGE`
    # * `ONETIMERECURRING`
    # * `ONETIMEUSAGE`
    # * `RECURRINGUSAGE`
    # * `ONETIMERECURRINGUSAGE`
    # 
    # Available for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:
    # 
    # * Recurring
    string applyDiscountTo?;
    # Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed.
    # 
    # Values: `1`-`31`
    # 
    # Available for the following charge types:
    # 
    # * Recurring
    # * Usage-based
    string billCycleDay?;
    # Specifies how to determine the billing day for the charge. When this field is set to `SpecificDayofMonth`, set the `BillCycleDay` field. When this field is set to `SpecificDayofWeek`, set the `weeklyBillCycleDay` field.
    # 
    # Values:
    # 
    # * `DefaultFromCustomer`
    # * `SpecificDayofMonth`
    # * `SubscriptionStartDay`
    # * `ChargeTriggerDay`
    # * `SpecificDayofWeek`
    # 
    # Available for the following charge types:
    # 
    # * Recurring
    # * Usage-based
    string billCycleType?;
    # Billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD). When you renew a subscription, the current subscription term is extended by creating a new term. If any charge in your subscription has the billing period set as `SubscriptionTerm`， a new charge segment is generated for the new term.
    # 
    # Values:
    # 
    # * `Month`
    # * `Quarter`
    # * `Semi_Annual`
    # * `Annual`
    # * `Eighteen_Months`
    # * `Two_Years`
    # * `Three_Years`
    # * `Five_Years`
    # * `Specific_Months`
    # * `Subscription_Term`
    # * `Week`
    # * `Specific_Weeks`
    # 
    # Available for the following charge types:
    # 
    # * Recurring
    # * Usage-based
    string billingPeriod?;
    # Aligns charges within the same subscription if multiple charges begin on different dates.
    # 
    # Values:
    # 
    # * `AlignToCharge`
    # * `AlignToSubscriptionStart`
    # * `AlignToTermStart`
    # 
    # Available for the following charge types:
    # 
    # * Recurring
    # * Usage-based
    string billingPeriodAlignment?;
    # Billing timing for the charge for recurring charge types. Not avaliable for one time, usage and discount charges.
    # 
    # Values:
    # 
    # * `IN_ADVANCE` (default)
    # * `IN_ARREARS`
    string billingTiming?;
    # Container for charge model configuration data.
    # 
    # **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    ChargeModelConfigurationType chargeModelConfiguration?;
    # Description of the charge.
    string description?;
    # Specifies the amount of fixed-amount discount.
    # 
    # Available for the following charge type for the Discount-Fixed Amount charge model:
    # 
    # * Recurring
    decimal discountAmount?;
    # Specifies if the discount applies to the product rate plan only , the entire subscription, or to any activity in the account.
    # 
    # Values:
    # 
    # * `rateplan`
    # * `subscription`
    # * `account`
    # 
    # Available for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:
    # 
    # * Recurring
    string discountLevel?;
    # Specifies the percentage of a percentage discount. 
    # 
    # Available for the following charge type for the Discount-Percentage charge model:
    # 
    # * Recurring
    decimal discountPercentage?;
    # Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
    # 
    # Values:
    # 
    # * `Subscription_End`
    # * `Fixed_Period`
    # * `Specific_End_Date`
    # * `One_Time`
    string endDateCondition?;
    # The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    boolean excludeItemBillingFromRevenueAccounting = false;
    # The flag to exclude rate plan charges from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.
    boolean excludeItemBookingFromRevenueAccounting = false;
    # Specifies the number of units in the base set of units for this charge. Must be >=`0`.
    # 
    # Available for the following charge type for the Overage charge model:
    # 
    # * Usage-based
    decimal includedUnits?;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The list price base for the product rate plan charge.
    # 
    # Values:
    # 
    # * `Per_Billing_Period`
    # * `Per_Month`
    # * `Per_Week`
    # * `Per_Year`
    # * `Per_Specific_Months`
    # 
    # Available for the following charge type for the Flat Fee, Per Unit, Volume Pricing, and Tiered Pricing charge models:
    # 
    # * Recurring
    string listPriceBase?;
    # Unique number that identifies the charge. System-generated if not provided.
    string number?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
    # 
    # Available for the following charge type for the Overage and Tiered with Overage charge models:
    # 
    # * Usage-based
    int numberOfPeriods?;
    # The date when the rate plan charge is created through an order or amendment. This field is not updatable.
    # 
    # This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.
    string originalOrderDate?;
    # Price for units over the allowed amount. 
    # 
    # Available for the following charge type for the Overage and Tiered with Overage charge models:
    # 
    # * Usage-based
    decimal overagePrice?;
    # Determines whether to credit the customer with unused units of usage.
    # 
    # Values:
    # 
    # * `NoCredit`
    # * `CreditBySpecificRate`
    # 
    # Available for the following charge type for the Overage and Tiered with Overage charge models:
    # 
    # * Usage-based
    string overageUnusedUnitsCreditOption?;
    # Price for units in the subscription rate plan.
    # 
    # Supports all charge types for the Flat Fee and Per Unit charge models
    decimal price?;
    # Applies an automatic price change when a termed subscription is renewed. The Zuora Billing Admin setting Enable Automatic Price Change When Subscriptions are Renewed?  must be set to Yes to use this field.  See Define Default Subscription Settings for more information on setting this option.
    # 
    # Values:
    # 
    # * `NoChange` (default)
    # * `SpecificPercentageValue`
    # * `UseLatestProductCatalogPricing`
    # 
    # Available for the following charge types:
    # 
    # * Recurring
    # * Usage-based
    # * Not available for the Fixed-Amount Discount charge model.
    string priceChangeOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.
    # 
    # Decimal between -100 and 100.
    # 
    # Available for the following charge types:
    # 
    # * Recurring
    # * Usage-based
    # 
    # Not available for the Fixed-Amount Discount charge model.
    decimal priceIncreasePercentage?;
    # 
    string productRatePlanChargeId;
    # Number of a product rate-plan charge for this subscription.                     
    string productRatePlanChargeNumber?;
    # Number of units. Must be >=`0`.
    # 
    # Available for the following charge types for the Per Unit, Volume Pricing, and Tiered Pricing charge models:
    # 
    # * One-time
    # * Recurring
    decimal quantity?;
    # Specifies a rating group based on which usage records are rated.
    # 
    # Possible values:
    # 
    # - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.
    # - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    # - `ByUsageRecord`: The rating is based on each usage record.
    # - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    # - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Note:** 
    # - The `ByBillingPeriod` value can be applied for all charge models. 
    # - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
    # - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    # - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
    string ratingGroup?;
    # Specifies the number of month or week for the charges billing period. Required if you set the value of the `billingPeriod` field to `Specific_Months` or `Specific_Weeks`.
    # 
    # Available for the following charge types:
    # 
    # * Recurring
    # * Usage-based
    int specificBillingPeriod?;
    # Defines when the charge ends after the charge trigger date.
    # 
    # This field is only applicable when the `endDateCondition` field is set to `Specific_End_Date`.
    # 
    # If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
    string specificEndDate?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.
    # 
    # **Note**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.
    @constraint:Int {minValue: 1, maxValue: 200}
    int:Signed32 specificListPriceBase?;
    # Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:
    # 
    # * One-time
    # * Recurring
    # * Usage-based
    POSTTierType[] tiers?;
    # Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to `USD`.
    string triggerDate?;
    # Specifies when to start billing the customer for the charge.
    # 
    # Values:
    # 
    # * `UCE`
    # * `USA`
    # * `UCA`
    # * `USD`
    string triggerEvent?;
    # Specifies the rate to credit a customer for unused units of usage. This field applies only for overage charge models when the `OverageUnusedUnitsCreditOption` field is set to `CreditBySpecificRate`.
    # 
    # Available for the following charge type for the Overage and Tiered with Overage charge models:
    # 
    # * Usage-based
    decimal unusedUnitsCreditRates?;
    # The period type used to define when the charge ends. 
    # 
    # Values:
    # 
    # * `Billing_Periods`
    # * `Days`
    # * `Weeks`
    # * `Months`
    # * `Years`
    # 
    # You must use this field together with the `upToPeriods` field to specify the time period.
    # 
    # This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`. 
    int upToPeriods?;
    # The period type used to define when the charge ends. 
    # 
    # Values:
    # 
    # * `Billing_Periods`
    # * `Days`
    # * `Weeks`
    # * `Months`
    # * `Years`
    # 
    # You must use this field together with the `upToPeriods` field to specify the time period.
    # 
    # This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`. 
    string upToPeriodsType?;
    *RatePlanChargeObjectCustomFields;
};

public type POSTTaxationItemForCMType record {
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # Container for the finance information related to the taxation item.
    POSTTaxationItemForCMType_financeInformation financeInformation?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The ID of the credit memo that the taxation item is created for.
    string memoItemId?;
    # The name of the taxation item.
    string name;
    # The ID of the taxation item of the invoice, which the credit memo is created from. 
    # 
    # If you want to use this REST API to create taxation items for a credit memo created from an invoice, the taxation items of the invoice must be created or imported through the SOAP API call.
    # 
    # **Note:** 
    #   - This field is only used if the credit memo is created from an invoice. 
    #   - If you do not contain this field in the request body, Zuora will automatically set a value for the `sourceTaxItemId` field based on the tax location code, tax jurisdiction, and tax rate.
    string sourceTaxItemId?;
    # The amount of the tax applied to the credit memo.
    decimal taxAmount;
    # The tax code identifies which tax rules and tax rates to apply to a specific credit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date when the tax is applied to the credit memo.
    string taxDate?;
    # The tax rate applied to the credit memo.
    decimal taxRate;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate applied to the credit memo.
    "Percentage"|"FlatFee" taxRateType;
    *TaxationItemObjectCustomFields;
};

# The object that contains the payment schedule statistic of the specified date.
public type GETPaymentScheduleStatisticResponse record {
    # The specified date.
    string date?;
    PaymentRunStatistic[] paymentRuns?;
    GETPaymentScheduleStatisticResponse_paymentScheduleItems paymentScheduleItems?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# If `requiredAuth` is `true`, this object is required.
public type CalloutAuth record {
    # The domain of the callout auth.
    string domain?;
    # The field is required when `requiredAuth` is `true`.
    string password?;
    # Set this field to `true` if you want to enable the preemptive authentication.
    boolean preemptive?;
    # The field is required when `requiredAuth` is `true`.
    string username?;
};

public type ExpandedProductRatePlanChargeTier record {|
    # The unique identifier of the product rate plan charge tier.
    string id?;
    # The unique identifier of the user who created the product rate plan charge tier.
    string createdById?;
    # The time that the product rate plan charge tier gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the product rate plan charge tier.
    string updatedById?;
    # The date and time when the product rate plan charge tier was last updated.
    string updatedDate?;
    # Indicates whether the product rate plan charge tier is active.
    boolean active?;
    # The valid code corresponding to the currency for the tier's price.
    string currency?;
    # The specific amount for a fixed discount. This field is applicable for charges based on the Discount-Fixed Amount charge model.
    decimal discountAmount?;
    # The percentage of discount for a percentage discount. This field is applicable for charges based on the Discount-Percentage charge model.
    decimal discountPercentage?;
    # The end number of a range of units for the tier. This field is
    # applicable for charges based on the Tiered Pricing or Tiered with
    # Overage Pricing charge model.
    decimal endingUnit?;
    # Specifies the number of units in the base set of units.
    decimal includedUnits?;
    # Indicates whether the price is an overage price, which is the price when usage surpasses the last defined tier.
    decimal overagePrice?;
    # The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.
    decimal price?;
    # Indicates if pricing is a flat fee or is per unit. This field is for tiered and volume pricing models only.
    # 
    # **Note:** The values `Flat Fee` and `Per Unit` (with spaces) is valid for create or update calls.
    "FlatFee"|"PerUnit" priceFormat?;
    # The starting number of a range of units for the tier. This field is
    # applicable for charges based on the Tiered Pricing or Tiered with
    # Overage Pricing charge model.
    decimal startingUnit?;
    # A unique number that identifies the tier that the price applies to.
    int:Signed32 tier?;
    # Indicates whether the tier is the default tier. The default tier is the
    # tier that is used when the usage does not fall into any of the defined
    # tiers.
    boolean isDefault?;
    # The unique identifier of the product rate plan charge that the tier
    # belongs to.
    string productRatePlanChargeId?;
    # The unique identifier of the product rate plan charge definition that
    # the tier belongs to.
    string productChargeDefinitionId?;
    NestedPrpcOnExpand productRatePlanCharge?;
|};

public type DeploymentManagerResponse record {
    # ID of the Deployment Manager migration process
    string id?;
    # Status of the Deployment Manager migration process
    "DEPLOYING"|"REVERTING"|"PARTIALLY-REVERTED"|"FAILED"|"ROLLBACK-FAILED"|"REVERTED"|"COMPARING"|"SUBMITTED"|"SKIPPED"|"IDENTICAL"|"COMPARE-DONE"|"COMPARE-FAILED"|"CANCELLED" status?;
};

# Common information for callout notifications.
public type PUTPublicNotificationDefinitionCalloutCommon record {
    # The status of the callout. The default value is `true`.
    boolean active?;
    # The callout URL. It must start with 'https://'
    @constraint:String {minLength: 10}
    string calloutBaseurl?;
    # A key-value map of merge fields of this callout.
    CalloutMergeFields calloutParams?;
    # Specified whether to retry the callout when the callout fails. The default value is `true`.
    boolean calloutRetry?;
    # Description for the callout.
    @constraint:String {maxLength: 255}
    string description?;
    # The HTTP method of the callout.
    "GET"|"PUT"|"POST"|"DELETE" httpMethod?;
    # The name of the created callout.
    @constraint:String {maxLength: 255}
    string name?;
};

public type PreviewOptions record {
    # The number of periods to preview when the value of the `previewThroughType` field is set to `NumberOfPeriods`.
    int previewNumberOfPeriods?;
    # The options on how the preview through date is calculated. Available for preview only. 
    # - If you set this field to `SpecificDate`, you must specify a specific date in the `specificPreviewThruDate` field. If you also set `billTargetDate` in the `orderLineItems` field, order line items whose `billTargetDate` is no later than `specificPreviewThruDate` are returned.
    # 
    # - If you set this field to `NumberOfPeriods`, you must use the `previewNumberOfPeriods` field to specify how many periods you want to preview. In case the order only contains an order line item but not contains a subscription, if you also set `billTargetDate` in the `orderLineItems` field, order line items whose `billTargetDate` is no later than today are returned.
    # 
    # - The `TermEnd` option is invalid when any subscription included in this order is evergreen. In case the order only contains an order line item but not contains a subscription, if you set this field to `TermEnd` and set `billTargetDate` in the `orderLineItems` field, order line items whose `billTargetDate` is no later than today are returned.
    "SpecificDate"|"TermEnd"|"NumberOfPeriods" previewThruType?;
    # One or more types of the preview. It can include:
    # 
    # * ChargeMetrics: charge level metrics will be returned in the response, including: `cmrr`, `tcv`, `tcb`, and `tax`.
    # * BillingDocs: `invoices` and `creditMemos` will be returned in the response. Note `creditMemos` is only available if the Invoice Settlement feature is enabled.
    # * OrderDeltaMetrics: order delta metrics will be returned in the response, including: `orderDeltaMrr`, `orderDeltaTcb` and  `orderDeltaTcv`.
    # * OrderMetrics: order metrics will be returned in the response, including: `quantity`, `mrr`, `tcb`, `tcv`, and `elp`. **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the OrderDeltaMetrics. It is recommended that all customers use the [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/). Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported.
    # * RampMetrics: ramp metrics will be returned in the response, including: `quantity`, `mrr`, `tcb`, `tcv` metrics for each charge and each ramp interval.
    # * RampDeltaMetrics: ramp metrics changes will be returned in the response, including: `deltaQuantity`, `deltaMrr`, `deltaTcb`, `deltaTcv` metrics for each charge and each ramp interval.
    ("ChargeMetrics"|"BillingDocs"|"OrderDeltaMetrics"|"OrderMetrics"|"RampMetrics"|"RampDeltaMetrics")[] previewTypes?;
    # The end date of the order preview. You can preview the invoice charges through the preview through date. (Invoice preview only)
    # 
    # 
    # **Note:** This field is only applicable if the 'previewThruType' field is set to 'SpecificDate'.
    string specificPreviewThruDate?;
};

# Object of the billing document with which the payment schedule is associated.
# 
# **Note:**
# - This field is optional. If you have the Standalone Payment feature enabled, you can leave this field blank and set `standalone` to `true` to create standalone payments. You can also choose to create unapplied payments by leaving this object blank and setting `standalone` to `false`.
# - If Standalone Payment is not enabled, leaving this object unspecified will create unapplied payments.
public type POSTPaymentScheduleRequest_billingDocument record {
    # ID of the billing document.
    # 
    # **Note:**
    #  If a billing document is specified, either `id` or `number` of the billing document must be specified. You cannot specify both of them or skip both.
    string id?;
    # ID of the billing document.
    # 
    # **Note:**
    #  If a billing document is specified, either `id` or `number` of the billing document must be specified. You cannot specify both of them or skip both.
    string number?;
    # The type of the billing document. The default value is `Invoice`.
    "Invoice"|"DebitMemo" 'type;
};

public type CreateOrderPricingUpdate record {
    # Container for charge model configuration data.
    # 
    # **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The High Water Mark and Pre-Rated Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    ChargeModelDataOverride chargeModelData?;
    # Pricing information about a discount charge.
    DiscountPricingUpdate discount?;
    # This field is only available if you have the Delivery Pricing charge model enabled.
    RecurringDeliveryPricingUpdate recurringDeliveryBased?;
    # Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    RecurringFlatFeePricingUpdate recurringFlatFee?;
    # Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
    RecurringPerUnitPricingUpdate recurringPerUnit?;
    # Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
    RecurringTieredPricingUpdate recurringTiered?;
    # Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
    RecurringVolumePricingUpdate recurringVolume?;
    # Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    UsageFlatFeePricingUpdate usageFlatFee?;
    # Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
    UsageOveragePricingUpdate usageOverage?;
    # Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
    UsagePerUnitPricingUpdate usagePerUnit?;
    # Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
    UsageTieredPricingUpdate usageTiered?;
    # Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
    UsageTieredWithOveragePricingUpdate usageTieredWithOverage?;
    # Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
    UsageVolumePricingUpdate usageVolume?;
};

public type POSTPaymentScheduleResponse record {
    # ID of the account that owns the payment schedule.
    string accountId?;
    # Number of the account that owns the payment schedule.
    string accountNumber?;
    PaymentScheduleItemCommonResponse_billingDocument billingDocument?;
    # ID of the user who created this payment schedule.
    string createdById?;
    # The date and time the payment schedule is created.
    string createdDate?;
    # The description of the payment schedule.
    string description?;
    # ID of the payment schedule.
    string id?;
    # Indicates if the payment schedule is a custom payment schedule.
    boolean isCustom?;
    # Container for payment schedule items.
    PaymentScheduleItemCommonResponse[] items?;
    # The date the next payment will be processed.
    string nextPaymentDate?;
    # The number of payment schedule items that are created by this payment schedule.
    int occurrences?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # Number of the payment schedule.
    string paymentScheduleNumber?;
    # For recurring payment schedule only. The period of payment generation. Available values include: `Monthly`, `Weekly`, `BiWeekly`.
    # Return `null` for custom payment schedules.
    string period?;
    # Indicates whether the payments created by the payment schedule are used as a reserved payment. This field will only be available if the prepaid cash drawdown permission is enabled. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.
    boolean prepayment?;
    # The date the last payment was processed.
    string recentPaymentDate?;
    # [0,1,2,~,22,23]
    # 
    # At which hour in the day in the tenant’s timezone this payment will be collected. If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs.
    # Return `0` for custom payment schedules.
    int runHour?;
    # Indicates if the payments that the payment schedule created are standalone payments or not.
    boolean standalone?;
    # The date when the first payment of this payment schedule is proccessed.
    string startDate?;
    # The status of the payment schedule.
    # 
    # - `Active`: There are still pament schedule items to process.
    # - `Canceled`: After a payment schedule is canceled by the user, the schedule is marked as `Canceled`.
    # - `Completed`: After all payment schedule items are processed, the schedule is marked as `Completed`.
    "Active"|"Canceled"|"Completed" status?;
    # Returns `true` if the request was processed successfully.        
    boolean success?;
    # The total amount that will be collected by this payment schedule. This field will contain a null value if the `standalone` value is `true`.
    decimal totalAmount?;
    # The number of errored payments.
    int totalPaymentsErrored?;
    # The number of processed payments.
    int totalPaymentsProcessed?;
    # ID of the user who last updated this payment schedule.
    string updatedById?;
    # The date and time the payment schedule is last updated.
    string updatedDate?;
    *PaymentScheduleCustomFields;
};

public type PostCustomObjectRecordsResponse record {
    CustomObjectRecordsErrorResponse 'error?;
    # The custom object records that are succesfully created and stored
    CustomObjectRecordWithAllFields[] records?;
};

public type Inline_response_200_7_skipped record {
    # Component name.
    string component?;
    # Subcomponent name.
    string subComponent?;
    # Key to identify a particular migration data.
    string 'key?;
    # The rationale behind the non-migration of specific data.
    string reason?;
};

public type CustomObjectDefinitionUpdateActionResponse_relationship record {|
    # The cardinality of the relationship from this object to another object.
    # 
    # A `manyToOne` relationship means this object is the child object (the "many" side), and the referenced object (the "one" side) is the parent.
    # 
    # A `oneToMany` relationship means this object is the parent object (the "one" side), and the referenced object (the "many" side) is the child.
    "manyToOne"|"oneToMany" cardinality?;
    # Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`.
    FieldsAdditionalProperties fields?;
    # The namespace where the related object is located
    string namespace?;
    # The API name of the related object
    string 'object?;
    # Specifies contraints to apply to custom object records.
    CustomObjectDefinitionUpdateActionResponse_relationship_recordConstraints recordConstraints?;
|};

public type UnapplyCreditMemoType record {
    # Container for debit memos that the credit memo is unapplied from. The maximum number of debit memos is 1,000.
    CreditMemoUnapplyDebitMemoRequestType[] debitMemos?;
    # The date when the credit memo is unapplied.
    string effectiveDate?;
    # Container for invoices that the credit memo is unapplied from. The maximum number of invoices is 1,000.
    CreditMemoUnapplyInvoiceRequestType[] invoices?;
};

public type ErrorResponse record {
    ErrorResponse_reasons[] reasons?;
};

public type POSTSrpCreateType record {
    # This optional container is used to override the quantity of one or more product rate plan charges for this subscription.
    POSTScCreateType[] chargeOverrides?;
    # An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.
    # 
    # **Note:** If both `externalCatalogPlanId` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalCatalogPlanId?;
    # The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.
    # 
    # **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalIdSourceSystem?;
    # Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string externallyManagedPlanId?;
    # ID of a product rate plan for this subscription.
    string productRatePlanId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    *RatePlanObjectCustomFields;
};

public type GetEInvoicingBusinessRegionResponse record {
    # The first line of the Seller’s address, which is often a street address or business name.
    string? addressLine1?;
    # The second line of the Seller’s address, which is often the name of a building.
    string? addressLine2?;
    # The full official name that the Seller is registered with the relevant legal authority.
    @constraint:String {maxLength: 255}
    string businessName?;
    # The specify the unique identifier number of the legal entity or person that you do business with.
    # 
    # For example, you must use a GSTIN for India and Tax Identification Number (TIN) for Saudi Arabia.
    string businessNumber?;
    # The identification scheme identifier that an official registrar issues to identify the Seller as a legal entity or person.
    string businessNumberSchemaId?;
    # The unique number of the e-invoicing business region.
    string businessRegionNumber?;
    # The the name of the city where the business is located.
    string city?;
    # The name of the Seller contact to receive e-invoicing data.
    string? contactName?;
    # The short name of a country or region where you must comply with e-invoicing requirements. For example, `IN` for India. For the full list of country names and codes, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>.
    string country?;
    # Whether the e-invoicing service provider signs PDF files for billing documents.
    boolean digitalSignatureEnable?;
    # Whether the digital signature box is displayed on PDF files for billing documents.
    boolean digitalSignatureBoxEnable?;
    # The X-coordinate to determine where the digital signature box is displayed on PDF files for billing documents.
    @constraint:Number {minValue: 0}
    decimal digitalSignatureBoxPosX?;
    # The Y-coordinate to determine where the digital signature box is displayed on PDF files for billing documents. 
    @constraint:Number {minValue: 0}
    decimal digitalSignatureBoxPosY?;
    # The email address of the Seller contact to receive e-invoicing data.
    string? email?;
    # The Seller's electronic address, to which the application-level response to the e-invoice file might be delivered.
    string endpointId?;
    # The identification scheme identifier of the Seller’s electronic address.
    string endpointSchemeId?;
    # The unique ID of the e-invoicing business region.
    string id?;
    # Indicats if the request succeeds.
    boolean success?;
    # The business phone number of the Seller contact to receive e-invoicing data.
    string? phoneNumber?;
    # The short code that can identify the business address.
    string postalCode?;
    # Container for e-invoicing response field mappings that map values from Sovos response data to fields on the EInvoiceData object in Zuora. Each response field mapping consists of a field name and a field path.
    # 
    # Note that this field is applicable only to the Sovos service provider.
    # 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing/B_Configure_the_E-Invoicing_feature/Configure_e-invoicing_response_field_mappings" target="_blank">Configure e-invoicing response field mappings</a>.
    record {|string...;|} responseMapping?;
    # The unique ID of the e-invoicing service provider that is associated to the business region.
    string serviceProviderId?;
    # The name of the state or province where the business is located.
    string? state?;
    # The Seller's VAT identifier (also known as Seller VAT identification number) or the local identification (defined by the Seller’s address) of the Seller for tax purposes, or a reference that enables the Seller to state the registered tax status.
    string? taxRegisterNumber?;
    # The name that the Seller is known as, other than the legal business name.
    string? tradeName?;
};

# Information about an order action of type `OwnerTransfer`.
# 
# **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
public type OwnerTransfer record {
    # The contact id of the bill to contact that the subscription is being transferred to.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string billToContactId?;
    # Whether to clear the existing bill-to contact ID at the subscription level. This field is mutually exclusive with the `billToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingBillToContact?;
    # Whether to clear the existing invoice group number at the subscription level. This field is mutually exclusive with the `invoiceGroupNumber` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingInvoiceGroupNumber?;
    # Whether to clear the existing invoice template ID at the subscription level. This field is mutually exclusive with the `invoiceTemplateId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingInvoiceTemplate?;
    # Whether to clear the existing payment term at the subscription level. This field is mutually exclusive with the `paymentTerm` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingPaymentTerm?;
    # Whether to clear the existing sequence set ID at the subscription level. This field is mutually exclusive with the `sequenceSetId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSequenceSet?;
    # Whether to clear the existing sold-to contact ID at the subscription level. This field is mutually exclusive with the `soldToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSoldToContact?;
    # The account number of the account that the subscription is being transferred to.
    string destinationAccountNumber?;
    # The account number of the invoice owner account that the subscription is being transferred to.
    string destinationInvoiceAccountNumber?;
    # The number of the invoice group associated with the subscription.
    # 
    # After enabling the Invoice Grouping feature, you can specify invoice group numbers to bill subscriptions and order line items based on specific criteria. For the same account, Zuora generates separate invoices for subscriptions and order line items, each identified by unique invoice group numbers. For more information, see [Invoice Grouping](https://knowledgecenter.zuora.com/Billing/Subscriptions/Invoice_Grouping).
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request during subscription creation, the value of this field is automatically set to `null` in the response body.
    string? invoiceGroupNumber?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # Name of the payment term associated with the account. For example, "Net 30". The payment term determines the due dates of invoices.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string paymentTerm?;
    # The ID of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string soldToContactId?;
};

public type RecurringPerUnitPricingUpdate record {
    *PriceChangeParams;
    decimal listPrice?;
    # The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.
    decimal originalListPrice?;
    @constraint:Number {minValue: 0}
    decimal quantity?;
};

public type CreatePaymentMethodApplePayAdyen record {
    # This field is specific for setting up Apple Pay for Adyen to include payload with Apple Pay token or Apple payment data. This information should be stringified. For more information, see [Set up Adyen Apple Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Apple_Pay_on_Web/Set_up_Adyen_Apple_Pay).
    string applePaymentData?;
    # Email address associated with the payment method. This field is specific for setting up Apple Pay on Adyen v2.0. This field will be passed to Adyen as `shopperEmail`.
    string email?;
    *PaymentMethodCommonFields;
};

public type SubmitDataQueryRequest record {
    # The column separator. Only applicable if the `outputFormat` is `DSV`.
    string columnSeparator?;
    # Specifies whether Zuora compresses the query results.
    "NONE"|"GZIP"|"ZIP" compression;
    # Base-64 encoded public key of an RSA key-pair. 
    # 
    # Note that Data Query only supports 1024-bit RSA keys.
    # 
    # If you set this field, Zuora encrypts the query results using the provided public key. You must use the corresponding private key to decrypt the query results.
    string encryptionKey?;
    # Additional information about the query results.
    SubmitDataQueryRequest_output output;
    # Specifies the format of the query results.
    # 
    # * `JSON` - Each row in the query results will be a JSON object. The format of the query result file is [JSON Lines](http://jsonlines.org/).
    # * `CSV` - Each row in the query results will be a comma-separated list of values.
    # * `TSV` - Each row in the query results will be a tab-separated list of values.
    # * `DSV` - Pass any character as your custom delimiter into the `columnSeparator` field.
    "JSON"|"CSV"|"TSV"|"DSV" outputFormat;
    # The query to perform. See [SQL Queries in Data Query](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query/BA_SQL_Queries_in_Data_Query) for more information.
    string query;
    # Indicates whether the query will retrieve only the deleted record. If `readDeleted` is set to `false` or it is not included in the request body, the query will retrieve only the non-deleted records. If it is set to `true`, only the deleted records will be retrieved.
    # 
    # If you select the `deleted` column in the `query` field, both non-deleted and deleted records will be retrieved regardless of the value in the `readDeleted` field.
    # 
    # Note that Data Query is subject to Zuora Data Retention Policy. The retention period of deleted data is 30 days. You can only retrieve deleted data for 30 days through Data Query.
    boolean readDeleted = false;
    # Specify the source that data queries run against:
    # 
    # * `LIVE` represents the live transactional databases at Zuora (Data Query Live).
    # 
    # * `WAREHOUSE` represents Zuora Warehouse, which has better performance and fewer limitations than the live transactional database. This option is available only if you have the Zuora Warehouse feature enabled in your tenant. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Zuora_Warehouse/A_Zuora_Warehouse_overview" target="_blank">Zuora Warehouse</a>. <br>If this option is selected, you can specify warehouse size in `warehouseSize`.
    # 
    # If this field is not specified, the default value `LIVE` will be used.
    "LIVE"|"WAREHOUSE" sourceData?;
    # Indicates whether to use Index Join. Index join is useful when you have a specific reference value in your WHERE clause to index another large table by. See [Use Index Join](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query/Best_practices_of_Data_Query#Use_Index_Join) for more information.
    boolean useIndexJoin?;
    # Specify the size of Zuora Warehouse. This field is available only if the `sourceData` is `WAREHOUSE`.
    # 
    # If this field is not specified or set to `NULL`, the default value `xsmall` will be used.
    "xsmall"|"NULL" warehouseSize?;
};

public type UpdateEInvoiceFileTemplateRequest record {
    # The content of the e-invoice file template, which must be encoded in Base64 format.
    string content?;
    # The short name of a country or region where you must comply with e-invoicing requirements. For example, `IN` for India. For the full list of country names and codes, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>.
    string country?;
    # The type of billing documents, which the e-invoice file template is intended for.
    "Invoice"|"CreditMemo"|"DebitMemo" documentType?;
    # The name of the e-invoice file template.
    @constraint:String {maxLength: 255}
    string name?;
    # The name of an e-invoicing service provider that assists in generating e-invoice files.
    "Sovos" provider?;
};

# 
public type QueryPaymentScheduleItemsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedPaymentScheduleItem[] data?;
|};

public type SubscriptionData record {
    # Container for custom fields.
    CustomFields customFields?;
    # Specifies whether the subscription appears on a separate invoice when Zuora generates invoices.
    boolean invoiceSeparately?;
    # Notes about the subscription. These notes are only visible to Zuora users.
    @constraint:String {maxLength: 500}
    string notes?;
    RatePlans ratePlans?;
    string startDate?;
    # Subscription number of the subscription to create, for example, A-S00000001.
    # 
    # If you do not set this field, Zuora will generate a subscription number.
    @constraint:String {maxLength: 100}
    string subscriptionNumber?;
    # Container for the terms and renewal settings of the subscription.
    TermInfo terms?;
};

public type TimeSlicedTcbNetMetrics record {
    decimal amount?;
    string discountChargeNumber?;
    string endDate?;
    # Specify the reason why the metrics are generated by the certain order action.
    # 
    # This field is only available to existing Orders customers who already have access to the field.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    "IncreaseQuantity"|"DecreaseQuantity"|"ChangePrice"|"Extension"|"Contraction" generatedReason?;
    # The acount number of the billing account that is billed for the subscription.
    string invoiceOwner?;
    # The ID of the order item referenced by the order metrics.
    # 
    # This field is only available to existing Orders customers who already have access to the field.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    string orderItemId?;
    string startDate?;
    # The acount number of the billing account that owns the subscription.
    string subscriptionOwner?;
    decimal tax?;
    decimal termNumber?;
    # Indicates whether this metrics is for a regular charge or a discount charge.
    "Regular"|"Discount" 'type?;
};

public type NestedCreditMemoItemOnExpand record {|
    # The unique identifier of the credit memo item.
    string id?;
    # The unique identifier of the user who created the credit memo item.
    string createdById?;
    # The date and time when the credit memo item was created.
    string createdDate?;
    # The unique identifier of the user who last updated the credit memo item.
    string updatedById?;
    # The date and time when the credit memo item was last updated.
    string updatedDate?;
    # The amount of the credit memo item. For tax-inclusive credit memo
    # items, the amount indicates the credit memo item amount including tax.
    # For tax-exclusive credit memo items, the amount indicates the credit
    # memo item amount excluding tax.
    decimal amount?;
    # The credit memo item amount excluding tax.
    decimal amountWithoutTax?;
    # The unique ID of the credit memo item that the discount charge is applied to.
    string appliedToItemId?;
    # The amount of the credit memo that is applied to other credit memo
    # items.
    decimal appliedToOthersAmount?;
    decimal beAppliedByOthersAmount?;
    # The date when the credit memo item is charged, in `yyyy-mm-dd hh:mm:ss` format.
    string chargeDate?;
    # The description of the credit memo item.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string description?;
    # The flag to exclude the credit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The reference ID of the fulfillment associated with the credit memo item.
    string fulfillmentId?;
    # The ID of the invoice schedule associated with the credit memo item. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleId?;
    # The ID of the invoice schedule item associated with the credit memo item. The credit memo item is generated during the processing of the invoice schedule item.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleItemId?;
    # The ID of the sold-to contact associated with the credit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactId?;
    # The ID of the sold-to contact snapshot associated with the credit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactSnapshotId?;
    # The type of the credit memo item.
    string itemType?;
    # The ID of the order line item associated with the credit memo item, if applicable.
    string orderLineItemId?;
    # The type of the charge for the credit memo item. 
    "Charge"|"Discount" processingType?;
    # The number of units for the credit memo item.
    decimal quantity?;
    # The purchase order number associated the credit memo item.
    string purchaseOrderNumber?;
    # The type of the credit from item.
    "InvoiceItem"|"CreditMemoItem" creditFromItemSource?;
    # The ID of the credit from item.
    string creditFromItemId?;
    # The service end date of the credit memo item. 
    string serviceEndDate?;
    # The service start date of the credit memo item.
    string serviceStartDate?;
    # The SKU for the product associated with the credit memo item.
    string sku?;
    # The type of the source item.
    # 
    # - If a credit memo is not created from an invoice or a product rate plan charge or a return order line item, the value of this field is `SubscriptionComponent`. 
    # - If a credit memo is created from an invoice, the value of this field is `InvoiceDetail`.
    # - If a credit memo is created from a product rate plan charge, the value of this field is `ProductRatePlanCharge`.
    # - If a credit memo is created from a return order line item, the value of this field is `OrderLineItem`.
    #               
    "SubscriptionComponent"|"InvoiceDetail"|"ProductRatePlanCharge"|"OrderLineItem" sourceItemType?;
    # The ID of the subscription associated with the credit memo item.
    string subscriptionId?;
    # The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # The name of the charge associated with the credit memo item. 
    string chargeName?;
    # The number of the product rate plan charge that the credit memo is created from.
    string chargeNumber?;
    string commitmentChargeSegmentNumber?;
    string commitmentChargeNumber?;
    # The amount of the tax applied to the credit memo item.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific credit memo item.
    string taxCodeName?;
    # The calculated tax amount excluded due to the exemption.
    decimal taxExemptAmount?;
    # The unapplied amount of the credit memo item.
    decimal unappliedAmount?;
    # The units to measure usage.
    string unitOfMeasure?;
    # The per-unit price of the credit memo item.
    decimal unitPrice?;
    # The number of the subscription associated with the credit memo item.
    string subscriptionNumber?;
    # The ID of the invoice item associated with the credit memo item.
    string invoiceItemId?;
    # The ID of the product rate plan charge that the credit memo is created
    # from.
    string productRatePlanChargeId?;
    # The ID of the rate plan charge associated with the credit memo item.
    string ratePlanChargeId?;
    # The name of the revenue recognition rule governing the revenue schedule.
    string revenueRecognitionRuleName?;
    # The ID of the credit memo to which this credit memo item belongs.
    string creditMemoId?;
    # The number of deliveries dedicated to the Delivery Pricing charges. The value might be different, as follows:
    # - For the credit memo generated by a bill run, this field has a value. 
    # - For the credit memo generated from an invoice, this field is blank.
    # **Note**: This field is available only if you have the Delivery Pricing feature enabled.
    decimal numberOfDeliveries?;
    # The Recognized Revenue accounting code for the credit memo item.
    string recognizedRevenueAccountingCodeId?;
    # The Account Receivable accounting code for the credit memo item.
    string accountReceivableAccountingCodeId?;
    # The On Account accounting code for the credit memo item.
    string onAccountAccountingCodeId?;
    # The Deferred Revenue accounting code for the credit memo item.
    string deferredRevenueAccountingCodeId?;
    # The ID of the journal entry that corresponds to this transaction.
    string journalEntryId?;
    # The ID of the sold-to contact snapshot associated with the credit memo.
    string soldToContactSnapshotId?;
    # The ID of the bill-to contact snapshot associated with the credit memo.
    string billToContactSnapshotId?;
    # The subscription associated with the credit memo item.
    record {} subscription?;
    # The rate plan charge associated with the credit memo item.
    record {} ratePlanCharge?;
|};

public type ExpandedUsage record {|
    # The unique identifier of the usage.
    string id?;
    # The unique identifier of the user who created the usage.
    string createdById?;
    # The date and time when the usage was created.
    string createdDate?;
    # The unique identifier of the user who last updated the usage.
    string updatedById?;
    # The date and time when the usage was last updated.
    string updatedDate?;
    # The ID of the customer account associated with the usage.
    string accountId?;
    # The number of the customer account associated with the usage.
    string accountNumber?;
    # ID of the rate plan charge that pays for this usage.
    string ratePlanChargeId?;
    # End date of the time period in which usage is tracked. Zuora uses
    # this field value to determine the usage date.
    string endDateTime?;
    # Number of units used.
    decimal quantity?;
    # Indicates if the rating and billing engine (RBE) processed usage data for an invoice.
    "Importing"|"Pending"|"Processed" rbeStatus?;
    # Indicates if the usage records were imported from the web-based UI or the API.
    "API"|"Import" sourceType?;
    # Start date of the time period in which usage is tracked. Zuora uses
    # this field value to determine the usage date.
    string startDateTime?;
    # The original ID of the subscription that contains the fees related to the usage data.
    string subscriptionId?;
    # The date and time when the usage was submitted.
    string submissionDateTime?;
    # The units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.
    string uOM?;
    # A description of the usage record.
    string description?;
    # The unique identifier of the import.
    string importId?;
    # a customer-defined specific identifier of a usage record.
    # 
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled. See [Upload usage record with unique
    # key](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Prepaid_balance_transactions#Upload_usage_record_with_unique_key)
    # for more information.
    string uniqueKey?;
    # File ID of the uploaded usage records file. You can use this file ID with [Get files](https://developer.zuora.com/api-references/api/operation/GET_Files) to download the file.
    string fileId?;
    # The name of the import file when the usage record is imported from the file.
    string fileName?;
    NestedAccountOnExpand account?;
|};

public type GETPaymentScheduleResponse record {
    # ID of the account that owns the payment schedule.
    string accountId?;
    # Number of the account that owns the payment schedule.
    string accountNumber?;
    GETPaymentScheduleItemResponse_billingDocument billingDocument?;
    # The ID of the user who created this payment schedule.
    string createdById?;
    # The date and time the payment schedule is created.
    string createdDate?;
    # The ID of the user who canceled this payment schedule.
    string cancelledById?;
    # The date when the payment schedule was canceled.
    string cancelledOn?;
    # Specifies the effective date by when the payment schedule will be canceled.
    string cancelDate?;
    # The description of the payment schedule.
    string description?;
    # ID of the payment schedule.
    string id?;
    # Indicates if the payment schedule is a custom payment schedule.
    boolean isCustom?;
    # Container for payment schedule items.
    PaymentScheduleItemCommonResponse[] items?;
    # The date the next payment will be processed.
    string nextPaymentDate?;
    # The number of payment schedule items that are created by this payment schedule.
    int occurrences?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # Number of the payment schedule.
    string paymentScheduleNumber?;
    # For recurring payment schedule only. The period of payment generation. Available values include: `Monthly`, `Weekly`, `BiWeekly`.
    # 
    # Return `null` for custom payment schedules.
    string period?;
    # Indicates whether the payments created by the payment schedule are used as a reserved payment. This field is available only if the prepaid cash drawdown permission is enabled. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.
    boolean prepayment?;
    # The date the last payment was processed.
    string recentPaymentDate?;
    # [0,1,2,~,22,23]
    # 
    # At which hour in the day in the tenant’s timezone this payment will be collected.
    # 
    # Return `0` for custom payment schedules.
    int runHour?;
    # Indicates if the payments that the payment schedule created are standalone payments.
    boolean standalone?;
    # The date when the first payment of this payment schedule is proccessed.
    string startDate?;
    # The status of the payment schedule.
    # 
    # - Active: There is still payment schedule item to process.
    # - Canceled: After a payment schedule is canceled by the user, the schedule is marked as `Canceled`.
    # - Completed: After all payment schedule items are processed, the schedule is marked as `Completed`.
    "Active"|"Canceled"|"Completed" status?;
    # Returns `true` if the request was processed successfully.        
    boolean success?;
    # The total amount that will be collected by the payment schedule.
    decimal totalAmount?;
    # The number of errored payments.
    int totalPaymentsErrored?;
    # The number of processed payments.
    int totalPaymentsProcessed?;
    # The ID of the user who last updated this payment schedule.
    string updatedById?;
    # The date and time the payment schedule is last updated.
    string updatedDate?;
    *PaymentScheduleCustomFields;
};

public type POSTSubscriptionCancellationResponseType record {
    # The date that the subscription was canceled. 
    # 
    # This field is available in the Orders Harmonization tenants and the Subscribe and Amend tenants. This field is not available in the Orders tenants. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Common_subscription_information/AA_Overview_of_Subscriptions" target="_blank">Identify your tenant type for managing subscriptions</a>.
    string cancelledDate?;
    # The credit memo ID, if a credit memo is generated during the subscription process.
    # 
    # **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string creditMemoId?;
    # ID of the invoice, if one is generated.
    string invoiceId?;
    # Amount paid.
    decimal paidAmount?;
    # ID of the payment, if a payment is collected.
    string paymentId?;
    # The subscription ID.
    string subscriptionId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Change in the subscription monthly recurring revenue as a result of the update.
    decimal totalDeltaMrr?;
    # Change in the total contracted value of the subscription as a result of the update.
    decimal totalDeltaTcv?;
};

# The account holder information. This field is not supported in updating Credit Card Reference Transaction payment methods.
public type PUTPMAccountHolderInfo record {
    # The first line of the address for the account holder.
    # 
    # This field is required for SEPA Direct Debit payment methods on Stripe v2 for [certain countries](https://stripe.com/docs/payments/sepa-debit/set-up-payment?platform=web#web-submit-payment-method).
    string addressLine1?;
    # The second line of the address for the account holder. 
    string addressLine2?;
    # The city where the account holder stays.
    string city?;
    # The country where the account holder stays.
    # 
    # This field is required for SEPA payment methods on Stripe v2 for [certain countries](https://stripe.com/docs/payments/sepa-debit/set-up-payment?platform=web#web-submit-payment-method).
    string country?;
    # The email address of the account holder.
    string email?;
    # The phone number of the account holder.
    string phone?;
    # The state where the account holder stays.
    string state?;
    # The zip code for the address of the account holder.
    string zipCode?;
};

public type PostBillingPreviewRunParam record {
    # Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed.
    # 
    # Set one of the following values in this field to decide how the assumption is applied in the billing preview.
    # 
    #   * **All:** The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.
    #   
    #   * **None:** (Default) The assumption is not applied to the subscriptions. Zuora generates preview invoice item data and credit memo item data based on the current term end date and the target date.
    #   
    #     * If the target date is later than the current term end date, Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the current term end date.
    # 
    #     * If the target date is earlier than the current term end date, Zuora generates preview invoice item data and credit memeo item data from the first day of the customer's next billing period to the target date.
    # 
    #   * **Autorenew:** The assumption is applied to the subscriptions that have auto-renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.
    # 
    #   
    # **Note:** 
    #   - This field can only be used if the subscription renewal term is not set to 0.  
    #   
    #   
    #   - The credit memo item data is only available if you have Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. 
    string assumeRenewal?;
    # The customer batch to include in the billing preview run. If not specified, all customer batches are included. 
    # 
    # **Note**: 
    #   - **Note**: By default, you have 50 configurable account batches. To increase the limit to 200 batches, you must have the <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Performance_Booster_Elite" target="_blank">Performance Booster Elite</a> package.
    #   - This field is not available if you set the `zuora-version` request header to `314.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    @constraint:String {maxLength: 255}
    string batch?;
    # The customer batches to include in the billing preview run. You can specify multiple batches separated by comma. If not specified, all customer batches are included.
    # 
    # **Note**: 
    #   - By default, you have 50 configurable account batches. To increase the limit to 200 batches, you must have the <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Performance_Booster_Elite" target="_blank">Performance Booster Elite</a> package.
    #   - This field is only available if you set the `zuora-version` request header to `314.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    @constraint:String {maxLength: 1000}
    string batches?;
    # The charge types to exclude from the forecast run.
    # 
    # **Possible values:** OneTime, Recurring, Usage, and any comma-separated combination of these values.
    string chargeTypeToExclude?;
    # Whether draft document items are included in the billing preview run. By default, draft document items are not included.
    # 
    # This field loads draft invoice items and credit memo items. The `chargeTypeToExclude`, `targetDate`, `includingEvergreenSubscription`, and `assumeRenewal` fields do not affect the behavior of the `includingDraftItems` field.
    boolean includingDraftItems?;
    # Whether evergreen subscriptions are included in the billing preview run. By default, evergreen subscriptions are not included.
    boolean includingEvergreenSubscription?;
    # The organization(s) that this billing preview run is created for. 
    # 
    # For each item in the array, either the `organizationId` or the `organizationName` field is required.
    # 
    # This field is only required when you have already turned on Multi-Org feature.
    GETProductType_organizationLabels[] organizationLabels?;
    # The saving options. The default value is `Csv`.
    # 
    # To compare the current billing preview run result with a specified billing preview run result and store the difference in the database, you must set the `storageOption` field to `Database`. For more information, see [Billing Preview Run Result data source](https://knowledgecenter.zuora.com/Zuora_Central_Platform/Reporting/D_Data_Sources_and_Exports/C_Data_Source_Reference/Billing_Preview_Run_Result_data_source).
    # 
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="http://support.zuora.com/" target="_blank">Zuora Global Support</a>.
    "Csv"|"Database" storageOption?;
    # Specify this field to `yes` to compare the current billing preview run result with a specified billing preview run result and store the difference in the database. You can view the difference in the Billing Preview Run Result Difference data source. **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="http://support.zuora.com/" target="_blank">Zuora Global Support</a>.
    # 
    # The default value is `false`.
    boolean storeDifference?;
    # Specify an existing billing preview run result to compare the current billing preview result with. You can view the difference in the Billing Preview Run Result Difference data source. **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="http://support.zuora.com/" target="_blank">Zuora Global Support</a>.
    string comparedBillingPreviewRunId?;
    # The target date for the billing preview run. The billing preview run generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date. 
    # 
    # The value for the `targetDate` field must be in _`YYYY-MM-DD`_ format.
    # 
    # If the target date is later than the subscription current term end date, the preview invoice item data and credit memo item data is generated from the first day of the customer's next billing period to the current term end date. If you want to generate preview invoice item data and credit memo item data past the end of the subscription current term, specify the AssumeRenewal field in the request.
    # 
    # **Note:** The credit memo item data is only available if you have Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string targetDate;
};

public type PostOrderResponseType_refunds record {
    # The refund number. For example, `R-00009564`.
    @constraint:String {maxLength: 32}
    string number?;
    # An array of the refunded invoice numbers generated in this order request.
    string[] refundInvoiceNumbers?;
    # The status of the refund.
    "Success"|"Error" status?;
};

# 
public type POSTPublicNotificationDefinitionRequest_filterRule record {
    # The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/).
    # The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects). Notifications with invalid merge fields will fail to evaluate, thus will not be invoked. For example, to filter an invoice posted notification to only invoices with an amount over 1000, you would define the following condition:
    # 
    # ```Invoice.Amount > 1000```
    # 
    # There are conventions and keywords you need to be aware of. For example:
    # 
    # * `Invoice.Amount` refers to the `Amount` field of the Zuora object `Invoice`.
    # 
    # * Unlike Event Triggers, there is no access to variables with the `_old` suffix. Fields with the `_old` suffix are only available on Event Trigger conditions.
    string condition;
    # The description of the filter rule.
    @constraint:String {maxLength: 255}
    string description?;
    # The parameters of the filter rule and their name must match those in the filter rule. And all parameters must be defined in the event type payload. The name of parameters can't be duplicate. The following reserved keywords should not be used as a parameter name: `AttachmentList`, `RecipientList`, `RecipientType`, `Exceptions`, `OCP_OBJECT_TYPE`, `OCP_OBJECT_ID`, `OCP_TRIGGER_BY`
    FilterRuleParameterDefinitions parameters;
};

public type DebitMemoCollectResponseAppliedCreditMemos record {
    # The applied amount of the credit memo to the debit memo.
    decimal appliedAmount?;
    # The unique ID of the credit memo.
    string id?;
    # The unique identification number of the credit memo.
    string number?;
    # The unapplied amount of the credit memo after applied to the debit memo.
    decimal unappliedAmount?;
};

public type POSTSubscriptionPreviewResponseType record {
    # Invoice amount.
    decimal amount?;
    # Invoice amount minus tax.
    decimal amountWithoutTax?;
    # Container for charge metrics.
    POSTSubscriptionPreviewResponseType_chargeMetrics chargeMetrics?;
    # Monthly recurring revenue of the subscription.
    decimal contractedMrr?;
    # 
    # Container for credit memos.
    # 
    # **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. 
    POSTSubscriptionPreviewResponseType_creditMemo creditMemo?;
    # The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
    # 
    # - If this field is specified, the specified date is used as the billing document date. 
    # - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
    string documentDate?;
    # Container for invoices.
    # 
    # 
    #  **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header. Also, the response structure is changed and the following invoice related response fields are moved to this **invoice** container:
    #   
    #    * amount
    #    * amountWithoutTax
    #    * taxAmount
    #    * invoiceItems
    #    * targetDate
    POSTSubscriptionPreviewResponseType_invoice invoice?;
    # Container for invoice items.
    POSTSubscriptionPreviewInvoiceItemsType[] invoiceItems?;
    # Date through which charges are calculated on the invoice, as yyyy-mm-dd.
    # 
    # **Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, 196.0, and 206.0.
    string invoiceTargetDate?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.
    # 
    # **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header.
    string targetDate?;
    # Tax amount on the invoice.
    decimal taxAmount?;
    # Total contracted value of the subscription.
    decimal totalContractedValue?;
};

# Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
public type RecurringPerUnitPricingOverride record {
    *PriceChangeParams;
    # Per-unit price of the charge in each recurring period.
    decimal listPrice?;
    # Specifies the duration of each recurring period.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.
    decimal originalListPrice?;
    # List of interval pricing in the charge. 
    # The `priceIntervals` field is not supported for a charge subscribed via a RatePlan, you can only override the `priceIntervals` field for a charge subscribed via an offer. 
    # 
    # **Note**: You must enable the Offers feature to access this field. The Offers feature is in the Early Adopter phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at <a href="https://support.zuora.com/hc/en-us" target="_blank">Zuora Global Support</a>.
    PriceIntervalWithPrice[] priceIntervals?;
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.
    # 
    # **Note**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.              
    @constraint:Int {minValue: 1, maxValue: 200}
    int:Signed32 specificListPriceBase?;
    # Unit of measure of the standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    decimal uom?;
};

public type CreditMemoUnapplyDebitMemoRequestType record {
    # The credit memo amount to be unapplied from the debit memo.
    decimal amount;
    # The unique ID of the debit memo that the credit memo is unapplied from.
    string debitMemoId;
    # Container for items. The maximum number of items is 1,000.
    CreditMemoUnapplyDebitMemoItemRequestType[] items?;
};

public type OrderNumber_cancel_body record {
    # The reason for cancelling the order.
    string cancelReason?;
};

public type UsageTieredPricingUpdate record {
    *PriceChangeParams;
    ChargeTier[] tiers?;
};

public type GETDebitMemoTypewithSuccess record {
    # The ID of the customer account associated with the debit memo.
    string accountId?;
    # The number of the customer account associated with the debit memo.
    string accountNumber?;
    # The total amount of the debit memo.
    decimal amount?;
    # Whether debit memos are automatically picked up for processing in the corresponding payment run. 
    # 
    # By default, debit memos are automatically picked up for processing in the corresponding payment run.      
    boolean autoPay?;
    # The balance of the debit memo.
    decimal balance?;
    # The applied amount of the debit memo.
    decimal beAppliedAmount?;
    # The ID of the bill-to contact associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string billToContactId?;
    # The ID of the Zuora user who cancelled the debit memo.
    string cancelledById?;
    # The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the debit memo.
    string comment?;
    # The ID of the Zuora user who created the debit memo.
    string createdById?;
    # The date and time when the debit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The currency of the debit memo.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # The date when the debit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.
    string debitMemoDate?;
    # The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.
    string dueDate?;
    # The error code returned when the e-invoice file status is `Failed`. This code can either be a Zuora-generated error code or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorCode?;
    # The error message returned when the e-invoice file status is `Failed`. This message can either be a Zuora-generated error message or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorMessage?;
    # The ID of the e-invoice file generated for the debit memo.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceFileId?;
    # The status of the e-invoice file generation for the debit memo. 
    # 
    # - If e-invoice file generation succeeds, this field is either `Generated` or `Success`, and both the error code and message are empty, and the `eInvoiceFileId` field stores the ID of the generated e-invoice file.
    # - If a failure occurs during e-invoice file generation, this field is `Failed` and an error code and an error message are returned respectively in the `einvoiceErrorCode` and `einvoiceErrorMessage` fields. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    "Processing"|"Generated"|"Success"|"Failed" einvoiceStatus?;
    # The unique ID of the debit memo.
    string id?;
    # The number of the invoice group associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string? invoiceGroupNumber?;
    # The ID of the latest PDF file generated for the debit memo.
    string latestPDFFileId?;
    # The unique identification number of the debit memo.
    string number?;
    # The name of the payment term associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string paymentTerm?;
    # The ID of the Zuora user who posted the debit memo.
    string postedById?;
    # The date and time when the debit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.
    string postedOn?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty.
    string reasonCode?;
    # The ID of the credit memo from which the debit memo was created.
    string referredCreditMemoId?;
    # The ID of a referred invoice.
    string referredInvoiceId?;
    # The ID of the sequence set associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string sequenceSetId?;
    # The type of the debit memo source.
    "Subscription"|"Standalone"|"Order"|"Consolidation"|"Invoice"|"CreditMemo" sourceType?;
    # The status of the debit memo. 
    "Draft"|"Posted"|"Canceled"|"Error"|"PendingForTax"|"Generating"|"CancelInProgress" status?;
    # The target date for the debit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.
    string targetDate?;
    # The amount of taxation.
    decimal taxAmount?;
    # The message about the status of tax calculation related to the debit memo. If tax calculation fails in one debit memo, this field displays the reason for the failure.
    string taxMessage?;
    # The status of tax calculation related to the debit memo.
    # 
    # **Note**: This field is only applicable to tax calculation by third-party tax engines.
    "Complete"|"Error" taxStatus?;
    # The calculated tax amount excluded due to the exemption.
    decimal totalTaxExemptAmount?;
    # Whether the debit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The ID of the Zuora user who last updated the debit memo.
    string updatedById?;
    # The date and time when the debit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:31:10.
    string updatedDate?;
    *DebitMemoObjectNSFields;
    *DebitMemoObjectCustomFields;
};

public type ProxyActioncreateRequest record {
    # 
    ZObject[] objects;
    # 
    string 'type;
};

public type ExpandedContact record {|
    # The unique identifier of the contact.
    string id?;
    # The unique identifier of the user who created the contact.
    string createdById?;
    # The date and time when the contact was created.
    string createdDate?;
    # The unique identifier of the user who last updated the contact.
    string updatedById?;
    # The date and time when the contact was last updated.
    string updatedDate?;
    # The ID of the account associated with the contact.
    string accountId?;
    # The first line of the contact's address, which is often a street address or business name.
    @constraint:String {maxLength: 255}
    string address1?;
    # The second line of the contact's address.
    @constraint:String {maxLength: 255}
    string address2?;
    # The city of the contact's address.
    @constraint:String {maxLength: 40}
    string city?;
    # The country of the contact's address.
    @constraint:String {maxLength: 64}
    string country?;
    # The county. May optionally be used by Zuora Tax to calculate county tax.
    @constraint:String {maxLength: 32}
    string county?;
    # The contact's fax number. 
    @constraint:String {maxLength: 40}
    string fax?;
    # A description for the contact.
    @constraint:String {maxLength: 100}
    string description?;
    # The contact's first name.
    @constraint:String {maxLength: 100}
    string firstName?;
    # The contact's home phone number.
    @constraint:String {maxLength: 40}
    string homePhone?;
    # The contact's last name.
    @constraint:String {maxLength: 100}
    string lastName?;
    # The mobile phone number of the contact.
    @constraint:String {maxLength: 100}
    string mobilePhone?;
    # A nickname for the contact.
    @constraint:String {maxLength: 100}
    string nickname?;
    # An additional phone number for the contact.
    @constraint:String {maxLength: 40}
    string otherPhone?;
    # The type of the additional phone number.
    "Work"|"Mobile"|"Home"|"Other" otherPhoneType?;
    # The contact's personal email address.
    @constraint:String {maxLength: 74}
    string personalEmail?;
    # The state or province of the contact's address.
    @constraint:String {maxLength: 40}
    string state?;
    # ZIP code or other postal code of the contact's address.
    @constraint:String {maxLength: 20}
    string postalCode?;
    # If using Zuora Tax, a region string as optionally defined in your tax rules. 
    @constraint:String {maxLength: 32}
    string taxRegion?;
    # The contact's business email address.
    @constraint:String {maxLength: 74}
    string workEmail?;
    # The contact's business phone number.
    @constraint:String {maxLength: 40}
    string workPhone?;
|};

# Container for the finance information related to the payment.
public type GETARPaymentTypewithSuccess_financeInformation record {
    # The accounting code that maps to a bank account in your accounting system.
    string bankAccountAccountingCode?;
    # The type of the accounting code that maps to a bank account in your accounting system.
    string bankAccountAccountingCodeType?;
    # Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The accounting code for the unapplied payment.
    string unappliedPaymentAccountingCode?;
    # The type of the accounting code for the unapplied payment.
    string unappliedPaymentAccountingCodeType?;
};

public type POSTPaymentMethodUpdaterResponse record {
    # The ID of the running process when the exception occurs. This field is available only if the `success` field is `false`.
    string processId?;
    # The container of the error code and message. This field is available only if the `success` field is `false`.
    POSTPaymentMethodUpdaterResponse_reasons[] reasons?;
    # The ID of the request. This field is available only if the `success` field is `false`
    string requestId?;
    # Indicates whether the request to create a PMU batch is sent successfully.
    boolean success?;
};

public type PUTSubscriptionPatchRequestType_ratePlans record {
    PUTSubscriptionPatchRequestType_charges[] charges?;
    # Container for custom fields of the Rate Plan or Subscription Offer object. The custom fields of the Rate Plan object are used when rate plans are subscribed, and the custom fields of the Subscription Offer object are used when product offers are subscribed.
    OrdersRatePlanObjectCustomFields customFields?;
    # The rate plan id in any version of the subscription. This will be linked to the only one rate plan in the current version.
    string ratePlanId?;
};

# An object containing task counts.
public type GetWorkflowResponse_tasks record {
    # The number of tasks in **Error** state.
    int 'error?;
    # The number of tasks in **Pending** state.
    int pending?;
    # The number of tasks in **Processing** state.
    int processing?;
    # The number of tasks in **Queued** state.
    int queued?;
    # The number of tasks in **Stopped** state.
    int stopped?;
    # The number of tasks in **Success** state.
    int success?;
    # The total number of tasks.
    int total?;
};

public type CreatePaymentMethodBacs record {
    # The container for the account holder information. The nested `accountHolderName` field is required.
    CreatePaymentMethodBetalingsservice_accountHolderInfo accountHolderInfo?;
    # The number of the customer's bank account.
    string accountNumber?;
    # The masked account number such as ****1234.
    # When creating BACS payment methods on Stripe, if the `tokens` field is provided, this `accountMaskNumber` field is required. For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration" target="_blank">Overview of Stripe payment gateway integration</a>.
    string accountMaskNumber?;
    # The sort code or number that identifies the bank. This is also known as the sort code.
    string bankCode?;
    # The container of the mandate information for the payment method.
    CreatePaymentMethodCreditCard_mandateInfo mandateInfo?;
    # When creating a BACS payment method on Adyen v2.0, set this field to `true` to support processing BACS recurring payments. For more information about other requirements for processing BACS recurring payments, see <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Adyen_Integration_v2.0/A_Overview_of_Adyen_Integration_v2.0#Direct_Debit_UK_(BACS)" target="_blank">Overview of Adyen Integration v2.0</a>.
    boolean tokenize?;
    # To create tokenized BACS payment methods on Stripe v2, pass in the existing token information through the fields in this container.
    # For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration" target="_blank">Overview of Stripe payment gateway integration</a>.
    CreatePaymentMethodBacs_tokens tokens?;
    # The container for payment method processing options.
    CreatePaymentMethodCreditCard_processingOptions processingOptions?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type POSTReverseRolloverResponseType record {
    # Indicates the result.
    string message?;
    # Indicates the number of funds which have been rolled back.
    int reverseRolloverFundCount?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type GETAccountSummaryUsageType record {
    # Number of units used.
    string quantity?;
    # The start date of a usage period as `yyyy-mm`. Zuora uses this field value to determine the usage date.
    string startDate?;
    # Unit by which consumption is measured, as configured in the Billing Settings section of the web-based UI.
    string unitOfMeasure?;
};

# Container for custom fields of a Credit Memo object.
public type CreditMemoObjectCustomFields record {
};

public type GETJournalEntriesInJournalRunType record {
    # Key name that represents the list of journal entries.
    GETJournalEntryDetailTypeWithoutSuccess[] journalEntries?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type DebitMemoFile record {
    # The ID of the debit memo PDF file. This is the ID for the file object and different from the file handle ID in the `pdfFileUrl` field. To open a file, you have to use the file handle ID.
    string id?;
    # The REST URL for the debit memo PDF file. Click the URL to open the debit memo PDF file.
    string pdfFileUrl?;
    # The version number of the debit memo PDF file.
    int versionNumber?;
};

public type CustomObjectDefinition_schema_recordConstraints_create record {
    # Specifies whether Zuora validates the values of mapped fields
    # in custom object records.
    boolean enforceValidMapping?;
};

# Information about the account that will own the order.
public type PreviewAccountInfo record {
    # Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as "AutoSet".
    @constraint:Int {minValue: 0, maxValue: 31}
    int billCycleDay;
    # ISO 3-letter currency code (uppercase). For example, USD.
    @constraint:String {maxLength: 3}
    string currency;
    # Container for custom fields of an Account object.
    AccountObjectCustomFields customFields?;
    PreviewContactInfo soldToContact?;
    # Information about the tax exempt status of a customer account.
    TaxInfo taxInfo?;
};

public type ProxyModifyProductRatePlanCharge record {
    # The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.
    @constraint:String {maxLength: 100}
    string AccountingCode?;
    # Specifies the type of charges that you want a specific discount to apply to. All field values are case sensitive and in all-caps.
    "ONETIME (1)"|"RECURRING (2)"|"USAGE (4)"|"ONETIMERECURRING (3)"|"ONETIMEUSAGE (5)"|"RECURRINGUSAGE (6)"|"ONETIMERECURRINGUSAGE (7)" ApplyDiscountTo?;
    # Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed. The BCD value in the account can override the BCD in this object.
    # 
    # **Character limit**: 2
    # 
    # **Values**: a valid BCD integer, 1 - 31
    int:Signed32 BillCycleDay?;
    # Specifies how to determine the billing day for the charge.
    # 
    # **Notes**:
    #   - If you set this field to `SpecificDayofMonth`, you must specify which day of the month as the billing day for the charge in the BillCycleDay field. 
    #   - If you set this field to `SpecificDayofWeek`, you must specify which day of the week as the billing day for the charge in the WeeklyBillCycleDay field. 
    #   - By default, `TermStartDay` and `TermEndDay` are only available for prepayment charges. But you can reach out to Zuora Global Support to request enabling it for non-prepaid recurring charges. Meanwhile, note the following rules applies to these options:
    #     - The Term End Day option of the Billing Day field must be coupled with the Align to Term End option of the Billing Period Alignment field.
    #     - For prepaid charges, the Term Start Day option of the Billing Day field must be coupled with the existing Align to Term Start option of the Billing Period Alignment field.
    #     - For non-prepaid recurring charges: If Billing Day is set to Term Start Day, Billing Period Alignment must be Align to Term Start; If Billing Day is set to Term End Day, Billing Period Alignment can be set to other values.
    "DefaultFromCustomer"|"SpecificDayofMonth"|"SubscriptionStartDay"|"ChargeTriggerDay"|"SpecificDayofWeek"|"TermStartDay"|"TermEndDay" BillCycleType;
    # The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).
    # 
    # **Notes**:
    #   - Specify the number of months or weeks in the SpecificBillingPeriod field if you set this field to `Specific Months` or `Specific Weeks`.
    #   - The `Subscription Term` value is in **Limited Availability**.
    "Month"|"Quarter"|"Annual"|"Semi-Annual"|"Specific Months"|"Subscription Term"|"Week"|"Specific Weeks"|"Specific Days" BillingPeriod;
    # Aligns charges within the same subscription if multiple charges begin on different dates.
    # 
    # **Note:** The `AlignToTermEnd` value is only available for prepayment charges by default. Reach out to Zuora Global Support to enable it for non-prepaid recurring charges.
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart"|"AlignToTermEnd" BillingPeriodAlignment?;
    # The billing timing for the charge. You can choose to bill in advance or in arrears for recurring charge types. This field is not used in one-time or usage based charge types.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    "In Advance"|"In Arrears" BillingTiming?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `141` or higher. Otherwise, an error occurs.
    # 
    # This field defines what type of charge it is in Advanced Consumption Billing:
    # * Standard: Normal charge with no Prepayment or Commitment or Drawdown.
    # * Prepayment: For recurring charges. Unit or currency based prepaid charge.
    # * CommitmentTrueUp: For recurring charges. Currency based minimum commitment charge.
    # * Drawdown: For usage charges. Drawdown from prepaid funds.
    # * DrawdownAndCreditCommitment: For usage charges. Drawdown from prepaid funds and then credit to minimum commitment funds.
    # * CreditCommitment: For usage charges. Credit to minimum commitment funds.
    "Standard"|"Prepayment"|"CommitmentTrueUp"|"Drawdown"|"CreditCommitment"|"DrawdownAndCreditCommitment" ChargeFunction?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `133` or higher. Otherwise, an error occurs. 
    # 
    # This field defines the type of commitment. A prepaid charge can be `UNIT` or `CURRENCY`. A minimum commitment(in-arrears) charge can only be `CURRENCY` type. For topup(recurring or one-time) charges, this field indicates what type of funds are created. 
    # * If UNIT, it will create a fund with given prepaidUom.
    # * If CURRENCY, it will create a fund with the currency amount calculated in list price.
    # 
    # For drawdown(usage) charges, this field indicates what type of funds are drawdown from that created from topup charges.
    "UNIT"|"CURRENCY" CommitmentType?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    # 
    # **Notes:**
    #   - The `Delivery Pricing` value is available only if you have the Delivery Pricing charge model enabled.
    #   - The `MultiAttributePricing` value is available only if you have the Multi-Attribute Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.       
    #   - The `PreratedPerUnit` and  value is available only if you have the Pre-rated Per Unit Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.       
    #   - The `PreratedPricing` value is available only if you have the Pre-rated Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.     
    #   - The `HighWatermarkVolumePricing`value is available only if you have the High Water Mark Volume Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.       
    #   - The `HighWatermarkTieredPricing` value is available only if you have the High Water Mark Tiered Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    "Discount-Fixed Amount"|"Discount-Percentage"|"Flat Fee Pricing"|"Per Unit Pricing"|"Overage Pricing"|"Tiered Pricing"|"Tiered with Overage Pricing"|"Volume Pricing"|"Delivery Pricing"|"MultiAttributePricing"|"PreratedPerUnit"|"PreratedPricing`"|"HighWatermarkVolumePricing"|"HighWatermarkTieredPricing" ChargeModel;
    # Container for charge model configuration data.
    # 
    # **Notes**:
    #   - This field is only available if you have the Pre-Rated Pricing or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `102` or later. Otherwise, an error occurs with "Code: INVALID_VALUE".
    ProxyCreateOrModifyProductRatePlanChargeChargeModelConfiguration ChargeModelConfiguration?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information. 
    "TimeBased"|"ConsumptionBased"|"FullCreditBack" CreditOption?;
    # The default quantity of units, such as the number of authors in a hosted wiki service. This field is required if you use a per-unit pricing model. 
    # 
    # **Character limit**: 16
    # 
    # **Values**: a valid quantity value. 
    # 
    # **Note:** When the `ChargeModel` field is set to `Tiered Pricing` or `Volume Pricing`, if this field is not specified, the value will default to `0`.
    decimal DefaultQuantity?;
    # The name of the deferred revenue account for this charge.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    @constraint:String {maxLength: 100}
    string DeferredRevenueAccount?;
    ProxyCreateOrModifyDeliverySchedule DeliverySchedule?;
    # A description of the charge.
    @constraint:String {maxLength: 500}
    string Description?;
    # Specifies if the discount applies to just the product rate plan, the entire subscription, or to any activity in the account.
    "rateplan"|"subscription"|"account" DiscountLevel?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). See [Fields related to Prepaid with Drawdown](https://knowledgecenter.zuora.com/Central_Platform/API/G_SOAP_API/E1_SOAP_API_Object_Reference/ProductRatePlanCharge#Fields_related_to_Prepaid_with_Drawdown) for more information.
    decimal DrawdownRate?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # Unit of measurement for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). 
    string DrawdownUom?;
    # Defines when the charge ends after the charge trigger date.
    # 
    # **Values**:
    #   - `SubscriptionEnd`: The charge ends on the subscription end date after a specified period based on the trigger date of the charge.  
    #   - `FixedPeriod`: The charge ends after a specified period based on the trigger date of the charge. If you set this field to `FixedPeriod`, you must specify the length of the period and a period type by defining the `UpToPeriods` and `UpToPeriodsType` fields. 
    # 
    #   **Note**: If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
    "SubscriptionEnd"|"FixedPeriod" EndDateCondition = "SubscriptionEnd";
    # The flag to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Notes**: 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `115` or later. Otherwise, an error occurs.
    #   - This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean ExcludeItemBillingFromRevenueAccounting = false;
    # The flag to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Notes**: 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `115` or later. Otherwise, an error occurs.
    #   - This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean ExcludeItemBookingFromRevenueAccounting = false;
    # Specifies the number of units in the base set of units.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a positive decimal value
    decimal IncludedUnits?;
    # Indicates whether the charge segment is allocation eligible in revenue recognition. The default value is `False`.
    # 
    # **Values**: `True`, `False`
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.
    boolean IsAllocationEligible?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # Indicates whether this charge is a prepayment (topup) charge or a drawdown charge. 
    # 
    # **Values**: `true` or `false`.
    boolean IsPrepaid?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.
    # 
    # The value is either "True" or "False". It determines whether the rollover fields are needed.
    boolean IsRollover?;
    # **Note**: This field is only applicable to the Discount - Percentage charge model.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 130 or higher. Otherwise, an error occurs.
    # 
    # This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:
    #   - `True`: This is a stacked discount, which should be calculated by stacking with other discounts.
    #   - `False`: This is not a stacked discount, which should be calculated in sequence with other discounts.
    # 
    # For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).      
    boolean IsStackedDiscount?;
    # Specifies how to perform the accounting during revenue recognition. The default value is `False`.
    # 
    # **Values**: `True`, `False`
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.
    boolean IsUnbilled?;
    # 
    boolean LegacyRevenueReporting?;
    # The list price base for the product rate plan charge.
    "Per Billing Period"|"Per Month"|"Per Week"|"Per Year"|"Per Specific Months" ListPriceBase?;
    # Specifies the maximum number of units for this charge. Use this field and the `MinQuantity` field to create a range of units allowed in a product rate plan charge.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a positive decimal value
    decimal MaxQuantity?;
    # Specifies the minimum number of units for this charge. Use this field and the `MaxQuantity` field to create a range of units allowed in a product rate plan charge.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a positive decimal value
    decimal MinQuantity?;
    # The name of the product rate plan charge.
    @constraint:String {maxLength: 100}
    string Name?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model. The valid value must be a positive whole number.
    int NumberOfPeriod?;
    # Determines when to calculate overage charges. If the value of the SmoothingMode field is not specified, the value of this field is ignored.
    # 
    # **Values**: 
    #   - `EndOfSmoothingPeriod`: This option is used by default. The overage is charged at the end of the smoothing period.
    #   - `PerBillingPeriod`: The overage is charged on-demand rather than waiting until the end of the smoothing period.
    "EndOfSmoothingPeriod"|"PerBillingPeriod"? OverageCalculationOption?;
    # Determines whether to credit the customer with unused units of usage.
    "NoCredit"|"CreditBySpecificRate"? OverageUnusedUnitsCreditOption?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number.
    decimal PrepaidQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.
    # 
    # Unit of measurement for a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    string PrepaidUom?;
    # Applies an automatic price change when a termed subscription is renewed.
    "NoChange"|"SpecificPercentageValue"|"UseLatestProductCatalogPricing"? PriceChangeOption = "NoChange";
    # Applies an automatic price change when a termed subscription is renewed.
    "FromTenantPercentageValue"|"SpecificPercentageValue" PriceIncreaseOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the value to `SpecificPercentageValue`.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a decimal value between -100 and 100
    decimal? PriceIncreasePercentage?;
    # This field is used to maintain the product category for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later. 
    string ProductCategory?;
    # This field is used to maintain the product class for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.
    string ProductClass?;
    # This field is used to maintain the product family for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.
    string ProductFamily?;
    # This field is used to maintain the product line for integration with Zuora Revenue. 
    # 
    # **Notes**: 
    #   - This field is available only if you have the Additional Revenue Fields property enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 132 or later.              
    string ProductLine?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 140 or higher. Otherwise, an error occurs.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" RevenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 140 or higher. Otherwise, an error occurs.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" RevenueAmortizationMethod?;
    # The natural key of the product rate plan charge. 
    # 
    # For existing Product Rate Plan Charge objects that are created before this field is introduced, this field will be null. Use this field to specify a value for only these objects. Zuora also provides a tool to help you automatically backfill this field with tenant ID for your existing product catalog. If you want to use this backfill tool, contact [Zuora Global Support](https://support.zuora.com/).
    # 
    # **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.
    @constraint:String {maxLength: 100}
    string ProductRatePlanChargeNumber?;
    # Container for pricing information associated with the product rate plan charge.
    ProxyCreateOrModifyProductRatePlanChargeTierData ProductRatePlanChargeTierData;
    # The ID of the product rate plan associated with this product rate plan charge.
    @constraint:String {maxLength: 32}
    string ProductRatePlanId;
    # Specifies a rating group based on which usage records are rated.
    # 
    # Possible values:
    #   - `ByBillingPeriod`: The rating is based on all the usages in a billing period. 
    #   - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    #   - `ByUsageRecord`: The rating is based on each usage record.
    #   - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    #   - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Note:** 
    #   - The `ByBillingPeriod` value can be applied for all charge models. 
    #   - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
    #   - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    #   - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload"|"ByGroupId"? RatingGroup = "ByBillingPeriod";
    # The name of the recognized revenue account for this charge.
    #   - Required when the Allow Blank Accounting Code setting is No.
    #   - Optional when the Allow Blank Accounting Code setting is Yes.
    # 
    #   This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    @constraint:String {maxLength: 100}
    string RecognizedRevenueAccount?;
    # Associates this product rate plan charge with a specific revenue recognition code.
    string? RevRecCode?;
    # Specifies when revenue recognition begins.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate"? RevRecTriggerCondition?;
    # Determines when to recognize the revenue for this charge.
    "Recognize upon invoicing"|"Recognize daily over time" RevenueRecognitionRuleName?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" RolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    decimal RolloverPeriods?;
    # Specifies the smoothing model for an overage smoothing charge model.
    "RollingWindow"|"Rollover"? SmoothingModel?;
    # Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`.
    # The valid value is a positive integer.
    int? SpecificBillingPeriod?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `ListPriceBase` field to `Per Specific Months`.
    # 
    # **Notes**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `129` or later. Otherwise, an error occurs.
    #   - The value of this field is `null` if you do not set the value of the `ListPriceBase` field to `Per Specific Months`.
    int:Signed32? SpecificListPriceBase?;
    # Specifies the tax code for taxation rules. Required when the Taxable field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.
    @constraint:String {maxLength: 64}
    string TaxCode?;
    # Determines how to define taxation for the charge. Required when the Taxable field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.
    "TaxExclusive"|"TaxInclusive"? TaxMode?;
    # Determines whether the charge is taxable. When set to `True`, the TaxMode and TaxCode fields are required when creating or updating th ProductRatePlanCharge object.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `True`, `False`
    # 
    # **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.
    boolean Taxable?;
    # Specifies when to start billing the customer for the charge.
    # 
    # **Values**:
    #   - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    #   - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
    #   - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance" TriggerEvent;
    # Specifies the units to measure usage. 
    # 
    # **Note**: You must specify this field when creating the following charge models:
    #   - Per Unit Pricing
    #   - Volume Pricing
    #   - Overage Pricing
    #   - Tiered Pricing
    #   - Tiered with Overage Pricing
    string? UOM?;
    # Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
    # 
    # **Character limit**: 5
    # 
    # **Values**: a whole number between 0 and 65535, exclusive
    # 
    # **Notes**:
    #   - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`. 
    #   - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
    int? UpToPeriods?;
    # The period type used to define when the charge ends.
    # 
    # **Notes**: 
    #  - You must use this field together with the `UpToPeriods` field to specify the time period.
    #  - This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`. 
    "Billing Periods"|"Days"|"Weeks"|"Months"|"Years"? UpToPeriodsType = "Billing Periods";
    # Determines how Zuora processes usage records for per-unit usage charges. 
    "EndOfBillingPeriod"|"OnDemand"? UsageRecordRatingOption = "EndOfBillingPeriod";
    # Determines whether to define a new accounting code for the new discount charge.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `True`, `False`
    boolean? UseDiscountSpecificAccountingCode;
    # Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. 
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    boolean UseTenantDefaultForPriceChange?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs. 
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" ValidityPeriodType?;
    # Specifies which day of the week as the bill cycle day (BCD) for the charge.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    "Sunday"|"Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"|"Saturday" WeeklyBillCycleDay?;
    # Allow the discount duration to be aligned with the billing period partially.
    # 
    # **Note**: You must enable the [Enhanced Discount](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    boolean ApplyToBillingPeriodPartially?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 137 or higher. Otherwise, an error occurs.
    # 
    # The period length of the rollover fund.
    int RolloverPeriodLength?;
    # The price lookup formula defined for the product rate plan charge, which is used to identify
    # the correct and relevant charge definition based on the context.
    # 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Attribute-based_pricing/Price_lookup_in_Attribute-based_Pricing"  target="_blank">Price lookup in Attribute-based Pricing</a>.
    # 
    # 
    # **Notes**: 
    #   - This field is available only if the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Attribute-based_pricing" target="_blank">Attribute-based Pricing</a> feature is enabled.
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to 138 or higher.
    string Formula?;
    *ProductRatePlanChargeObjectNSFields;
    *ProductRatePlanChargeObjectCustomFields;
};

public type PutCascadingPaymentMethodsConfigurationRequest record {
    # `true` indicates that you have collected consent from your customer to use the Cascading Payment Method feature. `false` indicates the consent was not collected and the Cascading Payment Method feature is not enabled.
    # 
    # The `priorities` field can be specified only if `consent` is `true`.
    boolean consent?;
    # Container for the priority configuration of payment methods. You can add up to three payment methods to this container. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_Methods/B2_Cascade_payment_methods" target="_blank">Cascade payment methods</a>.
    # 
    # `priorities` is required if `consent` is `true`.
    PutCascadingPaymentMethodsConfigurationRequest_priorities[] priorities?;
};

public type ProxyCreateUsage record {
    #  The ID of the account associated with the usage data. This field is only required if no value is specified for the `AccountNumber` field.
    # **Character limit**: 32 **Values**: a valid account ID. 
    string AccountId?;
    #  The number of the account associated with the usage data. This field is only required if no value is specified for the `AccountId` field.
    # **Character limit**: 50 **Values**: a valid account number. 
    string AccountNumber?;
    #  The OrginalId of the rate plan charge related to the usage record, e.g., `2c9081a03c63c94c013c6873357a0117` **Character limit**: 32 **Values**: a valid rate plan charge OriginalID. 
    string ChargeId?;
    # A unique number for the rate plan charge related to the usage record. For example, C-00000007.
    @constraint:String {maxLength: 50}
    string ChargeNumber?;
    # A description of the usage record.
    @constraint:String {maxLength: 200}
    string Description?;
    #  The end date and time of a range of time when usage is tracked. Use this field for reporting; this field doesn't affect usage calculation.
    # **Character limit**: 29 **Values**: a valid date and time value. 
    string EndDateTime?;
    # Indicates the number of units used.
    # 
    # **Character limit**: 16 
    # 
    # **Values**: A valid decimal amount. It could be a negative amount. Negative quantity usage records are used to adjust the previously uploaded usage records.   
    decimal Quantity;
    #  The start date and time of a range of time when usage is tracked. Zuora uses this field value to determine the usage date. Unlike the `EndDateTime`, the `StartDateTime` field does affect usage calculation.
    # **Character limit**: 29 **Values**: a valid date and time value 
    string StartDateTime;
    # The original ID of the subscription that contains the fees related to the usage data. 
    # 
    # The ID of a subscription might change when you create amendments to the subscription. It is good practice to use the unique subscription number that you can specify in the `SubscriptionNumber` field.
    @constraint:String {maxLength: 32}
    string SubscriptionId?;
    # The unique identifier number of the subscription that contains the fees related to the usage data.
    # 
    # It is good practice to use this field when creating usage records.
    @constraint:String {maxLength: 100}
    string SubscriptionNumber?;
    # Specifies the units to measure usage. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**. **Character limit**: **Values**: a valid unit of measure 
    string UOM;
    # The unique external reference of the usage record. See [Upload usage record with unique key](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage#Upload_usage_record_with_unique_key) for information on how to use this field. **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `114` or later.
    string UniqueKey?;
    *UsageObjectCustomFields;
};

public type ExpandedPaymentRun record {|
    # The unique identifier of the payment run.
    string id?;
    # The unique identifier of the user who created the payment run.
    string createdById?;
    # The time that the payment run gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the payment run.
    string updatedById?;
    # The time that the payment run gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # The end date of the payment run.
    string endDate?;
    # The date and time when the payment run is executed, in `yyyy-mm-dd
    # hh:mm:ss` format. For example, 2024-03-01 11:30:37.
    string executedDate?;
    # **Note:** This field is only available if you have the Credit Balance
    # feature enabled.
    # 
    # 
    # The number of credit balance adjustments that are successfully processed
    # in the payment run.
    int:Signed32 numberOfCreditBalanceAdjustments?;
    # The number of payments with the status of `Error` and `Processing`.
    int:Signed32 numberOfErrors?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The total number of invoices that are picked up for processing in the payment run.
    int:Signed32 numberOfInvoices?;
    # The number of payments that are successfully processed in the payment run.
    int:Signed32 numberOfPayments?;
    # The number of billing documents with remaining positive balances after the
    # payment run is completed.
    int:Signed32 numberOfUnprocessed?;
    # Number of the payment run.
    string paymentRunNumber?;
    # The status of the created payment run.
    "Pending"|"Processing"|"Completed"|"Error"|"Canceled" status?;
    # The target date used to determine which receivables to be collected in the
    # payment run. 
    string targetDate?;
    # Whether to apply credit balances in the payment run. This field is only
    # available when you have Invoice Settlement feature disabled.
    boolean applyCreditBalance?;
    # **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information. 
    # 
    # Whether to process a single payment for all receivables that are due on an account.
    boolean consolidatedPayment?;
    # Whether to process payments even if the default payment method is closed.
    # 
    # 
    # **Note:** The **Process Electronic Payment** permission also needs to be
    # allowed for a Manage Payment Runs role to work. See [Payments
    # Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles)
    # for more information. 
    boolean processPaymentWithClosedPM?;
    # Whether to process electronic payments during the execution of payment
    # runs. 
    boolean collectPayment?;
    # Whether to automatically apply a posted credit memo to one or more
    # receivables in the payment run.
    # 
    # 
    # **Note:** This field is only available if you have [Invoice
    # Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)
    # enabled. The Invoice Settlement feature is generally available as of Zuora
    # Billing Release 296 (March 2021). This feature includes Unapplied
    # Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want
    # to enable Invoice Settlement, see [Invoice Settlement Enablement and
    # Checklist
    # Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide)
    # for more information.
    boolean autoApplyCreditMemo?;
    # Whether to automatically apply unapplied payments to  one or more
    # receivables in the payment run.
    # 
    # 
    # **Note:** This field is only available if you have [Invoice
    # Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)
    # enabled. The Invoice Settlement feature is generally available as of Zuora
    # Billing Release 296 (March 2021). This feature includes Unapplied
    # Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want
    # to enable Invoice Settlement, see [Invoice Settlement Enablement and
    # Checklist
    # Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide)
    # for more information.
    boolean autoApplyUnappliedPayment?;
    # The total number of credit memos that are successfully processed in the
    # payment run.
    # 
    # 
    # **Note:** This field is only available if you have the Invoice Settlement
    # feature enabled.
    int:Signed32 numberOfCreditMemos?;
    # The total number of debit memos that are picked up for processing in the payment run.
    # 
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    int:Signed32 numberOfDebitMemos?;
    # The total number of debit memos that are not processed in the payment run.
    # 
    # 
    # **Note:** This field is only available if you have the Invoice Settlement
    # feature enabled.
    int:Signed32 numberOfDebitMemosUnprocessed?;
    # The number of unapplied payments that are successfully processed in the
    # payment run.
    # 
    # 
    # **Note:** This field is only available if you have the Invoice Settlement
    # feature enabled.
    int:Signed32 numberofUnappliedPayments?;
    # The total time taken to execute the payment run in milliseconds.
    int totalExecutionTime?;
    # The detailed information of the error response.
    string errorMessage?;
    # The date and time when the scheduled payment run is to be executed for
    # collecting payments.
    string runDate?;
    # The date when the next payment run is scheduled to run.
    string nextRunOn?;
    # The repeat type of the payment run.
    "None"|"Daily"|"Weekly"|"Monthly" repeatType?;
    # The start date of the scheduled payment run.
    string repeatFrom?;
    # The end date of of the scheduled payment run.
    string repeatTo?;
    # The scheduled run time (hour) of day.
    @constraint:Int {minValue: 0, maxValue: 23}
    int:Signed32 runTime?;
    # Timezone of the scheduled payment run.
    string timeZone?;
    # The repeat day in a month.
    string monthlyOnDay?;
    # The repeat day in a week. 
    # 
    # This field is required if you set `repeatType` field to `Weekly`.
    "Mon"|"Tue"|"Wed"|"Thu"|"Fri"|"Sat"|"Sun" weeklyOnDay?;
    # The ID of the customer account associated with the payment run.
    string accountId?;
    # The alias name given to a batch.
    string batch?;
    # The billing cycle day (BCD), the day of the month when a bill run
    # generates invoices for the account. 
    string billingCycleDay?;
    # A currency defined in the web-based UI administrative settings.
    string currency?;
    # The ID of the gateway instance that processes the payment.
    string paymentGatewayId?;
    # The unique identifier of the billing run that the payment run is
    # associated with.
    string billingRunId?;
|};

public type CustomObjectDefinitionUpdateActionRequest record {
    # Optional property for `updateObject` action
    string description?;
    # Optional property for `updateObject` action.
    # 
    # Indicates whether to audit the creation of custom object records of this custom object definition.
    # 
    # Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record creation. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings" target="_blank">Manage audit trail settings</a>.
    boolean enableCreateRecordAuditing?;
    # Optional property for `updateObject` action.
    # 
    # Indicates whether to audit the deletion of custom object records of this custom object definition.
    # 
    # Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record deletion. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings" target="_blank">Manage audit trail settings</a>.
    boolean enableDeleteRecordAuditing?;
    # A reference to a field.
    UpdateCustomObjectCusotmField 'field?;
    # Optional property for `updateObject` action
    string label?;
    # The namespace of the custom object definition to be updated
    string namespace;
    # The API name of the custom object definition to be updated
    string 'object;
    CustomObjectDefinitionUpdateActionRequest_relationship relationship?;
    # The type of the updating action on a custom object definition
    "addField"|"deleteField"|"updateField"|"updateObject"|"renameField"|"addRelationship"|"deleteRelationship" 'type;
};

public type GETAccountPaymentMethodType record {
    # ID of the default payment method for the account.
    string defaultPaymentMethodId?;
    # The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.
    string paymentGateway?;
    # Container for a specific type of payment method on the customer account. For example, `creditcard`, `debitcard`, `creditcardreferencetransaction`, `ach`, etc. Each `returnedPaymentMethodType` array contains one or more payment methods of that payment method type.
    # 
    # **Note:** The response could return more than one payment method type arrays. See **Response samples** as an example.
    GETPaymentMethodResponseForAccount[] returnedPaymentMethodType?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    *CustomAccountPaymentMethod;
};

# Charge associated with a rate plan.
public type ChargeOverride record {
    # The accountReceivableAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a>, <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a>, and <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Get_started_with_Invoice_Settlement/AA_Overview_of_Invoice_Settlement" target="_blank">Invoice Settlement</a> features are enabled.
    string accountReceivableAccountingCode?;
    # The adjustmentLiabilityAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string adjustmentLiabilityAccountingCode?;
    # The adjustmentRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string adjustmentRevenueAccountingCode?;
    # Billing information about the charge.
    PreviewOrderChargeOverride_billing billing?;
    # The chargeModel of a standalone charge.
    # 
    # 
    # Supported charge models:
    # 
    # * `FlatFee`
    # 
    # * `PerUnit`
    # 
    # * `Volume`
    # 
    # * `Tiered`
    # 
    # * `DiscountFixedAmount`
    # 
    # * `DiscountPercentage`
    # 
    # 
    # **Note:** This field is available when the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders"
    # target="_blank">Standalone Orders</a> feature is enabled.
    string chargeModel?;
    # Charge number of the charge. For example, C-00000307.
    # 
    # If you do not set this field, Zuora will generate the charge number.
    @constraint:String {maxLength: 50}
    string chargeNumber?;
    # The chargeType of a standalone charge.
    # 
    # 
    # Supported charge types:
    # 
    # * `OneTime`
    # 
    # * `Recurring`
    # 
    # * `Usage`
    # 
    # 
    # **Note:** This field is available when the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders"
    # target="_blank">Standalone Orders</a> feature is enabled.
    string chargeType?;
    # The contractAssetAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractAssetAccountingCode?;
    # The contractLiabilityAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractLiabilityAccountingCode?;
    # The contractRecognizedRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractRecognizedRevenueAccountingCode?;
    # Container for custom fields of a Rate Plan Charge object.
    RatePlanChargeObjectCustomFields customFields?;
    # The deferredRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string deferredRevenueAccountingCode?;
    # Description of the charge.
    @constraint:String {maxLength: 500}
    string description?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal drawdownRate?;
    # Specifies when a charge becomes inactive.
    EndConditions endDate?;
    # The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # If both the following features in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing" target="_blank">Advanced Consumption Billing</a> are enabled in your tenant, you must ensure the `excludeItemBillingFromRevenueAccounting` field is set consistently for a prepayment charge and the corresponding drawdown charge. In addition, if the `excludeItemBookingFromRevenueAccounting` field in an Create Subscription or Add Product order action is set to `false`, you must also set the `excludeItemBillingFromRevenueAccounting` field in this order action to `false`.
    #   * Prepaid with Drawdown
    #   * Unbilled Usage
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting = false;
    # The flag to exclude rate plan charges from revenue accounting.
    # 
    # If both the following features in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing" target="_blank">Advanced Consumption Billing</a> are enabled in your tenant, you must ensure the `excludeItemBookingFromRevenueAccounting` field is set consistently for a prepayment charge and the corresponding drawdown charge.
    #   * Prepaid with Drawdown
    #   * Unbilled Usage
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting = false;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The value is either "True" or "False". It determines whether the rollover fields are needed.
    boolean isRollover?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The name of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string name?;
    # The pobPolicy of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string pobPolicy?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal prepaidQuantity?;
    # Pricing information about the charge.
    ChargeOverride_pricing pricing?;
    # The productCategory of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productCategory?;
    # The productClass of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productClass?;
    # The productFamily of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productFamily?;
    # The productLine of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productLine?;
    # Number of a product rate-plan charge for this subscription.
    string productRatePlanChargeNumber?;
    # Internal identifier of the product rate plan charge that the charge is based on.
    string productRateplanChargeId;
    # The recognizedRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string recognizedRevenueAccountingCode?;
    # Revenue Recognition Code
    @constraint:String {maxLength: 70}
    string revRecCode?;
    # Specifies the revenue recognition trigger condition.
    # 
    #   * `Contract Effective Date` 
    #   * `Service Activation Date`
    #   * `Customer Acceptance Date`
    "Contract Effective Date"|"Service Activation Date"|"Customer Acceptance Date" revRecTriggerCondition?;
    # Specifies the revenue recognition rule, such as `Recognize upon invoicing` or `Recognize daily over time`.
    string revenueRecognitionRuleName?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" revenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" revenueAmortizationMethod?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    decimal rolloverPeriods?;
    # Specifies when a charge becomes active.
    TriggerParams startDate?;
    # The taxCode of a standalone charge.
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string taxCode?;
    # The taxMode of a standalone charge. 
    # 
    # Values:
    # * `TaxExclusive`
    # * `TaxInclusive`
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string taxMode?;
    # The unBilledReceivablesAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string unBilledReceivablesAccountingCode?;
    # Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
};

public type ExecuteInvoiceScheduleBillRunResponse record {
    # Whether to automatically send an email after Auto-Post is complete.
    boolean autoEmail?;
    # Whether to automatically post the bill run after the bill run is created.
    boolean autoPost?;
    # Whether to automatically renew auto-renew subscriptions that are up for renewal.
    boolean autoRenewal?;
    # A list of the batches of accounts for this bill run. 
    # 
    # This field cannot exist with the `billRunFilters` field.
    # 
    # **Values:** `AllBatches` or Batch*n* where *n* is a number between 1 and 50, for example, `Batch7`.
    string[] batches?;
    # The day of the bill cycle, this field is only valid when `batches` is specified.
    # 
    # **Values:** 
    # - `AllBillCycleDays` or 1 - 31 for an ad-hoc bill run 
    # - `AllBillCycleDays` or 1 - 31 or `AsRunDay` for a scheduled bill run
    string billCycleDay?;
    # A list of the target account or subscriptions for this bill run.
    # 
    # This field cannot exist with the `batches` field.
    BillRunFilters[] billRunFilters?;
    # The number of bill run.
    string billRunNumber?;
    # The types of the charges to be excluded from the generation of billing documents.
    ("OneTime"|"Recurring"|"Usage")[] chargeTypeToExclude?;
    # The ID of the user who created the bill run.
    string createdById?;
    # The date and time when the bill run was created.
    string createdDate?;
    # The unique ID of the bill run.
    string id?;
    # The invoice date for this bill run, only valid for ad-hoc bill runs.
    string invoiceDate?;
    # The offset compared to bill run execution date, only valid for scheduled bill runs.
    int invoiceDateOffset?;
    # Whether to suppress emails for invoices with the total amount of zero or not for this bill run after the bill run is complete. 
    # 
    # **Note**: Do not email invoices with the total amount of zero.
    boolean noEmailForZeroAmountInvoice?;
    # The organization(s) that the object belongs to. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.            
    GETProductType_organizationLabels[] organizationLabels?;
    # The scheduled execution time for a bill run.
    string scheduledExecutionTime?;
    # The status of the bill run.
    "Pending"|"Processing"|"Completed"|"Error"|"Canceled"|"Posted"|"PostInProgress"|"CancelInProgress"|"RemoveInProgress"|"Paused" status?;
    # The target date for this bill run, only valid for ad-hoc bill run.
    string targetDate?;
    # The offset compared to bill run execution date, only valid for scheduled bill run.
    int targetDateOffset?;
    # The ID of the user who updated the bill run.
    string updatedById?;
    # The date and time when the bill run was updated.
    string updatedDate?;
};

public type Deployments_tenants_body record {
    # Deployment's name.
    string name;
    # Deployment's description.
    string description;
    # Specifies if an email should be sent.
    boolean sendEmail;
    # If sendEmail parameter is set to true, comma separated values of emails can be specified. Example  email1@test.com,email2@test.com.
    string emails?;
    # Content of the email to be sent.
    string comments?;
    # Specified if settings module should be considered in the deployment process.
    boolean settings;
    # Specified if notifications module should be considered in the deployment process.
    boolean notifications;
    # Specified if workflows module should be considered in the deployment process.
    boolean workflows;
    # Specified if customFields module should be considered in the deployment process.
    boolean customFields;
    # Specified if customObjects module should be considered in the deployment process.
    boolean customObjects?;
    # Specified if productCatalog module should be considered in the deployment process.
    boolean productCatalog;
    # Specified if taxation module should be considered in the deployment process.
    boolean taxation?;
    # Specified if userRoles module should be considered in the deployment process.
    boolean userRoles;
    # Specified if reporting module should be considered in the deployment process.
    boolean reporting;
    # Id of the source tenant.
    string sourceTenantId;
};

# The field used to pass the transactional payment data to the gateway side in the key-value format.
public type PaymentSchedulePaymentOptionFields_detail record {
    # The name of the field.
    string 'key?;
    # The value of the field.
    string value?;
};

public type OrderActionRatePlanRecurringPerUnitPricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    decimal listPrice?;
    @constraint:Number {minValue: 0}
    decimal quantity?;
};

public type PUTCreditMemoItemType record {
    # The amount of the credit memo item. For tax-inclusive credit memo items, the amount indicates the credit memo item amount including tax. For tax-exclusive credit memo items, the amount indicates the credit memo item amount excluding tax
    decimal amount?;
    # Comments about the credit memo item.
    string comment?;
    # The flag to exclude the credit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting = false;
    # Container for the finance information related to the credit memo item.
    CreditMemoItemFromWriteOffInvoice_financeInformation financeInformation?;
    # The ID of the credit memo item.
    @constraint:String {maxLength: 32, minLength: 32}
    string id;
    # The number of units for the credit memo item.
    decimal quantity?;
    # The service end date of the credit memo item.
    string serviceEndDate?;
    # The service start date of the credit memo item.
    string serviceStartDate?;
    # The name of the SKU.
    string skuName?;
    # Container for credit memo taxation items.
    PutCreditMemoTaxItemType[] taxItems?;
    # The definable unit that you measure when determining charges.
    string unitOfMeasure?;
    *CreditMemoItemObjectCustomFields;
};

public type NestedOrderOnExpand record {|
    # The unique identifier of the order.
    string id?;
    # The unique identifier of the user who created the order.
    string createdById?;
    # The time that the order gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the order.
    string updatedById?;
    # The date and time when the order was last updated.
    string updatedDate?;
    # The description of the order.
    string description?;
    # The date when the order is signed. All the order actions under this
    # order will use this order date as the contract effective date if no
    # additinal contractEffectiveDate is provided.
    string orderDate?;
    # The unique identifier of the order.
    string orderNumber?;
    # The unique identifier of the customer account associated with the
    # order.
    string accountId?;
    # The status of the order. If the order contains any `Pending
    # Activation` or `Pending Acceptance` subscription, the order status
    # will be `Pending`; If the order is in draft status, the order status
    # will be `Draft`; otherwise the order status is `Completed`.
    # 
    # 
    # The available order statuses are as follow:
    # 
    # - `Draft`: The order is in draft status.
    # 
    # - `Pending`: The order is in pending status.
    # 
    # - `Completed`: The order is in completed status.
    # 
    # - `Cancelled`: The draft or scheduled order is cancelled.
    # 
    # - `Scheduled`: The order is in scheduled status and it is only valid
    # if the Scheduled Orders feature is enabled.
    # 
    # - `Executing`: The scheduled order is executed by a scheduler and it
    # is only valid if the Scheduled Orders feature is enabled.
    # 
    # - `Failed`: The scheduled order has failed.
    # 
    # 
    # **Note**: To manage and access the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/AA_Overview_of_Orders/P_Scheduled_Orders"
    # target="_blank">Scheduled Orders</a> feature from the self-service
    # interface, see <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Configure_billing_settings/System_settings/Enable_billing_features_by_yourself"
    # target="_blank">Enable billing features by yourself</a>.
    "Draft"|"Pending"|"Completed"|"Cancelled"|"Scheduled"|"Executing"|"Failed" status?;
    # The state of the bill-to address. The value is a valid state
    #  or province name or 2-character abbreviation.
    string state?;
    # Indicates whether the order is created by migration.
    boolean createdByMigration?;
    string category?;
    # The unique identifier of the invoice schedule associated with the
    # order.
    string invoiceScheduleId?;
    # The date for the order scheduled.
    string scheduledDate?;
    # Date policy of the scheduled order.
    "SpecificDate" scheduledDatePolicy?;
    # The error code of the error response.
    string errorCode?;
    # The error message of the error response.
    string errorMessage?;
    string response?;
    NestedAccountOnExpand account?;
    NestedOrderLineItemOnExpand[] orderLineItems?;
    NestedOrderActionOnExpand[] orderActions?;
|};

public type ConfigTemplateErrorResponse record {
    ConfigTemplateErrorResponse_reasons[] reasons?;
};

# Container for the taxation items of the debit memo item. 
# 
# **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
public type GETDebitMemoItemTypewithSuccess_taxationItems record {
    # List of taxation items.
    GETDMTaxItemTypeNew[] data?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
};

# Container for cardholder information. If provided, Zuora will
# only use this information for this card. Otherwise, Zuora will use
# the account''s existing bill-to contact information for this card.
public type SignUpCreatePaymentMethodCardholderInfo record {
    # First address line, 255 characters or less.
    string addressLine1?;
    # Second address line, 255 characters or less.
    string addressLine2?;
    # The card holder's full name as it appears on the card, e.g., "John J Smith", 50 characters or less.
    string cardHolderName;
    # City, 40 characters or less.
    string city?;
    # Country, must be a valid country name or abbreviation.
    string country?;
    # Card holder's email address, 80 characters or less.
    string email?;
    # Phone number, 40 characters or less.
    string phone?;
    # State; must be a valid state name or 2-character abbreviation.
    string state?;
    # Zip code, 20 characters or less.
    string zipCode?;
};

public type InvoiceWithCustomRatesType record {
    # The currency code for either Reporting or Home currency.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string currency;
    # The Custom FX conversion rate between Home/Reporting and Transactional currency items.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    decimal customFxRate;
    # The date on which a particular currency rate is fixed or obtained on.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string rateDate?;
};

# The `UpdatedById` field definition
public type CustomObjectAllFieldsDefinition_UpdatedById record {
    # The field data format
    "uuid" format?;
    # The UI name of the field
    string label?;
    # Specifies whether the field is a system field or a custom field
    "system" origin?;
    # The field data type
    "string" 'type?;
};

public type ProxyGetPaymentMethodSnapshot record {
    # The ID of the customer account associated with this payment method.
    string AccountId?;
    # The nine-digit routing number or ABA number used by banks. Applicable to ACH payment methods.
    string AchAbaCode?;
    # The name of the account holder, which can be either a person or a company. Applicable to ACH payment methods.
    string AchAccountName?;
    # This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`.
    string AchAccountNumberMask?;
    # The type of bank account associated with the ACH payment.
    "BusinessChecking"|"Checking"|"Saving" AchAccountType?;
    # The name of the bank where the ACH payment account is held.
    string AchBankName?;
    # The branch code of the bank used for direct debit.
    string BankBranchCode?;
    # The check digit in the international bank account number, which confirms the validity of the account. Applicable to direct debit payment methods.
    string BankCheckDigit?;
    # The city of the direct debit bank.
    string BankCity?;
    # The sort code or number that identifies the bank. This is also known as the sort code.
    string BankCode?;
    # The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.
    string BankIdentificationNumber?;
    # The name of the direct debit bank.
    string BankName?;
    # The zip code or postal code of the direct debit bank.
    string BankPostalCode?;
    # The name of the street of the direct debit bank.
    string BankStreetName?;
    # The number of the direct debit bank.
    string BankStreetNumber?;
    # The name on the direct debit bank account.
    string BankTransferAccountName?;
    # This is a masked displayable version of the bank account number, used for security purposes. For example: `XXXXXXXXX54321`.
    string BankTransferAccountNumberMask?;
    # The type of the customer's bank account. Applicable to direct debit payment methods.
    string BankTransferAccountType?;
    # Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user.
    # 
    # Possible Values: 
    # 
    # 
    # * `AutomatischIncasso` (NL)
    # 
    # * `LastschriftDE` (Germany)
    # 
    # * `LastschriftAT` (Austria)
    # 
    # * `DemandeDePrelevement` (FR)
    # 
    # * `DirectDebitUK` (UK)
    # 
    # * `Domicil` (Belgium)
    # 
    # * `LastschriftCH` (CH)
    # 
    # * `RID` (Italy)
    # 
    # * `OrdenDeDomiciliacion` (Spain)
    # * `Autogiro` (Sweden)
    # * `Betalingsservice` (Denmark)
    "AutomatischIncasso"|"LastschriftDE"|"LastschriftAT"|"DemandeDePrelevement"|"DirectDebitUK"|"Domicil"|"LastschriftCH"|"RID"|"OrdenDeDomiciliacion"|"Autogiro"|"Betalingsservice" BankTransferType?;
    # The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Only applicable to direct debit payments in Switzerland with Global Collect.
    string BusinessIdentificationCode?;
    # The city of the customer's address. Applicable to debit payment methods.
    string City?;
    # The name of the company.
    string CompanyName?;
    # The two-letter country code of the customer's address. Applicable to direct debit payment methods.
    string Country?;
    # The first line of the card holder's address, which is often a street address or business name. Applicable to credit card and direct debit payment methods.
    string CreditCardAddress1?;
    # The second line of the card holder's address. Applicable to credit card and direct debit payment methods.
    string CreditCardAddress2?;
    # The city of the card holder's address. Applicable to credit card and direct debit payment methods.
    string CreditCardCity?;
    # The country of the card holder's address.
    string CreditCardCountry?;
    # The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods.
    int:Signed32 CreditCardExpirationMonth?;
    # The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods.
    int:Signed32 CreditCardExpirationYear?;
    # The full name of the card holder. Applicable to credit card and direct debit payment methods.
    string CreditCardHolderName?;
    # A masked version of the credit or debit card number.
    string CreditCardMaskNumber?;
    # The billing address's zip code.
    string CreditCardPostalCode?;
    # The billing address's state. Applicable if `CreditCardCountry` is either Canada or the US.
    string CreditCardState?;
    # The type of credit card or debit card.
    "AmericanExpress"|"Discover"|"MasterCard"|"Visa" CreditCardType?;
    # The session ID of the user when the `PaymentMethod` was created or updated.
    string DeviceSessionId?;
    # An email address for the payment method in addition to the bill to contact email address.
    string Email?;
    # Indicates if the customer has an existing mandate or a new mandate. Only applicable to direct debit payment methods.
    "Yes"|"No" ExistingMandate?;
    # The customer's first name. Only applicable to direct debit payment methods.
    string FirstName?;
    # The International Bank Account Number. Only applicable to direct debit payment methods.
    string IBAN?;
    # The IP address of the user when the payment method was created or updated.
    string IPAddress?;
    # Object identifier.
    string Id?;
    # The unique identity number of the customer account. 
    string IdentityNumber?;
    # Whether the customer account is a company.
    boolean IsCompany?;
    # The date of the last failed attempt to collect payment with this payment method.
    string LastFailedSaleTransactionDate?;
    # The customer's last name. Only applicable to direct debit payment methods.
    string LastName?;
    # The date of the most recent transaction.
    string LastTransactionDateTime?;
    # The status of the most recent transaction.
    string LastTransactionStatus?;
    # The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.
    string MandateCreationDate?;
    # The ID of the mandate. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.
    string MandateID?;
    # Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.
    string MandateReceived?;
    # The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.
    string MandateUpdateDate?;
    # The number of allowable consecutive failures Zuora attempts with the payment method before stopping.
    int MaxConsecutivePaymentFailures?;
    # The name of the payment method.
    string Name?;
    # The number of consecutive failed payment for the payment method.
    int:Signed32 NumConsecutiveFailures?;
    # Object identifier of the payment method.
    string PaymentMethodId?;
    # Specifies the status of the payment method.
    "Active"|"Closed" PaymentMethodStatus?;
    # The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.
    int PaymentRetryWindow?;
    # The PayPal billing agreement ID, which is a contract between two PayPal accounts.
    string PaypalBaid?;
    # The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service.
    string PaypalEmail?;
    # PayPal's Adaptive Payments API key.
    string PaypalPreapprovalKey?;
    # Specifies the PayPal gateway: PayFlow Pro (Express Checkout) or Adaptive Payments.
    "ExpressCheckout"|"AdaptivePayments" PaypalType?;
    # The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.
    string Phone?;
    # The zip code of the customer's address. Only applicable to direct debit payment methods.
    string PostalCode?;
    # A gateway unique identifier that replaces sensitive payment method data. Applicable to CC Reference Transaction payment methods.
    string SecondTokenId?;
    # The state of the customer's address. Only applicable to direct debit payment methods.
    string State?;
    # The street name of the customer's address. Only applicable to direct debit payment methods.
    string StreetName?;
    # The street number of the customer's address. Only applicable to direct debit payment methods.
    string StreetNumber?;
    # A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. Applicable to CC Reference Transaction payment methods.
    string TokenId?;
    # The number of error payments that used this payment method.
    int:Signed32 TotalNumberOfErrorPayments?;
    # The number of successful payments that used this payment method.
    int:Signed32 TotalNumberOfProcessedPayments?;
    # The type of payment method.
    "ACH"|"ApplePay"|"BankTransfer"|"Cash"|"Check"|"CreditCard"|"CreditCardReferenceTransaction"|"DebitCard"|"Other"|"PayPal"|"WireTransfer" Type?;
    # Determines whether to use the default retry rules configured in the Zuora Payments settings.
    boolean UseDefaultRetryRule?;
};

# Container of the ramp definitions. It is used to create, update, or remove the ramp definition for the new subscription.
public type RampRequest record {
    # Container for the rate plan charges that are considered as part of the ramp deal.
    # 
    # * If this field is not specified, all the one-time and recurring regular charges of the new subscription are automatically considered as part of the ramp deal.
    # * If this field is specified, either 'chargeNumber' or 'uniqueToken' must be specified.
    RampChargeRequest[] charges?;
    # Whether to remove the ramp definition from the new subscription. If you want to remove the ramp definition, this field is the only required field for the `ramp` object.  
    boolean delete?;
    # The short description of the ramp.
    string description?;
    # Container for the intervals that the ramp is split into in its timeline. 
    # 
    # It is required when you want to create or update the ramp definition. The ramp intervals cannot have any overlap or gap between each other.
    RampIntervalRequest[] intervals?;
    # The name of the ramp.
    string name?;
};

# Container for custom fields of a payment method object.
public type PaymentMethodObjectCustomFieldsForAccount record {
};

public type ExpandedPrepaidBalanceFund record {|
    # The unique identifier of the prepaid balance fund.
    string id?;
    # The unique identifier of the user who created the prepaid balance fund.
    string createdById?;
    # The date and time when the prepaid balance fund was created.
    string createdDate?;
    # The unique identifier of the user who last updated the prepaid balance fund.
    string updatedById?;
    # The date and time when the prepaid balance fund was last updated.
    string updatedDate?;
    # The ID of the customer account to which the prepaid balance fund belongs.
    string accountId?;
    # The remaining balance (remaining units) on the fund.
    decimal balance?;
    # The number of the charge segment. One prepaid balance fund can only belong to one charge segment.
    int:Signed32 chargeSegmentNumber?;
    # End date of the fund effective period.
    string endDate?;
    # The total units of the fund. 
    decimal fundedBalance?;
    # The type of the Prepaid Balance Fund.  
    "CHARGE"|"ORDER_LINE_ITEM"|"CREDIT_MEMO_ITEM"|"DEBIT_MEMO_ITEM" fundSourceType?;
    # The price amount of a fund. A rounded value that follows the associated invoice owner's <a href="https://knowledgecenter.zuora.com/Quick_References/Rounding_and_Precision#Currency_rounding_rules" target="_blank">currency rounding rule</a>. 
    # 
    # **Calculation**: (Number of billing periods in one fund validity period) * (price in one billing period)
    decimal fundingPrice?;
    # The total billed amount of a fund.
    decimal totalBilled?;
    # The total balance of a fund.
    decimal totalBalance?;
    # The original total balance of a fund.
    decimal originalTotalBalance?;
    # The original price amount of a fund.
    decimal originalFundingPrice?;
    # The original end date of the fund effective period.
    string originalFundEndDate?;
    # Start date of the rollover validity period.
    string rolloverValidityPeriodStartDate?;
    # End date of the rollover validity period.
    string rolloverValidityPeriodEndDate?;
    # The ID of the prepaid balance associated to which this prepaid balance fund belongs.
    string prepaidBalanceId?;
    # The priority of the Fund. Possible values include: 10(high), 50(medium),100(low)
    10|50|100 priority?;
    # The source Id of the fund. It is the original charge ID. 
    string sourceId?;
    # Start date of the fund effective period.
    string startDate?;
    string vpSummaryId?;
    int:Signed32 rolloverCount?;
    string originFundId?;
    string rolloverApplyOption?;
    int:Signed32 done?;
    NestedAccountOnExpand account?;
    NestedPrepaidBalanceOnExpand prepaidBalance?;
    NestedRatePlanChargeOnExpand 'source?;
    NestedValidityPeriodSummaryOnExpand vpSummary?;
|};

public type ProxyUnauthorizedResponse record {
    # Error message.
    # 
    # If the error message is "Authentication error", ensure that the `Authorization` request header contains valid authentication credentials, then retry the request. See [Authentication](https://developer.zuora.com/rest-api/general-concepts/authentication/) for more information.
    # 
    # If the error message is "Failed to get user info", retry the request.
    string message?;
};

# Container for bill-to contact information.
# 
# **Note**: 
#   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
#   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `billToContactId` field in the request or you select **Default Contact from Account** for the `billToContactId` field during subscription creation, the value of the `billToContact` field is automatically set to `null` in the response body.
public type GETAccountSummaryTypeBillToContact record {
    # First address line, 255 characters or less.
    string address1?;
    # Second address line, 255 characters or less.
    string address2?;
    # City, 40 characters or less.
    string city?;
    # Full country name. This field does not contain the ISO-standard abbreviation of the country name.
    string country?;
    # County; 32 characters or less. Zuora Tax uses this information to calculate county taxation.          
    string county?;
    # Fax phone number, 40 characters or less.
    string fax?;
    # First name, 100 characters or less.
    string firstName?;
    # Contact ID.
    string id?;
    # Last name, 100 characters or less.
    string lastName?;
    # Full state name. This field does not contain the ISO-standard abbreviation of the state name.
    string state?;
    # A region string, defined in your Zuora tax rules.
    string taxRegion?;
    # Work email address, 80 characters or less.
    string workEmail?;
    # Work phone number, 40 characters or less.
    string workPhone?;
    # Zip code, 20 characters or less.
    string zipCode?;
    *ContactObjectCustomFields;
};

public type GETIntervalPriceTierType record {
    # Decimal defining end of tier range.
    decimal endingUnit?;
    # True if the price is overage price for the tier.
    boolean isOveragePrice?;
    # The decimal value of the tiered charge model. If the charge model is not a tiered type then this price field will be null and the `price` field directly under the `productRatePlanCharges` applies.
    decimal price?;
    # Tier price format. Allowed values: `flat fee`, `per unit`.
    string priceFormat?;
    # Decimal defining start of tier range.
    decimal startingUnit?;
    # Unique number of the tier.
    int tier?;
};

public type PUTCatalogGroupRemoveProductRatePlan record {
    # The unique ID of the product rate plan to be removed from the catalog group.
    string id?;
};

public type POSTRegisterApplePayDomainResponse record {
    # The name of the domain registered with Apple Pay, such as `testapplepay.zuora.com`.
    string domainName?;
    # Indicates whether the domain registration is successfully verified.
    boolean domainVerified?;
    # The ID of the domain, such as `402881a38924ff1001892502da090021`.
    string id?;
    # Indicates whether this call succeeds.
    boolean success?;
};

public type POSTRSASignatureType record {
    # An optional client parameter that can be used for validating client-side HPM parameters specific for Bank Transfer - Direct Debit. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string IBAN?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string accountId?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    decimal authorizationAmount?;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for Bank Transfer - Direct Debit. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string bankBranchCode?;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for Bank Transfer - Direct Debit. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string bankCheckDigit?;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for Bank Transfer - Direct Debit. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string bankCity?;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for Bank Transfer - Direct Debit. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string bankPostalCode?;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for Bank Transfer - Direct Debit. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string bankStreetName?;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for Bank Transfer - Direct Debit. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string bankStreetNumber?;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for Bank Transfer - Direct Debit. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string businessIdentificationCode?;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for credit cards. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string cityBlackList?;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for credit cards. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string cityWhiteList?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string currency?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string deviceSessionId?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string gatewayName?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string id?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string 'key?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string locale?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    int maxConsecutivePaymentFailures?;
    # The type of the request. Set it to POST.
    string method;
    # The page id of your Payment Pages 2.0 form. Click **Show Page Id** next to the Payment Page name in the Hosted Page List to retrieve the page id.
    string pageId;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for credit cards. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string param_supportedTypes?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string paymentGateway?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    int paymentRetryWindow?;
    # An optional client parameter that can be used for validating client-side HPM parameters specific for credit cards. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string pmId?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string signature?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string signatureType?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string style?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    boolean submitEnabled?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string tenantId?;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    string token?;
    # The URL that the Payment Page will be served from.
    # * For US Cloud 1 Production environment: Use https://na.zuora.com/apps/PublicHostedPageLite.do
    # * For US Cloud 1 Sandbox environment: Use https://sandbox.na.zuora.com/apps/PublicHostedPageLite.do
    # * For US Cloud 2 Production environment: Use https://www.zuora.com/apps/PublicHostedPageLite.do
    # * For US Cloud 2 API Sandbox environment: Use https://apisandbox.zuora.com/apps/PublicHostedPageLite.do
    # * For US Central Sandbox environment: Use https://test.zuora.com/apps/PublicHostedPageLite.do
    # * For EU Cloud Production environment: Use https://eu.zuora.com/apps/PublicHostedPageLite.do
    # * For EU Cloud Sandbox environment: Use https://sandbox.eu.zuora.com/apps/PublicHostedPageLite.do
    # * For EU Central Sandbox environment: Use https://test.eu.zuora.com/apps/PublicHostedPageLite.do
    string uri;
    # An optional client parameter that can be used for validating client-side HPM parameters. 
    # See [Client parameters for Payment Pages 2.0](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/J_Client_Parameters_for_Payment_Pages_2.0) 
    # and [Validate client-side HPM parameters](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/LA_Hosted_Payment_Pages/B_Payment_Pages_2.0/F_Generate_the_Digital_Signature_for_Payment_Pages_2.0#Validate_Client-side_HPM_Parameters) 
    # for details.
    boolean useDefaultRetryRule?;
};

public type BadRequestResponse record {
    BadRequestResponse_Errors[] Errors?;
};

public type POSTPublicNotificationDefinitionCalloutOauth2Authentication record {
    *POSTPublicNotificationDefinitionCalloutCommon;
    # Indicates whether OAuth 2.0 authentication is enabled for the callout.
    # 
    # When creating callout notifications with OAuth 2.0 authentication enabled, you must set this field to `true` and specify the OAuth 2.0 provider ID in `oauth2ProviderId`.
    boolean requiredOauth2;
    # The ID of the OAuth 2.0 provider in your tenant that provides access tokens for the callout. This field is required if `requiredOauth2` is `true`.
    # 
    # For more information about how to get the ID of an OAuth 2.0 provider, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Add_an_OAuth_2.0_Provider#Retrieve_the_ID_of_an_OAuth_2.0_provider" target="_blank">Retrieve the ID of an OAuth 2.0 provider</a>.
    anydata oauth2ProviderId?;
};

public type RampResponse record {
    # Container for the rate plan charges that are considered as part of the ramp deal.
    RampChargeResponse[] charges?;
    # The short description of the ramp.
    string description?;
    # The ID of the ramp.
    string id?;
    # Container for the intervals that the ramp is split into in its timeline.
    RampIntervalResponse[] intervals?;
    # The name of the ramp.
    string name?;
    # The number of the ramp. It is automaticcally generated by the billing system.
    string number?;
    # The number of the subscription that is considered as part of the ramp deal.
    string subscriptionNumber?;
};

public type PUTScUpdateType record {
    # Aligns charges within the same subscription if multiple charges begin on different dates.
    # 
    # Values:
    # 
    # * `AlignToCharge`
    # * `AlignToSubscriptionStart`
    # * `AlignToTermStart`
    # 
    # Available for the following charge types:
    # 
    # * Recurring
    # * Usage-based
    string billingPeriodAlignment?;
    # Container for charge model configuration data.
    # 
    # **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    ChargeModelConfigurationType chargeModelConfiguration?;
    # Description of the charge.
    string description?;
    # Specifies the number of units in the base set of units for this charge. Must be >=0.
    # 
    # Available for the following charge type for the Overage charge model:
    # * Usage-based
    decimal includedUnits?;
    # Price for units over the allowed amount. 
    # 
    # Available for the following charge type for the Overage and Tiered with Overage charge models:
    # 
    # * Usage-based
    decimal overagePrice?;
    # Price for units in the subscription rate plan.
    # 
    # Supports all charge types for the Flat Fee and Per Unit charge models
    decimal price?;
    # Applies an automatic price change when a termed subscription is renewed. The Billing Admin setting **Enable Automatic Price Change When Subscriptions are Renewed?** must be set to Yes to use this field.
    # 
    # Values:
    # 
    # * `NoChange` (default)
    # * `SpecificPercentageValue`
    # * `UseLatestProductCatalogPricing`
    # 
    # Available for the following charge types:
    # 
    # * Recurring
    # * Usage-based
    # 
    # Not available for the Fixed-Amount Discount charge model.
    string priceChangeOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.
    # 
    # Decimal between `-100` and `100`.
    # 
    # Available for the following charge types:
    # 
    # * Recurring
    # * Usage-based
    # 
    # Not available for the Fixed-Amount Discount charge model.
    decimal priceIncreasePercentage?;
    # Quantity of units; must be greater than zero.
    decimal quantity?;
    # ID of a rate-plan charge for this subscription. It can be the latest version or any history version of ID.
    string ratePlanChargeId;
    # Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:
    # 
    # * One-time
    # * Recurring
    # * Usage-based
    POSTTierType[] tiers?;
    # Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to USD.
    # 
    # `triggerDate` cannot be updated for the following using the REST update subscription call:
    # 
    # * One-time charge type
    # * Discount-Fixed Amount charge model
    # * Discount-Percentage charge model
    string triggerDate?;
    # Specifies when to start billing the customer for the charge.
    # 
    # Values:
    # 
    # * `UCE`
    # * `USA`
    # * `UCA`
    # * `USD`
    # 
    # This is the date when charge changes in the REST request become effective.
    # 
    # `triggerEvent` cannot be updated for the following using the REST update subscription call:
    # 
    # * One-time charge type
    # * Discount-Fixed Amount charge model
    # * Discount-Percentage charge model
    string triggerEvent?;
    *RatePlanChargeObjectCustomFields;
};

# Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
public type OrderActionRatePlanRecurringVolumePricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    # Specifies the duration of each recurring period.
    # 
    # **Note**: The `Per_Year` and `Per_Specific_Months` enum values are available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.
    @constraint:Int {minValue: 1, maxValue: 200}
    int:Signed32 specificListPriceBase?;
    # List of variable pricing tiers in the charge.
    OrderActionRatePlanChargeTier[] tiers?;
};

public type PutCascadingPaymentMethodsConfigurationRequest_priorities record {
    # The ID of a payment method.
    string paymentMethodId;
    # The order of the payment method in the priority list. For example, `1` indicates the payment method is the first one in the priority list, and `2` indicates it is the second.
    # 
    # The first payment method in the priority list will be the default payment method of the customer account.
    @constraint:Int {minValue: 1}
    int 'order;
};

# Specifies when a charge becomes active.
public type CreateOrderTriggerParams record {
    # Duration of the discount charge in days, weeks, months, or years, depending on the value of the `startPeriodsType` field. Only applicable if the value of the `startDatePolicy` field is `FixedPeriodAfterApplyToChargeStartDate`.
    # 
    # **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    int periodsAfterChargeStart?;
    # Date in YYYY-MM-DD format. Only applicable if the value of the `triggerEvent` field is `SpecificDate`. 
    # 
    # While this field is applicable, if this field is not set, your `CreateSubscription` order action creates a `Pending` order and a `Pending Acceptance` subscription. If at the same time the service activation date is required and not set, a `Pending Activation` subscription is created.
    # 
    # While this field is applicable, if this field is not set, the following order actions create a `Pending` order but do not impact the subscription status. **Note**: This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    #  * AddProduct
    #  * UpdateProduct
    #  * RemoveProduct
    #  * RenewSubscription
    #  * TermsAndConditions
    string specificTriggerDate?;
    # Start date policy of the discount charge to become active when the **Apply to billing period partially** checkbox is selected from the product catalog UI or the `applyToBillingPeriodPartially` field is set as true from the "CRUD: Create a product rate plan charge" operation.
    # 
    # - If the value of this field is `SpecificDate`, use the `specificTriggerDate` field to specify the date when the charge becomes active.
    # - If the value of this field is `FixedPeriodAfterApplyToChargeStartDate`, the charge is active for a predefined duration based on the value of the `upToPeriodsType` and `upToPeriods` fields.
    # 
    # **Notes**: 
    #   - You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field. 
    #   - You can use either `triggerEvent` or `startDatePolicy` to define when a discount charge starts, but not both at the same time.
    "AlignToApplyToCharge"|"SpecificDate"|"EndOfLastInvoicePeriodOfApplyToCharge"|"FixedPeriodAfterApplyToChargeStartDate" startDatePolicy?;
    # Unit of time that the discount charge duration is measured in. Only applicable if the value of the `startDatePolicy` field is `FixedPeriodAfterApplyToChargeStartDate`.
    # 
    # **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    "Days"|"Weeks"|"Months"|"Years" startPeriodsType?;
    # Condition for the charge to become active.
    # 
    # If the value of this field is `SpecificDate`, use the `specificTriggerDate` field to specify the date when the charge becomes active.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance"|"SpecificDate" triggerEvent?;
};

public type ExpandedDebitMemo record {|
    # The unique identifier of the debit memo.
    string id?;
    # The unique identifier of the user who created the debit memo.
    string createdById?;
    # The date and time when the debit memo was created.
    string createdDate?;
    # The unique identifier of the user who last updated the debit memo.
    string updatedById?;
    # The date and time when the debit memo was last updated.
    string updatedDate?;
    # Whether debit memos are automatically picked up for processing in the
    # corresponding payment run.
    # 
    # 
    # By default, debit memos are automatically picked up for processing in
    # the corresponding payment run.
    boolean autoPay?;
    # The ID of the credit memo from which the debit memo was created.
    string? creditMemoId?;
    # The remaining balance of debit memo.
    decimal balance?;
    # The ID of the bill-to contact associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string billToContactId?;
    # The ID of the bill-to contact snapshot associated with the debit memo.
    # 
    # The value of this field is `null` if the bill rule [Preserve snapshot of bill-to and sold-to contacts when billing documents are posted](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Billing_Rules#Preserve_snapshot_of_bill-to_and_sold-to_contacts_when_billing_documents_are_posted) is disabled.
    string billToContactSnapshotId?;
    # The ID of the Zuora user who cancelled the debit memo.
    string cancelledById?;
    # The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the debit memo.
    string comments?;
    # The currency of the debit memo.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # The amount of the discount on the debit memo.
    decimal discountAmount?;
    # The date by which the payment for the debit memo is due, in
    # `yyyy-mm-dd` format.
    string dueDate?;
    # The error code returned when the e-invoice file status is `Failed`. This code can either be a Zuora-generated error code or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorCode?;
    # The error message returned when the e-invoice file status is `Failed`. This message can either be a Zuora-generated error message or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorMessage?;
    # The ID of the e-invoice file generated for the debit memo.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceFileId?;
    # The status of the e-invoice file generation for the credit memo. 
    # 
    # - If e-invoice file generation succeeds, this field is either `Generated` or `Success`, and both the error code and message are empty, and the `eInvoiceFileId` field stores the ID of the generated e-invoice file.
    # - If a failure occurs during e-invoice file generation, this field is `Failed` and an error code and an error message are returned respectively in the `einvoiceErrorCode` and `einvoiceErrorMessage` fields. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    "Processing"|"Generated"|"Success"|"Failed" einvoiceStatus?;
    # The date of the exchange rate used. The date is in `yyyy-mm-dd` format.
    # Corresponds to the value specified in the Provider Exchange Rate Date column in the Import Foreign Exchange Rates template when you uploaded the rates through the Mass Updater.
    string exchangeRateDate?;
    # The date when the debit memo takes effect, in `yyyy-mm-dd` format.
    # For example, `2024-01-01`.
    string memoDate?;
    # The unique identification number of the debit memo.
    string memoNumber?;
    # The ID of the Zuora user who posted the debit memo.
    string postedById?;
    # The date and time when the debit memo was posted, in
    # `yyyy-mm-dd hh:mm:ss` format.
    string postedOn?;
    # A code identifying the reason for the transaction. The value
    # must be an existing reason code or empty.
    string reasonCode?;
    # The ID of the sequence set associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string sequenceSetId?;
    # The source of the debit memo.
    # Possible values:
    # - `BillRun`: The debit memo is generated by a bill run.
    # - `API`
    # - `ApiSubscribe`: The debit memo is created by calling the [Create subscription](https://developer.zuora.com/api-references/api/operation/POST_Subscription) and [Create account](https://developer.zuora.com/api-references/api/operation/POST_Account) operation.
    # - `ApiAmend`: The debit memo is created by calling the [Update subscription](https://developer.zuora.com/api-references/api/operation/PUT_Subscription) operation.
    # - `AdhocFromPrpc`: The debit memo is created from a product rate plan charge through the Zuora UI or by calling the [Create a debit memo from a charge](https://developer.zuora.com/api-references/api/operation/POST_DebitMemoFromPrpc/) operation.
    # - `AdhocFromInvoice`: The debit memo is created from an invoice or created by reversing an invoice. You can create a debit memo from an invoice through the Zuora UI or by calling the [Create a debit memo from an invoice](https://developer.zuora.com/api-references/api/operation/POST_DebitMemoFromInvoice/) operation.
    "BillRun"|"API"|"ApiSubscribe"|"ApiAmend"|"AdhocFromPrpc"|"AdhocFromInvoice" 'source?;
    # The ID of the debit memo source.
    # 
    # If a debit memo is generated from a bill run, the value is the
    # number of the corresponding bill run. Otherwise, the value is
    # `null`.
    string sourceId?;
    # The type of the debit memo source.
    "Subscription"|"Standalone"|"Order"|"Consolidation"|"Invoice"|"CreditMemo" sourceType?;
    # The status of the debit memo.
    "Draft"|"Posted"|"Canceled"|"Error"|"PendingForTax"|"Generating"|"CancelInProgress" status?;
    # The target date for the debit memo, in `yyyy-mm-dd` format. For example, `2024-01-01`.
    string targetDate?;
    # The amount of taxation.
    decimal taxAmount?;
    # The message about the status of tax calculation related to the
    # debit memo. If tax calculation fails in one debit memo, this
    # field displays the reason for the failure.
    string taxMessage?;
    # The status of tax calculation related to the debit memo.
    # 
    # 
    # **Note**: This field is only applicable to tax calculation by
    # third-party tax engines.
    "Complete"|"Error" taxStatus?;
    # The ID of the sold-to contact snapshot associated with the
    # debit memo.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature
    # disabled, the value of this field is `null`.
    string soldToContactSnapshotId?;
    # Whether to automatically calculate taxes in the debit memo.
    boolean taxAutoCalculation?;
    # The total amount of the debit memo, including taxes.
    decimal totalAmount?;
    # The total amount of the debit memo, excluding taxes.
    decimal totalAmountWithoutTax?;
    # The calculated tax amount excluded due to the exemption.
    decimal totalTaxExemptAmount?;
    # Whether the debit memo was transferred to an external
    # accounting system. This field is used for integration with
    # accounting systems such as NetSuite.
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The ID of a referred invoice.
    string invoiceId?;
    # The ID of the customer account associated with the debit memo.
    string accountId?;
    # The name of the payment term assoicated with the debit memo.
    # 
    # 
    # The value of this field is `null` if you have the [Flexible Billing
    # Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes)
    # feature disabled.
    string paymentTerm?;
    NestedAccountOnExpand account?;
    ExpandedContact billToContact?;
    NestedDebitMemoItemOnExpand[] debitMemoItems?;
|};

# **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the following Order Delta Metrics objects. 
# * [Order Delta Mrr](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Mrr)
# * [Order Delta Tcv](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcv)
# * [Order Delta Tcb](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcb)
# 
# It is recommended that all customers use the new [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/).
public type PreviewResult_orderDeltaMetrics record {
    OrderDeltaMrr[] orderDeltaMrr?;
    OrderDeltaTcb[] orderDeltaTcb?;
    OrderDeltaTcv[] orderDeltaTcv?;
};

# Specifies contraints to apply to custom object records.
public type PostCustomObjectDefinitionsRequestDefinition_recordConstraints record {
    PostCustomObjectDefinitionsRequestDefinition_recordConstraints_create create?;
};

public type NestedPrpcTierOnExpand record {|
    # The unique identifier of the product rate plan charge tier.
    string id?;
    # The unique identifier of the user who created the product rate plan charge tier.
    string createdById?;
    # The time that the product rate plan charge tier gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the product rate plan charge tier.
    string updatedById?;
    # The date and time when the product rate plan charge tier was last updated.
    string updatedDate?;
    # Indicates whether the product rate plan charge tier is active.
    boolean active?;
    # The valid code corresponding to the currency for the tier's price.
    string currency?;
    # The specific amount for a fixed discount. This field is applicable for charges based on the Discount-Fixed Amount charge model.
    decimal discountAmount?;
    # The percentage of discount for a percentage discount. This field is applicable for charges based on the Discount-Percentage charge model.
    decimal discountPercentage?;
    # The end number of a range of units for the tier. This field is
    # applicable for charges based on the Tiered Pricing or Tiered with
    # Overage Pricing charge model.
    decimal endingUnit?;
    # Specifies the number of units in the base set of units.
    decimal includedUnits?;
    # Indicates whether the price is an overage price, which is the price when usage surpasses the last defined tier.
    decimal overagePrice?;
    # The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.
    decimal price?;
    # Indicates if pricing is a flat fee or is per unit. This field is for tiered and volume pricing models only.
    # 
    # **Note:** The values `Flat Fee` and `Per Unit` (with spaces) is valid for create or update calls.
    "FlatFee"|"PerUnit" priceFormat?;
    # The starting number of a range of units for the tier. This field is
    # applicable for charges based on the Tiered Pricing or Tiered with
    # Overage Pricing charge model.
    decimal startingUnit?;
    # A unique number that identifies the tier that the price applies to.
    int:Signed32 tier?;
    # Indicates whether the tier is the default tier. The default tier is the
    # tier that is used when the usage does not fall into any of the defined
    # tiers.
    boolean isDefault?;
    # The unique identifier of the product rate plan charge that the tier
    # belongs to.
    string productRatePlanChargeId?;
    # The unique identifier of the product rate plan charge definition that
    # the tier belongs to.
    string productChargeDefinitionId?;
    # EXPANDABLE.
    # The product rate plan charge that contains this product rate plan charge tier.
    record {} productRatePlanCharge?;
|};

public type GETUsageRateDetailWrapper record {
    # Contains usage rate details for the invoice item as specified in the request.
    GETUsageRateDetailWrapper_data data?;
    # Returns `true` if the request was processed successfully. 
    # 
    # 
    # Returns `false` if the request was not processed successfully. 
    boolean success?;
};

# Container for PMU instances available on your tenant.
public type GETPaymentMethodUpdaterInstancesResponse_updaters record {
    # The days prior to the Bill Cycle Day to start PMU service.
    int daysToUpdateBeforeBcd?;
    # The ID of the PMU instance.
    string id?;
    # `true` indicates that this PMU instance is active.
    boolean isActive?;
    # `true` indicates that it is the default PMU instance.
    boolean isDefault?;
    # `true` indicates that this PMU instance is for testing.
    string isTest?;
    # `true` indicates that only the payment methods for customer accounts that meet either of the following conditions are included in the updates:
    #   - The default payment gateway of the customer account is set to an instance of the same type as `updaterGatewayType`.
    #   - The default payment gateway of the customer account is not configured, but the default payment gateway of the tenant is set to an instance of the same type as `updaterGatewayType`.
    # 
    # `false` indicates that information of all payment methods is submitted.
    boolean processAssociatedGwOnly?;
    # `true` indicates that only the default payment methods for customer accounts with the AutoPay setting enabled are included in the updates. 
    # 
    # `false` indicates that data of all payment methods for all customer accounts is submitted, regardless of whether AutoPay is enabled for the customer account or not.
    boolean processAutopayDefaultPmOnly?;
    # `true` indicates that Mastercard data processing is supported.
    boolean processMastercard?;
    # `true` indicates that Visa data processing is supported.
    boolean processVisa?;
    # The payment gateway type of the PMU instance.
    string updaterGatewayType?;
    # The name of the PMU instance.
    string updaterName?;
};

public type POSTAuthorizeResponse_reasons record {
    # Error code.
    string code?;
    # Error message. It usually contains a combination of gateway response code and response message.
    string message?;
};

# Information about an order action of type `Resume`.
public type CreateOrderResume record {
    # Specifies whether to extend the subscription term by the length of time the suspension is in effect.
    boolean extendsTerm?;
    # This field is applicable only when the `resumePolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`. It must be used together with the `resumePeriodsType` field. 
    # 
    # The total number of the periods used to specify when a subscription resumption takes effect. The subscription resumption will take place after the specified time frame (`suspendPeriods` multiplied by `suspendPeriodsType`) from today's date. 
    int resumePeriods?;
    # This field is applicable only when the `resumePolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`. It must be used together with the `resumePeriods` field.
    # 
    # The period type used to specify when a subscription resumption takes effect. The subscription suspension will take place after the specified time frame (`suspendPeriods` multiplied by `suspendPeriodsType`) from today's date. 
    "Day"|"Week"|"Month"|"Year" resumePeriodsType?;
    # Resume methods. Specify a way to resume a subscription. See [Resume Date](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions/Resume_a_Subscription#Resume_Date) for more information.
    # 
    # If `SuspendDate` is specfied, the resumption will take place on the same day as the suspension. 
    "Today"|"FixedPeriodsFromSuspendDate"|"FixedPeriodsFromToday"|"SpecificDate"|"SuspendDate" resumePolicy;
    # This field is applicable only when the `resumePolicy` field is set to `SpecificDate`.
    # 
    # A specific date when the subscription resumption takes effect, in YYYY-MM-DD format. The value should not be earlier than the subscription suspension date.
    string resumeSpecificDate?;
};

public type PUTPaymentScheduleItemResponse record {
    # ID of the customer account that owns the payment schedule item, for example `402880e741112b310149b7343ef81234`.
    string accountId?;
    # The amount of the payment schedule item.
    decimal amount?;
    # The remaining balance of payment schedule item.         
    decimal balance?;
    GETPaymentScheduleItemResponse_billingDocument billingDocument?;
    # The reason for the cancellation of payment schedule item.  
    string cancellationReason?;
    # The ID of the user who created the payment schedule item.
    string createdById?;
    # The date and time when the payment schedule item was created.
    string createdDate?;
    # The currency of the payment.
    string currency?;
    # The description of the payment schedule item.
    string description?;
    # The error message indicating if the error is related to the configuration or the payment collection.
    string errorMessage?;
    # ID of the payment schedule item. For example, `412880e749b72b310149b7343ef81346`.
    string id?;
    # Number of the payment schedule item.
    string number?;
    # ID of the payment gateway of the payment schedule item.
    string paymentGatewayId?;
    # ID of the payment that is created by the payment schedule item, or linked to the payment schedule item. This field is only available if the request doesn’t specify `zuora-version`, or `zuora-version` is set to a value equal to or smaller than `336.0`. 
    string paymentId?;
    # ID of the payment method of the payment schedule item.
    string paymentMethodId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # ID of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`,
    string paymentScheduleId?;
    # Number of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`,
    string paymentScheduleNumber?;
    # Container for payments linked to the payment schedule item.
    LinkedPaymentID[] psiPayments?;
    # At which hour in the day in the tenant’s timezone this payment will be collected.
    int runHour?;
    # The scheduled date when the payment is processed.
    string scheduledDate?;
    # Indicates if the payment created by the payment schedule item is a standalone payment.
    boolean standalone?;
    # ID of the payment method of the payment schedule item.
    # 
    # - `Pending`: Waiting for processing.
    # - `Processed`: The payment has been collected.
    # - `Error`: Failed to collect the payment.
    # - `Canceled`: After a pending payment schedule item is canceled by the user, the item is marked as `Canceled`.
    "Pending"|"Processed"|"Error"|"Canceled" status?;
    # Returns `true` if the request was processed successfully. 
    boolean success?;
    # The ID of the user who updated the payment schedule item.
    string updatedById?;
    # The date and time when the payment schedule item was last updated.
    string updatedDate?;
    *PaymentScheduleItemCustomFields;
};

# A workflow.
public type DetailedWorkflow record {
    # The call type of the active workflow version.
    string call_type?;
    # Indicates whether the callout trigger is enabled for the retrieved workflow.
    boolean calloutTrigger?;
    # The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.
    string createdAt?;
    # The description of the workflow.
    string description?;
    # The date and time when the instance of the workflow version finished at.
    string finished_at?;
    # The unique ID of the workflow.
    int id?;
    # The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled.
    string interval?;
    # The name of the workflow.
    string name?;
    # Indicates whether the ondemand trigger is enabled for the workflow.
    boolean ondemandTrigger?;
    # The unique ID of the original workflow version.
    int original_workflow_id?;
    # The priority of the active workflow version. 
    string priority?;
    # Indicates whether the scheduled trigger is enabled for the workflow.
    boolean scheduledTrigger?;
    # The date and time when the instance of the workflow version started at.
    string started_at?;
    # The status of the active workflow version.
    int status?;
    # Indicates whether the workflow version is enabled for the sync mode.
    boolean sync_trigger?;
    # The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled.
    string timezone?;
    # The type of the workflow. Currently the only valid value is 'Workflow::Setup'.
    "Workflow::Setup"|"Workflow::Instance" 'type?;
    # The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.
    string updatedAt?;
    # The version number of the active workflow version.            
    string version?;
};

# Container for the write-off information of credit memo and apply information.
public type GETRefundPaymentTypeAutoUnapply_writeOffResults record {
    # The error message about write off failed.
    string errorMessage?;
    # The credit memo apply information.
    Transactions transactions?;
};

# Billing information about the charge.
public type PreviewOrderChargeOverride_billing record {
    # Day of the month that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofMonth`.
    @constraint:Int {minValue: 0, maxValue: 31}
    int billCycleDay?;
    # Specifies how Zuora determines the day that each billing period begins on.
    # 
    #   * `DefaultFromCustomer` - Each billing period begins on the bill cycle day of the account that owns the subscription.
    #   * `SpecificDayofMonth` - Use the `billCycleDay` field to specify the day of the month that each billing period begins on.
    #   * `SubscriptionStartDay` - Each billing period begins on the same day of the month as the start date of the subscription.
    #   * `ChargeTriggerDay` - Each billing period begins on the same day of the month as the date when the charge becomes active.
    #   * `SpecificDayofWeek` - Use the `weeklyBillCycleDay` field to specify the day of the week that each billing period begins on.
    "DefaultFromCustomer"|"SpecificDayofMonth"|"SubscriptionStartDay"|"ChargeTriggerDay"|"SpecificDayofWeek" billCycleType?;
    # Billing frequency of the charge. The value of this field controls the duration of each billing period.
    # 
    # If the value of this field is `Specific_Days`, `Specific_Months` or `Specific_Weeks`, use the `specificBillingPeriod` field to specify the duration of each billing period.
    "Month"|"Quarter"|"Semi_Annual"|"Annual"|"Eighteen_Months"|"Two_Years"|"Three_Years"|"Five_Years"|"Specific_Months"|"Subscription_Term"|"Week"|"Specific_Weeks"|"Specific_Days" billingPeriod?;
    # Specifies how Zuora determines when to start new billing periods. You can use this field to align the billing periods of different charges.
    # 
    # * `AlignToCharge` - Zuora starts a new billing period on the first billing day that falls on or after the date when the charge becomes active.
    # * `AlignToSubscriptionStart` - Zuora starts a new billing period on the first billing day that falls on or after the start date of the subscription.
    # * `AlignToTermStart` - For each term of the subscription, Zuora starts a new billing period on the first billing day that falls on or after the start date of the term.
    # 
    # See the `billCycleType` field for information about how Zuora determines the billing day.
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart" billingPeriodAlignment?;
    # Specifies whether to invoice for a billing period on the first day of the billing period (billing in advance) or the first day of the next billing period (billing in arrears).
    "IN_ADVANCE"|"IN_ARREARS" billingTiming?;
    # Duration of each billing period in months or weeks, depending on the value of the `billingPeriod` field. Only applicable if the value of the `billingPeriod` field is `Specific_Months` or `Specific_Weeks`.
    int specificBillingPeriod?;
    # Day of the week that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofWeek`.
    "Sunday"|"Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"|"Saturday" weeklyBillCycleDay?;
};

public type POSTDecryptionType record {
    # The type of the request. Set it to POST.
    string method;
    # The public key generated by Zuora.
    string publicKey;
    # The signature generated by Zuora.
    string signature;
};

# Pricing information about a recurring charge that uses the Delivery Pricing charge model. In this charge model, the charge has a fixed price. This field is only available if you have the Delivery Pricing charge model enabled.
public type OrderActionRatePlanRecurringDeliveryPricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    DeliveryScheduleParams deliverySchedule?;
    # Price of the charge in each recurring period.
    decimal listPrice?;
};

public type NestedDebitMemoOnExpand record {|
    # The unique identifier of the debit memo.
    string id?;
    # The unique identifier of the user who created the debit memo.
    string createdById?;
    # The date and time when the debit memo was created.
    string createdDate?;
    # The unique identifier of the user who last updated the debit memo.
    string updatedById?;
    # The date and time when the debit memo was last updated.
    string updatedDate?;
    # Whether debit memos are automatically picked up for processing in the
    # corresponding payment run.
    # 
    # 
    # By default, debit memos are automatically picked up for processing in
    # the corresponding payment run.
    boolean autoPay?;
    # The ID of the credit memo from which the debit memo was created.
    string? creditMemoId?;
    # The remaining balance of debit memo.
    decimal balance?;
    # The ID of the bill-to contact associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string billToContactId?;
    # The ID of the bill-to contact snapshot associated with the debit memo.
    # 
    # The value of this field is `null` if the bill rule [Preserve snapshot of bill-to and sold-to contacts when billing documents are posted](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Billing_Rules#Preserve_snapshot_of_bill-to_and_sold-to_contacts_when_billing_documents_are_posted) is disabled.
    string billToContactSnapshotId?;
    # The ID of the Zuora user who cancelled the debit memo.
    string cancelledById?;
    # The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the debit memo.
    string comments?;
    # The currency of the debit memo.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # The amount of the discount on the debit memo.
    decimal discountAmount?;
    # The date by which the payment for the debit memo is due, in
    # `yyyy-mm-dd` format.
    string dueDate?;
    # The error code returned when the e-invoice file status is `Failed`. This code can either be a Zuora-generated error code or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorCode?;
    # The error message returned when the e-invoice file status is `Failed`. This message can either be a Zuora-generated error message or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorMessage?;
    # The ID of the e-invoice file generated for the debit memo.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceFileId?;
    # The status of the e-invoice file generation for the credit memo. 
    # 
    # - If e-invoice file generation succeeds, this field is either `Generated` or `Success`, and both the error code and message are empty, and the `eInvoiceFileId` field stores the ID of the generated e-invoice file.
    # - If a failure occurs during e-invoice file generation, this field is `Failed` and an error code and an error message are returned respectively in the `einvoiceErrorCode` and `einvoiceErrorMessage` fields. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    "Processing"|"Generated"|"Success"|"Failed" einvoiceStatus?;
    # The date of the exchange rate used. The date is in `yyyy-mm-dd` format.
    # Corresponds to the value specified in the Provider Exchange Rate Date column in the Import Foreign Exchange Rates template when you uploaded the rates through the Mass Updater.
    string exchangeRateDate?;
    # The date when the debit memo takes effect, in `yyyy-mm-dd` format.
    # For example, `2024-01-01`.
    string memoDate?;
    # The unique identification number of the debit memo.
    string memoNumber?;
    # The ID of the Zuora user who posted the debit memo.
    string postedById?;
    # The date and time when the debit memo was posted, in
    # `yyyy-mm-dd hh:mm:ss` format.
    string postedOn?;
    # A code identifying the reason for the transaction. The value
    # must be an existing reason code or empty.
    string reasonCode?;
    # The ID of the sequence set associated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string sequenceSetId?;
    # The source of the debit memo.
    # Possible values:
    # - `BillRun`: The debit memo is generated by a bill run.
    # - `API`
    # - `ApiSubscribe`: The debit memo is created by calling the [Create subscription](https://developer.zuora.com/api-references/api/operation/POST_Subscription) and [Create account](https://developer.zuora.com/api-references/api/operation/POST_Account) operation.
    # - `ApiAmend`: The debit memo is created by calling the [Update subscription](https://developer.zuora.com/api-references/api/operation/PUT_Subscription) operation.
    # - `AdhocFromPrpc`: The debit memo is created from a product rate plan charge through the Zuora UI or by calling the [Create a debit memo from a charge](https://developer.zuora.com/api-references/api/operation/POST_DebitMemoFromPrpc/) operation.
    # - `AdhocFromInvoice`: The debit memo is created from an invoice or created by reversing an invoice. You can create a debit memo from an invoice through the Zuora UI or by calling the [Create a debit memo from an invoice](https://developer.zuora.com/api-references/api/operation/POST_DebitMemoFromInvoice/) operation.
    "BillRun"|"API"|"ApiSubscribe"|"ApiAmend"|"AdhocFromPrpc"|"AdhocFromInvoice" 'source?;
    # The ID of the debit memo source.
    # 
    # If a debit memo is generated from a bill run, the value is the
    # number of the corresponding bill run. Otherwise, the value is
    # `null`.
    string sourceId?;
    # The type of the debit memo source.
    "Subscription"|"Standalone"|"Order"|"Consolidation"|"Invoice"|"CreditMemo" sourceType?;
    # The status of the debit memo.
    "Draft"|"Posted"|"Canceled"|"Error"|"PendingForTax"|"Generating"|"CancelInProgress" status?;
    # The target date for the debit memo, in `yyyy-mm-dd` format. For example, `2024-01-01`.
    string targetDate?;
    # The amount of taxation.
    decimal taxAmount?;
    # The message about the status of tax calculation related to the
    # debit memo. If tax calculation fails in one debit memo, this
    # field displays the reason for the failure.
    string taxMessage?;
    # The status of tax calculation related to the debit memo.
    # 
    # 
    # **Note**: This field is only applicable to tax calculation by
    # third-party tax engines.
    "Complete"|"Error" taxStatus?;
    # The ID of the sold-to contact snapshot associated with the
    # debit memo.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature
    # disabled, the value of this field is `null`.
    string soldToContactSnapshotId?;
    # Whether to automatically calculate taxes in the debit memo.
    boolean taxAutoCalculation?;
    # The total amount of the debit memo, including taxes.
    decimal totalAmount?;
    # The total amount of the debit memo, excluding taxes.
    decimal totalAmountWithoutTax?;
    # The calculated tax amount excluded due to the exemption.
    decimal totalTaxExemptAmount?;
    # Whether the debit memo was transferred to an external
    # accounting system. This field is used for integration with
    # accounting systems such as NetSuite.
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The ID of a referred invoice.
    string invoiceId?;
    # The ID of the customer account associated with the debit memo.
    string accountId?;
    # The name of the payment term assoicated with the debit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing
    # Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes)
    # feature disabled.
    string paymentTerm?;
    # EXPANDABLE.
    # The account associated with the debit memo.
    record {} account?;
    # EXPANDABLE.
    # The bill-to contact associated with the debit memo.
    record {} billToContact?;
    # EXPANDABLE.
    # The debit memo items associated with the debit memo.
    record {}[] debitMemoItems?;
|};

public type RampMetrics record {
    # The short description of the ramp.
    string description?;
    # The discount amount for the TCB.
    decimal discountTcb?;
    # The discount amount for the TCV.
    decimal discountTcv?;
    # The gross TCB value before discount charges are applied.
    decimal grossTcb?;
    # The gross TCV value before discount charges are applied.
    decimal grossTcv?;
    # Container for the intervals that the ramp is split into in its timeline.
    RampIntervalMetrics[] intervals?;
    # The name of the ramp.
    string name?;
    # The net TCB value after discount charges are applied.
    decimal netTcb?;
    # The net TCV value after discount charges are applied.
    decimal netTcv?;
    # The number of the ramp. It is automaticcally generated by the billing system.
    string number?;
};

public type NestedAccountOnExpand record {|
    # The unique identifier of the account.
    string id?;
    # The unique identifier of the user who created the account.
    string createdById?;
    # The date and time when the account was created.
    string createdDate?;
    # The unique identifier of the user who last updated the account.
    string updatedById?;
    # The date and time when the account was last updated.
    string updatedDate?;
    # The account number that identifies the account.
    string accountNumber?;
    # An additional email addresse to receive email notifications.
    string additionalEmailAddresses?;
    # Indicates whether associated invoices can be edited.
    boolean allowInvoiceEdit?;
    # Indicates whether future payments are automatically collected when they are due
    # during a payment run.
    boolean autoPay?;
    # The customer's total invoice balance minus credit balance.
    decimal balance?;
    # The alias name given to a batch. A string of 50 characters or less.
    string batch?;
    # The billing cycle day setting option for the account.
    "ManualSet"|"AutoSet" bcdSettingOption?;
    # Billing cycle day (BCD), the day of the month when a bill run
    # generates invoices for the account.
    int billCycleDay?;
    # The unique identifier of the bill-to contact associated with the account.
    string billToId?;
    # The unique identifier of the communication profile that Zuora uses when sending notifications to the account's contacts.
    string communicationProfileId?;
    # The current credit balance on the account.
    decimal creditBalance?;
    # External identifier of the account in a CRM system.
    @constraint:String {maxLength: 100}
    string crmId?;
    # A currency defined in the web-based UI administrative settings.
    string currency?;
    # Name of the account's customer service representative, if applicable.
    @constraint:String {maxLength: 50}
    string customerServiceRepName?;
    # ID of the default payment method for the account.
    string defaultPaymentMethodId?;
    # ID of the e-invoice profile for this account.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string eInvoiceProfileId?;
    # Indicates whether the customer wants to receive invoices through email. 
    boolean invoiceDeliveryPrefsEmail?;
    # Whether the customer wants to receive printed invoices, such as through postal mail.
    boolean invoiceDeliveryPrefsPrint?;
    # Invoice template ID, configured in Billing Settings in the Zuora UI.
    string invoiceTemplateId?;
    # Date of the most recent invoice for the account; null if no invoice has ever been generated.
    string lastInvoiceDate?;
    # The date and time when account metrics are last updated, if the account is a partner account.
    # 
    # **Note**: 
    # - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account" target="_blank">Reseller Account</a> feature enabled.
    # - If you ever set the `partnerAccount` field to `true` for an account, the value of `lastMetricsUpdate` field is the time when the account metrics are last updated.
    string lastMetricsUpdate?;
    # The name of the account.
    string name?;
    # A string of up to 65,535 characters.
    string notes?;
    # The unique identifier of the organization to which the account belongs.
    string organizationId?;
    # Identifier of the parent customer account for this Account object. The
    # length is 32 characters. Use this field if you have <a
    # href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy"
    # target="_blank">Customer Hierarchy</a> enabled.
    string parentId?;
    # Whether the customer account is a partner, distributor, or reseller. 
    # 
    # **Note**: This field is available only if you have the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account"
    # target="_blank">Reseller Account</a> feature enabled.
    boolean partnerAccount?;
    # The purchase order number provided by your customer for services,
    # products, or both purchased.
    string purchaseOrderNumber?;
    # Name of the account's sales representative, if applicable.
    string salesRepName?;
    # The ID of the billing document sequence set to assign to the customer account. 
    # The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.
    # If a customer account has no assigned billing document sequence set, billing documents generated for this account adopt the prefix and starting document number from the default sequence set.
    string sequenceSetId?;
    # The unique identifier of the sold-to contact associated with the account.
    string soldToId?;
    # The account status.
    "Active"|"Draft"|"Canceled" status?;
    # Unique code that identifies a company account in Avalara. 
    # **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
    @constraint:String {maxLength: 50}
    string taxCompanyCode?;
    # ID of the customer tax exemption certificate. Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 32}
    string taxExemptCertificateID?;
    # Type of tax exemption certificate that the customer holds. Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 32}
    string taxExemptCertificateType?;
    # Description of the tax exemption certificate that the customer holds.
    # Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 500}
    string taxExemptDescription?;
    # Date when the customer tax exemption starts, in `YYYY-MM-DD` format. Applicable if you use Zuora Tax or Connect tax engines.
    string taxExemptEffectiveDate?;
    # A unique entity use code to apply exemptions in Avalara AvaTax. See <a href="https://developer.avalara.com/avatax/handling-tax-exempt-customers/" target="_blank">Exempt Transactions</a> for more details.
    @constraint:String {maxLength: 64}
    string taxExemptEntityUseCode?;
    # Date when the customer tax exemption expires, in `YYYY-MM-DD` format. Applicable if you use Zuora Tax or Connect tax engines.
    string taxExemptExpirationDate?;
    # Jurisdiction in which the customer tax exemption certificate was issued.
    @constraint:String {maxLength: 32}
    string taxExemptIssuingJurisdiction?;
    # Status of the account tax exemption. Applicable if you use Zuora Tax or Connect tax engines. Required if you use Zuora Tax. 
    "No"|"Yes"|"PendingVerification" taxExemptStatus?;
    # Total balance of all posted invoices.
    decimal totalInvoiceBalance?;
    # Total unapplied balance in this currency.
    decimal unappliedBalance?;
    # EU Value Added Tax ID.
    string vATId?;
    # Monthly recurring revenue for the account.
    decimal mrr?;
    # Total balance of all posted debit memos.
    decimal totalDebitMemoBalance?;
    # The total unapplied amount of all posted credit memos in this currency.
    decimal unappliedCreditMemoAmount?;
    # ID of the credit memo template that is used to generate credit memos for the account.
    string creditMemoTemplateId?;
    # ID of the debit memo template that is used to generate debit memos for the account.
    string debitMemoTemplateId?;
    # The name of the payment gateway instance. If null or left unassigned,
    # the account will use the default gateway.
    string paymentGateway?;
    # A payment-terms indicator defined in the web-based UI administrative
    # settings, for example, `Net 30`.
    string paymentTerm?;
    # EXPANDABLE.
    # The bill-to contact on this account.
    record {} billTo?;
    # EXPANDABLE.
    # The sold-to contact on the account.
    record {} soldTo?;
    # EXPANDABLE.
    # The default payment method associated with the account.
    record {} defaultPaymentMethod?;
    # EXPANDABLE.
    # The subscriptions associated with the account.
    record {}[] subscriptions?;
    # EXPANDABLE.
    # The payments associated with the account.  
    record {}[] payments?;
    # EXPANDABLE.
    # The refunds associated with the account.  
    record {}[] refunds?;
    # EXPANDABLE.
    # The credit memos associated with the account.  
    record {}[] creditMemos?;
    # EXPANDABLE.
    # The debit memos associated with the account.  
    record {}[] debitMemos?;
    # EXPANDABLE.
    # The invoices associated with the account.  
    record {}[] invoices?;
    # EXPANDABLE.
    # The usage records associated with the account.        
    record {}[] usages?;
    # EXPANDABLE.
    # The payment methods associated with the account.
    record {}[] paymentMethods?;
|};

public type UsageOveragePricingUpdate record {
    *PriceChangeParams;
    # A certain quantity of units for free in the overage charge model. It cannot be negative. It must be 0 and above. Decimals are allowed.
    decimal includedUnits?;
    decimal overagePrice?;
};

public type POSTOrderPreviewAsyncRequestType record {
    # Category of the order to indicate a product sale or return. Default value is `NewSales`.
    "NewSales"|"Return" category = "NewSales";
    # Container for custom fields of an Order object.
    OrderObjectCustomFields customFields?;
    # A description of the order.
    @constraint:String {maxLength: 500}
    string description?;
    # The account number that this order will be created under. 
    # Note that invoice owner account of the subscriptions included in this order should be the same with the account of the order.
    @constraint:String {maxLength: 70}
    string existingAccountNumber?;
    # The date when the order is signed. All of the order actions under this order will use this order date as the contract effective date.
    string orderDate;
    # [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services. 
    # 
    # With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models. 
    # 
    # **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.       
    CreateOrderOrderLineItem[] orderLineItems?;
    # The order number of this order.   
    # **Note:** Make sure the order number does not contain a slash.
    @constraint:String {maxLength: 100}
    string orderNumber?;
    # Information about the account that will own the order.
    PreviewAccountInfo previewAccountInfo?;
    PreviewOptions previewOptions;
    # Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs.
    @constraint:String {maxLength: 255}
    string reasonCode?;
    # Each item includes a set of order actions, which will be applied to the same base subscription.
    POSTOrderPreviewRequestType_subscriptions[] subscriptions?;
};

# Information about an order action of type `TermsAndConditions`.
public type TermsAndConditions record {
    boolean autoRenew?;
    # The ID of the bill-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string billToContactId?;
    # Whether to clear the existing bill-to contact ID at the subscription level. This field is mutually exclusive with the `billToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingBillToContact?;
    # Whether to clear the existing invoice group number at the subscription level. This field is mutually exclusive with the `invoiceGroupNumber` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingInvoiceGroupNumber?;
    # Whether to clear the existing invoice template ID at the subscription level. This field is mutually exclusive with the `invoiceTemplateId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingInvoiceTemplate?;
    # Whether to clear the existing payment term at the subscription level. This field is mutually exclusive with the `paymentTerm` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingPaymentTerm?;
    # Whether to clear the existing sequence set ID at the subscription level. This field is mutually exclusive with the `sequenceSetId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSequenceSet?;
    # Whether to clear the existing sold-to contact ID at the subscription level. This field is mutually exclusive with the `soldToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSoldToContact?;
    # The length of the period for the current subscription term.
    InitialTerm initialTerm?;
    # The number of the invoice group associated with the subscription.
    # 
    # After enabling the Invoice Grouping feature, you can specify invoice group numbers to bill subscriptions and order line items based on specific criteria. For the same account, Zuora generates separate invoices for subscriptions and order line items, each identified by unique invoice group numbers. For more information, see [Invoice Grouping](https://knowledgecenter.zuora.com/Billing/Subscriptions/Invoice_Grouping).
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request during subscription creation, the value of this field is automatically set to `null` in the response body.
    string? invoiceGroupNumber?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # The name of the payment term associated with the subscription. For example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string paymentTerm?;
    "RENEW_WITH_SPECIFIC_TERM"|"RENEW_TO_EVERGREEN" renewalSetting?;
    RenewalTerm[] renewalTerms?;
    # The ID of the sequence set associated with the subscription.
    #   
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string soldToContactId?;
};

public type OrderRampIntervalMetrics record {
    # The short description of the interval.
    string description?;
    # The discount amount for the TCB.
    decimal discountTcb?;
    # The discount amount for the TCV.
    decimal discountTcv?;
    # The end date of the interval.
    string endDate?;
    # The gross TCB value before discount charges are applied.
    decimal grossTcb?;
    # The gross TCV value before discount charges are applied.
    decimal grossTcv?;
    # Container for the delta metrics for each rate plan charge in each ramp interval. The delta is the difference of the subscription metrics between before and after the order.
    RampIntervalChargeDeltaMetrics[] intervalDeltaMetrics?;
    # Container for the detailed metrics for each rate plan charge in each ramp interval.
    RampIntervalChargeMetrics[] intervalMetrics?;
    # The name of the interval.
    string name?;
    # The net TCB value after discount charges are applied.
    decimal netTcb?;
    # The net TCV value after discount charges are applied.
    decimal netTcv?;
    # The start date of the interval.
    string startDate?;
};

public type PUTOrderActionTriggerDatesRequestType record {
    PUTOrderActionTriggerDatesRequestType_subscriptions[] subscriptions?;
};

public type PUTProductChargeDefinitionBulkRequest record {
    # The list of updated product charge definitions.
    PUTBulkProductChargeDefinitionRequest[] productChargeDefinitions?;
};

public type GETCreditMemoItemsListType record {
    # Container for credit memo items.
    GETCreditMemoItemTypewithSuccess[] items?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type PUTUpdateOpenPaymentMethodTypeRequest record {
    # If this custom payment method type is specific to one entity only, specify the entity ID in UUID format when creating the draft payment method type, such as `123e4567-e89b-12d3-a456-426614174000`.
    # 
    # You can only update this field to be empty, indicating that this custom payment method type is available to the global entity and all the sub entities in the tenant.
    string entityId?;
    # An array containing field metadata of the custom payment method type.
    # 
    # Notes:
    #   - All the following nested metadata fields must be provided in the request to define a field. 
    #   - At least one field must be defined in the fields array for a custom payment method type. 
    #   - Up to 20 fields can be defined in the fields array for a custom method type.
    OpenPaymentMethodTypeRequestFields[] fields;
    # A string to identify the custom payment method type in the API name of the payment method type.
    # 
    # The value of this field must be the same as the value specified when creating the draft revision of this custom payment method type.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    # 
    # This field is used along with the `tenantId` field by the system to construct and generate the API name of the custom payment method type in the following way:
    # 
    # `<internalName>__c_<tenantId>`
    # 
    # For example, if `internalName` is `AmazonPay`, and `tenantId` is `12368`, the API name of the custom payment method type will be `AmazonPay__c_12368`.
    @constraint:String {maxLength: 19}
    string internalName;
    # The label that is used to refer to this type in the Zuora UI.
    # 
    # This value must be alphanumeric, excluding JSON preserved characters such as  * \ ’ ” 
    @constraint:String {maxLength: 40}
    string label;
    # The identification reference of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Payment Method Data Source Exports and Data Query.
    # 
    # The value of this field must be the same as the value specified when creating the draft revision of this custom payment method type.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    string methodReferenceIdField;
    # The identification reference indicating the subtype of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    string subTypeField?;
    # Zuora tenant ID. If multi-entity is enabled in your tenant, this is the ID of the parent tenant of all the sub entities.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    string tenantId;
    # The identification reference of the user or customer account.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    # 
    # This field cannot be updated after the creation of the custom payment method type.
    string userReferenceIdField?;
};

public type SubmitBatchQueryRequest record {
    # When using WSDL 69 and later you can ensure that the exported output of dateTime records are rendered according to ISO-8601 generic UTC form by setting `dateTimeUtc` to `true`.
    # 
    # When `dateTimeUtc` is set to `true`, exports of dateTime data types will be rendered in the following generic format: `YYYY-MM-DDThh:mm:ss-hhmm` or `YYYY-MM-DDThh:mm:ss+hhmm`.
    # 
    # **Note**: Regardless of what batchType query is used (`zoql` or `zoqlexport`), the query response output for datetime data types can be standardized by setting dateTimeUtc to `true`. When `true`, the results will display datetime types with the format: YYYY-MM-DDThh:mm:ss+/-hhmm.
    boolean dateTimeUtc?;
    # The format of the query. The default value is `csv`.
    "csv"|"zip"|"gzip" format?;
    # Allows you to override the time from which a Stateful AQuA job incrementally retrieves records that have been created or modified, using the `incrementalTime` parameter. For example, if you set `incrementalTime` = `2015-01-21 10:30:01`, AQuA will retrieve records that have created or modified beginning at 10:30:01. If this parameter is not set, AQuA continues to use the Start Time of the last AQuA session to retrieve records incrementally.
    # 
    # The time zone of `incrementalTime` depends on which Zuora data center you use. For US Data Center customers, the time zone of `incrementalTime` is Pacific Time. For EU Data Center customers, the time zone of `incrementalTime` is UTC. If the time zone of your system is different from the time zone of `incrementalTime`, you will need to convert to the appropriate time zone before setting `incrementalTime`.
    # 
    # **Note**: This field can only be used in Stateful AQuA mode.
    string incrementalTime?;
    # The name of the job. 32 character limit.
    string name?;
    # If URL is provided, the AQuA job will call this `notifyUrl` once the job has completed. The value of `notifyUrl` needs to have `${JOBID}` and `${STATUS}` placeholders. These placeholders will be replaced by the actual job ID and status when returned in the response. Status will be `Completed` after the AQuA job is done.
    # 
    # If you submit an AQuA query with `notifyUrl` specified, the value of `notifyUrl` will be ignored if your organization has already <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Callout_Notification_for_Completed_AQuA_Jobs" target="_blank">configured a callout notification through the Zuora user interface</a>. 
    string notifyUrl?;
    # The string used to represent null values in the query results. If you do not set this parameter, null values are represented by the empty string in the query results.
    string nullReplacement?;
    # This field specifies the time offset for AQuA queries in stateful mode. It is an integer in the range 0 to 3,600 seconds.
    # 
    # For example, if you set this field to 600 seconds and you post a query in stateful mode at 2:00 AM, it will query against data created or updated between the completion time of the previous query and 1:50 AM.
    # 
    # The value of this field will override the value you configured in **Settings** > **Administration** > **AQuA API Stateful Mode Time Offset**.        
    int offset?;
    # The partner field indicates the unique ID of a data integration partner. The dropdown list of this field displays partner IDs for the past thirty days.
    # It must be used together with "project" field to uniquely identify a data integration target.
    # 
    # For example, if a continuous AQuA session is to retrieve data incrementally for a Salesforce.com Org 00170000011K3Ub, you can use partner as "Salesforce", and "project" as "00170000011K3Ub." 
    # This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.
    # 
    # **Note**: Zuora highly recommends you use the stateless mode instead of the stateful mode to extract bulk data. See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Bulk_data__extraction_from_Zuora_using_AQuA" target="_blank">Bulk data extraction from Zuora using AQuA</a> for best practices.
    # **Note**: Submit a request at <a href="http://support.zuora.com" target="_blank">Zuora Global Support</a> to obtain a partner ID.
    string partner?;
    # The project field contains the unique ID of a data integration project for a particular partner. The dropdown list of this field displays project IDs for the past thirty days.
    # 
    # This field must be used together with partner field to uniquely identify a data integration target. 
    # 
    # This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.
    string project?;
    # A JSON array object that contains a list of batch objects.
    BatchQuery[] queries?;
    # Specify the source this aggregate query runs against:
    # 
    # * `LIVE` represents the live transactional databases at Zuora (Data Query Live).
    # If this field is not specified, the default value `LIVE` will be used.
    "LIVE" sourceData?;
    # When this optional flag is set to `true` the request will use object and field API names for the CSV header output instead of the field labels. Data integration projects should set `useQueryLabels` to `true` so that API names remain the same.
    # 
    # By default `useQueryLabels` is `false`, so that output CSV headers display the more user-friendly object and field labels. 
    boolean useQueryLabels?;
    # The API version you want to use. 
    # 
    # The supported versions are as follows:
    #   - `1.1`. It supports both modes
    #   - `1.0`. Default. It supports stateless modes only.
    # 
    # See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/BA_Stateless_and_Stateful_Modes" target="_blank">Stateless and stateful modes</a> for more information.
    float version?;
};

# Container for custom fields of a Fulfillment Item object.
public type FulfillmentItemCustomFields record {
};

# Default payment method associated with an account. Only credit card payment methods are supported.
public type CreditCard record {
    # Information about the cardholder of a credit card payment method associated with an account. If you do not provide information about the cardholder, Zuora uses the account's bill-to contact.
    AccountCreditCardHolder cardHolderInfo?;
    # Card number. Once set, you cannot update or query the value of this field. The value of this field is only available in masked format. For example, XXXX-XXXX-XXXX-1234 (hyphens must not be used when you set the credit card number).
    string cardNumber?;
    # Type of card.
    "Visa"|"MasterCard"|"AmericanExpress"|"Discover"|"JCB"|"Diners"|"CUP"|"Maestro"|"Electron"|"AppleVisa"|"AppleMasterCard"|"AppleAmericanExpress"|"AppleDiscover"|"AppleJCB"|"Elo"|"Hipercard"|"Naranja"|"Nativa"|"TarjetaShopping"|"Cencosud"|"Argencard"|"Cabal" cardType?;
    # Expiration date of the card.
    @constraint:Int {minValue: 1, maxValue: 12}
    int expirationMonth?;
    # Expiration year of the card.
    @constraint:Int {minValue: 1980, maxValue: 2500}
    int expirationYear?;
    # CVV or CVV2 security code of the card. To ensure PCI compliance, Zuora does not store the value of this field.
    string securityCode?;
};

public type POSTBulkPdfGenerationJobRequestType record {
    # An array that contains a collection of objects where each object contains billing document type and their IDs.
    DocumentList[] documents;
    # The prefix part of output file name(s). The response will include multiple file URLs. The number of zip files generated corresponds to the number of invoice IDs. Each zip file contains up to 1000 document IDs.
    # Eg: 
    #   if fileName is "all-invoices-posted-jan-2024" then fileURL(s) will start with the file name followed by an underscore and a number. For instance, all-invoices-posted-jan-2024_1.zip, all-invoices-posted-jan-2024_2.zip, and so on.
    @constraint:String {maxLength: 32}
    string fileName;
    # The name of the job.
    @constraint:String {maxLength: 32}
    string name?;
    # The format of the index file. It contains the metadata about the files and their contents.
    "JSON"|"CSV" indexFileFormat;
    # This flag controls the behavior of whether to generate PDF(s) for billing documents that do not already have one.
    # 
    #   - setting it to true indicates service would go through the provided document ID list, find the billing documents that do not have a generated PDF,
    #   generate them all at once, and then proceed to the zipping process.
    # 
    #   - setting it to false indicates service would go through the provided document ID list, find the billing documents that do not have a generated PDF,
    #   mark them as Invalid, and skip them from the zipping process. IDs marked as invalid will be included in the response.
    # 
    # The default value is false.
    boolean generateMissingPDF?;
};

# **Note:** This field has been deprecated, and is currently available only for backward compatibility. Use the `paymentMethod` field instead to create a payment method associated with this account.
# 
# Container for information on a credit card to associate with this account. 
# If the `autoPay` field is set to `true`, you must provide one of the `paymentMethod`, `creditCard`, or `hpmCreditCardPaymentMethodId` field, but not multiple.
public type POSTAccountTypeCreditCard record {
    # Container for cardholder information.
    POSTAccountTypeCreditCard_cardHolderInfo cardHolderInfo;
    # Card number, up to 16 characters. Once created, this field can't be updated or queried, and is only available in masked format (e.g., XXXX-XXXX-XXXX-1234).
    string cardNumber;
    # The type of the credit card.
    # 
    # Possible values  include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
    string cardType;
    # Two-digit expiration month (01-12).
    string expirationMonth;
    # Four-digit expiration year.
    string expirationYear;
    # The CVV or CVV2 security code of the card. To ensure PCI compliance, this value is not stored and cannot be queried.
    string securityCode?;
    *PaymentMethodObjectCustomFields;
};

# A container for custom fields of the feature.
public type RatePlanFeatureOverrideCustomFields record {
};

public type SettingsBatchRequest record {
    SettingValueRequest[] requests?;
};

public type CustomObjectBulkJobRequest record {
    # Filters to determine which records to be deleted in the bulk delete operation.
    CustomObjectBulkDeleteFilter filter?;
    # The namespace of the object. Custom objects belong to the `default` namespace. Zuora standard objects belong to the `com_zuora` namespace. Bulk job operations on the following Zuora standard objects are supported:
    # * SavedQuery
    "default"|"com_zuora" namespace;
    # The object that the bulk operation performs on.
    string 'object;
    # The operation that the bulk job performs. Only the users that have the "Delete Custom Objects" permission can submit a `delete` bulk job request. Only the users that have the "Edit Custom Objects" permission can submit a `create` or `update` bulk job request. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
    "delete"|"create"|"update" operation;
};

# The batch action on custom object records
public type CustomObjectRecordBatchAction record {
    # Indicates whether the records that pass the schema validation should be updated when not all records in the request pass the schema validation.
    # 
    # Only applicable when `type` is `update`.
    boolean allowPartialSuccess = false;
    # Ids of the custom object records that you want to delete. Each ID must be a string of 36 characters. Only applicable when `type` is `delete`.
    string[] ids?;
    # Object records that you want to update. Only applicable when `type` is `update`.
    CustomObjectRecordBatchUpdateMapping records?;
    # The type of the batch action
    "delete"|"update" 'type;
};

# Container for the finance information related to the taxation item.
public type POSTTaxationItemForDMType_financeInformation record {
    # The accounting code for the sales taxes payable.
    @constraint:String {maxLength: 100}
    string salesTaxPayableAccountingCode?;
};

public type MigrationUpdateCustomObjectDefinitionsResponse record {|
    # The actions of updating custom object definitions, to be performed as parts of the migration.  Currently only one action per migration is supported.
    @constraint:Array {maxLength: 1, minLength: 1}
    CustomObjectDefinitionUpdateActionResponse[] actions?;
|};

# Container for custom fields of a Credit Taxation Item object.
public type CreditTaxationItemObjectCustomFields record {
};

public type PUTPublicEmailTemplateRequest record {
    # The status of the email template.
    boolean active?;
    # Email bcc address.
    string bccEmailAddress?;
    # Email cc address.
    string ccEmailAddress?;
    # Email CC type.
    # * When the base object for the event is associated with `Account`, `ccEmailType` can be any values in the enum list. 
    # * When the base object for the event is not associated with `Account`, `ccEmailType` must be `TenantAdmin`, `RunOwner`, or `SpecificEmail`. 
    "BillToContact"|"SoldToContact"|"SpecificEmails"|"TenantAdmin"|"BillToAndSoldToContacts"|"RunOwner"|"AllContacts"|"InvoiceOwnerBillToContact"|"InvoiceOwnerSoldToContact"|"InvoiceOwnerBillToAndSoldToContacts"|"InvoiceOwnerAllContacts" ccEmailType?;
    # The description of the email template.
    @constraint:String {maxLength: 255}
    string description?;
    # The email body. You can add merge fields in the email body using angle brackets or double curly brackets. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Events_and_Notifications/Create_Email_Templates/A_Merge_field_syntax_for_email_templates" target="_blank">Merge field syntax for email templates</a>. 
    # 
    # User can also embed html tags if `isHtml` is `true`.
    string emailBody?;
    # Container for custom email headers. Each custom email header consists of a header name and a header value.
    record {|string...;|} emailHeaders?;
    # The email subject. You can add merge fields in the email subject using angle brackets or double curly brackets. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Events_and_Notifications/Create_Email_Templates/A_Merge_field_syntax_for_email_templates" target="_blank">Merge field syntax for email templates</a>.
    string emailSubject?;
    # The endcode type of the email body.
    "UTF8"|"Shift_JIS"|"ISO_2022_JP"|"EUC_JP"|"X_SJIS_0213" encodingType?;
    # If fromEmailType is SpecificEmail, this field is required
    string fromEmailAddress?;
    # The type of fromEmail.
    "TenantEmail"|"RunOwner"|"SpecificEmail" fromEmailType?;
    # The name of email sender.
    string fromName?;
    # Indicates whether the style of email body is HTML.
    boolean isHtml?;
    # The name of the email template.
    @constraint:String {maxLength: 255}
    string name?;
    # If replyToEmailType is SpecificEmail, this field is required.
    string replyToEmailAddress?;
    # The type of the reply email.
    "TenantEmail"|"RunOwner"|"SpecificEmail" replyToEmailType?;
    # If toEmailType is SpecificEmail, this field is required.
    string toEmailAddress?;
    # Email receive type.
    # * When the base object for the event is associated with `Account`, `toEmailType` can be any values in the enum list. 
    # * When the base object for the event is not associated with `Account`, `toEmailType` must be `TenantAdmin`, `RunOwner`, or `SpecificEmail`. 
    "BillToContact"|"SoldToContact"|"SpecificEmails"|"TenantAdmin"|"BillToAndSoldToContacts"|"RunOwner"|"AllContacts"|"InvoiceOwnerBillToContact"|"InvoiceOwnerSoldToContact"|"InvoiceOwnerBillToAndSoldToContacts"|"InvoiceOwnerAllContacts" toEmailType?;
};

# 
public type GETSequenceSetResponse record {
    # Container for the prefix and starting document number of credit memos.
    # 
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    CreditMemoEntityPrefix creditMemo?;
    # Container for the prefix and starting document number of debit memos.
    # 
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    DebitMemoEntityPrefix debitMemo?;
    # The unique ID of the sequence set. For example, 402892c74c9193cd014c96bbe7c101f9.
    string id?;
    # Container for the prefix and starting document number of invoices.
    InvoiceEntityPrefix invoice?;
    # The name of the sequence set.
    string name?;
    # Container for the prefix and starting number of payments.
    PaymentEntityPrefix payment?;
    # Container for the prefix and starting number of refunds.
    RefundEntityPrefix refund?;
};

public type BatchesQueriesById record {
    # The API version for the query. If an API version is not specified, the latest version is used by default. Using the latest WSDL version is most useful for reporting use cases. For integration purposes, specify the WSDL version to ensure consistent query behavior, that is, what is supported and included in the response returned by the API.
    # 
    # **Note**: As of API version 69 and later, Zuora changed the format of certain fields. See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/G_SOAP_API/AB_Getting_started_with_the__SOAP_API/C_Date_Field_Changes_in_the_SOAP_API" target="_blank">Date Field Changes in the SOAP API</a> for more information and a list of affected fields.
    string apiVersion?;
    # A 32-character ID of the query batch.
    string batchId?;
    # The kind of batch job being submitted.
    "zoql"|"zoqlexport" batchType?;
    # The ID of the query results file.
    # 
    # Use Get Results Files to download the query results file. The query results file is formatted as requested in the batch job. Supported formats are CSV, GZIP, and ZIP.
    string fileId?;
    # This field indicates a full or incremental load. `True` = Full and `False` = Incremental.
    boolean full?;
    # The error message.
    string message?;
    # Name of the query supplied in the request.
    string name?;
    # The requested query string.
    string query?;
    # The number of records included in the query output file.
    string recordCount?;
    # Array of IDs of query results files. Replaces fileId for full data loads in stateful mode if <a href = "https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/G_File_Segmentation" target="_blank">File Segmentation</a> is enabled.
    # 
    # Use Get Results Files to download each query results file. Each query results file contains at most 500,000 records and is formatted as requested in the batch job. Supported formats are CSV, GZIP, and ZIP.
    anydata[] segments?;
    # The status of the query task:
    # - submitted: The query was submitted to the query executor for processing.
    # - pending: The query was waiting for being processed.
    # - executing: The query is being processed.
    # - completed: The query was successfully executed.
    # - aborted: The query execution failed.
    # - deleted_notallowed: The query execution failed because objects included in the query do not support the querying of deleted records.
    "submitted"|"pending"|"executing"|"completed"|"aborted"|"deleted_notallowed" status?;
};

public type POSTTaxationItemList record {
    # Container for taxation items.
    POSTTaxationItemTypeForInvoice[] taxationItems?;
};

public type PUTOrderActionTriggerDatesRequestType_triggerDates record {
    # Name of the trigger date of the order action.
    "ServiceActivation"|"CustomerAcceptance" name?;
    # Trigger date in YYYY-MM-DD format. The date you are to set as the service activation date or the customer acceptance date.
    string triggerDate?;
};

public type GETRefundItemPartTypewithSuccess record {
    # The amount of the refund part item.
    decimal amount?;
    # The ID of the Zuora user who created the refund part item.
    string createdById?;
    # The date and time when the refund part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the credit memo item associated with the refund part item.
    string creditMemoItemId?;
    # The ID of the credit memo taxation item associated with the refund part item.
    string creditTaxItemId?;
    # The ID of the refund part item.
    string id?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the Zuora user who last updated the refund part item.
    string updatedById?;
    # The date and time when the refund part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

public type PutScheduledEventRequest record {
    # Indicate whether the scheduled event is active or inactive
    boolean active?;
    # The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/). The scheduled event is triggered only if the condition is evaluated as true.
    # The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects).
    # Scheduled events with invalid merge fields will fail to evaluate, thus will not be triggered. For example, to trigger an invoice due date scheduled event to only invoices with an amount over 1000, you would define the following condition:
    # 
    # ```Invoice.Amount > 1000```
    # 
    # `Invoice.Amount` refers to the `Amount` field of the Zuora object `Invoice`.
    @constraint:String {maxLength: 65535}
    string condition?;
    # The description of the scheduled event.
    @constraint:String {maxLength: 1000}
    string description?;
    # The display name of the scheduled event.
    @constraint:String {maxLength: 500, minLength: 1}
    string displayName?;
    # The scheduled time (hour) that the scheduled event notifications are sent. This time is based on the localized timezone of your tenant.
    @constraint:Int {minValue: 0, maxValue: 23}
    int hours?;
    # The scheduled time (minute) that the scheduled event notifications are sent. This time is based on the localized timezone of your tenant.
    @constraint:Int {minValue: 0, maxValue: 59}
    int minutes?;
    # The parameters of the filter rule. The names of the parameters must match with the filter rule and can't be duplicated.
    record {|PostScheduledEventRequest_parameters...;|} parameters?;
};

public type POSTTriggerRolloverRequestType record {
    # Date range of the destination validity period to which the funds are transferred. It should be close to the source validity period.
    DestinationValidityPeriodInfo destinationValidityPeriod;
    # Specifies the units of measure for prepayment charge. Units of measure are configured in the web-based UI. Your values depend on your configuration in **Billing Settings**.
    # 
    # **Values**: a valid unit of measure
    string prepaymentUom;
    # Specifies the priority of rolled over fund in case of drawdown.
    # 
    # **Values**: ApplyLast / ApplyFirst
    string priority;
    # Date range of the source validity period from which the funds are transferred. It should be close to the destination validity period.
    SourceValidityPeriodInfo sourceValidityPeriod;
    # The unique identifier number of the subscription.
    @constraint:String {maxLength: 100}
    string subscriptionNumber;
};

# Request to add a new Template migration.
# TemplateMigrationClientRequest object contains request details of target tenant, source tenant, and template information needed for migration.
public type TemplateMigrationClientRequest record {
    string comments?;
    # Description of the migration.
    string description;
    # List of Emails with comma separator.
    string emailIds?;
    # Entity UUID
    string entityUuid;
    # Json node object contains metadata.
    JsonNode metaData?;
    # Name of the migration.
    string name;
    # List of settings need to be migrated.
    MigrationComponentContent[] request?;
    # Flag determines whether or not to send an email.
    boolean sendEmail;
};

public type GETPaymentScheduleItemResponse_billingDocument record {
    # ID of the billing document. for example, `2c9890306fb2121e016fb21a6b550041`.
    string id?;
    # The number of the billing docuemnt, for example, `INV00002345`.
    string number?;
    # Indicates whether the associated billing document is a debit memo or a invoice.
    string 'type?;
};

# A reference to a field.
public type UpdateCustomObjectCusotmField record {
    # Indicates whether Audit Trail will record changes of this custom field. You can change auditable fields to non-auditable, and vice versa. One custom object can have a maximum of five auditable fields.
    boolean auditable?;
    # The custom field definition in the custom object
    CustomObjectCustomFieldDefinitionUpdate definition?;
    # Indicates whether the field is filterable or not. Applicable to `addField` and `updateField` actions.
    # 
    # You can change a filterable field to non-filterable and vice versa. You can also add a filterable field. One custom object can have a maximum of 10 filterable fields.
    # 
    # Note that changing filterable fields triggers reindexing. It will take 12-24 hours before all your data are reindexed and available to query.
    boolean filterable?;
    # The name of the custom field to be updated
    string name?;
    # Indicates whether the field is required or optional.
    # 
    # You can update a required field to optional. On the other hand, you can only update an optional field to required on the custom object with no records.
    # 
    # You can only add a required field to the custom object with no records.
    boolean required?;
    # Required if the `type` of the action is `renameField`
    string targetName?;
    # Indicates whether to specify a unique constraint to the field. You can remove the unique constraint on the field. However, you can only add a unique constraint to a filterable field if the custom object contains no record. One custom object can have a maximum of five fields with unique constraints.
    boolean unique?;
};

public type PUTSrpAddType record {
    # The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call.            
    string bookingDate?;
    # This optional container is used to override the quantity of one or more product rate plan charges for this subscription.
    PUTScAddType[] chargeOverrides?;
    # The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.
    # 
    # If there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect.
    string contractEffectiveDate;
    # The date when the customer accepts the contract in yyyy-mm-dd format.
    # 
    # If this field is not set:
    # 
    # * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date.
    # * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.
    # 
    # The billing trigger dates must follow this rule:
    # 
    # contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
    string customerAcceptanceDate?;
    # An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.
    # 
    # **Note:** If both `externalCatalogPlanId` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalCatalogPlanId?;
    # The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.
    # 
    # **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalIdSourceSystem?;
    # Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string externallyManagedPlanId?;
    # ID of a product rate plan for this subscription
    string productRatePlanId?;
    # Number of a product rate plan for this subscription
    string productRatePlanNumber?;
    # The date when the new product in the subscription is activated in yyyy-mm-dd format.
    # 
    # You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.
    # 
    # The billing trigger dates must follow this rule:
    # 
    # contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
    string serviceActivationDate?;
    *RatePlanObjectCustomFields;
};

# Container for custom payment methods created through the [Open Payment Method](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/MB_Set_up_custom_payment_gateways_and_payment_methods) service.
# 
# **Note:** The response could return more than one custom payment methods.
public type CustomAccountPaymentMethod record {|
    record {}...;
|};

# Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
public type OrderActionRatePlanRecurringFlatFeePricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    # Price of the charge in each recurring period.
    decimal listPrice?;
    # Specifies the duration of each recurring period.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # The number of months for the list price base of the charge. The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.
    @constraint:Int {minValue: 1, maxValue: 200}
    int:Signed32 specificListPriceBase?;
};

public type POSTDecryptResponseType record {
    # The string of a list of the following items: Payment Pages 2.0 URL, tenant ID, timestamp,the Payment Page ID
    # 
    # The items are separated by '#', e.g., "/apps/publichostedpagelite.do#12271#rvBp1AxBJwk6FrT7aqFuABIINiRbwJCc
    # #1418848373103#2c92c0f948f899"
    string decryptedSignature?;
    # The public key passed in as a request parameter.
    string publicKey?;
    # The signature passed in as a request parameter.
    string signature?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Information about the tax exempt status of a customer account.
public type TaxInfo record {
    # EU Value Added Tax ID.
    # 
    # **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
    @constraint:String {maxLength: 25}
    string VATId?;
    # Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.
    # 
    # **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
    @constraint:String {maxLength: 50}
    string companyCode?;
    # ID of the customer tax exemption certificate. Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 32}
    string exemptCertificateId?;
    # Type of tax exemption certificate that the customer holds. Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 32}
    string exemptCertificateType?;
    # Description of the tax exemption certificate that the customer holds. Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 500}
    string exemptDescription?;
    # Date when the customer tax exemption starts, in YYYY-MM-DD format. Applicable if you use Zuora Tax or Connect tax engines.
    string exemptEffectiveDate?;
    # Date when the customer tax exemption expires, in YYYY-MM-DD format. Applicable if you use Zuora Tax or Connect tax engines.
    string exemptExpirationDate?;
    # Jurisdiction in which the customer tax exemption certificate was issued.
    @constraint:String {maxLength: 32}
    string exemptIssuingJurisdiction?;
    # Status of the account tax exemption. Applicable if you use Zuora Tax or Connect tax engines. Required if you use Zuora Tax. 
    "No"|"Yes"|"PendingVerification" exemptStatus?;
};

public type GETCatalogGroupProductRatePlanResponse record {
    # The description of the product rate plan.
    string description?;
    # The effective end Date of the product rate plan.
    string effectiveEndDate?;
    # The effective start date of the product rate plan.
    string effectiveStartDate?;
    # The grade of the product rate plan.
    decimal grade?;
    # The ID of the product rate plan.
    string id?;
    # The name of the product rate plan.
    string name?;
    # The organization(s) that the object belongs to. 
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.            
    GETProductType_organizationLabels[] organizationLabels?;
    # The status of the product rate plan.
    "Active"|"Expired"|"NotStarted" status?;
};

public type CreditMemoKey_files_body record {
    # The PDF file to upload for the credit memo.
    record {byte[] fileContent; string fileName;} file?;
};

public type POSTReversePaymentRequest record {
    # The amount that needs to be reversed (chargeback). It cannot be greater than the total Payment amount. 
    decimal amount;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The transaction response returned by the gateway for this transaction. If the transaction was declined, this reason is provided in the message.
    string gatewayResponse?;
    # Response message Code returned by the gateway about the transaction status.
    string gatewayResponseCode?;
    # The payout ID from the gateway side.
    string payoutId?;
    # Unique Id generated by the gateway for each transaction. Use this ID to find the respective Zuora Payment ID. 
    @constraint:String {maxLength: 100}
    string referenceId?;
    # The second reference Id. Some gateways use two unique transaction IDs.
    @constraint:String {maxLength: 100}
    string secondReferenceId?;
    # The date and time of the transaction settlement. The format is `yyyy-mm-dd hh:mm:ss`.
    string settledOn?;
};

public type GETSubscriptionType record {
    # 
    string accountId?;
    # 
    string accountName?;
    # 
    string accountNumber?;
    # If `true`, the subscription automatically renews at the end of the term. Default is `false`.
    boolean autoRenew?;
    # Container for bill-to contact information.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `billToContactId` field in the request or you select **Default Contact from Account** for the `billToContactId` field during subscription creation, the value of the `billToContact` field is automatically set to `null` in the response body.
    GETAccountSummaryTypeBillToContact billToContact?;
    # The reason for a subscription cancellation copied from the `changeReason` field of a Cancel Subscription order action. 
    # 
    # This field contains valid value only if a subscription is cancelled through the Orders UI or API. Otherwise, the value for this field will always be `null`.
    string cancelReason?;
    # Effective contract date for this subscription, as yyyy-mm-dd.
    string contractEffectiveDate?;
    # Monthly recurring revenue of the subscription.
    decimal contractedMrr?;
    # The currency of the subscription.
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    string currency?;
    # The length of the period for the current subscription term.
    int currentTerm?;
    # The period type for the current subscription term.
    # 
    # Values are:
    # 
    # * `Month` (default)
    # * `Year`
    # * `Day`
    # * `Week`
    string currentTermPeriodType?;
    # The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.
    string customerAcceptanceDate?;
    # An enum field on the Subscription object to indicate the name of a third-party store. This field is used to represent subscriptions created through third-party stores.
    "Amazon"|"Apple"|"Google"|"Roku" externallyManagedBy?;
    # Subscription ID.
    string id?;
    # The length of the period for the first subscription term.
    int initialTerm?;
    # The period type for the first subscription term.
    # 
    # Values are:
    # 
    # * `Month` (default)
    # * `Year`
    # * `Day`
    # * `Week`
    string initialTermPeriodType?;
    # The number of the invoice group associated with the subscription.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string? invoiceGroupNumber?;
    # 
    string invoiceOwnerAccountId?;
    # 
    string invoiceOwnerAccountName?;
    # 
    string invoiceOwnerAccountNumber?;
    # The ID of the invoice schedule associated with the subscription.
    # 
    # If multiple invoice schedules are created for different terms of a subscription, this field stores the latest invoice schedule.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    int invoiceScheduleId?;
    # Separates a single subscription from other subscriptions and creates an invoice for the subscription. 
    # 
    # If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.
    string invoiceSeparately?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # The name of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `invoiceTemplateId` field in the request or you select **Default Template from Account** for the `invoiceTemplateId` field during subscription creation, the value of the `invoiceTemplateName` field is automatically set to `null` in the response body.
    #   
    string invoiceTemplateName?;
    # If `true`, the current subscription object is the latest version.
    boolean isLatestVersion?;
    # The last booking date of the subscription object. This field is writable only when the subscription is newly created as a first version subscription. You can override the date value when creating a subscription through the Subscribe and Amend API or the subscription creation UI (non-Orders). Otherwise, the default value `today` is set per the user's timezone. The value of this field is as follows:
    # * For a new subscription created by the [Subscribe and Amend APIs](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Subscribe_and_Amend_APIs_to_Migrate), this field has the value of the subscription creation date.
    # * For a subscription changed by an amendment, this field has the value of the amendment booking date.
    # * For a subscription created or changed by an order, this field has the value of the order date. 
    string lastBookingDate?;
    # A string of up to 65,535 characters.
    string notes?;
    # The order number of the order in which the changes on the subscription are made. 
    # 
    # **Note:** This field is only available if you have the [Order Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Order_Metrics) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.
    string orderNumber?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The name of the payment term associated with the subscription. For example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string paymentTerm?;
    # Container for rate plans.
    GETSubscriptionRatePlanType[] ratePlans?;
    # Specifies whether a termed subscription will remain `TERMED` or change to `EVERGREEN` when it is renewed. 
    # 
    # Values are:
    # 
    # * `RENEW_WITH_SPECIFIC_TERM` (default)
    # * `RENEW_TO_EVERGREEN`
    string renewalSetting?;
    # The length of the period for the subscription renewal term.
    int renewalTerm?;
    # The period type for the subscription renewal term.
    # 
    # Values are:
    # 
    # * `Month` (default)
    # * `Year`
    # * `Day`
    # * `Week`
    string renewalTermPeriodType?;
    # An auto-generated decimal value uniquely tagged with a subscription. The value always contains one decimal place, for example, the revision of a new subscription is 1.0. If a further version of the subscription is created, the revision value will be increased by 1. Also, the revision value is always incremental regardless of deletion of subscription versions.
    string revision?;
    # The ID of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The name of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `sequenceSetId` field in the request or you select **Default Template from Account** for the `sequenceSetId` field during subscription creation, the value of the `sequenceSetName` field is automatically set to `null` in the response body.
    string sequenceSetName?;
    # The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd
    string serviceActivationDate?;
    # Container for sold-to contact information.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `soldToContactId` field in the request or you select **Default Contact from Account** for the `soldToContactId` field during subscription creation, the value of the `soldToContact` field is automatically set to `null` in the response body.
    GETAccountSummaryTypeSoldToContact soldToContact?;
    # Subscription status; possible values are:
    # 
    # * `Draft`
    # * `Pending Activation`
    # * `Pending Acceptance`
    # * `Active`
    # * `Cancelled`
    # * `Suspended`
    string status?;
    # Container for status history.
    GETSubscriptionStatusHistoryType[] statusHistory?;
    # The date when the subscription term ends, where the subscription ends at midnight the day before.
    # For example, if the `subscriptionEndDate` is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016.
    # This date is the same as the term end date or the cancelation date, as appropriate.
    string subscriptionEndDate?;
    # 
    string subscriptionNumber?;
    # Date the subscription becomes effective.
    string subscriptionStartDate?;
    # Date the subscription term ends. If the subscription is evergreen, this is null or is the cancellation date (if one has been set).
    string termEndDate?;
    # Date the subscription term begins. If this is a renewal subscription, this date is different from the subscription start date.
    string termStartDate?;
    # Possible values are: `TERMED`, `EVERGREEN`.
    string termType?;
    # Total contracted value of the subscription.
    decimal totalContractedValue?;
    # This is the subscription version automatically generated by Zuora Billing. Each order or amendment creates a new version of the subscription, which incorporates the changes made in the order or amendment.
    int version?;
    *SubscriptionObjectQTFields;
    *SubscriptionObjectNSFields;
    *SubscriptionObjectCustomFields;
};

public type GETPaymentRunSummaryTotalValues record {
    # **Note:** This field is only available if you have the Credit Balance feature enabled.
    # 
    # The total amount of credit balance after the payment run is completed.
    string totalValueOfCreditBalance?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The total amount of credit memos that are successfully processed in the payment run.
    string totalValueOfCreditMemos?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The total amount of debit memos that are picked up for processing in the payment run.
    string totalValueOfDebitMemos?;
    # The total amount of receivables associated with the payments with the status of `Error` and `Processing`.
    string totalValueOfErrors?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The total amount of invoices that are picked up for processing in the payment run.
    string totalValueOfInvoices?;
    # The total amount of payments that are successfully processed in the payment run.
    string totalValueOfPayments?;
    # The total amount of receivables associated with the payment run.
    # 
    # The value of this field is the sum of the value of the `totalValueOfInvoices` field and that of the `totalValueOfDebitMemos` field.
    string totalValueOfReceivables?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The total amount of unapplied payments that are successfully processed in the payment run.
    int totalValueOfUnappliedPayments?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The total amount of debit memos with remaining positive balances after the payment run is completed.
    string totalValueOfUnprocessedDebitMemos?;
    # **Note:** This field is only available if you have the Invoice Settlement feature enabled.
    # 
    # The total amount of invoices with remaining positive balances after the payment run is completed.
    string totalValueOfUnprocessedInvoices?;
    # The total amount of receivables with remaining positive balances after the payment run is completed.
    string totalValueOfUnprocessedReceivables?;
};

public type PriceIntervalWithPrice record {
    # Duration period of this interval.
    @constraint:Int {minValue: 1}
    int duration?;
    # Price of this interval.
    decimal price?;
    # Index of the interval in the interval pricing.
    @constraint:Int {minValue: 1}
    int sequence?;
    # Interval type of this pricing.
    "Day"|"Month"|"Infinity" 'type?;
};

public type BatchQueries record {
    # A 32-character ID of the query batch.
    string batchId?;
    # The kind of batch job being submitted.              
    "zoql"|"zoqlexport" batchType?;
    # The ID of the query results file.
    # 
    # Use Get Results Files to download the query results file. The query results file is formatted as requested in the batch job. Supported formats are CSV, GZIP, and ZIP.
    string fileId?;
    # The error message.
    string message?;
    # Name of the query supplied in the request.
    string name?;
    # The requested query string.
    string query?;
    # The number of records included in the query output file.
    string recordCount?;
    # Array of IDs of query results files. Replaces fileId for full data loads in stateful mode if <a href = "https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/G_File_Segmentation" target="_blank">File Segmentation</a> is enabled.
    # 
    # Use Get Results Files to download each query results file. Each query results file contains at most 500,000 records and is formatted as requested in the batch job. Supported formats are CSV, GZIP, and ZIP.
    anydata[] segments?;
    # The status of the query task:
    # - submitted: The query was submitted to the query executor for processing.
    # - pending: The query was waiting for being processed.
    # - executing: The query is being processed.
    # - completed: The query was successfully executed.
    # - aborted: The query execution failed.
    # - deleted_notallowed: The query execution failed because objects included in the query do not support the querying of deleted records.
    "submitted"|"pending"|"executing"|"completed"|"aborted"|"deleted_notallowed" status?;
};

public type POSTJournalEntryType record {
    # Name of the accounting period. The open-ended accounting period is named `Open-Ended`.
    string accountingPeriodName;
    # The type of currency used. Currency must be active.
    string currency;
    # Date of the journal entry.
    string journalEntryDate;
    # Key name that represents the list of journal entry items.
    POSTJournalEntryItemType[] journalEntryItems;
    # The number associated with the revenue event.
    # 
    # Character limit: 2,000
    string notes?;
    # Name of the organization that the journal entry belongs to.  
    # 
    # This field is only required when you have already turned on Multi-Org feature.    
    string organizationLabel?;
    # List of segments that apply to the summary journal entry.
    POSTJournalEntrySegmentType[] segments?;
    # Status shows whether the journal entry has been transferred to an accounting system.
    "No"|"Processing"|"Yes"|"Error"|"Ignore" transferredToAccounting?;
    *JournalEntryObjectCustomFields;
};

public type EventTrigger record {
    # The status of the trigger.
    boolean active?;
    # The base object that the trigger rule is defined upon. The format of the value in this field depends on the base object type:
    # - Standard object: object name, which should follow the pattern ^[A-Z][\w\-]*$. For example, `Invoice`.
    # - Custom object: `default__<custom_object_api_name>`. For example, `default__vehicle`.
    @constraint:String {maxLength: 100, minLength: 1}
    string baseObject?;
    # The JEXL expression to be evaluated against object changes. See above for more information and an example.
    @constraint:String {maxLength: 5000, minLength: 1}
    string condition?;
    # The description of the trigger.
    @constraint:String {maxLength: 1000}
    string description?;
    EventType eventType?;
    string id?;
};

public type PaymentData record {
    # The authorization transaction ID from the payment gateway.
    string authTransactionId?;
    # The amount that is authorized before this API call. Only used for the Delay Capture function.
    decimal authorizedAmount?;
    # The authorization of currency code that occurs before this API call. We will verify whether it is same as the account's currency.
    string authorizedCurrency?;
};

public type TimeSlicedMetrics record {
    decimal amount?;
    string endDate?;
    # Specify the reason why the metrics are generated by the certain order action.
    # 
    # This field is only available to existing Orders customers who already have access to the field.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    "IncreaseQuantity"|"DecreaseQuantity"|"ChangePrice"|"Extension"|"Contraction" generatedReason?;
    # The acount number of the billing account that is billed for the subscription.
    string invoiceOwner?;
    # The ID of the order item referenced by the order metrics.
    # 
    # This field is only available to existing Orders customers who already have access to the field.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    string orderItemId?;
    string startDate?;
    # The acount number of the billing account that owns the subscription.
    string subscriptionOwner?;
    decimal termNumber?;
};

public type FulfillmentItemCommon record {
    # Container for custom fields of a Fulfillment Item object.
    FulfillmentItemCustomFields customFields?;
    # The description of the Fulfillment Item.
    string description?;
    # The external identifier of the Fulfillment Item.
    string itemIdentifier?;
};

# Container for the electronic payment options.
public type ProcessingOptionsOrdersWithDelayedCapturePayment_electronicPaymentOptions record {
    # The authorization transaction ID from the payment gateway.
    # 
    # When you create a payment to capture the funds that have been authorized through [Create authorization](https://developer.zuora.com/api-references/api/operation/POST_CreateAuthorization/), pass in the `authTransactionId` field. It is highly recommended to also pass in `gatewayOrderId` that you used when authorizing the funds. `authTransactionId` is required, while `gatewayOrderId` is optional.
    @constraint:String {maxLength: 50}
    string authTransactionId?;
    # A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
    # 
    # Gateways check duplicates on the gateway order ID to ensure that the same transaction is not entered twice accidentally. 
    # 
    # This ID can also be used to do reconciliation and tie the payment to a natural key in external systems. The source of this ID varies by merchant. Some merchants use shopping cart order IDs, and others use something different. Merchants use this ID to track transactions in their eCommerce systems.
    # 
    # When you create a payment to capture the funds that have been authorized through [Create authorization](https://developer.zuora.com/api-references/api/operation/POST_CreateAuthorization/), pass in the `authTransactionId` field. It is highly recommended to also pass in `gatewayOrderId` that you used when authorizing the funds. `authTransactionId` is required, while `gatewayOrderId` is optional.
    @constraint:String {maxLength: 50}
    string gatewayOrderId?;
    # Specifies the ID of a payment gateway to override the default gateway.
    # 
    # If <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Payment_Gateway_Routing" target="_blank">Payment Gateway Routing</a> is enabled: 
    #   - If this field is not specified, gateway routing rules will be invoked.
    #   - If this field is specified, the specified gateway will be used to process the payment.
    # 
    # If Payment Gateway Routing is disabled:
    #   - If this field is not specified, the default payment gateway will be used to process the payment. The default gateway of the customer account takes precedence over the default gateway of the tenant.
    #   - If this field is specified, the specified gateway will be used to process the payment.
    string paymentGatewayId?;
    # Specifies an electronic payment method. It can be one that has already been associated with an invoice owner, or an orphan payment method, which is not associated with any invoice owner. For an orphan payment method, this operation will then associate it with the account that this order will be created under.
    string paymentMethodId?;
};

# Container for charge model configuration data.
# 
# **Notes**:
#   - This field is only available if you have the Pre-Rated Pricing or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
#   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `102` or later. Otherwise, an error occurs with "Code: INVALID_VALUE".
public type ProxyCreateOrModifyProductRatePlanChargeChargeModelConfiguration record {
    # An array of Charge Model Configuration Key-Value pairs.
    ProxyCreateOrModifyProductRatePlanChargeChargeModelConfigurationItem[] ConfigurationItem?;
};

public type GetFulfillmentItemResponseType record {
    *CommonResponse;
    FulfillmentItemGet fulfillmentItem?;
};

public type PUTPublishOpenPaymentMethodTypeResponse record {
    # If an entity UUID is provided, this custom payment method type is specific to this entity only. If no entity UUID is provided, the custom payment method type is available to the global entity and all the sub entities in the tenant.
    string entityId?;
    # An array containing field metadata of the custom payment method type.
    OpenPaymentMethodTypeResponseFields[] fields?;
    # A string to identify the custom payment method type in the API name of the payment method type.
    # 
    # This field is used along with the `tenantId` field by the system to construct and generate the API name of the custom payment method type in the following way:
    # 
    # `<internalName>__c_<tenantId>`
    # 
    # For example, if `internalName` is `AmazonPay`, and `tenantId` is `12368`, the API name of the custom payment method type will be `AmazonPay__c_12368`.
    string internalName?;
    # The label that is used to refer to this type in the Zuora UI.
    string label?;
    # The identification reference of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Payment Method Data Source Exports and Data Query.
    string methodReferenceIdField?;
    # The revision number of the custom payment method type, which starts from 1 and increases by 1 when you update a published revision for the first time.
    int revision?;
    # The status of the custom payment method type.
    string status?;
    # The identification reference indicating the subtype of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string subTypeField?;
    # Zuora tenant ID. If multi-entity is enabled in your tenant, this is the ID of the parent tenant of all the sub entities.
    string tenantId?;
    # The identification reference of the user or customer account.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string userReferenceIdField?;
    # The time when the custom payment method type was first published.
    string version?;
};

public type CreatePaymentMethodBecsnz record {
    # The container for the account holder information. The nested `accountHolderName` field is required.
    CreatePaymentMethodBetalingsservice_accountHolderInfo accountHolderInfo?;
    # The number of the customer's bank account.
    string accountNumber?;
    # The masked account number such as ****1234.
    string accountMaskNumber?;
    # The branch code of the bank used for direct debit.
    string branchCode?;
    # The sort code or number that identifies the bank. This is also known as the sort code.
    string bankCode?;
    # The container of the mandate information for the payment method.
    CreatePaymentMethodCreditCard_mandateInfo mandateInfo?;
    # The container for payment method processing options.
    CreatePaymentMethodCreditCard_processingOptions processingOptions?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type OrderActionRatePlanRecurringFlatFeePricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    decimal listPrice?;
};

public type PUTAccountingCodeType record {
    # Name of the account in your general ledger.
    # 
    # Field only available if you have Zuora Finance enabled. Maximum of 255 characters.
    string glAccountName?;
    # Account number in your general ledger.
    # 
    # Field only available if you have Zuora Finance enabled. Maximum of 255 characters.
    string glAccountNumber?;
    # Name of the accounting code.
    # 
    # Accounting code name must be unique. Maximum of 100 characters.
    string name?;
    # Maximum of 2,000 characters.
    string notes?;
    # Accounting code type. You cannot change the type of an accounting code from `AccountsReceivable` to a different type. 
    # 
    # Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature. 
    "AccountsReceivable"|"On-Account Receivable"|"Cash"|"OtherAssets"|"CustomerCashOnAccount"|"DeferredRevenue"|"SalesTaxPayable"|"OtherLiabilities"|"SalesRevenue"|"SalesDiscounts"|"OtherRevenue"|"OtherEquity"|"BadDebt"|"OtherExpenses" 'type?;
    *AccountingCodeObjectCustomFields;
};

public type GETRatePlanChargePricingTier_inner record {
    # The code corresponding to the currency for the price tier.
    string currency?;
    # The specific amount for a fixed discount. This field is applicable for charges based on the Discount-Fixed Amount charge model.
    decimal discountAmount?;
    # The percentage of discount for a percentage discount. This field is applicable for charges based on the Discount-Percentage charge model.
    decimal discountPercentage?;
    # The end number of a range of units for the tier. This field is applicable for charges based on the Tiered Pricing or Tiered with Overage Pricing charge model.
    decimal endingUnit?;
    # Indicates whether the price is an overage price, which is the price when usage surpasses the last defined tier.
    decimal overagePrice?;
    # The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.
    decimal price?;
    # The starting number of a range of units for the tier. This field is applicable for charges based on the Tiered Pricing or Tiered with Overage Pricing charge model.
    decimal startingUnit?;
};

public type PaymentDebitMemoApplicationCreateRequestType record {
    # The amount of the payment associated with the debit memo.
    decimal amount;
    # The unique ID of the debit memo that the payment is created on.
    string debitMemoId?;
    # Container for debit memo items. The maximum number of items is 1,000.
    # 
    # **Note:** This field is only available if you have the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/C_Invoice_Item_Settlement) feature enabled. Invoice Item Settlement must be used together with other Invoice Settlement features (Unapplied Payments, and Credit and Debit memos).  If you wish to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    PaymentDebitMemoApplicationItemCreateRequestType[] items?;
};

public type ResendCalloutNotificationsFailedResponse record {|
    record {
        # The error code of response.
        string code?;
        # The detail information of the error response
        string message?;
    }...;
|};

public type GETSubscriptionRatePlanType record {
    # Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string externallyManagedPlanId?;
    # Rate plan ID.
    string id?;
    # The last amendment on the rate plan. 
    # 
    # 
    # **Note:** If a subscription is created through an order, this field is only available if multiple orders are created on the subscription.
    # 
    # 
    # Possible Values:
    #   * `Add`
    #   * `Update`
    #   * `Remove`
    string lastChangeType?;
    # 
    string productId?;
    # 
    string productName?;
    # 
    string productRatePlanId?;
    # The unique SKU for the product.
    string productSku?;
    # Container for one or more charges.
    GETSubscriptionRatePlanChargesType[] ratePlanCharges?;
    # Name of the rate plan.
    string ratePlanName?;
    # Container for one or more features. 
    # 
    # Only available when the following settings are enabled:
    # 
    # * The Entitlements feature in your tenant.
    # 
    # * The Enable Feature Specification in Product and Subscriptions setting in Zuora Billing Settings
    GETSubscriptionProductFeatureType[] subscriptionProductFeatures?;
    *RatePlanObjectCustomFields;
};

public type PostTaxationItemType record {
    # The calculated tax amount excluded due to the exemption.
    string exemptAmount?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The name of taxation.
    string name;
    # The amount of the taxation item in the invoice item.
    string taxAmount;
    # The tax code identifies which tax rules and tax rates to apply to a specific invoice item.
    string taxCode;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the invoice item, in `yyyy-mm-dd` format.
    string taxDate;
    # The tax mode of the invoice item, indicating whether the amount of the invoice item includes tax.
    "TaxInclusive"|"TaxExclusive" taxMode;
    # The tax rate applied to the invoice item.
    string taxRate;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate applied to the invoice item.
    "Percentage"|"FlatFee" taxRateType;
    *TaxationItemObjectCustomFields;
};

public type OrderActionRatePlanRecurringDeliveryPricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    DeliveryScheduleParams deliverySchedule?;
    decimal listPrice?;
};

public type GETPaymentPartTypewithSuccess record {
    # The amount of the payment part.
    decimal amount?;
    # The ID of the Zuora user who created the payment part.
    string createdById?;
    # The date and time when the payment part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the debit memo associated with the payment part.
    string debitMemoId?;
    # The ID of the payment part.
    string id?;
    # The ID of the invoice associated with the payment part.
    string invoiceId?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the Zuora user who last updated the payment part.
    string updatedById?;
    # The date and time when the payment part was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

public type PUTCreditMemoType record {
    # Whether the credit memo automatically applies to the invoice upon posting.
    boolean autoApplyUponPosting?;
    # Comments about the credit memo.
    @constraint:String {maxLength: 255}
    string comment?;
    # The date when the credit memo takes effect.
    string effectiveDate?;
    # Whether the credit memo is excluded from the rule of automatically applying unapplied credit memos to invoices and debit memos during payment runs. If you set this field to `true`, a payment run does not pick up this credit memo or apply it to other invoices or debit memos.
    boolean excludeFromAutoApplyRules?;
    # Container for credit memo items.
    PUTCreditMemoItemType[] items?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    string reasonCode?;
    # Whether the credit memo is transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    *CreditMemoObjectNSFields;
    *CreditMemoObjectCustomFields;
};

# Information about an order action of type `RemoveProduct`.
public type OrderActionRatePlanRemoveProduct record {
    # Internal identifier of the rate plan to remove.
    string ratePlanId?;
    # A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.A unique string in the order to represent the rate plan.
    string uniqueToken?;
};

# Container for custom fields of a Journal Entry Item object.
public type JournalEntryItemObjectCustomFields record {
};

# 
public type QueryRefundsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedRefund[] data?;
|};

public type GETProductRatePlanChargePricingType record {
    # Currency used by the charge model. For example: USD or EUR
    string currency?;
    # Value subtracted from price in currency specified. Used only when the charge model is DiscountFixedAmount.
    string discountAmount?;
    # Percent discount applied to the price. Used only when the charge model is DiscountPercentage.
    string discountPercentage?;
    # Specifies the number of units in the base set of units when the charge model is Overage.
    string includedUnits?;
    # Price per unit when base set of units is exceeded. Used only when charge model is Overage or Tiered with Overage.
    string overagePrice?;
    # The decimal value that applies when the charge model is not tiered
    string price?;
    # Container for one or many defined tier ranges with distinct pricing.  Applies when model is `Tiered`, `TieredWithOverage`, or `Volume`
    GETProductRatePlanChargePricingTierType[] tiers?;
};

public type CustomObjectDefinition record {
    # The creator's Id
    string CreatedById?;
    # The creation time of the custom object definition in date-time format.
    string CreatedDate?;
    # The unique Id of the custom object definition
    string Id?;
    # The modifier's Id
    string UpdatedById?;
    # The update time of the custom object definition in date-time format.
    string UpdatedDate?;
    # The schema of the custom object definition
    CustomObjectDefinition_schema schema?;
    # The API name of the custom object
    string 'type?;
};

public type BillRunId_post_body record {
    # The date that appears on the invoice being created, in `yyyy-mm-dd` format. 
    # 
    # The value cannot fall in a closed accounting period.
    string invoiceDate;
};

public type CreditMemoUnapplyInvoiceItemRequestType record {
    # The amount that is unapplied from the specific item. 
    decimal amount;
    # The ID of the credit memo item.
    string creditMemoItemId?;
    # The ID of the credit memo taxation item.
    string creditTaxItemId?;
    # The ID of the invoice item that the credit memo item is unapplied from.
    string invoiceItemId?;
    # The ID of the invoice taxation item that the credit memo taxation item is unapplied from.
    string taxItemId?;
};

public type CustomObjectBulkJobResponseCollection record {
    # The number of custom object bulk jobs returned in the result page set.
    int count?;
    # The `cursor` points to the last job record of the current page.
    string cursor?;
    # All custom object bulk jobs returned in the result page set.
    CustomObjectBulkJobResponse[] jobs;
};

# The amendment that is related to the subscription rate plan.
public type OrderActionRatePlanAmendment record {
    # The amendment code.
    string code?;
    # The date when the amendment becomes effective for billing purposes, as `yyyy-mm-dd`.
    string contractEffectiveDate?;
    # The ID of the user who created this amendment.
    string createdBy?;
    # The time that the amendment gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The date when the customer accepts the amendment changes to the subscription, as `yyyy-mm-dd`.
    string customerAcceptanceDate?;
    # Description of the amendment.
    string description?;
    # The date when the amendment changes take effective. 
    string effectiveDate?;
    # The amendment ID.
    string id?;
    # The name of the amendment.
    string name?;
    # The date when service is activated, as `yyyy-mm-dd`.
    string serviceActivationDate?;
    # Type of the amendment.
    # Possible values are:
    # 
    # 
    # - NewProduct
    # - RemoveProduct
    # - UpdateProduct
    string 'type?;
    # The ID of the user who updated this amendment.
    string updatedBy?;
    # The time that the amendment gets updated in the system, in the `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
};

# Specifies when a charge becomes active.
public type CreateOrderUpdateProductTriggerParams record {
    # Date in YYYY-MM-DD format. Only applicable if the value of the `triggerEvent` field is `SpecificDate`. 
    # 
    # While this field is applicable, if this field is not set, your `CreateSubscription` order action creates a `Pending` order and a `Pending Acceptance` subscription. If at the same time the service activation date is required and not set, a `Pending Activation` subscription is created.
    # 
    # While this field is applicable, if this field is not set, the following order actions create a `Pending` order but do not impact the subscription status. **Note**: This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    #  * AddProduct
    #  * UpdateProduct
    #  * RemoveProduct
    #  * RenewSubscription
    #  * TermsAndConditions
    # 
    # While this field is applicable, for the `updateProduct` order action, if the Pending order feature as above is not enabled, this field must not be set to null.
    string specificTriggerDate?;
    # Condition for the charge to become active. If this field is not specified, the value of the field will be defaulted to the trigger event value defined in the product catalog.
    # 
    # If the value of this field is `SpecificDate`, use the `specificTriggerDate` field to specify the date when the charge becomes active.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance"|"SpecificDate" triggerEvent?;
};

public type GETPaymentMethodResponseACH record {
    # The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.
    string bankABACode?;
    # The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.
    string bankAccountName?;
    # The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`.
    string bankAccountNumber?;
    # The type of bank account associated with the ACH payment. This field is only required if the `type` field is set to `ACH`.
    # 
    # When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify any of the allowed values as a dummy value, `Checking` preferably.
    "BusinessChecking"|"Checking"|"Saving" bankAccountType?;
    # The name of the bank where the ACH payment account is held. This field is only required if the `type` field is set to `ACH`.
    # 
    # When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.
    string bankName?;
};

public type V1_usage_body record {
    # The usage data to import. The supported formats are excel, csv, and zip.
    record {byte[] fileContent; string fileName;} file;
};

# Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
public type OrderActionRatePlanUsageFlatFeePricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    # Price of the charge.
    decimal listPrice?;
};

public type CreditMemoItemFromInvoiceItemType record {
    # The amount of the credit memo item.
    decimal amount;
    # Comments about the credit memo item.
    # **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string comment?;
    # The description of the credit memo item.
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string description?;
    # Container for the finance information related to the credit memo item.
    CreditMemoItemFromWriteOffInvoice_financeInformation financeInformation?;
    # The ID of the invoice item.
    string invoiceItemId;
    # The number of units for the credit memo item.
    decimal quantity?;
    # The service end date of the credit memo item.
    string serviceEndDate?;
    # The service start date of the credit memo item.
    string serviceStartDate?;
    # The name of the charge associated with the invoice.
    string skuName;
    # Container for taxation items.
    CreditMemoTaxItemFromInvoiceTaxItemType[] taxItems?;
    # The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
    # **Note**: 
    #   - Only includes the `taxMode` field if the credit memo needs to be processed with a different tax mode than what was processed during invoice generation or the product rate plan charge was defined with. Otherwise, do not specify a tax mode.
    #   - You can set this field to `TaxInclusive` only if the `taxAutoCalculation` field is set to `true`.
    #   - If you set `taxMode` to `TaxInclusive`, you cannot input tax amounts for credit memo items. The corresponding invoice item must use the same tax engine as the credit memo item to calculate tax amounts.
    "TaxExclusive"|"TaxInclusive" taxMode = "TaxExclusive";
    # The definable unit that you measure when determining charges.
    string unitOfMeasure?;
    *CreditMemoItemObjectCustomFields;
};

public type GetOperationJobResponseType record {
    # The ID of the operation job to retrieve information about.
    string id?;
    # The ID of the business object which is being operated.
    string objectId?;
    # The object type of the job. 
    "Invoice" objectType?;
    # The operation type of the job.
    "Delete" operationType?;
    DeleteAccountResponseType_reasons[] reasons?;
    # The status of the operation job. 
    "Pending"|"Processing"|"Failed"|"Completed" status?;
    # Whether the call succeeded.
    boolean success?;
};

public type GetDataLabelingJobResponse record {
    # Identifier of the data labeling job.
    @constraint:String {maxLength: 32, minLength: 32}
    string jobId?;
    # Status of the data labeling job.
    # 
    # * `Accepted` - The data labeling job has been accepted by the system.
    # * `Dispatched` - The data labeling job is dispatched to the data labeling service.
    # * `Completed` - The data labeling job has completed. Please note that `Completed` simply means the data labeling job has completed, but it does not mean the data labeling job has labeled all the data. You can check the `progress` field to see how many data have been `labeled`, `failed` or `timeout`.
    "Accepted"|"Dispatched"|"Completed" jobStatus?;
    # The object type of the data labeling job.
    string objectType?;
    GetDataLabelingJobResponse_progress progress?;
    # Indicates whether the job was submitted successfully.
    boolean success?;
    # The total number of objects to be labeled.
    int totalObject?;
};

# Container for billing and payment information for the account.
public type GETAccountType_billingAndPayment record {
    # A list of additional email addresses to receive email notifications.
    string[] additionalEmailAddresses?;
    # Whether future payments are automatically collected when they are due during a payment run.
    boolean autoPay?;
    # Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.
    string billCycleDay?;
    # A currency defined in the web-based UI administrative settings.
    string currency?;
    # ID of the default payment method for the account.
    string defaultPaymentMethodId?;
    # Whether the customer wants to receive invoices through email. 
    boolean invoiceDeliveryPrefsEmail?;
    # Whether the customer wants to receive printed invoices, such as through postal mail.
    boolean invoiceDeliveryPrefsPrint?;
    # `true` indicates the consent from your customer to use the Cascading Payment Method feature was collected. 
    # `false` indicates the consent was not collected and the Cascading Payment Method feature is not enabled.
    boolean paymentMethodCascadingConsent?;
    # The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.
    string paymentGateway?;
    # A payment-terms indicator defined in the web-based UI administrative settings, e.g., "Net 30".
    string paymentTerm?;
};

public type RatePlan record {
    # Container for custom fields.
    CustomFields customFields?;
    # Internal identifier of the product rate plan that the rate plan is based on.
    string productRatePlanId?;
};

public type PUTAttachmentType record {
    # Description of the attachment.
    string description?;
    # File name of the attachment. The value should not contain the file extension. Only the file name without the extension can be edited.
    string fileName?;
};

# Container for custom fields of a Subscription object.
public type SubscriptionObjectCustomFields record {
};

public type PaymentScheduleCommonResponse record {
    # ID of the account that owns the payment schedule.
    string accountId?;
    # Number of the account that owns the payment schedule.
    string accountNumber?;
    GETPaymentScheduleItemResponse_billingDocument billingDocument?;
    # The ID of the user who created this payment schedule.
    string createdById?;
    # The date and time the payment schedule is created.
    string createdDate?;
    # The description of the payment schedule.
    string description?;
    # ID of the payment schedule.
    string id?;
    # Indicates if the payment schedule is a custom payment schedule.
    boolean isCustom?;
    # Container for payment schedule items.
    PaymentScheduleItemCommonResponse[] items?;
    # The date the next payment will be processed.
    string nextPaymentDate?;
    # The number of payment schedule items that are created by this payment schedule.
    int occurrences?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # Number of the payment schedule.
    string paymentScheduleNumber?;
    # For recurring payment schedule only. The period of payment generation. Available values include: `Monthly`, `Weekly`, `BiWeekly`.
    # Returns `null` for custom payment schedules.
    string period?;
    # Indicates whether the payments created by the payment schedule are used as a reserved payment. This field is available only if the prepaid cash drawdown permission is enabled. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.
    boolean prepayment?;
    # The date the last payment was processed.
    string recentPaymentDate?;
    # [0,1,2,~,22,23]
    # 
    # At which hour in the day in the tenant’s timezone the recurring payment schedule items will be collected.
    # Return `0` for custom payment schedules.
    int runHour?;
    # Indicates if the payments that the payment schedule created are standalone payments or not.
    boolean standalone?;
    # The date when the first payment of this payment schedule is proccessed.
    string startDate?;
    # The status of the payment schedule.
    # 
    # - Active: There is still payment schedule item to process.
    # - Canceled: After a payment schedule is canceled by the user, the schedule is marked as `canceled`.
    # - Completed: After all payment schedule items are processed, the schedule is marked as `Completed`.
    "Active"|"Canceled"|"Completed" status?;
    # The total amount that will be collected by the payment schedule.            
    decimal totalAmount?;
    # The number of errored payments.
    int totalPaymentsErrored?;
    # The number of processed payments.
    int totalPaymentsProcessed?;
    # The ID of the user who last updated this payment schedule.
    string updatedById?;
    # The date and time the payment schedule is last updated.
    string updatedDate?;
    *PaymentScheduleCustomFields;
};

# The parameter values used to configure the filter rule.
public type FilterRuleParameterValues record {|
    string...;
|};

public type Jobs_jobId_body record {
    # `Stopping` is currently the only allowed value.
    "Stopping" status;
};

public type Workflows_workflow_id_body record {
    # The id of a version. This version will then be set to the active version of the workflow definition.
    int active_workflow_version_id?;
    # The description of the workflow defintion
    string description?;
    # The name of the workflow definition
    string name?;
    # Can be `Active` or `Inactive`. Active workfow definitions run like normal. Inactive workflow definitions cannot be run.
    string status?;
};

public type POSTChargeDefinitionRequest record {
    # The billing period for the product charge definition.
    string billingPeriod?;
    # The billing timing setting for the product charge definition.
    "IN_ADVANCE"|"IN_ARREARS" billingTiming?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    "DiscountFixedAmount"|"DiscountPercentage"|"FlatFee"|"PerUnit"|"Tiered"|"Volume"|"Delivery" chargeModel?;
    # The default quantity. 
    # 
    # This field is applicable only for one-time and recurring charges.
    decimal? defaultQuantity?;
    # The effective end date of the product charge definition.
    string effectiveEndDate?;
    # The effective start date of the product charge definition.
    string effectiveStartDate?;
    # The list price base. 
    # 
    # This field is applicable only for recurring charges.
    # 
    # **Note**: The `Per_Year` enum value is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year" listPriceBase?;
    # Container for the prices of the product charge definition.
    POSTProductChargeDefinitionPricing[] prices?;
    # The unique ID of the charge of the charge definition.
    string productRatePlanChargeId?;
    # The unique number (natural key) of the charge of the charge definition.
    string productRatePlanChargeNumber?;
    # The unique ID of the product rate plan that uses this charge definition.
    string productRatePlanId?;
    # The unique number (natural key) of the product rate plan that uses this charge definition.
    string productRatePlanNumber?;
    # The specific number of billing periods for the product charge definition.
    decimal? specificBillingPeriod?;
    # The number of months for the list price base of the charge definition. 
    # This field is `null` if the `listPriceBase` field is not set to `Per_Specific_Months`.
    int:Signed32? specificListPriceBase?;
    # Specifies the tax code for taxation rules. This field is required when the `Taxable` field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of the charge.
    @constraint:String {maxLength: 64}
    string taxCode?;
    # Determines how to define taxation for the charge. This field is required when the `Taxable` field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of the charge.
    "TaxExclusive"|"TaxInclusive"? taxMode?;
    # Determines whether the charge definition is taxable. When this field is set to `True`, the `TaxMode` and `TaxCode` fields are required.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `True`, `False`
    # 
    # **Note**: This value affects the tax calculation of the charge.
    boolean taxable?;
    # The number of periods of a termed subscription that is eligible for this charge definition. This field is applicable when the `termType` field is set to `TERMED`, 
    # and is to be used together with the `termPeriodType` field.
    decimal? term?;
    # Specifies the period type for the subscription term that is eligible for this charge definition.
    "Month"|"Year"|"Day"|"Week"? termPeriodType?;
    # The type of the subscription that is eligible for this charge definition.
    "TERMED"|"EVERGREEN"? termType?;
    # Describes the unit of measure (UOM) configured in **Settings > Billing** for the charge.
    string? uom?;
};

# The mandate information for the Credit Card, Apple Pay, Google Pay, Credit Card Reference Transaction, ACH, or Bank Transfer payment method.
# 
# The following mandate fields are common to all supported payment methods:
# * `mandateId`
# * `mandateReason`
# * `mandateStatus`
# 
# The following mandate fields are specific to the ACH and Bank Transfer payment methods:
# * `mandateReceivedStatus`
# * `existingMandateStatus`
# * `mandateCreationDate`
# * `mandateUpdateDate`
# 
# The following mandate fields are specific to the Credit Card, Apple Pay, and Google Pay payment methods:
# * `mitTransactionId`
# * `mitProfileAgreedOn`
# * `mitConsentAgreementRef`
# * `mitConsentAgreementSrc`
# * `mitProfileType`
# * `mitProfileAction`
public type POSTAccountPMMandateInfo record {
    # Indicates whether the mandate is an existing mandate.
    "Yes"|"No" existingMandateStatus?;
    # The date on which the mandate was created.
    string mandateCreationDate?;
    # The mandate ID.
    string mandateId?;
    # The reason of the mandate from the gateway side.
    string mandateReason?;
    # Indicates whether the mandate is received from the gateway
    "Yes"|"No" mandateReceivedStatus?;
    # The status of the mandate from the gateway side.
    string mandateStatus?;
    # The date on which the mandate was updated.
    string mandateUpdateDate?;
    # Reference for the consent agreement that you have established with the customer.  
    string mitConsentAgreementRef?;
    # Required if you set the `mitProfileAction` field. Specify how the consent agreement has been established with the customer. The allowed value is `External`. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `External` set to this field.
    "External" mitConsentAgreementSrc?;
    # Specifies how Zuora creates and activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
    # 
    # * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
    # 
    #   Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
    #   
    #   If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
    # 
    # 
    # * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
    # 
    # If you do not specify this field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Activate` set to this field.
    "Activate"|"Persist" mitProfileAction?;
    # The date on which the stored credential profile is agreed. The date format is `yyyy-mm-dd`.
    string mitProfileAgreedOn?;
    # Indicates the type of the stored credential profile. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Recurring` set to this field.
    string mitProfileType?;
    # Specifies the ID of the transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.
    @constraint:String {maxLength: 128}
    string mitTransactionId?;
};

# Container for discount Item fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type DiscountItemObjectNSFields record {
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
};

public type CreditMemoApplyDebitMemoRequestType record {
    # The credit memo amount to be applied to the debit memo.
    decimal amount;
    # The unique ID of the debit memo that the credit memo is applied to.
    string debitMemoId;
    # Container for items. The maximum number of items is 1,000.
    # 
    # If `creditMemoItemId` is the source, then it should be accompanied by a target `debitMemoItemId`.
    # 
    # If `creditTaxItemId` is the source, then it should be accompanied by a target `taxItemId`.
    CreditMemoApplyDebitMemoItemRequestType[] items?;
};

public type POSTAccountingCodeResponseType record {
    # ID of the newly created accounting code.
    string id?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type GetHostedPagesType record {
    # Container for the hosted page information.
    GetHostedPageType[] hostedpages?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type POSTOrderPreviewRequestType_subscriptions record {
    # Container for custom fields of a Subscription object.
    SubscriptionObjectCustomFields customFields?;
    # The actions to be applied to the subscription. Order actions will be stored with the sequence when it was provided in the request.
    PreviewOrderOrderAction[] orderActions?;
    # The fields populated for a quote when a quote is sent to Zuora Billing from Zuora Quote.
    QuoteObjectFields quote?;
    # Container of the ramp definitions. It is used to create, update, or remove the ramp definition for the new subscription.
    RampRequest ramp?;
    # Leave this field empty to represent new subscription creation, or specify a subscription number to update an existing subscription.
    string subscriptionNumber?;
};

public type PostInvoiceEmailRequestType record {
    # The valid email addresses you want to email an invoice to. Use commas to separate email addresses.
    # **Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`.
    string emailAddresses?;
    # Whether to send an invoice to the additional email addresses of the invoice account. 
    # You can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information.
    true|false includeAdditionalEmailAddresses?;
    # Indicates whether to email an invoice based on the email template setting. 
    # If you set this field to `true`, the invoice is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.
    true|false useEmailTemplateSetting?;
};

public type GETJournalEntryItemType record {
    # Name of the accounting code.
    string accountingCodeName?;
    # Accounting code type.
    # 
    # Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature. 
    "AccountsReceivable"|"On-Account Receivable"|"Cash"|"OtherAssets"|"CustomerCashOnAccount"|"DeferredRevenue"|"SalesTaxPayable"|"OtherLiabilities"|"SalesRevenue"|"SalesDiscounts"|"OtherRevenue"|"OtherEquity"|"BadDebt"|"OtherExpenses" accountingCodeType?;
    # Journal entry item amount in transaction currency.
    string amount?;
    # The account number in the general ledger (GL) that corresponds to the accounting code.
    string glAccountName?;
    # The account name in the general ledger (GL) that corresponds to the accounting code.
    string glAccountNumber?;
    # Journal entry item amount in home currency.
    string homeCurrencyAmount?;
    # Type of journal entry item. 
    "Credit"|"Debit" 'type?;
    *JournalEntryItemObjectCustomFields;
};

public type SettingItemHttpOperation record {
    # One of the HTTP methods supported by the setting endpoint, for example, GET,PUT,POST or DELETE.
    "GET"|"HEAD"|"POST"|"PUT"|"PATCH"|"DELETE"|"OPTIONS"|"TRACE" method?;
    # An array of paramters required by this operation.
    SettingItemHttpRequestParameter[] parameters?;
    # JSON Schema for the request body of this operation.
    record {} requestType?;
    # JSON Schema for the response body of this operation.
    record {} responseType?;
    # The endpoint url of the operation method. For example, `/settings/billing-rules`.
    string url?;
};

public type Inline_response_200_12 record {
    *CommonResponse;
    DataBackfillJob job?;
};

public type Inline_response_200_13 record {
    *CommonResponse;
    DataBackfillJob[] jobs?;
};

public type ListAllSettingsResponse record {
    SettingItemWithOperationsInformation[] settings?;
};

public type Inline_response_200_10 record {
    *CommonResponse;
    GETBookingDateJobResponse job?;
};

public type TransferPaymentType record {
    # The ID of the customer account that the payment is transferred to.
    # Unassign a payment by setting this field to an empty string. This will automatically transfer the payment to a null account.
    string accountId?;
};

public type Inline_response_200_11 record {
    *CommonResponse;
    # String of 32 characters that identifies the data backfill job. The id is generated before the job is processed. You can use the id to retrieve the data backfill job result.
    string jobId?;
};

# File IDs of the reports available for the accounting period. You can retrieve the reports by specifying the file ID in a [Get Files](https://developer.zuora.com/api-references/api/operation/GET_Files) REST API call.
public type GETAccountingPeriodWithoutSuccessType_fileIds record {
    # File ID of the Accounts Receivable Aging Account Detail report.
    string accountsReceivableAccountAgingDetailExportFileId?;
    # File ID of the Accounts Receivable Aging Invoice Detail report.
    string accountsReceivableInvoiceAgingDetailExportFileId?;
    # File ID of the Accounts Receivable Detail report.
    string arRollForwardDetailExportFileId?;
    # File ID of the Realized Gain and Loss Detail report.
    # 
    # Returned only if you have Foreign Currency Conversion enabled.
    string fxRealizedGainAndLossDetailExportFileId?;
    # File ID of the Unrealized Gain and Loss Detail report.
    # 
    # Returned only if you have Foreign Currency Conversion enabled
    string fxUnrealizedGainAndLossDetailExportFileId?;
    # File ID of the Revenue Detail report in CSV format.
    string revenueDetailCsvFileId?;
    # File ID of the Revenue Detail report in XLSX format.
    string revenueDetailExcelFileId?;
    # File ID of a report containing all unprocessed charges for the accounting period.
    string unprocessedChargesFileId?;
};

public type GETCMTaxItemType record {
    # The applied amount of the taxation item.
    decimal appliedAmount?;
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # Container for the finance information related to the taxation item.
    GETCMTaxItemTypeNew_financeInformation financeInformation?;
    # The ID of the taxation item.
    string id?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The name of the taxation item.
    string name?;
    # The amount of the refund on the taxation item.
    decimal refundAmount?;
    # The ID of the source taxation item.
    string sourceTaxItemId?;
    # The amount of taxation.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific credit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the credit memo, in `yyyy-mm-dd` format.
    string taxDate?;
    # The tax rate applied to the credit memo.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate.
    "Percentage"|"FlatFee" taxRateType?;
    # The unapplied amount of the taxation item.
    decimal unappliedAmount?;
    *CreditTaxationItemObjectCustomFields;
};

public type GETDMTaxItemType record {
    # The applied amount of the taxation item.
    decimal appliedAmount?;
    # The amount of credit memos applied to the debit memo. 
    decimal creditAmount?;
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # Container for the finance information related to the taxation item.
    GETDMTaxItemTypeNew_financeInformation financeInformation?;
    # The ID of the taxation item.
    string id?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The name of the taxation item.
    string name?;
    # The amount of payments applied to the debit memo. 
    decimal paymentAmount?;
    # The amount of the refund on the taxation item.
    decimal refundAmount?;
    # The ID of the source taxation item.
    string sourceTaxItemId?;
    # The amount of taxation.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific debit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the debit memo, in `yyyy-mm-dd` format.
    string taxDate?;
    # The tax rate applied to the debit memo.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate.
    "Percentage"|"FlatFee" taxRateType?;
    # The unapplied amount of the taxation item.
    decimal unappliedAmount?;
    *DebitTaxationItemObjectCustomFields;
};

# Container for the finance information related to the taxation item.
public type GETTaxationItemTypewithSuccess_financeInformation record {
    # The accounting code for accounts receivable.
    string accountsReceivableAccountingCode?;
    # The type of the accounting code for accounts receivable.
    string accountsReceivableAccountingCodeType?;
    # The accounting code for the sales taxes payable.
    string salesTaxPayableAccountingCode?;
    # The type of the accounting code for the sales taxes payable.
    string salesTaxPayableAccountingCodeType?;
};

public type PostFulfillmentsResponseType_fulfillments record {
    PostFulfillmentsResponseType_fulfillmentItems[] fulfillmentItems?;
    # The sytem generated number for the Fulfillment.
    string fulfillmentNumber?;
    # The sytem generated Id.
    string id?;
};

public type POSTAccountingPeriodType record {
    # The end date of the accounting period in yyyy-mm-dd format, for example, "2016-02-19".
    string endDate;
    # Fiscal year of the accounting period in yyyy format, for example, "2016".
    string fiscalYear;
    # 
    int fiscal_quarter?;
    # Name of the accounting period.
    # 
    # Accounting period name must be unique. Maximum of 100 characters.
    string name;
    # Notes about the accounting period.
    # 
    # Maximum of 255 characters.
    string notes?;
    # The organization that the accounting period belongs to. 
    # 
    # For each item in the array, either the `organizationId` or the `organizationName` field is required.
    # 
    # This field is only required when you have already turned on Multi-Org feature.
    GETProductType_organizationLabels[] organizationLabels?;
    # The start date of the accounting period in yyyy-mm-dd format, for example, "2016-02-19".
    string startDate;
    *AccountingPeriodObjectCustomFields;
};

public type GETARPaymentTypewithSuccess record {
    # The ID of the customer account that the payment is for.
    string accountId?;
    # The number of the customer account that the payment is for.
    string accountNumber?;
    # The total amount of the payment.
    decimal amount?;
    # The applied amount of the payment.
    decimal appliedAmount?;
    # The authorization transaction ID from the payment gateway.
    string authTransactionId?;
    # The first six or eight digits of the credit card or debit card used for the payment, when applicable.
    string bankIdentificationNumber?;
    # The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the payment.
    string comment?;
    # The ID of the Zuora user who created the payment part.
    string createdById?;
    # The date and time when the payment was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The amount that the payment transfers to the credit balance. The value is not `0` only for those payments that come from legacy payment operations performed without the Invoice Settlement feature.
    decimal creditBalanceAmount?;
    # When Standalone Payment is not enabled, the `currency` of the payment must be the same as the payment currency defined in the customer account settings through Zuora UI.
    # 
    # When Standalone Payment is enabled and `standalone` is `true`, the `currency` of the standalone payment can be different from the payment currency defined in the customer account settings. The amount will not be summed up to the account balance or key metrics regardless of currency.
    string currency?;
    # The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.
    string effectiveDate?;
    # Container for the finance information related to the payment.
    GETARPaymentTypewithSuccess_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the payment.
    string gatewayId?;
    # A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created.
    string gatewayOrderId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the payment. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the payment. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the payment in the gateway; use for reconciliation. 
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    # The unique ID of the payment. For example, 4028905f5a87c0ff015a87eb6b75007f.
    string id?;
    # The date and time when a payment was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # The unique identification number of the payment. For example, P-00000001.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The natural key for the payment gateway.
    string paymentGatewayNumber?;
    # The unique ID of the payment method that the customer used to make the payment.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
    string paymentMethodSnapshotId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # The unique ID or the number of the payment schedule that is linked to the payment. See [Link payments to payment schedules](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Payment_Schedules/Link_payments_with_payment_schedules) for more information.
    string paymentScheduleKey?;
    # The payout ID of the payment from the gateway side.
    string payoutId?;
    # Indicates whether the payment is used as a reserved payment. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.
    boolean prepayment?;
    # The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
    string referenceId?;
    # The amount of the payment that is refunded.
    decimal refundAmount?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondPaymentReferenceId?;
    # The date and time when the payment was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptorPhone?;
    # This field is only available if the support for standalone payment is enabled.
    # 
    # The value `true` indicates this is a standalone payment that is created and processed in Zuora through Zuora gateway integration but will be settled outside of Zuora. No settlement data will be created. The standalone payment cannot be applied, unapplied, or transferred.
    # 
    # The value `false` indicates this is an ordinary payment that is created, processed, and settled in Zuora.
    boolean standalone?;
    # The status of the payment.
    "Draft"|"Processing"|"Processed"|"Error"|"Canceled"|"Posted" status?;
    # The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # The type of the payment.
    "External"|"Electronic" 'type?;
    # The unapplied amount of the payment.
    decimal unappliedAmount?;
    # The ID of the Zuora user who last updated the payment.
    string updatedById?;
    # The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *PaymentObjectNSFields;
    *PaymentObjectCustomFields;
};

public type GenerateBillingDocumentResponseType record {
    # Container for generated credit memos.
    # 
    # **Note:** This container is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    CreditMemoResponseType[] creditMemos?;
    # Container for generated invoics.
    InvoiceResponseType[] invoices?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type POSTChargeDefinitionPricingTier_inner record {
    # The code corresponding to the currency for the tier's price.
    string currency?;
    # The end number of a range of units for the tier. This field is required for charges based on the Tiered Pricing or Tiered with Overage Pricing charge model.
    decimal endingUnit?;
    # The price of the tier if the price format is flat fee, or the price of each unit in the tier if the price format is per unit.
    decimal price?;
    # The price format of the tier.
    "Flat Fee"|"Per Unit" priceFormat?;
    # The starting number of a range of units for the tier. This field is required for charges based on the Tiered Pricing or Tiered with Overage Pricing charge model.
    decimal startingUnit?;
};

# Information about a new account that will own the subscription. Only available if you have enabled the Owner Transfer feature.
# 
# **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
# 
# If you do not set this field or the `subscriptionOwnerAccountNumber` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `subscriptionOwnerAccountNumber` field.
public type PreviewOrderCreateSubscription_newSubscriptionOwnerAccount record {
    # Account number. For example, A00000001.
    @constraint:String {maxLength: 70}
    string accountNumber?;
    # List of additional email addresses to receive emailed invoices. Values should be a comma-separated list of email addresses.
    @constraint:String {maxLength: 1200}
    string additionalEmailAddresses?;
    # Indicates if associated invoices can be edited.
    # Values are: 
    # 
    # * `true`
    # * `false` (default)
    boolean allowInvoiceEdit?;
    # Specifies whether future payments are automatically billed when they are due.
    boolean autoPay?;
    # Name of the billing batch that the account belongs to. For example, Batch1.
    string batch?;
    # Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as "AutoSet".
    @constraint:Int {minValue: 0, maxValue: 31}
    int billCycleDay;
    BillToContactPostOrder billToContact;
    # Internal identifier of the communication profile that Zuora uses when sending notifications to the account's contacts.
    string communicationProfileId?;
    # Default payment method associated with an account. Only credit card payment methods are supported.
    CreditCard creditCard?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.
    string creditMemoTemplateId?;
    # External identifier of the account in a CRM system.
    @constraint:String {maxLength: 100}
    string crmId?;
    # ISO 3-letter currency code (uppercase). For example, USD.
    string currency;
    # Container for custom fields of an Account object.
    AccountObjectCustomFields customFields?;
    # Name of the account's customer service representative, if applicable.
    @constraint:String {maxLength: 50}
    string customerServiceRepName?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.
    string debitMemoTemplateId?;
    # The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.
    # 
    # If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field,
    # but not both.
    # 
    # For a specified credit card payment method, it is recommended that [the support for stored credential transactions](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Stored_credential_transactions) for this payment method is already enabled.
    string hpmCreditCardPaymentMethodId?;
    # Specifies whether to turn on the invoice delivery method 'Email' for the new account. 
    # Values are: 
    # 
    # * `true` (default). Turn on the invoice delivery method 'Email' for the new account.
    # * `false`. Turn off the invoice delivery method 'Email' for the new account.         
    boolean invoiceDeliveryPrefsEmail?;
    # Specifies whether to turn on the invoice delivery method 'Print' for the new account.
    # Values are: 
    # 
    # * `true`. Turn on the invoice delivery method 'Print' for the new account.
    # * `false` (default). Turn off the invoice delivery method 'Print' for the new account.
    boolean invoiceDeliveryPrefsPrint?;
    # Internal identifier of the invoice template that Zuora uses when generating invoices for the account.
    string invoiceTemplateId?;
    # Account name.
    @constraint:String {maxLength: 255}
    string name;
    # Notes about the account. These notes are only visible to Zuora users.
    @constraint:String {maxLength: 65535}
    string notes?;
    # Identifier of the parent customer account for this Account object. Use this field if you have <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy" target="_blank">Customer Hierarchy</a> enabled.
    string parentId?;
    # The payment gateway that Zuora uses when processing electronic payments and refunds for the account. If you do not specify this field or if the value of this field is null, Zuora uses your default payment gateway.
    @constraint:String {maxLength: 40}
    string paymentGateway?;
    # Payment method information associated with an account.
    POSTPaymentMethodRequest paymentMethod?;
    # Name of the payment term associated with the account. For example, "Net 30". The payment term determines the due dates of invoices.
    string paymentTerm?;
    # The number of the purchase order associated with this account. Purchase order information generally comes from customers.
    @constraint:String {maxLength: 100}
    string purchaseOrderNumber?;
    # The name of the sales representative associated with this account, if applicable.
    @constraint:String {maxLength: 50}
    string salesRep?;
    SoldToContactPostOrder soldToContact?;
    # Information about the tax exempt status of a customer account.
    TaxInfo taxInfo?;
};

# 
public type QueryUsagesResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedUsage[] data?;
|};

public type BillRunFilterRequestType record {
    # The target account of the bill run. 
    # 
    # If multiple subscriptions are specified, the account ID must be the same.
    string accountId;
    # To create bill runs at account level or subscription level.
    "Account"|"Subscription" filterType;
    # The target subscripiton ID of the account. 
    # 
    # If you set the `filterType` field to `Subscription`, you must specify the `subscriptionId` field.
    string subscriptionId?;
};

public type FulfillmentGet record {
    # The sytem generated number for the Fulfillment.
    string fulfillmentNumber?;
    # The sytem generated Id.
    string id?;
    *FulfillmentCommon;
};

public type GETAdjustmentByIdResponseType record {
    # The system generated delivery adjustment ID.
    string adjustmentId?;
    # The system generated delivery adjustment Number.
    string adjustmentNumber?;
    # The amount of the delivery adjustment.
    string amount?;
    # The billing date is same as the delivery date of the delivery adjustment, in `yyyy-mm-dd` format.
    string billingDate?;
    # The charge number in the subscription for which the delivery adjustment is created.
    string chargeNumber?;
    # The Credit Memo generated for the delivery adjustment.
    string creditMemoNumber?;
    # The Debit Memo generated to write off the Credit Memo for the delivery adjustment.    
    # 
    # **Note**: This field is only visible when the delivery adjustment is in `Cancelled` status.
    string debitMemoNumber?;
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability. 
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string deferredRevenueAccountingCode?;
    # The delivery adjustment date, in `yyyy-mm-dd` format.
    string deliveryDate?;
    # The delivery adjustment day of the week.
    string deliveryDay?;
    # The reason for the delivery adjustment.
    string reason?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string recognizedRevenueAccountingCode?;
    # The name of the revenue recognition rule governing the revenue schedule.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string revenueRecognitionRuleName?;
    # The status of the delivery adjustment will be `Billed` or `Cancelled`.               
    string status?;
    # The subscription number for which the delivery adjustment is created.
    string subscriptionNumber?;
};

public type DocumentList record {
    # The type of billing document.
    "Invoice"|"CreditMemo"|"DebitMemo" docType?;
    # The collection of billing document IDs.
    string[] objectIds?;
};

# Specifies when a charge becomes inactive.
public type EndConditions record {
    # Condition for the charge to become inactive.
    # 
    # - If the value of this field is `Fixed_Period`, the charge is active for a predefined duration based on the value of the `upToPeriodsType` and `upToPeriods` fields.
    # - If the value of this field is `Specific_End_Date`, use the `specificEndDate` field to specify the date when the charge becomes inactive.
    "Subscription_End"|"Fixed_Period"|"Specific_End_Date" endDateCondition?;
    # End date policy of the discount charge to become active when the **Apply to billing period partially** checkbox is selected from the product catalog UI or the `applyToBillingPeriodPartially` field is set as true from the "CRUD: Create a product rate plan charge" operation. 
    # 
    # - If the value of this field is `FixedPeriod`, the charge is active for a predefined duration based on the value of the `upToPeriodsType` and `upToPeriods` fields.
    # - If the value of this field is `SpecificEndDate`, use the `specificEndDate` field to specify the date when the charge becomes inactive.
    # 
    # **Notes**: 
    # - You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    # - You can use either `endDateCondition` or `endDatePolicy` to define when a discount charge ends, but not both at the same time.
    "AlignToApplyToCharge"|"SpecificEndDate"|"FixedPeriod" endDatePolicy?;
    # Date in YYYY-MM-DD format. Only applicable if the value of the `endDateCondition` field is `Specific_End_Date`.
    string specificEndDate?;
    # Duration of the charge in billing periods, days, weeks, months, or years, depending on the value of the `upToPeriodsType` field. Only applicable if the value of the `endDateCondition` field is `Fixed_Period`.
    int upToPeriods?;
    # Unit of time that the charge duration is measured in. Only applicable if the value of the `endDateCondition` field is `Fixed_Period`.
    "Billing_Periods"|"Days"|"Weeks"|"Months"|"Years" upToPeriodsType?;
};

public type POSTorPUTCatalogGroupAddProductRatePlan record {
    # The grade that is assigned for the product rate plan. The value of this field must be a positive integer. The greater the value, the higher the grade.
    # 
    # A product rate plan to be added to a Grading catalog group must have one grade. You can specify a grade for a product rate plan in this request or update the product rate plan individually. 
    decimal grade?;
    # The unique ID of the product rate plan.
    string id?;
};

public type RecurringFlatFeePricingUpdate record {
    *PriceChangeParams;
    decimal listPrice?;
    # The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.
    decimal originalListPrice?;
};

public type POSTBulkDebitMemosRequestType BulkCreateDebitMemosFromInvoiceRequest|BulkCreateDebitMemosFromChargeRequest;

public type ExpandedPaymentMethodSnapshot record {|
    # The unique identifier of the payment method snapshot.
    string id?;
    # The unique identifier of the user who created the payment method snapshot.
    string createdById?;
    # The time that the payment method snapshot gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the payment method snapshot.
    string updatedById?;
    # The time that the payment method snapshot gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # The unique identifier of the account that the payment method snapshot is
    # associated with.
    string accountId?;
    # The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.
    string achAbaCode?;
    # The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.
    string achAccountName?;
    # The masked bank account number associated with the ACH payment method. This field is only required if the `type` field is set to `ACH`.
    string achAccountNumberMask?;
    # The type of bank account associated with the ACH payment method. This field is only required if the `type` field is set to `ACH`.
    # 
    # When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify any of the allowed values as a dummy value, `Checking` preferably.
    "BusinessChecking"|"Checking"|"Saving" achAccountType?;
    # First address line for the ACH payment method.
    @constraint:String {maxLength: 255}
    string achAddress1?;
    # Second address line for the ACH payment method.
    @constraint:String {maxLength: 255}
    string achAddress2?;
    # The name of the bank where the ACH payment account is held.
    # 
    # When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.
    @constraint:String {maxLength: 70}
    string achBankName?;
    # City for the ACH payment method.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    @constraint:String {maxLength: 40}
    string achCity?;
    # Country for the ACH payment method. Must be a valid country name or abbreviation.
    # 
    # See <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a> for the list of supported country names and abbreviations.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    string achCountry?;
    # Zip code or postal code for the ACH payment method.
    @constraint:String {maxLength: 20}
    string achPostalCode?;
    # State for the ACH payment method. Must be a valid state name or 2-character abbreviation.
    # 
    # See [United States Standard State Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes) and [Canadian Standard Province Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/C_Canadian_Province_Names_and_2-Digit_Codes) for the list of supported names and abbreviations.
    string achState?;
    # Indicates whether the payment method is active.
    boolean active?;
    # Indicates whether the payment method is a system-generated payment method.
    boolean isSystem?;
    # The branch code of the bank used for Direct Debit.  
    string bankBranchCode?;
    # The check digit in the international bank account number, which confirms the validity of the account. Applicable to direct debit payment methods.
    string bankCheckDigit?;
    # The city of the direct debit bank.
    string bankCity?;
    # The sort code or number that identifies the bank. This is also known as the sort code. 
    string bankCode?;
    # The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.
    string bankIdentificationNumber?;
    # The name of the direct debit bank.
    string bankName?;
    # The zip code or postal code of the direct debit bank.
    string bankPostalCode?;
    # The name of the street of the direct debit bank.
    string bankStreetName?;
    # The number of the direct debit bank.
    string bankStreetNumber?;
    # The name on the direct debit bank account.
    string bankTransferAccountName?;
    # This is a masked displayable version of the bank account number, used for
    # security purposes. For example: `XXXXXXXXX54321`.
    string bankTransferAccountNumberMask?;
    # The type of the customer's bank account. Applicable to direct debit
    # payment methods.
    string bankTransferAccountType?;
    # Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user.
    # 
    # Possible Values: 
    # 
    # 
    # * `AutomatischIncasso` (NL)
    # 
    # * `LastschriftDE` (Germany)
    # 
    # * `LastschriftAT` (Austria)
    # 
    # * `DemandeDePrelevement` (FR)
    # 
    # * `DirectDebitUK` (UK)
    # 
    # * `Domicil` (Belgium)
    # 
    # * `LastschriftCH` (CH)
    # 
    # * `RID` (Italy)
    # 
    # * `OrdenDeDomiciliacion` (Spain)
    # * `Autogiro` (Sweden)
    # * `Betalingsservice` (Denmark)
    "AutomatischIncasso"|"LastschriftDE"|"LastschriftAT"|"DemandeDePrelevement"|"DirectDebitUK"|"Domicil"|"LastschriftCH"|"RID"|"OrdenDeDomiciliacion"|"Autogiro"|"Betalingsservice" bankTransferType?;
    # The business identification code for Swiss direct payment methods that use
    # the Global Collect payment gateway. Only applicable to direct debit
    # payment methods in Switzerland with Global Collect.
    string businessIdentificationCode?;
    # The city of the customer's address. Applicable to debit payment methods.
    string city?;
    # The two-letter country code of the customer's address. Applicable to direct debit payment methods.
    string country?;
    # The first line of the card holder's address, which is often a street
    # address or business name. Applicable to credit card and direct debit
    # payment methods.
    string creditCardAddress1?;
    # The second line of the card holder's address. Applicable to credit card
    # and direct debit payment methods.
    string creditCardAddress2?;
    # The city of the card holder's address. Applicable to credit card and
    # direct debit payment methods.
    string creditCardCity?;
    # The country where the credit card holder stays.
    # 
    # When creating a payment method through a translated UI or Payment Page, a country name in a translated language might be selected. 
    # Regardless of the country texts selected when creating the payment method, only the supported country name returns in this field. 
    # For a complete list of supported country names, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>. 
    # Internationalization is not supported for the API field value.
    string creditCardCountry?;
    # One or two digits expiration month.
    @constraint:Int {minValue: 1, maxValue: 12}
    int:Signed32 creditCardExpirationMonth?;
    # Four-digit expiration year.
    int:Signed32 creditCardExpirationYear?;
    # The full name of the credit card holder.
    string creditCardHolderName?;
    # The masked credit card number, such as `*********1112`.
    string creditCardMaskNumber?;
    # The postal code for the address of the credit card holder.
    string creditCardPostalCode?;
    # The state where the credit card holder stays.
    string creditCardState?;
    # The type of the credit card or debit card.
    # 
    # Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # **Note:** This field is only returned for the Credit Card and Debit Card payment types.
    string creditCardType?;
    # The session ID of the user when the `PaymentMethod` was created or updated.
    string deviceSessionId?;
    # Indicates whether the mandate is an existing mandate.
    "Yes"|"No" existingMandate?;
    # The email address of the payment method holder.
    string email?;
    # The customer's first name. Only applicable to direct debit payment methods.
    string firstName?;
    # The International Bank Account Number used to create the SEPA payment method. The value is masked.
    string iBAN?;
    # The IP address of the user when the payment method was created or updated.
    string iPAddress?;
    # The identity number of the account holder or the cardholder.
    string identityNumber?;
    # The name of the company.
    string companyName?;
    # Whether the customer account is a company.
    boolean isCompany?;
    # The date of the last failed attempt to collect payment with this payment
    # method.
    string lastFailedSaleTransactionDate?;
    # The customer's last name. Only applicable to direct debit payment methods.
    string lastName?;
    # The date and time of the most recent transaction.
    string lastTransactionDateTime?;
    # The status of the most recent transaction.
    string lastTransactionStatus?;
    # The date on which the mandate was created.
    string mandateCreationDate?;
    # The mandate ID.
    string mandateId?;
    # The reason of the mandate from the gateway side.
    string mandateReason?;
    # Indicates whether the mandate is received from the gateway.
    "Yes"|"No" mandateReceived?;
    # The status of the mandate from the gateway side.
    string mandateStatus?;
    # The date on which the mandate was updated.
    string mandateUpdateDate?;
    # The number of allowable consecutive failures Zuora attempts with the payment method before stopping.
    int:Signed32 maxConsecutivePaymentFailures?;
    # The name of the payment method.
    string name?;
    # The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. 
    int:Signed32 numConsecutiveFailures?;
    # The status of the payment method.
    "Active"|"Closed"|"Scrubbed" paymentMethodStatus?;
    # The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.
    int:Signed32 paymentRetryWindow?;
    # ID of a PayPal billing agreement. 
    string paypalBaid?;
    # Email address associated with the PayPal payment method. 
    string paypalEmail?;
    # The PayPal preapproval key.
    string paypalPreapprovalKey?;
    # The type of the PayPal payment method.
    string paypalType?;
    # The phone number that the account holder registered with the bank. This
    # field is used for credit card validation when passing to a gateway.
    string phone?;
    # The zip code of the customer's address. Only applicable to direct debit
    # payment methods.
    string postalCode?;
    # A gateway unique identifier that replaces sensitive payment method data.
    # 
    # **Note:** This field is only returned for the Credit Card Reference Transaction payment type.
    string secondTokenId?;
    # The state of the customer's address. Only applicable to direct debit
    # payment methods.
    string state?;
    # The street name of the customer's address. Only applicable to direct debit
    # payment methods.
    string streetName?;
    # The street number of the customer's address. Only applicable to direct
    # debit payment methods.
    string streetNumber?;
    # A gateway unique identifier that replaces sensitive payment method data or
    # represents a gateway's unique customer profile. Applicable to CC Reference
    # Transaction payment methods.
    string tokenId?;
    # The number of error payments that used this payment method.
    int:Signed32 totalNumberOfErrorPayments?;
    # The number of successful payments that used this payment method.
    int:Signed32 totalNumberOfProcessedPayments?;
    # The type of the payment method. For example, `CreditCard`.
    string 'type?;
    # Indicates whether this payment method uses the default retry rules configured in the Zuora Payments settings.
    boolean useDefaultRetryRule?;
    # The identification reference of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Payment Method Data Source Exports and Data Query.
    string methodReferenceId?;
    # The identification reference of the user or customer account.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string userReferenceId?;
    # The identification reference indicating the subtype of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string subType?;
    # Other method-specific data of the payment method.
    string methodSpecificData?;
|};

public type Inline_response_202 record {
    # The ID of an asynchronous job that will be returned for tracking the status and result of the job.
    string jobId?;
};

public type Inline_response_200 record {
    # Error messages returned if the job failed.
    string errors?;
    # **Note:** The schema of the `result` nested field is the same as the response body schema of either the ["Create an order"](https://developer.zuora.com/api-references/api/operation/POST_Order) or the ["Preview an order"](https://developer.zuora.com/api-references/api/operation/POST_PreviewOrder) operation, depending on the purpose of the job.
    # 
    # The following schema for the nested `result` field is defined as the response body schema of "Create an order". See [Preview an Order](https://developer.zuora.com/api-references/api/operation/POST_PreviewOrder) for the response body schema of "Preview an order". 
    JobResult result?;
    # Type of job status.
    "Processing"|"Failed"|"Completed" status?;
    # Indicates whether the operation call succeeded.
    boolean success?;
};

public type SettingValueResponse record {
    # Response body if the request is executed successfully.
    BodyInSettingValueReponse body?;
    # An array of error messages if errors occur when executing the request.
    string[] errorMessages?;
    # User readable response status, for example, 502 BAD_GATEWAY.
    string status?;
};

public type BatchInvoiceType record {
    # Whether invoices are automatically picked up for processing in the corresponding payment run.
    # 
    # By default, invoices are automatically picked up for processing in the corresponding payment run.
    boolean autoPay?;
    # Additional information related to the invoice that a Zuora user added to the invoice.
    @constraint:String {maxLength: 255}
    string comments?;
    # The date by which the payment for this invoice is due.
    string dueDate?;
    # The ID of the invoice to be updated.
    string id?;
    # The new invoice date of the invoice. The new invoice date cannot fall in a closed accounting period.
    # 
    # You can only specify `invoiceDate` or `dueDate` in one request. Otherwise, an error occurs.
    string invoiceDate?;
    # Container for invoice items. The maximum number of items is 1,000.
    PutInvoiceItemType[] invoiceItems?;
    # Whether the invoice was transferred to an external accounting system.
    "Processing"|"Yes"|"Error"|"Ignore" transferredToAccounting?;
    *InvoiceObjectNSFields;
    *InvoiceObjectCustomFields;
};

public type PaymentDebitMemoApplicationApplyRequestType record {
    # The amount that is applied from the payment to the debit memo.
    decimal amount;
    # The unique ID of the debit memo that the payment is applied to.
    string debitMemoId?;
    # The number of the debit memo that the payment is applied to.
    string debitMemoNumber?;
    # Container for debit memo items. The maximum number of items is 1,000.
    # 
    # **Note:** This field is only available if you have the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/C_Invoice_Item_Settlement) feature enabled. Invoice Item Settlement must be used together with other Invoice Settlement features (Unapplied Payments, and Credit and Debit memos).  If you wish to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    PaymentDebitMemoApplicationItemApplyRequestType[] items?;
};

public type POSTChargeDefinitionBulkResponse record {
    # The list of created product charge definitions.
    POSTChargeDefinitionResponse[] productChargeDefinitions?;
};

public type PutInvoiceResponseType record {
    # The ID of the customer account associated with the invoice.
    string accountId?;
    # The total amount of the invoice.
    decimal amount?;
    # Whether invoices are automatically picked up for processing in the corresponding payment run. 
    boolean autoPay?;
    # The balance of the invoice.
    decimal balance?;
    # The ID of the Zuora user who cancelled the invoice.
    string cancelledById?;
    # The date and time when the invoice was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the invoice. 
    string comment?;
    # The ID of the Zuora user who created the invoice.
    string createdById?;
    # The date and time when the invoice was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # **Note:** This filed is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.
    # The currency amount of the adjustment applied to the customer's credit balance.
    decimal creditBalanceAdjustmentAmount?;
    # A currency defined in the web-based UI administrative settings.
    string currency?;
    # The discount of the invoice.
    decimal discount?;
    # The date by which the payment for this invoice is due. 
    string dueDate?;
    # The unique ID of the invoice.
    string id?;
    # The date on which to generate the invoice.
    string invoiceDate?;
    # The unique identification number of the invoice.
    string number?;
    # The ID of the Zuora user who posted the invoice.
    string postedById?;
    # The date and time when the invoice was posted, in `yyyy-mm-dd hh:mm:ss` format. 
    string postedOn?;
    # The status of the invoice.
    "Draft"|"Posted"|"Canceled"|"Error" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The target date for the invoice, in `yyyy-mm-dd` format. For example, 2017-07-20. 
    string targetDate?;
    # The amount of taxation.
    decimal taxAmount?;
    # The calculated tax amount excluded due to the exemption.
    decimal totalTaxExemptAmount?;
    # Whether the invoice was transferred to an external accounting system.
    "Processing"|"Yes"|"Error"|"Ignore" transferredToAccounting?;
    # The ID of the Zuora user who last updated the invoice.
    string updatedById?;
    # The date and time when the invoice was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *InvoiceObjectNSFields;
    *InvoiceObjectCustomFields;
};

public type SettingsBatchResponse record {
    SettingValueResponseWrapper[] responses?;
};

public type PreviewExistingSubscriptionCreditMemoItemResult record {
    # Service start date as yyyy-mm-dd. If the charge is a one-time fee, this is the date of that charge.
    string serviceStartDate?;
    # End date of the service period for this item, i.e., the last day of the period, as yyyy-mm-dd.
    string serviceEndDate?;
    # Credit memo amount minus tax.
    decimal amountWithoutTax?;
    # The tax amount of the credit memo item.
    decimal taxAmount?;
    # Description of the charge.
    string chargeDescription?;
    # Name of the charge.
    string chargeName?;
    # Available when the `chargeNumber` field was specified in the request or when the order is amending an existing subscription.
    string chargeNumber?;
    # Name of the product.
    string productName?;
    # The ID of the product rate plan charge.
    string productRatePlanChargeId?;
    # The processing type of the credit memo item.
    "Charge"|"Discount"|"Tax" processingType?;
    # The unit price of the charge.
    decimal unitPrice?;
    # The quantity of the charge.
    decimal quantity?;
    # The unit of measure of the charge.
    string? unitOfMeasure?;
    # Container for discount details.
    PreviewExistingSubscriptionDiscountDetails[] discountDetails?;
};

public type GetDataQueryJobResponse record {
    # A data query job.
    DataQueryJob data?;
};

# Container for the terms and renewal settings of the subscription.
public type CreateSubscription_terms record {
    # Specifies whether the subscription automatically renews at the end of the each term. Only applicable if the type of the first term is `TERMED`.
    boolean autoRenew?;
    # Information about the first term of the subscription.
    CreateSubscription_terms_initialTerm initialTerm;
    # Specifies the type of the terms that follow the first term if the subscription is renewed. Only applicable if the type of the first term is `TERMED`.
    # 
    # * `RENEW_WITH_SPECIFIC_TERM` - Each renewal term has a predefined duration. The first entry in `renewalTerms` specifies the duration of the second term of the subscription, the second entry in `renewalTerms` specifies the duration of the third term of the subscription, and so on. The last entry in `renewalTerms` specifies the ultimate duration of each renewal term.
    # * `RENEW_TO_EVERGREEN` - The second term of the subscription does not have a predefined duration.
    "RENEW_WITH_SPECIFIC_TERM"|"RENEW_TO_EVERGREEN" renewalSetting?;
    # List of renewal terms of the subscription. Only applicable if the type of the first term is `TERMED` and the value of the `renewalSetting` field is `RENEW_WITH_SPECIFIC_TERM`.
    RenewalTerm[] renewalTerms;
};

# Charge associated with a rate plan.
public type CreateOrderChargeOverride record {
    # The accountReceivableAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a>, <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a>, and <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Get_started_with_Invoice_Settlement/AA_Overview_of_Invoice_Settlement" target="_blank">Invoice Settlement</a> features are enabled.
    string accountReceivableAccountingCode?;
    # The adjustmentLiabilityAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string adjustmentLiabilityAccountingCode?;
    # The adjustmentRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string adjustmentRevenueAccountingCode?;
    # Billing information about the charge.
    PreviewOrderChargeOverride_billing billing?;
    # The chargeModel of a standalone charge.
    # 
    # 
    # Supported charge models:
    # 
    # * `FlatFee`
    # 
    # * `PerUnit`
    # 
    # * `Volume`
    # 
    # * `Tiered`
    # 
    # * `DiscountFixedAmount`
    # 
    # * `DiscountPercentage`
    # 
    # **Note:** This field is available when the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders"
    # target="_blank">Standalone Orders</a> feature is enabled.
    string chargeModel?;
    # Charge number of the charge. For example, C-00000307.
    # 
    # If you do not set this field, Zuora will generate the charge number.
    @constraint:String {maxLength: 50}
    string chargeNumber?;
    # The chargeType of a standalone charge.
    # 
    # 
    # Supported charge types:
    # 
    # * `OneTime`
    # 
    # * `Recurring`
    # 
    # * `Usage`
    # 
    # **Note:** This field is available when the <a
    # href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders"
    # target="_blank">Standalone Orders</a> feature is enabled.
    string chargeType?;
    # The contractAssetAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractAssetAccountingCode?;
    # The contractLiabilityAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractLiabilityAccountingCode?;
    # The contractRecognizedRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string contractRecognizedRevenueAccountingCode?;
    # Container for custom fields of a Rate Plan Charge object.
    RatePlanChargeObjectCustomFields customFields?;
    # The deferredRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string deferredRevenueAccountingCode?;
    # Description of the charge.
    @constraint:String {maxLength: 500}
    string description?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal drawdownRate?;
    # Specifies when a charge becomes inactive.
    EndConditions endDate?;
    # The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # If both the following features in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing" target="_blank">Advanced Consumption Billing</a> are enabled in your tenant, you must ensure the `excludeItemBillingFromRevenueAccounting` field is set consistently for a prepayment charge and the corresponding drawdown charge. In addition, if the `excludeItemBookingFromRevenueAccounting` field in a Create Subscription or Add Product order action is set to `false`, you must also set the `excludeItemBillingFromRevenueAccounting` field in this order action to `false`.
    #   * Prepaid with Drawdown
    #   * Unbilled Usage
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting = false;
    # The flag to exclude rate plan charges from revenue accounting.
    # 
    # If both the following features in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing" target="_blank">Advanced Consumption Billing</a> are enabled in your tenant, you must ensure the `excludeItemBookingFromRevenueAccounting` field is set consistently for a prepayment charge and the corresponding drawdown charge.
    #   * Prepaid with Drawdown
    #   * Unbilled Usage
    # 
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue" target="_blank">Order to Revenue</a> or [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting = false;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The value is either "True" or "False". It determines whether the rollover fields are needed.
    boolean isRollover?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The name of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string name?;
    # The pobPolicy of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string pobPolicy?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal prepaidQuantity?;
    # Pricing information about the charge.
    PreviewOrderChargeOverride_pricing pricing?;
    # The productCategory of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productCategory?;
    # The productClass of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productClass?;
    # The productFamily of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productFamily?;
    # The productLine of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string productLine?;
    # Internal identifier of the product rate plan charge that the charge is based on.
    string productRatePlanChargeId;
    # Number of a product rate-plan charge for this subscription.
    string productRatePlanChargeNumber?;
    # The recognizedRevenueAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> and <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a> features are enabled.
    string recognizedRevenueAccountingCode?;
    # Revenue Recognition Code
    @constraint:String {maxLength: 70}
    string revRecCode?;
    # Specifies the revenue recognition trigger condition.
    # 
    #   * `Contract Effective Date` 
    #   * `Service Activation Date`
    #   * `Customer Acceptance Date`
    "Contract Effective Date"|"Service Activation Date"|"Customer Acceptance Date" revRecTriggerCondition?;
    # Specifies the revenue recognition rule, such as `Recognize upon invoicing` or `Recognize daily over time`.
    string revenueRecognitionRuleName?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    decimal rolloverPeriods?;
    # Specifies when a charge becomes active.
    CreateOrderTriggerParams startDate?;
    # The taxCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string taxCode?;
    # The taxMode of a standalone charge. 
    # 
    # Values:
    # * `TaxExclusive`
    # * `TaxInclusive`
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string taxMode?;
    # The unBilledReceivablesAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature and the <a href="https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration" target="_blank">Billing - Revenue Integration</a> or <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue" target="_blank">Order to Revenue</a> feature are enabled.
    string unBilledReceivablesAccountingCode?;
    # Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
    # The identifier of the original upselling charge associated with the current charge.
    # 
    # For a termed subscription, you can now use the "Create an order" API operation to perform an Add Product order action to make a product quantity upsell for per unit recurring charges. The benefit is that the charge added by this approach will be automatically combined with the original existing charge for which you want to upsell when the subscription is renewed. The approach is as follows:
    # * Use an Add Product order action to add a charge that is of the same charge type, charge model, and charge end date as the existing per unit recurring charge for which you want to make a quantity upsell.
    # 
    # * In the preceding charge to add, use the `upsellOriginChargeNumber` field to specify the existing rate plan charge for which you want to make the quantity upsell.
    # 
    # Note that a termed subscription with such upsell charges can not be changed to an evergreen subscription.   
    # 
    # **Note**: The Quantity Upsell feature is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global
    #   Support](https://support.zuora.com).  
    string upsellOriginChargeNumber?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
};

public type OrderActionRatePlanDiscountPricingUpdate record {
    # Specifies which type of charge the discount charge applies to.
    "ONETIME"|"RECURRING"|"USAGE"|"ONETIMERECURRING"|"ONETIMEUSAGE"|"RECURRINGUSAGE"|"ONETIMERECURRINGUSAGE" applyDiscountTo?;
    # Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account" discountLevel?;
    # The amount of the discount as a percentage. This field is only used for percentage discounts.
    decimal discountPercentage?;
    # Specifies how Zuora changes the price of the charge each time the subscription renews.
    "NoChange"|"UseLatestProductCatalogPricing" priceChangeOption?;
};

public type DebitMemoCollectResponseAppliedPayments record {
    # The applied amount of the payment to the debit memo.
    decimal appliedAmount?;
    # The unique ID of the payment.
    string id?;
    # The unique identification number of the payment.
    string number?;
    # The unapplied amount of the payment after applied to the debit memo.
    decimal unappliedAmount?;
};

# 
public type QueryValidityPeriodSummarysResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedValidityPeriodSummary[] data?;
|};

public type BillRunScheduleRequestType record {
    # The start date of the scheduled bill run.
    string repeatFrom;
    # The end date of of the scheduled bill run.
    string repeatTo?;
    # The repeat type of the bill run.
    "None"|"Daily"|"Weekly"|"Monthly" repeatType;
    # The scheduled run time (hour) of day.
    # 
    # **Values:** 0 - 23
    int runTime;
    # The repeat day in a week. 
    # 
    # This field is required if you set `repeatType` field to `Weekly`.
    ("Mon"|"Tue"|"Wed"|"Thu"|"Fri"|"Sat"|"Sun")[] weeklyOnDay?;
};

public type GETBulkpdfGenerationJobResponseType record {
    # Unique Id for the Triggered Job
    string jobId?;
    # Name of the Job provided during the POST request of the Job
    string jobName?;
    # Status of the job
    "Submitted"|"Executing"|"Completed"|"Error"|"Aborted"|"Cancelled" status?;
    # Status of the Current Step that the Job is undergoing
    "JobCreated"|"TasksCreated"|"GenerateMissPDF"|"PdfToZip"|"PostProcessing" stepStatus?;
    # Collection of S3 Pre-Signed URL(s) that can be downloaded
    string[] fileUrls?;
    # Job Created Time
    string createdOn?;
    # Id of the user who created the job
    string createdBy?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# To create tokenized BACS payment methods on Stripe v2, pass in the existing token information through the fields in this container.
# For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration" target="_blank">Overview of Stripe payment gateway integration</a>.
public type CreatePaymentMethodBacs_tokens record {
    # Required. 
    # 
    # The type of the payment gateway to generate the tokens. This field is case-sensitive.
    "Stripe" gatewayType?;
    # Pass in the second token of the payment method. For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration" target="_blank">Overview of Stripe payment gateway integration</a>.
    string secondTokenId?;
    # Pass in the third token of the payment method.
    string thirdTokenId?;
    # Required. 
    # 
    # Pass in the first token of the payment method. For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration" target="_blank">Overview of Stripe payment gateway integration</a>.
    string tokenId?;
};

public type GETPaymentMethodResponsePayPal record {
    # ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.
    string BAID?;
    # Email address associated with the PayPal payment method. 
    string email?;
    # The PayPal preapproval key.
    string preapprovalKey?;
};

public type ProxyActionqueryMoreResponse record {
    # Indicates whether the returned records contain all the query results.
    # * If the `queryLocator` field is returned, this field is set to `false`.
    # * If no `queryLocator` field is returned, this field is set to `true`.
    boolean done?;
    # A marker passed to QueryMore to get the next set of results.
    string queryLocator?;
    # A list of queried results.
    ZObject[] records?;
    # The number of the returned query results.
    int:Signed32 size?;
};

# 
public type QueryRefundApplicationItemsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedRefundApplicationItem[] data?;
|};

public type NestedInvoiceItemOnExpand record {|
    # The unique identifier of the invoice item.
    string id?;
    # The unique identifier of the user who created the invoice item.
    string createdById?;
    # The date and time when the invoice item was created.
    string createdDate?;
    # The unique identifier of the user who last updated the invoice item.
    string updatedById?;
    # The date and time when the invoice item was last updated.
    string updatedDate?;
    # The unique identifier of the invoice to which this invoice item belongs.
    string invoiceId?;
    # The ID of the invoice schedule associated with the rate plan charge on the subscription.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleId?;
    # The ID of the invoice schedule item that generates this invoice item.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleItemId?;
    # The ID of the rate plan charge associated with the invoice item.
    string ratePlanChargeId?;
    # The accounting code associated with the invoice item.
    string accountingCode?;
    # The unique ID of the invoice item that the discount charge is applied
    # to.
    string appliedToInvoiceItemId?;
    # The amount of the charge. 
    # 
    # This amount does not include taxes regardless if the charge's tax mode is inclusive or exclusive.
    string chargeAmount?;
    # The date when the invoice item is charged, in `yyyy-mm-dd hh:mm:ss` format.
    string chargeDate?;
    # The name of the charge.
    string chargeName?;
    # Number of the charge.
    string chargeNumber?;
    string commitmentChargeNumber?;
    string commitmentChargeSegmentNumber?;
    # The description of the invoice item.
    string description?;
    # The amount of the discount.
    decimal discountAmount?;
    # The flag to exclude the invoice item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The reference ID of the fulfillment associated with the invoice item.
    string fulfillmentId?;
    # The ID of the sold-to contact associated with the invoice item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactId?;
    # The ID of the sold-to contact snapshot associated with the invoice item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactSnapshotId?;
    # The kind of the charge for the invoice item. 
    "Charge"|"Discount"|"Prepayment"|"Tax"|"Rounding" processingType?;
    # The quantity of this item, in the configured unit of measure for the
    # charge.
    decimal quantity?;
    string revRecStartDate?;
    # The end date of the service period for this item, i.e., the last day
    # of the service period, as _yyyy-mm-dd_.
    string serviceEndDate?;
    # The start date of the service period for this item, as _yyyy-mm-dd_.
    # For a one-time fee item, the date of the charge.
    string serviceStartDate?;
    # The SKU of the product associated with the invoice item.
    string sKU?;
    # The type of the source item.
    "SubscriptionComponent"|"Rounding"|"ProductRatePlanCharge"|"None"|"OrderLineItem" sourceItemType?;
    # ID of the subscription associated with the invoice item.
    string subscriptionId?;
    # Number of the subscription associated with the invoice item.
    string subscriptionNumber?;
    # The amount of tax applied to the charge.
    string taxAmount?;
    # The tax code of the invoice item.
    # **Note** Only when taxation feature is enabled, this field can be presented.
    string taxCode?;
    decimal taxExemptAmount?;
    # The tax mode of the invoice item, indicating whether the amount of the invoice item includes tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # The per-unit price of the invoice item.
    decimal unitPrice?;
    # The unit of measure (UOM) that is configured in **Settings > Billing** for the product rate plan charge.
    string uOM?;
    # The balance of the invoice item.
    # 
    # **Note**: This field is only available if you have the Invoice Settlement feature enabled.
    decimal balance?;
    # The number of deliveries dedicated to the Delivery Pricing charges. 
    # **Note**: This field is available only if you have the Delivery Pricing feature enabled. 
    decimal numberOfDeliveries?;
    # ID of the account receivable accounting code associated with the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string accountReceivableAccountingCodeId?;
    # ID of the recognized revenue accounting code associated with the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string recognizedRevenueAccountingCodeId?;
    # ID of the deferred revenue accounting code associated with the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string deferredRevenueAccountingCodeId?;
    # ID of the accounting code for contract asset. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractAssetAccountingCodeId?;
    # ID of the accounting code for contract liability. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractLiabilityAccountingCodeId?;
    # ID of the accounting code for contract recognized revenue. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractRecognizedRevenueAccountingCodeId?;
    string unbilledReceivablesAccountingCodeId?;
    # The accounting code for adjustment revenue. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string adjustmentRevenueAccountingCodeId?;
    # ID of the accounting code for adjustment liability. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string adjustmentLiabilityAccountingCodeId?;
    # The ID of the journal entry that corresponds to this invoice item.
    string journalEntryId?;
    # The ID of the account associated with the invoice item.
    string accountId?;
    # The ID of the bill-to contact snapshot associated with the invoice.
    string billToContactSnapshotId?;
    # The ID of the sold-to contact snapshot associated with the invoice.
    string soldToContactSnapshotId?;
    # The parent account of the account associated with the invoice.
    # 
    # **Note**: This field is available only if you have <a
    # href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy"
    # target="_blank">Customer Hierarchy</a> enabled for your tenant.
    string parentAccountId?;
    # The ID of the bill-to contact associated with the invoice.
    string billToContactId?;
    # The ID of the sold-to contact associated with the invoice.
    string soldToContactId?;
    # The ID of the default payment method on the associated account.
    string defaultPaymentMethodId?;
    # The ID of the rate plan that the invoice is created from.
    string ratePlanId?;
    # The ID of the amendment associated with the subscription. 
    # 
    # **Note**: This field is available only if you do not have Orders enabled for your tenant.
    string amendmentId?;
    # The ID of the product rate plan charge that the invoice item is created from.
    string productRatePlanChargeId?;
    # The ID of the product rate plan that the invoice item is created from.
    string productRatePlanId?;
    # The ID of the product that the invoice item is created from.
    string productId?;
    # The booking reference of the invoice item.
    string bookingReference?;
    # The type of the invoice item.
    string itemType?;
    # The purchase order number associated with the invoice item.
    string purchaseOrderNumber?;
    # The revenue recognition code.
    string revRecCode?;
    # The date when revenue recognition is triggered.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate" revRecTriggerCondition?;
    # The revenue recognition rule of the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string revenueRecognitionRuleName?;
    # The reference ID of the oder line item associated with the invoice item.
    string orderLineItemId?;
    # EXPANDABLE.
    # The invoices to which the invoice item belongs.
    record {} invoice?;
    # EXPANDABLE.
    # The invoice to which the invoice item belongs.
    record {} subscription?;
    # EXPANDABLE.
    # The taxation items associated with the invoice item.
    record {}[] taxationItems?;
    # EXPANDABLE.
    # The rate plan charge associated with the invoice item.
    record {} ratePlanCharge?;
    # EXPANDABLE.
    # The order line item associated with the invoice item.
    record {} orderLineItem?;
|};

public type GETRefundPaymentTypeAutoUnapply record {
    # The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.
    string accountId?;
    # The total amount of the refund.
    decimal amount?;
    # The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format. 
    string cancelledOn?;
    # Comments about the refund.
    string comment?;
    # The ID of the Zuora user who created the refund.
    string createdById?;
    # The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10. 
    string createdDate?;
    # The ID of the credit memo associated with the refund.
    string creditMemoId?;
    # Container for the finance information related to the refund.
    GETRefundCreditMemoType_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the refund.
    string gatewayId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the refund. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the refund. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the refund in the gateway.
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    # The ID of the created refund.
    string id?;
    # The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # How an external refund was issued to a customer.
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The unique identification number of the refund.
    string number?;
    # The natural key for the payment gateway.
    string paymentGatewayNumber?;
    # The ID of the payment that is refunded.
    string paymentId?;
    # The unique ID of the payment method that the customer used to make the refund. 
    string paymentMethodId?;
    # The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.
    string paymentMethodSnapshotId?;
    # The payout ID of the refund from the gateway side.
    string payoutId?;
    # A code identifying the reason for the transaction. 
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format.
    string refundDate?;
    # The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
    string refundTransactionTime?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondRefundReferenceId?;
    # The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptorPhone?;
    # The status of the refund.
    "Processed"|"Canceled"|"Error"|"Processing" status?;
    # The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The type of the refund.
    "External"|"Electronic" 'type?;
    # The ID of the the Zuora user who last updated the refund.
    string updatedById?;
    # The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    # Container for the write-off information of credit memo and apply information.
    GETRefundPaymentTypeAutoUnapply_writeOffResults writeOffResults?;
    *RefundObjectNSFields;
    *RefundObjectCustomFields;
};

public type SettingItemWithOperationsInformation record {
    # The context where this setting item is effective.
    "Tenant"|"Entity"|"User"|"None" context?;
    # The description of the setting item as you see from Zuora UI.
    string description?;
    # An array of HTTP operation methods that are supported on this setting endpoint.
    SettingItemHttpOperation[] httpOperations?;
    # The unique key to distinguish the setting item.
    string 'key?;
    # The path pattern of the setting endpoint, relative to `/settings`. For example, `/billing-rules`.
    string pathPattern?;
};

public type SubmitDataLabelingJobRequest record {
    # The IDs of the objects to be labeled, only required if the `queryType` is `ById`.
    # 
    # There is a 4MB limit of the JSON payload, so in case of a large number of IDs, please make sure the payload is less than 4MB.
    string[] ids?;
    # The object type of the data labeling job.
    # 
    # Currently, the following objects are supported:
    #   * `User`
    #   * `Account` 
    # 
    #     All the associated transaction objects of the account being labeled will automatically inherit the org label of the account.
    #   * `Product`
    # 
    #     You have to label the Account object first, make sure all accounts have been labeled, then you can proceed with the Product object. 
    # 
    #     You can get all the unlabeled accounts by running a Data Source export job, with the following query:
    #     ``` sql
    #     SELECT Id, Name FROM Account WHERE Organization.Id IS NULL
    #     ```              
    #     
    #     All the ProductRatePlanS of the product will be automatically labeled with the same `orgs`.
    #     
    #     When labeling products, you can omit the `orgs` parameter, i.e, leave it empty, the system will find all the subscriptions that include the product and get the org list of those subscriptions, then label the product with those `orgs`, aka, the `derived orgs`.
    #     
    #     You can also explicitly specify the orgs parameter, in that case, you will need to provide a super set of the `derived orgs`.  
    #   * `BillRun`
    # 
    #     You don't need to specify the `orgs` parameter, we will label the `BillRun` with all the orgs because existing runs could pick up all accounts. You can definitely create new bill run with certain `orgs` to operate separately by `orgs`.
    #   * `PaymentRun`
    # 
    #     Same as BillRun.
    #   * `ForecastRun`
    string objectType;
    # The IDs of the organizations that the data labeling job will associate with the data to be labeled. Either the `orgIds` or `orgs` field is required.
    # 
    # For `Account` object, one and only one org Id is required.
    # 
    # For configuration objects, `null` and `[]` are treated differently, use `null` to unlabel the object, `[]` to label it with all orgs.
    SubmitdatalabelingjobrequestOrgidsItemsString[] orgIds?;
    # The names of the organizations that the data labeling job will associate with the data to be labeled. Either the `orgIds` or `orgs` field is required.
    # 
    # For `Account` object, one and only one org name is required.
    # 
    # For configuration objects, `null` and `[]` are treated differently, use `null` to unlabel the object, `[]` to label it with all orgs.
    string[] orgs?;
    # The query that the data labeling job will run to fetch the data to be labeled, only required if the `queryType` is `ByZoql`.
    string query?;
    # Specifies the type of query that the data labeling job will run to fetch the data to be labeled.
    # 
    # * `ByZoql` - The data labeling job will run a ZOQL query which is specified in the `query` field to fetch the data to be labeled.
    # * `ById` - The data labeling job will fetch the data to be labeled by the IDs specified in the `ids` field.
    "ByZoql"|"ById" queryType;
};

# Pricing information about a one-time charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
public type OrderActionRatePlanOneTimeVolumePricingOverride record {
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # List of variable pricing tiers in the charge.
    OrderActionRatePlanChargeTier[] tiers?;
};

public type ProxyCreateOrModifyProductRatePlanChargeTierData_ProductRatePlanChargeTier record {
    # The code corresponding to the currency for the tier's price.
    string Currency?;
    # The specific amount for a fixed discount. Required if the charge model of the product rate plan charge is `Discount-Fixed Amount`.
    decimal DiscountAmount?;
    # The percentage of discount for a percentage discount. Required if the charge model of the product rate plan charge is `Discount-Percentage`.
    decimal DiscountPercentage?;
    # The end number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`.
    decimal EndingUnit?;
    # Indicates if the price is an overage price, which is the price when usage surpasses the last defined tier.
    boolean IsOveragePrice?;
    # The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.
    decimal Price?;
    # Indicates if pricing is a flat fee or is per unit. This field is for tiered and volume pricing models only.
    "Flat Fee"|"Per Unit" PriceFormat?;
    # The starting number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`.
    decimal StartingUnit?;
};

public type GETAccountSummaryPaymentInvoiceType record {
    # Amount of payment applied to the invoice.
    string appliedPaymentAmount?;
    # Invoice ID.
    string invoiceId?;
    # Invoice number.
    string invoiceNumber?;
};

# Response after migration is added.
public type MigrationClientResponse record {
    # List of Emails with comma separator 
    string emailIds?;
    # Environment information
    string environment?;
    # Variable to hold the job ID.
    string id;
    # User responsible for migration.
    string migratedBy;
    # Description of the migration.
    string migrationDescription;
    # Timestamp when migration ended.
    string migrationEnd;
    # Name of the migration.
    string migrationName;
    # Timestamp when migration started.
    string migrationStart;
    MigrationComponentContent[] response?;
    # Source Tenant Description.
    string sourceTenantDescription;
    # Source Tenant Name.
    string sourceTenantName;
    # Status of the Migration Job.
    string status;
    string 'type?;
};

# 
public type QueryCreditMemoApplicationsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedCreditMemoApplication[] data?;
|};

# Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
public type UsageOveragePricingOverride record {
    *PriceChangeParams;
    # Number of free units that may be consumed.
    @constraint:Number {minValue: 0}
    decimal includedUnits?;
    # Number of periods that Zuora considers when calculating overage charges with overage smoothing.
    @constraint:Int {minValue: 1}
    int numberOfPeriods?;
    # Price per overage unit consumed.
    decimal overagePrice?;
    # Specifies whether to credit the customer for unused units.
    # 
    # If the value of this field is `CreditBySpecificRate`, use the `unusedUnitsCreditRates` field to specify the rate at which to credit the customer for unused units.
    "NoCredit"|"CreditBySpecificRate" overageUnusedUnitsCreditOption?;
    # Per-unit rate at which to credit the customer for unused units. Only applicable if the value of the `overageUnusedUnitsCreditOption` field is `CreditBySpecificRate`.
    decimal unusedUnitsCreditRates?;
};

# Container for custom fields of an Account object.
public type AccountObjectCustomFields record {
};

# Container for the prefix and starting document number of credit memos.
# 
# **Note:** This field is only available if you have the Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
public type CreditMemoEntityPrefix record {
    # The prefix of credit memos.
    string prefix?;
    # The starting document number of credit memos.
    int startNumber?;
};

public type GetFulfillmentResponseType record {
    *CommonResponse;
    FulfillmentGet fulfillment?;
};

public type POSTBillingDocumentFilesDeletionJobResponse record {
    # The unique ID of the billing document file deletion job.
    string id?;
    # The status of the billing document file deletion job.
    "Pending" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type PUTOrderRequestType record {
    # Category of the order to indicate a product sale or return. Default value is `NewSales`.
    "NewSales"|"Return" category = "NewSales";
    # Container for custom fields of an Order object.
    OrderObjectCustomFields customFields?;
    # A description of the order.
    @constraint:String {maxLength: 500}
    string description?;
    # The account number that this order will be created under.
    # Note that this actually specifies the invoice owner account of the subscriptions included in this order.
    @constraint:String {maxLength: 70}
    string existingAccountNumber?;
    # An enum field on the Subscription object to indicate the name of a third-party store. This field is used to represent subscriptions created through third-party stores.
    "Amazon"|"Apple"|"Google"|"Roku" externallyManagedBy?;
    # The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if the contract effective date field is skipped or its value is left as null.
    string orderDate;
    # [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services. 
    # 
    # With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.
    # 
    # **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.        
    CreateOrderOrderLineItem[] orderLineItems?;
    # The order number of the new order. If not provided, system will auto-generate a number for this order.   
    # **Note:** Make sure the order number does not contain a slash. 
    @constraint:String {maxLength: 100}
    string orderNumber?;
    # The container for billing processing options and payment processing options.
    # 
    # **Note:**
    # - This field is not supported in draft orders.
    # - When you use the "Create an order" operation to create an account, create a subscription, run billing, and collect payment in a single call, if any error occurs during the call, such as a payment processing failure and a tax engine failure, then all the other steps will be rolled back. In this case, neither the invoice will be generated, nor the subscription nor the account will be created.
    # - When you use the "Create an order" operation to cancel a subscription with `refund` and `writeOff`, if the `refund` or `writeOff` fails, `cancelSubscription`, `runBilling`, and `collectPayment` still can succeed.
    # - When you use the "Create an order" operation, the `collectPayment` and `refund` fields cannot be set to `true` simultaneously.  Otherwise, the order will not be proceeded.
    ProcessingOptionsOrders processingOptions?;
    # Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs.
    @constraint:String {maxLength: 255}
    string reasonCode?;
    # Information of scheduled order. 
    POSTOrderRequestType_schedulingOptions schedulingOptions?;
    # The status of the order. The default value is `Completed`. The following values are supported:
    # - `Draft`: The order is in draft status.
    # - `Pending`: The order is in pending status.
    # - `Completed`: The order is in completed status.
    # - `Scheduled`: The order is in scheduled status and it is only valid if the Scheduled Orders feature is enabled.
    # - `Executing`: The scheduled order is executed by a scheduler and it is only valid if the Scheduled Orders feature is enabled.
    # - `Failed`: The scheduled order has failed.
    "Draft"|"Pending"|"Completed"|"Scheduled" status?;
    # Each item includes a set of order actions, which will be applied to the same base subscription.
    POSTOrderRequestType_subscriptions[] subscriptions?;
};

# The custom object definitions. This object maps types to custom object definitions.
public type CustomObjectDefinitions record {|
    CustomObjectDefinition...;
|};

public type GETProductRatePlansResponse record {
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Container for one or more products.
    GETProductRatePlanType[] productRatePlans?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
public type OrderActionRatePlanRecurringTieredPricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    # Specifies the duration of each recurring period.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.
    @constraint:Int {minValue: 1, maxValue: 200}
    int:Signed32 specificListPriceBase?;
    # List of cumulative pricing tiers in the charge.
    OrderActionRatePlanChargeTier[] tiers?;
};

# Array of product rate plan charge tiers.
# 
# You should specify all relevant fields of all tiers, including pricing information for each currency.
# 
# For each currency, ensure that the tiers appear in ascending order of `StartingUnit`.
# 
# For example:
# 
# ```
# [
#   {
#     "StartingUnit": "1",
#     "EndingUnit": "150",
#     "Currency": "USD",
#     "Price": 1.95,
#     "PriceFormat": "Per Unit"
#   },
#   {
#     "StartingUnit": "151",
#     "EndingUnit": "300",
#     "Currency": "USD",
#     "Price": 1.45,
#     "PriceFormat": "Per Unit"
#   },
#   {
#     "StartingUnit": "1",
#     "EndingUnit": "150",
#     "Currency": "EUR",
#     "Price": 1.75,
#     "PriceFormat": "Per Unit"
#   },
#   {
#     "StartingUnit": "151",
#     "EndingUnit": "300",
#     "Currency": "EUR",
#     "Price": 1.30,
#     "PriceFormat": "Per Unit"
#   }
# ]
# ```
public type GETRatePlanChargePricingTier GETRatePlanChargePricingTier_inner[];

public type POSTRejectPaymentResponse record {
    # The ID of the customer account that the payment is for.
    string accountId?;
    # The total amount of the payment.
    decimal amount?;
    # The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the payment.
    string comment?;
    # The ID of the Zuora user who created the refund.
    string createdById?;
    # The date and time when the chargeback is created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-01 15:31:10.
    string createdDate?;
    # The ID of the credit memo that is refunded.
    string creditMemoId?;
    # Container for the finance information related to the refund.
    POSTReversePaymentResponse_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the payment.
    string gatewayId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the payment. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the payment. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the payment in the gateway; specifically used for reconciliation.
    "Submitted"|"NotSubmitted"|"Settled"|"FailedToSettle" gatewayState?;
    # The ID of the payment chargeback.
    string id?;
    # The date and time when a charge was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # How an external refund was issued to a customer. 
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The unique identification number of the payment. For example, P-00000001.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the payment that is refunded.
    string paymentId?;
    # The unique ID of the payment method that the customer used to make the payment.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
    string paymentMethodSnapshotId?;
    # The payout ID from the gateway side.
    string payoutId?;
    # A code identifying the reason for the transaction.      
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2017-03-01.       
    string refundDate?;
    # The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
    string refundTransactionTime?;
    # The transaction ID returned by the payment gateway if there is an additional refund. 
    string secondRefundReferenceId?;
    # The date and time when the transaction is settled, in `yyyy-mm-dd hh:mm:ss` format.
    string settledOn?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptor?;
    # A payment gateway-specific field that maps Zuora to other gateways.          
    string softDescriptorPhone?;
    # The status of the payment.
    string status?;
    # The date and time when the payment was submitted, in yyyy-mm-dd hh:mm:ss format.
    string submittedOn?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The type of the payment.
    "External"|"Electronic" 'type?;
    # The ID of the Zuora user who last updated the payment.
    string updatedById?;
    # The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-02 15:36:10.
    string updatedDate?;
};

# Container of the payment schedules that are created.
public type POSTPaymentSchedulesResponse record {
    # Container for payment parts.
    POSTPaymentSchedulesEach[] paymentSchedules?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type GETRefundItemPartType record {
    # The amount of the refund part item.
    decimal amount?;
    # The ID of the Zuora user who created the refund part item.
    string createdById?;
    # The date and time when the refund part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the credit memo item associated with the refund part item.
    string creditMemoItemId?;
    # The ID of the credit memo taxation item associated with the refund part item.
    string creditTaxItemId?;
    # The ID of the refund part item.
    string id?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The ID of the Zuora user who last updated the refund part item.
    string updatedById?;
    # The date and time when the refund part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

# Container for custom fields of an Order Action object.
public type OrderActionRatePlanOrderActionObjectCustomFields record {
};

public type PUTSubscriptionResponseType record {
    # Invoice amount. Preview mode only.
    decimal amount?;
    # Invoice amount minus tax. Preview mode only.
    decimal amountWithoutTax?;
    # Container for charge metrics.
    PUTSubscriptionResponseType_chargeMetrics chargeMetrics?;
    # Container for credit memos.
    # 
    # **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. 
    PUTSubscriptionResponseType_creditMemo creditMemo?;
    # The credit memo ID, if a credit memo is generated during the subscription process.
    # 
    # **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string creditMemoId?;
    # Container for invoices.
    # 
    # 
    #  **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header. Also, the response structure is changed and the following invoice related response fields are moved to this **invoice** container:
    #   
    #    * amount
    #    * amountWithoutTax
    #    * taxAmount
    #    * invoiceItems
    #    * targetDate
    PUTSubscriptionResponseType_invoice invoice?;
    # Invoice ID, if an invoice is generated during the update.
    string invoiceId?;
    # Container for invoice items.
    PUTSubscriptionPreviewInvoiceItemsType[] invoiceItems?;
    # Date through which charges are calculated on the invoice, as yyyy-mm-dd. Preview mode only.
    # 
    # **Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, and 196.0. .
    string invoiceTargetDate?;
    # Payment amount, if a payment is collected
    decimal paidAmount?;
    # Payment ID, if a payment is collected.
    string paymentId?;
    # The ID of the resulting new subscription.
    string subscriptionId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.
    # 
    # **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header.
    string targetDate?;
    # Tax amount on the invoice.
    decimal taxAmount?;
    # Change in the subscription monthly recurring revenue as a result of the update.
    decimal totalDeltaMrr?;
    # Change in the total contracted value of the subscription as a result of the update.
    decimal totalDeltaTcv?;
};

public type ChargePreviewMetrics_cmrr record {
    # Total discountCmrr of all discount charges which are applied to one specific recurring charge. This value is calculated from the rating results for the latest subscription version in the order. Only selects the applied discount charge when its endDateCondition is "Subscription_End".
    decimal discount?;
    # Delta discountCmrr value between the order base and the latest subscription version.
    decimal discountDelta?;
    decimal regular?;
    decimal regularDelta?;
};

public type POSTUploadFileResponse record {
    # The unique ID of the uploaded PDF file.
    string fileId?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type CreatePaymentMethodBetalingsservice record {
    # The container for the account holder information. The nested `accountHolderName` field is required.
    CreatePaymentMethodBetalingsservice_accountHolderInfo accountHolderInfo?;
    # The number of the customer's bank account.
    string accountNumber?;
    # The masked account number such as ****1234.
    string accountMaskNumber?;
    # The sort code or number that identifies the bank. This is also known as the sort code.
    string bankCode?;
    # The identity number used for Bank Transfer.
    string identityNumber?;
    # The container of the mandate information for the payment method.
    CreatePaymentMethodCreditCard_mandateInfo mandateInfo?;
    # The container for payment method processing options.
    CreatePaymentMethodCreditCard_processingOptions processingOptions?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type POSTSubscriptionPreviewCreditMemoItemsType record {
    # The credit memo item amount excluding tax.
    decimal amountWithoutTax?;
    # The amount of the credit memo item. For tax-inclusive credit memo items, the amount indicates the credit memo item amount including tax. For tax-exclusive credit memo items, the amount indicates the credit memo item amount excluding tax
    decimal chargeAmount?;
    # Description of this credit memo item.
    string chargeDescription?;
    # Name of this credit memo item.
    string chargeName?;
    # Name of the product associated with this credit memo item.
    string productName?;
    # ID of the product rate plan charge associated with this credit memo item.
    string productRatePlanChargeId?;
    # Quantity of the charge associated with this credit memo item.
    int quantity?;
    # End date of the service period for this credit memo item, as yyyy-mm-dd.
    string serviceEndDate?;
    # Service start date of this credit memo item, as yyyy-mm-dd.
    string serviceStartDate?;
    # The tax amount of the credit memo item.
    decimal taxAmount?;
    # List of taxation items.
    # **Note**: This field is only available if you set the `zuora-version` request header to `315.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). 
    POSTSubscriptionPreviewTaxationItemsType[] taxationItems?;
    # Unit used to measure consumption.
    string unitOfMeasure?;
};

public type PutReverseInvoiceResponseType record {
    # Container for the credit memo that is automatically generated when during the invoice reversal.
    PutReverseInvoiceResponseType_creditMemo creditMemo?;
    # Container for the debit memo that is automatically generated during the reversal of the credit memo related to this invoice. If no related credit memo is reversed, this field is not retruned in the response body.
    PutReverseInvoiceResponseType_debitMemo debitMemo?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type PostBillingPreviewParam record {
    # The ID of the customer account to which the billing preview applies.
    # 
    # **Note**: When posting billing preview, you must specify either `accountId` or `accountNumber` in the request body.
    @constraint:String {maxLength: 255}
    string accountId?;
    # The number of the customer account to which the billing preview applies.
    # 
    # **Note**: When posting billing preview, you must specify either `accountId` or `accountNumber` in the request body.
    string accountNumber?;
    # Indicates whether to generate a preview of future invoice items and credit memo items with the assumption that the subscriptions are renewed.
    # 
    # Set one of the following values in this field to decide how the assumption is applied in the billing preview.
    # 
    #   * **All:** The assumption is applied to all the subscriptions. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.
    #   
    #   * **None:** (Default) The assumption is not applied to the subscriptions. Zuora generates preview invoice item data and credit memo item data based on the current term end date and the target date.
    #   
    #     * If the target date is later than the current term end date, Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the current term end date.
    # 
    #     * If the target date is earlier than the current term end date, Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.
    # 
    #   * **Autorenew:** The assumption is applied to the subscriptions that have auto-renew enabled. Zuora generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the target date.
    # 
    # **Note:** 
    #   - This field can only be used if the subscription renewal term is not set to 0.  
    #   
    #   
    #   - The credit memo item data is only available if you have Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string assumeRenewal?;
    # The charge types to exclude from the billing preview.
    # 
    # **Possible values:** OneTime, Recurring, Usage, and any combination of these values.
    string chargeTypeToExclude?;
    # Whether draft document items are included in the billing preview run. By default, draft document items are not included.
    # 
    # This field loads draft invoice items and credit memo items. The `chargeTypeToExclude`, `targetDate`, `includingEvergreenSubscription`, and `assumeRenewal` fields do not affect the behavior of the `includingDraftItems` field.          
    boolean includingDraftItems?;
    # Indicates if evergreen subscriptions are included in the billingPreview call.
    boolean includingEvergreenSubscription?;
    # The target date for the billingPreview call. The billingPreview call generates preview invoice item data and credit memo item data from the first day of the customer's next billing period to the TargetDate. 
    # 
    # If the TargetDate is later than the subscription current term end date, the preview invoice item data and credit memo item data is generated from the first day of the customer's next billing period to the current term end date. If you want to generate preview invoice item data and credit memo item data past the end of the subscription current term, specify the `AssumeRenewal` field in the request.
    # 
    # 
    # **Note:** The credit memo item data is only available if you have Invoice Settlement feature enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string targetDate;
};

public type GETPaymentMethodResponse record {
    # The account holder information.
    GETPMAccountHolderInfo accountHolderInfo?;
    # The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.
    string bankIdentificationNumber?;
    # ID of the user who created this payment method.
    string createdBy?;
    # The date and time when the payment method was created, in `yyyy-mm-dd hh:mm:ss` format.
    string createdOn?;
    # The masked credit card number, such as:
    # ```
    # *********1112
    # ```
    string creditCardMaskNumber?;
    # The type of the credit card or debit card.
    # 
    # Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # **Note:** This field is only returned for the Credit Card and Debit Card payment types.
    string creditCardType?;
    # The session ID of the user when the `PaymentMethod` was created or updated.
    string deviceSessionId?;
    # Indicates whether the mandate is an existing mandate.
    "Yes"|"No" existingMandate?;
    # The payment method ID.
    string id?;
    # The IP address of the user when the payment method was created or updated.
    string ipAddress?;
    # Indicates whether this payment method is the default payment method for the account.
    boolean isDefault?;
    # The date of the last failed attempt to collect payment with this payment method.
    string lastFailedSaleTransactionDate?;
    # ID of the last transaction of this payment method.
    string lastTransaction?;
    # The time when the last transaction of this payment method happened.
    string lastTransactionTime?;
    # The mandate information for the Credit Card, Apple Pay, Google Pay, Credit Card Reference Transaction, ACH, or Bank Transfer payment method.
    # 
    # The following mandate fields are common to all supported payment methods:
    # * `mandateId`
    # * `mandateReason`
    # * `mandateStatus`
    # 
    # The following mandate fields are specific to the ACH and Bank Transfer payment methods:
    # * `mandateReceivedStatus`
    # * `existingMandateStatus`
    # * `mandateCreationDate`
    # * `mandateUpdateDate`
    # 
    # The following mandate fields are specific to the Credit Card, Apple Pay, and Google Pay payment methods:
    # * `mitTransactionId`
    # * `mitProfileAgreedOn`
    # * `mitConsentAgreementRef`
    # * `mitConsentAgreementSrc`
    # * `mitProfileType`
    # * `mitProfileAction`
    POSTPMMandateInfo mandateInfo?;
    # The number of allowable consecutive failures Zuora attempts with the payment method before stopping.
    int maxConsecutivePaymentFailures?;
    # The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. 
    int:Signed32 numConsecutiveFailures?;
    # The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.
    int paymentRetryWindow?;
    # A gateway unique identifier that replaces sensitive payment method data.
    # 
    # **Note:** This field is only returned for the Credit Card Reference Transaction payment type.
    string secondTokenId?;
    # The status of the payment method.
    "Active"|"Closed"|"Scrubbed" status?;
    # A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile.
    # 
    # **Note:** This field is only returned for the Credit Card Reference Transaction payment type.
    string tokenId?;
    # The number of error payments that used this payment method.
    int:Signed32 totalNumberOfErrorPayments?;
    # The number of successful payments that used this payment method.
    int:Signed32 totalNumberOfProcessedPayments?;
    # The type of the payment method. For example, `CreditCard`.
    string 'type?;
    # ID of the user who made the last update to this payment method.
    string updatedBy?;
    # The last date and time when the payment method was updated, in `yyyy-mm-dd hh:mm:ss` format.
    string updatedOn?;
    # Indicates whether this payment method uses the default retry rules configured in the Zuora Payments settings.
    boolean useDefaultRetryRule?;
    *PaymentMethodObjectCustomFields;
    *GETPaymentMethodResponseBankTransfer;
    *GETPaymentMethodResponseACH;
    *GETPaymentMethodResponseCreditCard;
    *GETPaymentMethodResponsePayPal;
    *GETPaymentMethodResponseGooglePay;
    *GETPaymentMethodResponseApplePay;
};

public type ExpandedPaymentApplication record {|
    # The unique identifier of the payment application.
    string id?;
    # The unique identifier of the user who created the payment application.
    string createdById?;
    # The date and time when the payment application was created.
    string createdDate?;
    # The unique identifier of the user who last updated the payment application.
    string updatedById?;
    # The date and time when the payment application was last updated.
    string updatedDate?;
    # The applied amount of the payment.
    decimal applyAmount?;
    # The date when the payment application takes effect, in `yyyy-mm-dd` format. 
    # The effective date is later than or equal to the maximum effective date of the payment.
    string effectiveDate?;
    # The status of the payment application.
    "Processing"|"Processed"|"Cancelled" paymentApplicationStatus?;
    # The ID of the customer account associated with the payment application.
    string accountId?;
    # The unique ID of the created payment. 
    string paymentId?;
    # The ID of the invoice to which the payment is applied.
    string invoiceId?;
    # The ID of the application group to which this payment application belongs.
    string applicationGroupId?;
    # The ID of the debit memo to which the payment is applied.
    string debitMemoId?;
    # The ID of the billing document owner. 
    string billingDocumentOwnerId?;
    # The accountReceivableAccountingCode of a standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a>, <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance" target="_blank">Zuora Finance</a>, and <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Get_started_with_Invoice_Settlement/AA_Overview_of_Invoice_Settlement" target="_blank">Invoice Settlement</a> features are enabled.
    string accountReceivableAccountingCodeId?;
    # The accounting code for the unapplied payment.
    string unappliedPaymentAccountingCodeId?;
    # The accounting code for cash payments.
    string cashAccountingCodeId?;
    # The ID of the journal entry that corresponds to this transaction.
    string journalEntryId?;
    NestedPaymentOnExpand payment?;
|};

# Definition of a filter rule parameter.
public type GetScheduledEventResponse_parameters record {
    # The description of the parameter.
    @constraint:String {maxLength: 255}
    string description?;
    # The display name of the parameter.
    @constraint:String {maxLength: 255}
    string displayName?;
    # The option values of the parameter.
    string[] options?;
    # The type of the value.
    string valueType?;
};

public type GetHostedPageType record {
    # Page ID of the Payment Page that Zuora assigns when it is created.
    string pageId?;
    # Name of the Payment Page that specified during the page configuration.
    string pageName?;
    # Payment method type of this Payment Page, e.g. 'Credit Card', 'ACH', or 'Bank Transfer'.
    string pageType?;
    # Version of the Payment Page. 2 for Payment Pages 2.0.
    string pageVersion?;
};

# Rate plan associated with a subscription.
public type OrderActionRatePlanRatePlanOverride record {
    # List of charges associated with the rate plan.
    OrderActionRatePlanChargeOverride[] chargeOverrides?;
    # Container for custom fields of a Rate Plan object.
    OrderActionRatePlanRatePlanObjectCustomFields customFields?;
    # Internal identifier of the rate plan.
    string newRatePlanId?;
    # Internal identifier of the product rate plan that the rate plan is based on.
    string productRatePlanId;
    # Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the rate plan. Then when you update the product, you can use the same unique identifier to specify which rate plan to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
};

# Container for the finance information related to the payment.
public type CreatePaymentType_financeInformation record {
    # The accounting code that maps to a bank account in your accounting system.
    @constraint:String {maxLength: 100}
    string bankAccountAccountingCode?;
    # Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The accounting code for the unapplied payment.
    @constraint:String {maxLength: 100}
    string unappliedPaymentAccountingCode?;
};

# Container for custom fields of a payment method object.
public type PaymentMethodObjectCustomFields record {
};

public type ProductRatePlanDefinitions record {
    # The unique ID of the product rate plan definition.
    string id?;
    # The unique ID of the product charge in this rate plan definition.
    string productRatePlanChargeId?;
    # Th name of the product charge in this rate plan definition.
    string productRatePlanChargeName?;
    # The unique number (natural key) of the product charge in this rate plan definition.
    string productRatePlanChargeNumber?;
    # The unique ID of the product rate plan that uses this rate plan definition.
    string productRatePlanId?;
    # Th name of the product rate plan that uses this rate plan definition.
    string productRatePlanName?;
    # The unique number (natural key) of the product rate plan that uses this rate plan definition.
    string productRatePlanNumber?;
};

# Container for optional sold-to contact.
public type PUTAccountTypeSoldToContact record {
    # First address line, 255 characters or less.
    string address1?;
    # Second address line, 255 characters or less.
    string address2?;
    # City, 40 characters or less.
    string city?;
    # Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.
    string country?;
    # County; 32 characters or less. May optionally be used by Zuora Tax to calculate county tax.
    string county?;
    # Fax phone number, 40 characters or less.
    string fax?;
    # First name, 100 characters or less.
    string firstName?;
    # Home phone number, 40 characters or less.
    string homePhone?;
    # Last name, 100 characters or less.
    string lastName?;
    # Mobile phone number, 40 characters or less.
    string mobilePhone?;
    # Nickname for this contact
    string nickname?;
    # Other phone number, 40 characters or less.
    string otherPhone?;
    # Possible values are: `Work`, `Mobile`, `Home`, `Other`.
    string otherPhoneType?;
    # Personal email address, 80 characters or less.
    string personalEmail?;
    # State; must be a valid state or province name or 2-character abbreviation. If using Zuora Tax, be aware that Zuora Tax  requires a state (in the US) or province (in Canada) in this field for the sold-to contact to calculate tax, and that a bill-to contact may be used if no sold-to contact is provided.
    string state?;
    # If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.
    string taxRegion?;
    # Work email address, 80 characters or less.
    string workEmail?;
    # Work phone number, 40 characters or less.
    string workPhone?;
    # Zip code, 20 characters or less.
    string zipCode?;
    *ContactObjectCustomFields;
};

public type ContactCustomFields record {
};

public type GETBillingDocumentFilesDeletionJobResponse record {
    # The unique ID of the billing document file deletion job.
    string id?;
    # The status of the billing document file deletion job.
    "Pending"|"Processing"|"Completed"|"Error" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Pricing information about the charge.
public type PreviewOrderChargeOverride_pricing record {
    # Container for charge model configuration data.
    # 
    # **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The High Water Mark and Pre-Rated Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    ChargeModelDataOverride chargeModelData?;
    # Pricing information about a discount charge.
    DiscountPricingOverride discount?;
    # Pricing information about a one-time charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    OneTimeFlatFeePricingOverride oneTimeFlatFee?;
    # Pricing information about a one-time charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
    OneTimePerUnitPricingOverride oneTimePerUnit?;
    # Pricing information about a one-time charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
    OneTimeTieredPricingOverride oneTimeTiered?;
    # Pricing information about a one-time charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
    OneTimeVolumePricingOverride oneTimeVolume?;
    # Pricing information about a recurring charge that uses the Delivery Pricing charge model. In this charge model, the charge has a fixed price. This field is only available if you have the Delivery Pricing charge model enabled.
    RecurringDeliveryPricingOverride recurringDeliveryBased?;
    # Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    RecurringFlatFeePricingOverride recurringFlatFee?;
    # Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
    RecurringPerUnitPricingOverride recurringPerUnit?;
    # Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
    RecurringTieredPricingOverride recurringTiered?;
    # Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
    RecurringVolumePricingOverride recurringVolume?;
    # Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    UsageFlatFeePricingOverride usageFlatFee?;
    # Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
    UsageOveragePricingOverride usageOverage?;
    # Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
    UsagePerUnitPricingOverride usagePerUnit?;
    # Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
    UsageTieredPricingOverride usageTiered?;
    # Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
    UsageTieredWithOveragePricingOverride usageTieredWithOverage?;
    # Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
    UsageVolumePricingOverride usageVolume?;
};

public type PreviewExistingSubscriptionDiscountDetails record {
    # The charge number of the discount.
    string discountChargeNumber?;
    # The discount rate.
    decimal discountRate?;
};

public type RefundCreditMemoItemType record {
    # The amount of the refund on the specific item.
    decimal amount;
    # The ID of the credit memo item that is refunded.
    string creditMemoItemId?;
    # The ID of the credit memo taxation item that is refunded.
    string creditTaxItemId?;
};

public type PUTProductChargeDefinitionRequest record {
    # The override value of the billingPeriod for the product charge definition.
    string billingPeriod?;
    # The override value of the billingTiming for the product charge definition.
    "IN_ADVANCE"|"IN_ARREARS" billingTiming?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    "DiscountFixedAmount"|"DiscountPercentage"|"FlatFee"|"PerUnit"|"Tiered"|"Volume"|"Delivery" chargeModel?;
    # The default quantity. 
    # 
    # This field is applicable only for one-time and recurring charges.
    decimal? defaultQuantity?;
    # The effective end date of the product charge definition.
    string effectiveEndDate?;
    # The effective start date of the product charge definition.
    string effectiveStartDate?;
    # The list price base. 
    # 
    # This field is applicable only for recurring charges.
    # 
    # **Note**: The `Per_Year` enum value is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year" listPriceBase?;
    # Container for the new prices to override the existing prices of the product charge definition.
    POSTProductChargeDefinitionPricing[] prices?;
    # The override value of the specificBillingPeriod for the product charge definition.
    decimal? specificBillingPeriod?;
    # The number of months for the list price base of the charge definition. 
    # The field is `null` if the `listPriceBase` field is not set to `Per_Specific_Months`.
    int:Signed32? specificListPriceBase?;
    # Specifies the tax code for taxation rules. This field is equired when the `Taxable` field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of the charge.
    @constraint:String {maxLength: 64}
    string taxCode?;
    # Determines how to define taxation for the charge. This field is equired when the `Taxable` field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of the charge.
    "TaxExclusive"|"TaxInclusive"? taxMode?;
    # Determines whether the charge definition is taxable. When this field is set to `True`, the `TaxMode` and `TaxCode` fields are required.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `True`, `False`
    # 
    # **Note**: This value affects the tax calculation of the charge.
    boolean taxable?;
    # The number of periods of a termed subscription that is eligible for this charge definition. This field is applicable when the `termType` field is set to `TERMED`, 
    # and is to be used together with the `termPeriodType` field.
    decimal? term?;
    # Specifies the period type for the subscription term that is eligible for this charge definition.
    "Month"|"Year"|"Day"|"Week"? termPeriodType?;
    # The type of the subscription that is eligible for this charge definition.
    "TERMED"|"EVERGREEN"? termType?;
    # Describes the unit of measure (UOM) configured in **Settings > Billing**.
    # 
    # **Values**: `Each`, `License`, `Seat`, or `null`
    string? uom?;
};

public type PreviewOrderChargeUpdate record {
    BillingUpdate billing?;
    # The number of the charge to be updated. The value of this field is inherited from the `subscriptions` > `orderActions` > `addProduct` > `chargeOverrides` > `chargeNumber` field.
    string chargeNumber?;
    # Container for custom fields of a Rate Plan Charge object.
    RatePlanChargeObjectCustomFields customFields?;
    string description?;
    # Specifies when a charge becomes active.
    PreviewOrderTriggerParams effectiveDate?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).      
    decimal prepaidQuantity?;
    # Pricing information about the charge.
    PreviewOrderPricingUpdate pricing?;
    # A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan charge. For example, if you want to add and update a product in the same order, assign a unique token to the newly added rate plan charge and use that token in future order actions.
    string uniqueToken?;
};

public type Inline_response_406 record {
    # The list of errors returned from the workflow
    WorkflowError[] errors?;
    # The request body that was originally provided to the run API.
    anydata parameters?;
};

public type GETCalloutHistoryVOsType record {
    # A container for callout histories.
    GETCalloutHistoryVOType[] calloutHistories?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# The type of events to be triggered.
public type PutEventTriggerRequest_eventType record {
    # The description for the event type.
    @constraint:String {maxLength: 1000}
    string description?;
    # The display name for the event type.
    @constraint:String {maxLength: 500, minLength: 1}
    string displayName?;
};

public type RenewalTerm record {
    # Duration of the renewal term in months, years, days, or weeks, depending on the value of the `periodType` field.
    int period?;
    # Unit of time that the renewal term is measured in.
    "Month"|"Year"|"Day"|"Week" periodType?;
};

public type BatchesQueries record {
    # The API version for the query. If an API version is not specified, the latest version is used by default. Using the latest WSDL version is most useful for reporting use cases. For integration purposes, specify the WSDL version to ensure consistent query behavior, that is, what is supported and included in the response returned by the API.
    # 
    # **Note**: As of API version 69 and later, Zuora changed the format of certain fields. See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/G_SOAP_API/AB_Getting_started_with_the__SOAP_API/C_Date_Field_Changes_in_the_SOAP_API" target="_blank">Date Field Changes in the SOAP API</a> for more information and a list of affected fields.
    string apiVersion?;
    # A 32-character ID of the query batch.
    string batchId?;
    # The kind of batch job being submitted.
    "zoql"|"zoqlexport" batchType?;
    # This field indicates that the AQuA incremental load will retrieve deleted records.
    # 
    # **Note**: AQuA API is subject to Zuora Data Retention Policy. The retention period of deleted data is 30 days. You can only retrieve deleted data for 30 days through AQuA.
    DeletedRecord_1[] deleted?;
    # This field indicates a full or incremental load. `True` = Full and `False` = Incremental.          
    boolean full?;
    # Name of the query supplied in the request.
    string name?;
    # The requested query string.
    string query?;
    # The number of records included in the query output file.
    string recordCount?;
    # The status of the query task:
    # - submitted: The query was submitted to the query executor for processing.
    # - pending: The query was waiting for being processed.
    # - executing: The query is being processed.
    # - completed: The query was successfully executed.
    # - aborted: The query execution failed.
    # - deleted_notallowed: The query execution failed because objects included in the query do not support the querying of deleted records.
    "submitted"|"pending"|"executing"|"completed"|"aborted"|"deleted_notallowed" status?;
};

public type BillingOptions record {
    # The invoice date displayed on the billing document.
    string documentDate?;
    # Date through which to calculate charges for order line items if a billing document is generated. See [What is a Target Date?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs#What_is_a_Target_Date.3F).
    string targetDate?;
};

public type POSTBulkCreditMemosRequestType BulkCreateCreditMemosFromInvoiceRequest|BulkCreateCreditMemosFromChargeRequest;

public type GetDebitMemoPdfStatusResponse record {
    # The ID of the debit memo whose pdf status is requested.
    string debitMemoId?;
    # The debit memo number of the debit memo whose pdf status is requested.
    string debitMemoNumber?;
    # The generation status of the debit memo PDF.
    "None"|"Pending"|"Processing"|"Generated"|"Error"|"Obsolete"|"Archived" pdfGenerationStatus?;
    # The time at which the request to generate the PDF was created.
    string createdOn?;
    # The time at which the request to generate the PDF was updated.
    string updatedOn?;
};

public type ExpandedRefund record {|
    # The unique identifier of the refund.
    string id?;
    # The unique identifier of the user who created the refund.
    string createdById?;
    # The date and time when the refund was created.
    string createdDate?;
    # The unique identifier of the user who last updated the refund.
    string updatedById?;
    # The date and time when the refund was last updated.
    string updatedDate?;
    # The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment or credit memo.
    string accountId?;
    # The total amount of the refund.
    decimal amount?;
    # The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the refund.
    string comment?;
    # The unique ID of the payment method snapshot which is a copy of the particular payment method used in a transaction.
    string paymentMethodSnapshotId?;
    # The accounting code that maps to this refund transaction in your accounting
    # system.
    string accountingCode?;
    # The currency of the refund.
    string currency?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the refund. This
    # message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the refund. This code
    # is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the refund in the gateway. 
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    # The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # How an external refund was issued to a customer. 
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The unique ID of the payment method that the customer used to make the refund.
    string paymentMethodId?;
    # The payout ID of the refund from the gateway side.
    string payoutId?;
    # A code identifying the reason for the transaction.
    string reasonCode?;
    # The number of the refund.
    string refundNumber?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2017-03-01.
    string refundDate?;
    # The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
    string refundTransactionTime?;
    # Specifies whether the refund is a refund payment or a credit balance. 
    "Payment"|"CreditBalance" sourceType?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondRefundReferenceId?;
    # The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptor?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptorPhone?;
    # The status of the refund. 
    "Processed"|"Canceled"|"Error"|"Processing" status?;
    # The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The type of the refund. 
    "External"|"Electronic" 'type?;
    # The number of the associated transactions, such as payments.
    string associatedTransactionNumber?;
    # The gateway that processed the original payment. A gateway is an online service provider that connects an online shopping cart to a payment processor.
    # Zuora uses this same gateway for the corresponding refund. 
    # If this payment gateway is no longer active, then the electronic refund fails. 
    string gateway?;
    NestedAccountOnExpand account?;
    NestedPaymentMethodOnExpand paymentMethod?;
    NestedRefundApplicationOnExpand[] refundApplications?;
|};

# Definition of a filter rule parameter.
public type PostScheduledEventRequest_parameters record {
    # The description of the parameter.
    @constraint:String {maxLength: 255}
    string description?;
    # The display name of the parameter.
    @constraint:String {maxLength: 255}
    string displayName?;
    # The option values of the parameter.
    string[] options?;
    # The type of the value.
    "STRING"|"BYTE"|"SHORT"|"CHARACTER"|"INTEGER"|"LONG"|"FLOAT"|"DOUBLE"|"BOOLEAN"|"BIG_INTEGER"|"BIG_DECIMAL"|"LOCAL_DATE"|"LOCAL_DATE_TIME"|"TIMESTAMP"|"BYTE_ARRAY"|"SHORT_ARRAY"|"CHARACTER_ARRAY"|"INTEGER_ARRAY"|"FLOAT_ARRAY"|"DOUBLE_ARRAY"|"BOOLEAN_ARRAY"|"STRING_ARRAY"|"BIG_INTEGER_ARRAY"|"BIG_DECIMAL_ARRAY"|"LOCAL_DATE_ARRAY"|"LOCAL_DATE_TIME_ARRAY"|"TIMESTAMP_ARRAY" valueType?;
};

public type Oauth_token_body record {
    # The Client ID of the OAuth client.
    @constraint:String {maxLength: 36, minLength: 36}
    string client_id;
    # The Client Secret that was displayed when the OAuth client was created.
    @constraint:String {maxLength: 42}
    string client_secret;
    # The OAuth grant type that will be used to generate the token. The value of this parameter must be `client_credentials`.
    "client_credentials" grant_type;
};

# Pricing information about a discount charge.
public type DiscountPricingOverride record {
    # Specifies which type of charge the discount charge applies to.
    "ONETIME"|"RECURRING"|"USAGE"|"ONETIMERECURRING"|"ONETIMEUSAGE"|"RECURRINGUSAGE"|"ONETIMERECURRINGUSAGE" applyDiscountTo?;
    # Allow the discount duration to be aligned with the billing period partially.
    # 
    # **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    boolean applyToBillingPeriodPartially?;
    # Only applicable if the discount charge is a fixed-amount discount.
    decimal discountAmount?;
    # Charge list of discount be applied to.
    # 
    # **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    DiscountApplyDetail[] discountApplyDetails?;
    # The discount class defines the sequence in which discount product rate plan charges are applied.
    # 
    # **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    string discountClass?;
    # Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account" discountLevel?;
    # Only applicable if the discount charge is a percentage discount.
    decimal discountPercentage?;
    # The manufacturer's suggested retail discount price for standalone charge.
    # 
    # Only applicable if the standalone discount charge is a fixed-amount discount.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    decimal originalDiscountAmount?;
    # The manufacturer's suggested retail discount percentage for standalone charge.
    # 
    # Only applicable if the standalone discount charge is a percentage discount.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    decimal originalDiscountPercentage?;
    # Specifies how Zuora changes the price of the charge each time the subscription renews.
    "NoChange"|"UseLatestProductCatalogPricing" priceChangeOption?;
};

public type PreviewResult_orderActions record {
    # The `orderItems` nested field is only available to existing Orders customers who already have access to the field.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    OrderItem[] orderItems?;
    # The container for order metrics.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    OrderMetric[] orderMetrics?;
    string sequence?;
    string 'type?;
};

public type ProxyActiondeleteRequest record {
    # A list of one or more IDs for the objects you want to delete.
    string[] ids;
    # The type of object that you are deleting.
    string 'type;
};

public type NextRunResponseType record {
    # Whether to automatically send emails after Auto-Post is complete.
    boolean autoEmail?;
    # Whether to automatically post the bill run after the bill run is created.
    boolean autoPost?;
    # Whether to automatically renew auto-renew subscriptions that are up for renewal.
    boolean autoRenewal?;
    # The batch of accounts for this bill run. 
    # 
    # **Values:** `AllBatches` or an array of `Batch`*n* where *n* is one of numbers 1 - 50, for example, `Batch7`.
    string[] batches?;
    # The day of the bill cycle. This field is only valid if the `batches` field is specified.
    # 
    # **Values:** 
    # - `AllBillCycleDays` or one of numbers 1 - 31 for an ad-hoc bill run
    # - `AllBillCycleDays`, one of numbers 1 - 31, or `AsRunDay` for a scheduled bill run
    string billCycleDay?;
    # The target account or subscriptions for this bill run. 
    BillRunFilterResponseType[] billRunFilters?;
    # The number of the bill run.
    string billRunNumber?;
    # The types of the charges to be excluded from the generation of billing documents.
    ("OneTime"|"Recurring"|"Usage")[] chargeTypeToExclude?;
    # The ID of the user who created the bill run.
    string createdById?;
    # The date and time when the bill run was created.
    string createdDate?;
    # The ID of the bill run.
    string id?;
    # The invoice date for this bill run, only valid for ad-hoc bill runs.
    string invoiceDate?;
    # The offset compared to the bill run execution date, only valid for scheduled bill runs.
    int invoiceDateOffset?;
    # Whether to suppress emails for invoices with zero total amount generated in this bill run after the bill run is complete. 
    boolean noEmailForZeroAmountInvoice?;
    BillRunScheduleResponseType schedule?;
    # The scheduled execution time for the bill run.
    string scheduledExecutionTime?;
    # The status of the bill run.
    "Pending"|"Processing"|"Completed"|"Error"|"Canceled"|"Posted"|"PostInProgress"|"CancelInProgress"|"RemoveInProgress"|"Paused" status?;
    # The target date for this bill run, only valid for ad-hoc bill runs.
    string targetDate?;
    # The offset compared to the bill run execution date, only valid for scheduled bill runs.
    int targetDateOffset?;
    # The ID of the user who last updated the bill run.
    string updatedById?;
    # The date and time when the bill run was last updated.
    string updatedDate?;
};

public type GetWorkflowsResponse record {
    # The list of workflows retrieved. 
    WorkflowDefinitionAndVersions[] data?;
    # An object containing pagination information for the list of workflows returned by the api
    GetWorkflowsResponse_pagination pagination?;
};

# Container for custom fields of a Product Rate Plan object.
public type ProductRatePlanObjectCustomFields record {
};

public type OrderActionCommon record {
    # The change reason set for an order action when the order action is updated.
    string changeReason?;
    # Container for custom fields of an Order Action object.
    OrderActionCustomFields customFields?;
};

public type GETPaymentMethodResponseApplePay record {
    # This field is only available for Apple Pay payment methods.
    string appleBIN?;
    # This field is only available for Apple Pay payment methods.
    string appleCardNumber?;
    # This field is only available for Apple Pay payment methods.
    # 
    # For Apple Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field.
    string appleCardType?;
    # This field is only available for Apple Pay payment methods.
    string appleExpiryDate?;
    # This field is only available for Apple Pay payment methods.
    string appleGatewayToken?;
};

public type ListEInvoiceFileTemplatesResponse record {
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Container for e-invoice file emplates.
    GetEInvoiceFileTemplateResponse[] templates?;
};

public type SystemHealthErrorResponse record {
    # Error status text.
    string 'error?;
    # The associated reason.
    string message?;
    # The system health api path having error.
    string path?;
    # Error status code.
    int status?;
    # The time when error happens.
    string timestamp?;
};

public type GETTaxationItemType record {
    # The ID of the Zuora user who created the taxation item. 
    string createdById?;
    # The date and time when the taxation item was created in the Zuora system, in `yyyy-mm-dd hh:mm:ss` format.
    string createdDate?;
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # Container for the finance information related to the taxation item.
    GETCMTaxItemTypeNew_financeInformation financeInformation?;
    # The ID of the taxation item.
    string id?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field. 
    string locationCode?;
    # The ID of the credit or debit memo associated with the taxation item.
    string memoItemId?;
    # The name of the taxation item.
    string name?;
    # The ID of the taxation item of the invoice, which the credit or debit memo is created from.
    string sourceTaxItemId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The amount of the tax applied to the credit or debit memo.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific credit or debit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date when the tax is applied to the credit or debit memo.
    string taxDate?;
    # The tax rate applied to the credit or debit memo.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate applied to the credit or debit memo.
    "Percentage"|"FlatFee" taxRateType?;
    # The ID of the Zuora user who last updated the taxation item.
    string updatedById?;
    # The date and time when the taxation item was last updated, in `yyyy-mm-dd hh:mm:ss` format. 
    string updatedDate?;
    *TaxationItemObjectCustomFields;
};

# 
public type QueryOrderLineItemsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedOrderLineItem[] data?;
|};

public type NestedCreditMemoOnExpand record {|
    # The unique identifier of the credit memo.
    string id?;
    # The unique identifier of the user who created the credit memo.
    string createdById?;
    # The date and time when the credit memo was created.
    string createdDate?;
    # The unique identifier of the user who last updated the credit memo.
    string updatedById?;
    # The date and time when the credit memo was last updated.
    string updatedDate?;
    # The applied amount of the credit memo.
    decimal appliedAmount?;
    # The remaining balance of credit memo.
    decimal balance?;
    # The ID of the bill-to contact associated with the credit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string billToContactId?;
    # The ID of the bill-to contact snapshot associated with the credit memo.
    # 
    # The value of this field is `null` if the bill rule [Preserve snapshot of bill-to and sold-to contacts when billing documents are posted](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Billing_Rules#Preserve_snapshot_of_bill-to_and_sold-to_contacts_when_billing_documents_are_posted) is disabled.
    string billToContactSnapshotId?;
    # The ID of the Zuora user who cancelled the credit memo.
    string cancelledById?;
    # The date and time when the credit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the credit memo.
    string comment?;
    # The currency of the credit memo.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # The amount of the discount on the credit memo.
    decimal discountAmount?;
    # The error code returned when the e-invoice file status is `Failed`. This code can either be a Zuora-generated error code or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorCode?;
    # The error message returned when the e-invoice file status is `Failed`. This message can either be a Zuora-generated error message or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorMessage?;
    # The ID of the e-invoice file generated for the credit memo.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceFileId?;
    # The status of the e-invoice file generation for the credit memo. 
    # 
    # - If e-invoice file generation succeeds, this field is either `Generated` or `Success`, and both the error code and message are empty, and the `eInvoiceFileId` field stores the ID of the generated e-invoice file.
    # - If a failure occurs during e-invoice file generation, this field is `Failed` and an error code and an error message are returned respectively in the `einvoiceErrorCode` and `einvoiceErrorMessage` fields. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    "Processing"|"Generated"|"Success"|"Failed" einvoiceStatus?;
    # Whether the credit memo is excluded from the rule of automatically applying credit memos to invoices.
    boolean excludeFromAutoApplyRules?;
    # The date of the exchange rate used. The date is in `yyyy-mm-dd` format.
    # Corresponds to the value specified in the Provider Exchange Rate Date column in the Import Foreign Exchange Rates template when you uploaded the rates through the Mass Updater.
    string exchangeRateDate?;
    # Whether the credit memo automatically applies to the invoice upon
    # posting.
    boolean autoApplyUponPosting?;
    # The date when the credit memo takes effect, in `yyyy-mm-dd` format.
    # For example, `2024-01-01`.
    string memoDate?;
    # The unique identification number of the credit memo.
    string memoNumber?;
    # The ID of the Zuora user who posted the credit memo.
    string postedById?;
    # The date and time when the credit memo was posted, in
    # `yyyy-mm-dd hh:mm:ss` format.
    string postedOn?;
    # A code identifying the reason for the transaction. The value
    # must be an existing reason code or empty.
    string reasonCode?;
    # The amount of the refund on the credit memo.
    decimal refundAmount?;
    # Whether the credit memo is reversed.
    boolean reversed?;
    # The ID of the sequence set associated with the credit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string sequenceSetId?;
    # The source of the credit memo.
    # 
    # Possible values:
    # - `BillRun`: The credit memo is generated by a bill run.
    # - `API`: The credit memo is created by calling the [Invoice and collect](https://developer.zuora.com/api-references/api/operation/POST_TransactionInvoicePayment) operation, or by calling the Orders, Order Line Items, or Fulfillments API operations.
    # - `ApiSubscribe`: The credit memo is created by calling the [Create subscription](https://developer.zuora.com/api-references/api/operation/POST_Subscription) and [Create account](https://developer.zuora.com/api-references/api/operation/POST_Account) operation.
    # - `ApiAmend`: The credit memo is created by calling the [Update subscription](https://developer.zuora.com/api-references/api/operation/PUT_Subscription) operation.
    # - `AdhocFromPrpc`: The credit memo is created from a product rate plan charge through the Zuora UI or by calling the [Create a credit memo from a charge](https://developer.zuora.com/api-references/api/operation/POST_CreditMemoFromPrpc) operation.
    # - `AdhocFromInvoice`: The credit memo is created from an invoice or created by reversing an invoice. You can create a credit memo from an invoice through the Zuora UI or by calling the [Create credit memo from invoice](https://developer.zuora.com/api-references/api/operation/POST_CreditMemoFromInvoice) operation. You can create a credit memo by reversing an invoice through the Zuora UI or by calling the [Reverse invoice](https://developer.zuora.com/api-references/api/operation/PUT_ReverseInvoice) operation.
    "BillRun"|"API"|"ApiSubscribe"|"ApiAmend"|"AdhocFromPrpc"|"AdhocFromInvoice" 'source?;
    # The ID of the credit memo source.
    # 
    # If a credit memo is generated from a bill run, the value is the
    # number of the corresponding bill run. Otherwise, the value is
    # `null`.
    string sourceId?;
    # The type of the credit memo source.
    "Subscription"|"Standalone"|"Invoice"|"Order"|"CreditMemo"|"Consolidation" sourceType?;
    # The status of the credit memo.
    "Draft"|"Posted"|"Canceled"|"Error"|"PendingForTax"|"Generating"|"CancelInProgress" status?;
    # The target date for the credit memo, in `yyyy-mm-dd` format. For example, `2024-01-01`.
    string targetDate?;
    # The amount of taxation.
    decimal taxAmount?;
    # The message about the status of tax calculation related to the credit memo. If tax calculation fails in one credit memo, this field displays the reason for the failure.
    string taxMessage?;
    # The status of tax calculation related to the credit memo.
    # 
    # **Note**: This field is only applicable to tax calculation by third-party tax engines.
    "Complete"|"Error" taxStatus?;
    # The ID of the sold-to contact snapshot associated with the
    # credit memo.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature
    # disabled, the value of this field is `null`.
    string soldToContactSnapshotId?;
    # Whether to automatically calculate taxes in the credit memo.
    boolean taxAutoCalculation?;
    # The total amount of the credit memo, including taxes.
    decimal totalAmount?;
    # The total amount of the credit memo, excluding taxes.
    decimal totalAmountWithoutTax?;
    # The calculated tax amount excluded due to the exemption.
    decimal totalTaxExemptAmount?;
    # Whether the credit memo was transferred to an external
    # accounting system. This field is used for integration with
    # accounting systems such as NetSuite.
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The ID of a referred invoice.
    string invoiceId?;
    # The ID of the customer account associated with the credit memo.
    string accountId?;
    # EXPANDABLE.
    # The account associated with the credit memo.
    record {} account?;
    # EXPANDABLE.
    # The bill-to contact on the account.
    record {} billToContact?;
    # EXPANDABLE.
    # The credit memo items on the current credit memo.
    record {}[] creditMemoItems?;
    # EXPANDABLE.
    # The credit memo applications associated with the current credit memo.
    record {}[] creditMemoApplications?;
|};

# Container for the credit memo that is automatically generated when writing off invoices.
public type PUTWriteOffInvoiceResponse_creditMemo record {
    # The ID of the credit memo that is created when the invoice is written off.
    string id?;
};

public type CustomObjectBulkJobErrorResponse record {
    # The error code.
    int code?;
    # The error message.
    string message?;
    # Record data from an object
    CustomObjectRecordWithAllFields 'record?;
    # The CSV record row number. The custom object record data starts at the second row because the first row is the CSV header.
    int row?;
};

public type OrderActionRatePlanUsageFlatFeePricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    decimal listPrice?;
};

public type GETChargeDefinitionPricingTier_inner record {
    # The code corresponding to the currency for the tier's price.
    string currency?;
    # The specific amount for a fixed discount. The field is applicable only for charges based on the Discount-Fixed Amount charge model.
    decimal discountAmount?;
    # The percentage of discount for a percentage discount. The field is applicable only for charges based on the Discount-Percentage charge model.
    decimal discountPercentage?;
    # The end number of a range of units for the tier. The field is applicable only for charges based on the Tiered Pricing or Tiered with Overage Pricing charge model.
    decimal endingUnit?;
    # Indicates whether the price is an overage price, which is the price when usage surpasses the last defined tier.
    decimal overagePrice?;
    # The price of the tier if the price format is flat fee, or the price of each unit in the tier if the price format is per unit.
    decimal price?;
    # The starting number of a range of units for the tier. The field is applicable only for charges based on the Tiered Pricing or Tiered with Overage Pricing charge model.
    decimal startingUnit?;
};

public type StopWorkflowRunError_errors record {
    # The error code.
    string code?;
    # Status code.
    decimal status?;
    # Error title.
    string title?;
};

public type GetInvoiceApplicationPartType record {
    # The amount that is applied to the invoice.
    decimal appliedAmount?;
    # The ID of the Zuora user who created the payment or credit memo.
    string createdById?;
    # The date and time when the payment or credit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-12-01 15:31:10.
    string createdDate?;
    # The ID of credit memo that is applied to the specified invoice.
    string creditMemoId?;
    # The ID of the payment that is applied to the specified invoice.
    string paymentId?;
    # The ID of the Zuora user who last updated the payment or credit memo.
    string updatedById?;
    # The date and time when the payment or credit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2018-01-02 11:42:16.
    string updatedDate?;
};

public type POSTPaymentMethodResponseDecryption record {
    # The payment amount contained within the encrypted token.
    string amount?;
    # The ID of newly processed payment,
    string paymentId?;
    # ID of the newly-created payment method.
    string paymentMethodId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type POSTDelayAuthorizeCapture record {
    # The ID of the customer account. Either `accountId` or `accountNumber` is required.
    string accountId?;
    # The number of the customer account. Either `accountNumber` or `accountId` is required.
    string accountNumber?;
    # The amount of the trasaction.
    decimal amount;
    # The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
    PUTVerifyPaymentMethodType_gatewayOptions gatewayOptions?;
    # The order ID for the specific gateway.
    # 
    # The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field.
    string gatewayOrderId;
    # Payment transaction source used to differentiate the transaction source in Stored Credential Transaction framework.
    #   - `C_Unscheduled`: Cardholder-initiated transaction (CIT) that does not occur on scheduled or regularly occurring dates.
    #   - `M_Recurring`: Merchant-initiated transaction (MIT) that occurs at regular intervals.
    #   - `M_Unscheduled`: Merchant-initiated transaction (MIT) that does not occur on scheduled or regularly occurring dates.
    #   - `M_MOTO`: Mail Order Telephone Order (MOTO) payment transaction. This option is only available for credit card payments on Stripe v2. See [Overview of Stripe payment gateway integration](https://knowledgecenter.zuora.com/Zuora_Collect/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration) for more information.
    "C_Unscheduled"|"M_Recurring"|"M_Unscheduled"|"M_MOTO" mitTransactionSource?;
    # The ID of the payment gateway instance.
    string paymentGatewayId?;
    # A text, rendered on a cardholder’s statement, describing a particular product or service purchased by the cardholder.
    string softDescriptor?;
    # The phone number that relates to the soft descriptor, usually the phone number of customer service.
    string softDescriptorPhone?;
};

public type UsageFlatFeePricingUpdate record {
    *PriceChangeParams;
    decimal listPrice?;
    # The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.
    decimal originalListPrice?;
};

# A workflow.
public type WorkflowDefinitionAndVersions record {
    # Information of the active version. 
    WorkflowDefinitionAndVersions_active_version active_version?;
    # Indicates whether the callout trigger is enabled for the retrieved workflow.
    boolean calloutTrigger?;
    # The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.
    string createdAt?;
    # The description of the workflow definition.
    string description?;
    # The unique ID of the workflow definition.
    int id?;
    # The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled.
    string interval?;
    # The list of inactive workflow versions retrieved. Maximum number of versions retrieved is 10.  
    Workflow[] latest_inactive_verisons?;
    # The name of the workflow definition.
    string name?;
    # Indicates whether the ondemand trigger is enabled for the workflow.
    boolean ondemandTrigger?;
    # Indicates whether the scheduled trigger is enabled for the workflow.
    boolean scheduledTrigger?;
    # The status of the workflow definition.
    string status?;
    # The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled.
    string timezone?;
    # The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.
    string updatedAt?;
};

public type GETPaymentPartType record {
    # The amount of the payment part.
    decimal amount?;
    # The ID of the Zuora user who created the payment part.
    string createdById?;
    # The date and time when the payment part was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the debit memo associated with the payment part.
    string debitMemoId?;
    # The ID of the payment part.
    string id?;
    # The ID of the invoice associated with the payment part.
    string invoiceId?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The ID of the Zuora user who last updated the payment part.
    string updatedById?;
    # The date and time when the payment part was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

public type GETPaymentScheduleItemResponse record {
    # ID of the customer account that owns the payment schedule item, for example `402880e741112b310149b7343ef81234`.
    string accountId?;
    # The total amount of the payment schedule item.
    decimal amount?;
    # The remaining balance of payment schedule item.
    decimal balance?;
    GETPaymentScheduleItemResponse_billingDocument billingDocument?;
    # The reason for the cancellation of payment schedule item.  
    string cancellationReason?;
    # The ID of the user who created the payment schedule item.
    string createdById?;
    # The date and time when the payment schedule item was created.
    string createdDate?;
    # The currency of the payment.
    string currency?;
    # The description of the payment schedule item.
    string description?;
    # The error message indicating if the error is related to the configuration or the payment collection.
    string errorMessage?;
    # ID of the payment schedule item. For example, `412880e749b72b310149b7343ef81346`.
    string id?;
    # Number of the payment schedule item.
    string number?;
    # ID of the payment gateway of the payment schedule item.
    string paymentGatewayId?;
    # ID of the payment that is created by the payment schedule item， or linked to the payment schedule item. This field is only available if the request doesn’t specify `zuora-version`, or `zuora-version` is set to a value equal to or smaller than `336.0`. 
    string paymentId?;
    # ID of the payment method of the payment schedule item.
    string paymentMethodId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # ID of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`,
    string paymentScheduleId?;
    # Number of the payment schedule that contains the payment schedule item, for example, `ID402880e749b72b310149b7343ef80005`,
    string paymentScheduleNumber?;
    # Container for payments linked to the payment schedule item. 
    LinkedPaymentID[] psiPayments?;
    # At which hour in the day in the tenant’s timezone this payment will be collected. If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs.
    int runHour?;
    # The scheduled date when the payment is processed.
    string scheduledDate?;
    # Indicates if the payment created by the payment schedule item is a standalone payment.
    boolean standalone?;
    # ID of the payment method of the payment schedule item.
    # 
    # - `Pending`: Waiting for processing.
    # - `Processed`: The payment has been collected.
    # - `Error`: Failed to collect the payment.
    # - `Canceled`: After a pending payment schedule item is canceled by the user, the item is marked as `Canceled`.
    "Pending"|"Processed"|"Error"|"Canceled" status?;
    # Returns `true` if the request was processed successfully. 
    boolean success?;
    # The ID of the user who updated the payment schedule item.
    string updatedById?;
    # The date and time when the payment schedule item was last updated.
    string updatedDate?;
    *PaymentScheduleItemCustomFields;
};

public type CreatePMPayPalEC record {
    # ID of a PayPal billing agreement.
    string BAID?;
    # Email address associated with the payment method.
    string email?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type Databackfill_jobs_body record {
    DataBackfillJob 'type;
    # A file containing the data about the fields that you want to backfill. This file must be a `.csv` file or a zipped `.csv` file. The maximum file size is 4 MB. The data in the file must be formatted according to the data backfill action type that you want to perform.
    # 
    # You can download a file template to view all fields supported for your data backfill. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Perform_data_backfill#Perform_data_backfill" target="_blank">Perform data backfill</a>.
    record {byte[] fileContent; string fileName;} file;
    # An MD5 checksum that is used to validate the integrity of the uploaded file.
    @constraint:String {maxLength: 32, minLength: 32}
    string checksum?;
};

# Information about the first term of the subscription.
public type CreateSubscription_terms_initialTerm record {
    # Duration of the first term in months, years, days, or weeks, depending on the value of the `periodType` field. Only applicable if the value of the `termType` field is `TERMED`.
    int period?;
    # Unit of time that the first term is measured in. Only applicable if the value of the `termType` field is `TERMED`.
    "Month"|"Year"|"Day"|"Week" periodType?;
    # Start date of the first term, in YYYY-MM-DD format.
    string startDate?;
    # Type of the first term. If the value of this field is `TERMED`, the first term has a predefined duration based on the value of the `period` field. If the value of this field is `EVERGREEN`, the first term does not have a predefined duration.
    "TERMED"|"EVERGREEN" termType;
};

# Container for the finance information related to the credit memo item.
public type GETCreditMemoItemType_financeInformation record {
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    string deferredRevenueAccountingCode?;
    # The type of the deferred revenue accounting code, such as Deferred Revenue.'
    string deferredRevenueAccountingCodeType?;
    # The accounting code that maps to an on account in your accounting system.
    string onAccountAccountingCode?;
    # The type of the accounting code that maps to an on account in your accounting system.
    string onAccountAccountingCodeType?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    string recognizedRevenueAccountingCode?;
    # The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount.
    string recognizedRevenueAccountingCodeType?;
    # The name of the revenue recognition rule governing the revenue schedule.
    string revenueRecognitionRuleName?;
    # Revenue schedule number. The revenue schedule number is always prefixed with "RS", for example, RS-00000001.
    string revenueScheduleNumber?;
};

public type InvoicesBatchPostResponseType record {
    # The container for a list of posted invoices.
    InvoicePostResponseType[] invoices?;
    # Returns `true` if the request has one of invoices was posted successfully.
    boolean success?;
};

# The task usage of a particular day.
public type WorkflowUsage record {
    # The date when the usage record is created.
    string date?;
    WorkflowUsage_values values?;
};

# Container for the finance information of a product rate plan charge.
public type FinanceInformation_1 record {
    # The accounting code for accounts receivable.
    string? accountsReceivableAccountingCode?;
    # The type of the accounting code for accounts receivable.
    string? accountsReceivableAccountingCodeType?;
    # The accounting code for adjustment liability. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string adjustmentLiabilityAccountingCode?;
    # The type associated with the adjustment liability accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string adjustmentLiabilityAccountingCodeType?;
    # The accounting code for adjustment revenue. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string adjustmentRevenueAccountingCode?;
    # The type associated with the adjustment revenue accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string adjustmentRevenueAccountingCodeType?;
    # The accounting code for contract asset. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractAssetAccountingCode?;
    # The type associated with the contract asset accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractAssetAccountingCodeType?;
    # The accounting code for contract liability. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractLiabilityAccountingCode?;
    # The type associated with the contract liability accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractLiabilityAccountingCodeType?;
    # The accounting code for contract recognized revenue. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractRecognizedRevenueAccountingCode?;
    # The type associated with the contract recognized revenue accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractRecognizedRevenueAccountingCodeType?;
    # The accounting code for deferred revenue, such as Monthly Recurring Liability.
    string deferredRevenueAccountingCode?;
    # The type associated with the deferred revenue accounting code, such as Deferred Revenue. 
    string? deferredRevenueAccountingCodeType?;
    # The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. 
    string recognizedRevenueAccountingCode?;
    # The type associated with the recognized revenue accounting code, such as Sales Revenue or Sales Discount.
    string? recognizedRevenueAccountingCodeType?;
    # The accounting code for unbilled receivables. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string? unbilledReceivablesAccountingCode?;
    # The type associated with the unbilled receivables accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string unbilledReceivablesAccountingCodeType?;
};

# The `deliverySchedule` is used for the Delivery Pricing charge model only. 
# 
# **Note**: The Delivery Pricing charge model is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. To manage and access this feature through the self-service interface, see [Enable billing features by yourself](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Billing_Settings/Manage_Features) in the Knowledge Center. You can check **Delivery Pricing** in **Billing Settings** > **Enable Charge Types / Models**.
public type GETDeliveryScheduleType record {
    # Specifies delivery frequency for the delivery schedule.
    "Weekly" frequency?;
    # Indicates whether delivery occurs on Friday.
    boolean friday?;
    # Indicates whether delivery occurs on Monday.
    boolean monday?;
    # Indicates whether delivery occurs on Saturday.
    boolean saturday?;
    # Indicates whether delivery occurs on Sunday.
    boolean sunday?;
    # Indicates whether delivery occurs on Thursday.
    boolean thursday?;
    # Indicates whether delivery occurs on Tuesday.
    boolean tuesday?;
    # Indicates whether delivery occurs on Wednesday.
    boolean wednesday?;
};

# Container for finance information of the rate plan charge.
public type FinanceInformation_2 record {
    # The accounting code for accounts receivable.
    string? accountsReceivableAccountingCode?;
    # The type of the accounting code for accounts receivable.
    string? accountsReceivableAccountingCodeType?;
    # The accounting code for adjustment liability. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string adjustmentLiabilityAccountingCode?;
    # The type associated with the adjustment liability accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string? adjustmentLiabilityAccountingCodeType?;
    # The accounting code for adjustment revenue. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string adjustmentRevenueAccountingCode?;
    # The type associated with the adjustment revenue accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string? adjustmentRevenueAccountingCodeType?;
    # The accounting code for contract asset. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractAssetAccountingCode?;
    # The type associated with the contract asset accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractAssetAccountingCodeType?;
    # The accounting code for contract liability. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractLiabilityAccountingCode?;
    # The type associated with the contract liability accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractLiabilityAccountingCodeType?;
    # The accounting code for contract recognized revenue. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractRecognizedRevenueAccountingCode?;
    # The type associated with the contract recognized revenue accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractRecognizedRevenueAccountingCodeType?;
    # The accounting code for deferred revenue, such as Monthly Recurring Liability.
    string deferredRevenueAccountingCode?;
    # The type associated with the deferred revenue accounting code, such as Deferred Revenue. 
    string? deferredRevenueAccountingCodeType?;
    # The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    string recognizedRevenueAccountingCode?;
    # The type associated with the recognized revenue accounting code, such as Sales Revenue or Sales Discount.
    string? recognizedRevenueAccountingCodeType?;
    # The accounting code for unbilled receivables. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string unbilledReceivablesAccountingCode?;
    # The type associated with the unbilled receivables accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string unbilledReceivablesAccountingCodeType?;
};

# Container for the finance information related to the debit memo item.
public type GETDebitMemoItemTypewithSuccess_financeInformation record {
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    string deferredRevenueAccountingCode?;
    # The type of the deferred revenue accounting code, such as Deferred Revenue.
    string deferredRevenueAccountingCodeType?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    string recognizedRevenueAccountingCode?;
    # The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount.
    string recognizedRevenueAccountingCodeType?;
    # The name of the revenue recognition rule governing the revenue schedule.
    string revenueRecognitionRuleName?;
    # The revenue schedule number. The revenue schedule number is always prefixed with "RS", for example, RS-00000001.
    string revenueScheduleNumber?;
};

# Container for finance information of the rate plan charge.
public type FinanceInformation_3 record {
    # The accounting code for accounts receivable.
    string? accountsReceivableAccountingCode?;
    # The type of the accounting code for accounts receivable.
    string? accountsReceivableAccountingCodeType?;
    # The accounting code for adjustment liability. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string adjustmentLiabilityAccountingCode?;
    # The type associated with the adjustment liability accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string adjustmentLiabilityAccountingCodeType?;
    # The accounting code for adjustment revenue. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string adjustmentRevenueAccountingCode?;
    # The type associated with the adjustment revenue accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string adjustmentRevenueAccountingCodeType?;
    # The accounting code for contract asset. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractAssetAccountingCode?;
    # The type associated with the contract asset accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractAssetAccountingCodeType?;
    # The accounting code for contract liability. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractLiabilityAccountingCode?;
    # The type associated with the contract liability accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractLiabilityAccountingCodeType?;
    # The accounting code for contract recognized revenue. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractRecognizedRevenueAccountingCode?;
    # The type associated with the contract recognized revenue accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string contractRecognizedRevenueAccountingCodeType?;
    # The accounting code for deferred revenue, such as Monthly Recurring Liability.
    string deferredRevenueAccountingCode?;
    # The type associated with the deferred revenue accounting code, such as Deferred Revenue. 
    string? deferredRevenueAccountingCodeType?;
    # The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    string recognizedRevenueAccountingCode?;
    # The type associated with the recognized revenue accounting code, such as Sales Revenue or Sales Discount.
    string? recognizedRevenueAccountingCodeType?;
    # The accounting code for unbilled receivables. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string unbilledReceivablesAccountingCode?;
    # The type associated with the unbilled receivables accounting code. 
    # 
    # **Note**: This field is only available if you have the Zuora Billing - Revenue Integration feature enabled.
    string unbilledReceivablesAccountingCodeType?;
};

# **Note:** The schema of the `result` nested field is the same as the response body schema of either the ["Create an order"](https://developer.zuora.com/api-references/api/operation/POST_Order) or the ["Preview an order"](https://developer.zuora.com/api-references/api/operation/POST_PreviewOrder) operation, depending on the purpose of the job.
# 
# The following schema for the nested `result` field is defined as the response body schema of "Create an order". See [Preview an Order](https://developer.zuora.com/api-references/api/operation/POST_PreviewOrder) for the response body schema of "Preview an order". 
public type JobResult record {
    *CommonResponse;
    # The account ID for the order. This field is returned only when the `returnIds` query parameter in the "Create an order asynchronously" operation is set to `true`.
    string accountId?;
    # The account number for the order.
    string accountNumber?;
    # An array of the credit memo IDs that are generated in the "Create an order asynchronously" operation. This field is returned only when the `returnIds` query parameter in the "Create an order asynchronously" operation is set to `true`.
    string[] creditMemoIds?;
    # An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.
    string[] creditMemoNumbers?;
    # An array of the invoice IDs that are generated in the "Create an order asynchronously" operation. This field is returned only when the `returnIds` query parameter in the "Create an order asynchronously" operation is set to `true`.
    string[] invoiceId?;
    # An array of the invoice numbers generated in this order request. Normally it includes one invoice number only, but can include multiple items when a subscription was tagged as invoice separately.
    string[] invoiceNumbers?;
    # The ID of the order created. This field is returned only when the `returnIds` query parameter in the "Create an order asynchronously" operation is set to `true`.
    string orderId?;
    JobResult_orderLineItems[] orderLineItems?;
    # The order number of the order created.
    string orderNumber?;
    # The total amount collected in this order request.
    string paidAmount?;
    # The ID of the payment that is collected in the "Create an order asynchronously" operation. This field is returned only when the `returnIds` query parameter in the "Create an order asynchronously" operation is set to `true`.
    string paymentId?;
    # The payment number that collected in this order request.
    string paymentNumber?;
    # **Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.
    # 
    # The ramp definitions created by this order request.
    JobResult_ramps[] ramps?;
    # Status of the order. `Pending` is only applicable for an order that contains a `CreateSubscription` order action.
    "Draft"|"Pending"|"Completed" status?;
    # Container for the IDs of the subscriptions in the order. This field is returned only when the `returnIds` query parameter in the "Create an order asynchronously" operation is set to `true`.
    string[] subscriptionIds?;
    # **Note:** This field is in Zuora REST API version control. Supported minor versions are 222.0 or earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.
    # 
    # Container for the subscription numbers of the subscriptions in an order.
    string[] subscriptionNumbers?;
    # **Note:** This field is in Zuora REST API version control. Supported minor versions are 223.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.
    # 
    # Container for the subscription numbers and statuses in an order.
    JobResult_subscriptions[] subscriptions?;
};

public type PUTSrpRemoveType record {
    # The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call. 
    string bookingDate?;
    # Effective date of the new subscription, as yyyy-mm-dd.
    string contractEffectiveDate;
    # The date when the customer accepts the contract in yyyy-mm-dd format.
    # 
    # If this field is not set:
    # 
    # * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date.
    # * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.
    # 
    # The billing trigger dates must follow this rule:
    # 
    # contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
    string customerAcceptanceDate?;
    # An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.
    # 
    # **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalCatalogPlanId?;
    # The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.
    # 
    # **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalIdSourceSystem?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # ID of a rate plan for this subscription. This can be the latest version or any history version of ID.
    string ratePlanId?;
    # The date when the remove amendment is activated in yyyy-mm-dd format.
    # 
    # You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.
    # 
    # The billing trigger dates must follow this rule:
    # 
    # contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
    string serviceActivationDate?;
    # Number of a rate plan for this subscription.
    string subscriptionRatePlanNumber?;
};

public type InvoiceFile record {
    # The ID of the invoice PDF file. This is the ID for the file object and different from the file handle ID in the `pdfFileUrl` field. To open a file, you have to use the file handle ID.
    string id?;
    # The REST URL for the invoice PDF file. Click the URL to open the invoice PDF file.
    string pdfFileUrl?;
    # The version number of the invoice PDF file.
    int versionNumber?;
};

# A workflow.
public type Workflow record {
    # Indicates whether the callout trigger is enabled for the retrieved workflow.
    boolean calloutTrigger?;
    # The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.
    string createdAt?;
    # The description of the workflow.
    string description?;
    # The unique ID of the workflow.
    int id?;
    # The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled.
    string interval?;
    # The name of the workflow.
    string name?;
    # Indicates whether the ondemand trigger is enabled for the workflow.
    boolean ondemandTrigger?;
    # Indicates whether the scheduled trigger is enabled for the workflow.
    boolean scheduledTrigger?;
    # The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled.
    string timezone?;
    # The type of the workflow. Currently the only valid value is 'Workflow::Setup'.
    "Workflow::Setup"|"Workflow::Instance" 'type?;
    # The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.
    string updatedAt?;
    # The version number of the workflow. 
    string version?;
};

public type ExpandedPrepaidBalance record {|
    # The unique identifier of the prepaid balance.
    string id?;
    # The unique identifier of the user who created the payment application.
    string createdById?;
    # The date and time when the payment application was created.
    string createdDate?;
    # The unique identifier of the user who last updated the payment application.
    string updatedById?;
    # The date and time when the payment application was last updated.
    string updatedDate?;
    # The name of the prepaid balance.
    string name?;
    # The total amount of all prepaid balance funds.
    decimal totalFund?;
    # The current prepaid balance.
    decimal balance?;
    # End date of the validity period.
    string endDate?;
    # Start date of the validity period.
    string startDate?;
    # The ID of the customer account to which the prepaid balance belongs.
    string accountId?;
    # If it belongs to a subscription, the original subscription ID.
    string origSubscriptionId?;
    # The units of measure for prepayment charge. Units of measure
    # are configured in the web-based UI. Your values depend on your
    # configuration in **Billing Settings**.
    # 
    # **Values**: a valid unit of measure
    string uOM?;
    # The state of the prepaid balance. 
    "ACTIVE"|"EXPIRED" prepaidBalanceState?;
    # The type of the prepaid balance.
    int:Signed32? prepaidType?;
    NestedAccountOnExpand account?;
    NestedSubscriptionOnExpand origSubscription?;
|};

public type ChargePreviewMetrics record {
    string chargeNumber?;
    ChargePreviewMetrics_cmrr cmrr?;
    string originRatePlanId?;
    string productRatePlanChargeId?;
    string productRatePlanId?;
    # Number of a subscription rate plan for this subscription.
    string subscriptionRatePlanNumber?;
    ChargePreviewMetrics_tax tax?;
    ChargePreviewMetrics_tcb tcb?;
    ChargePreviewMetrics_tcv tcv?;
};

# Information about an order action of type `CreateSubscription`.
public type PreviewOrderCreateSubscription record {
    # The ID of the bill-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string billToContactId?;
    # The code of currency that is used for this subscription. If the currency is not selected, the default currency from the account will be used.
    # 
    # All subscriptions in the same order must use the same currency. The currency for a subscription cannot be changed.
    # 
    # **Note**: 
    #   This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    @constraint:String {maxLength: 3}
    string currency?;
    # The number of the invoice group associated with the subscription.
    # 
    # After enabling the Invoice Grouping feature, you can specify invoice group numbers to bill subscriptions and order line items based on specific criteria. For the same account, Zuora generates separate invoices for subscriptions and order line items, each identified by unique invoice group numbers. For more information, see [Invoice Grouping](https://knowledgecenter.zuora.com/Billing/Subscriptions/Invoice_Grouping).
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request during subscription creation, the value of this field is automatically set to `null` in the response body.
    string? invoiceGroupNumber?;
    # Specifies whether the subscription appears on a separate invoice when Zuora generates invoices.
    boolean invoiceSeparately?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # Information about a new account that will own the subscription. Only available if you have enabled the Owner Transfer feature.
    # 
    # **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    # 
    # If you do not set this field or the `subscriptionOwnerAccountNumber` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `subscriptionOwnerAccountNumber` field.
    PreviewOrderCreateSubscription_newSubscriptionOwnerAccount newSubscriptionOwnerAccount?;
    # Notes about the subscription. These notes are only visible to Zuora users.
    @constraint:String {maxLength: 500}
    string notes?;
    # The name of the payment term associated with the subscription. For example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string paymentTerm?;
    # The ID of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string soldToContactId?;
    # List of rate plans associated with the subscription.
    PreviewOrderRatePlanOverride[] subscribeToRatePlans?;
    # Subscription number of the subscription. For example, A-S00000001.
    # 
    # If you do not set this field, Zuora will generate the subscription number.
    @constraint:String {maxLength: 100}
    string subscriptionNumber?;
    # Account number of an existing account that will own the subscription. For example, A00000001.
    # 
    # If you do not set this field or the `newSubscriptionOwnerAccount` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `newSubscriptionOwnerAccount` field.
    @constraint:String {maxLength: 70}
    string subscriptionOwnerAccountNumber?;
    # Container for the terms and renewal settings of the subscription.
    PreviewOrderCreateSubscription_terms terms?;
};

public type ProxyActionupdateRequest record {
    # 
    ZObject_update[] objects;
    # 
    string 'type;
};

public type PostCustomObjectDefinitionFieldDefinitionRequest record {
    # Indicates whether to use this field as the display name of the custom object when being linked to another custom object.
    # 
    # This field applies only to the Text custom field type:
    # 
    # - The `type` field is `string`.
    # - The `enum` field is not specified.
    boolean displayName?;
    # The data format of the custom field
    string format?;
    # The UI label of the custom field
    string label;
    # The maximum length of string that can be stored in the custom field.
    # 
    # This field applies only to the following custom field types:
    # 
    # - Text:
    #   - The `type` field is `string`.
    #   - The `format` field is not specified or is `url`.
    #   - The `enum` field is not specified.
    # - Picklist:
    #   - The `type` field is `string`.
    #   - The `enum` field is specified.
    #   - The `multiselect` field is not specified or is `false`.
    # - Multiselect:
    #   - The `type` field is `string`.
    #   - The `enum` field is specified.
    #   - The `multiselect` field is `true`.
    # 
    # If the custom field is filterable, the value of `maxLength` must be 512 or less.
    int maxLength?;
    # Indicates whether this is a multiselect custom field.
    # 
    # This field applies only to the Picklist or Multiselect custom field types:
    # 
    # - The `type` field is `string`.
    # - The `maxLength` field is specified.
    # - The `enum` field is specified.
    boolean multiselect?;
    # The data type of the custom field
    string 'type;
};

public type GETBillingDocumentsResponseType record {
    # The ID of the customer account associated with the billing document.
    string accountId?;
    # The total amount of the billing document.
    decimal amount?;
    # The balance of the billing document.
    decimal balance?;
    # The date of the billing document. The date can be the invoice date for invoices, credit memo date for credit memos, or debit memo date for debit memos.
    string documentDate?;
    # The number of the billing document.
    string documentNumber?;
    # The type of the billing document.
    "Invoice"|"CreditMemo"|"DebitMemo" documentType?;
    # The ID of the billing document.
    string id?;
    # The current status of the billing document.
    "Draft"|"Posted"|"Canceled"|"Error" status?;
    # The currency of the billing document.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
};

public type PostInvoiceType record {
    # The ID of the account associated with the invoice. 
    # 
    # You must specify either `accountNumber` or `accountId` for a customer account. If both of them are specified, they must refer to the same customer account.
    string accountId?;
    # The Number of the account associated with the invoice.
    # You must specify either `accountNumber` or `accountId` for a customer account. If both of them are specified, they must refer to the same customer account.
    string accountNumber?;
    # Whether invoices are automatically picked up for processing in the corresponding payment run.
    boolean autoPay = false;
    # Container for bill-to or sold-to contact information. A new Contact will be created under the invoice owner account.
    #             
    # **Note**: If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body.
    PostCreateInvoiceContactType billToContact?;
    # The ID of the bill-to contact associated with the invoice. This field is mutually exclusive with the `billToContact` field.
    # 
    # **Note**: If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body.
    string billToContactId?;
    # Comments about the invoice.
    string comments?;
    # The code of a currency as defined in Billing Settings through the Zuora UI.
    # 
    # If you do not specify a currency during standalone invoice creation, the default account currency is applied. The currency that you specify in the request must be configured and activated in Billing Settings.
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    string currency?;
    # It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item or Reporting currency item or both).
    #       
    # **Note**: The API custom rate feature is permission controlled.
    @constraint:Array {maxLength: 2}
    InvoiceWithCustomRatesType[] customRates?;
    # The date by which the payment for this invoice is due, in `yyyy-mm-dd` format.
    string dueDate?;
    # The date that appears on the invoice being created, in `yyyy-mm-dd` format. The value cannot fall in a closed accounting period.
    string invoiceDate;
    # Container for invoice items. The maximum number of invoice items is 1,000.
    # 
    # **Note**: For the "Create a standalone invoice" and "Create standalone invoices" operations, note the following:
    #   - If tax has been calculated by an external tax engine, you need to create a standalone invoice with both `invoiceItems` and `taxItems`. The `taxItems` corresponds to the tax information processed by this external tax engine. In this case, you should not specify the `taxMode` and `taxCode` nested fields of the `invoiceItems` field. Instead, you need to specify the `taxMode` and `taxCode` nested fields of the `taxItems` field. You need to specify the `taxMode` field as `TaxExclusive`.
    #   - If tax has not been calculated by an external tax engine, you can create a standalone invoice only with `invoiceItems`, and decide whether Zuora includes the tax in the quoted charge price and invoice item by specifying the `taxMode` nested field of the `invoiceItems` field as either `TaxExclusive` or `TaxInclusive`. Meanwhile, you need to specify the `taxCode` field, indicating the charge price and invoice item are taxable.
    PostInvoiceItemType[] invoiceItems?;
    # A customized invoice number with the following format requirements:
    # - Max length: 32 characters
    # - Acceptable characters: a-z,A-Z,0-9,-,_,
    # 
    # Purely numerical prefixes or prefixes ending with a number are supported for standalone invoices. For example, you can use `202310000300`, `2003`, `INV202310000300`, or `2023-09-100009785` as invoice numbers.
    # 
    # The value must be unique in the system, otherwise it may cause issues with bill runs and subscribe/amend. Check out [things to note and troubleshooting steps](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/IA_Invoices/Unified_Invoicing/Import_external_invoices_as_standalone_invoices?#Customizing_invoice_number). 
    string invoiceNumber?;
    # The ID or name of the payment term associated with the invoice. For example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # **Note**: If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body.
    string paymentTerm?;
    # The ID or name of the sequence set associated with the invoice.
    # 
    # **Note**: If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body.
    string sequenceSet?;
    # Container for bill-to or sold-to contact information. A new Contact will be created under the invoice owner account.
    #             
    # **Note**: If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body.
    PostCreateInvoiceContactType soldToContact?;
    # The ID of the sold-to contact associated with the invoice. This field is mutually exclusive with the `soldToContact` field.
    # 
    # **Note**: If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body.
    string soldToContactId?;
    # Whether the sold-to contact and bill-to contact are the same entity. This field is mutually exclusive with the `soldToContact` and `soldToContactId` fields.
    # 
    # The created invoice has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:
    # 
    # - This field is set to `true`. 
    # - A bill-to contact or bill-to contact ID is specified.
    # - Neither sold-to contact nor sold-to contact ID is specified.
    # 
    # **Note**: If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body.
    boolean soldToSameAsBillTo = false;
    # The status of invoice. By default, the invoice status is Draft.
    # 
    # When creating an invoice, if you set this field to `Posted`, the invoice is created and posted directly.
    "Draft"|"Posted" status = "Draft";
    # The ID of the invoice template associated with the invoice.
    # 
    # **Note**: If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body.
    string templateId?;
    "Processing"|"Error"|"Ignore"|"Yes"|"No" transferredToAccounting?;
    *InvoiceObjectNSFields;
    *InvoiceObjectCustomFields;
};

public type POSTExecuteInvoiceScheduleRequest record {
    # The ID of the invoice schedule item to be executed.
    # 
    # The item must be the earliest pending schedule item. If all the invoice schedule items have been processed and credit is needed to be generated, do not specify this field in the request.
    string scheduleItemId?;
};

# Container for the terms and renewal settings of the subscription.
public type TermInfo record {
    # Specifies whether the subscription automatically renews at the end of the each term. Only applicable if the type of the first term is `TERMED`.
    boolean autoRenew?;
    # Information about the first term of the subscription.
    TermInfo_initialTerm initialTerm;
    # Specifies the type of the terms that follow the first term if the subscription is renewed. Only applicable if the type of the first term is `TERMED`.
    # 
    # * `RENEW_WITH_SPECIFIC_TERM` - Each renewal term has a predefined duration. The first entry in `renewalTerms` specifies the duration of the second term of the subscription, the second entry in `renewalTerms` specifies the duration of the third term of the subscription, and so on. The last entry in `renewalTerms` specifies the ultimate duration of each renewal term.
    # * `RENEW_TO_EVERGREEN` - The second term of the subscription does not have a predefined duration.
    "RENEW_WITH_SPECIFIC_TERM"|"RENEW_TO_EVERGREEN" renewalSetting?;
    TermInfo_renewalTerms renewalTerms?;
};

public type BillRunFilterResponseType record {
    # The target account of the bill run.
    string accountId?;
    # To create bill run at account level or subscription level.
    "Account"|"Subscription" filterType?;
    # The target subscripiton ID of the account. 
    string subscriptionId?;
};

public type RecurringTieredPricingUpdate record {
    *PriceChangeParams;
    @constraint:Number {minValue: 0}
    decimal quantity?;
    ChargeTier[] tiers?;
};

public type POSTCreateOpenPaymentMethodTypeResponse record {
    # The API name of the custom payment method type.
    string paymentMethodType?;
    # The date when the custom payment method type was published. It is empty if the custom payment method type has not been published yet.
    string publishDate?;
    # The revision number of the custom payment method type, which starts from 1 and increases by 1 when you update a published revision for the first time.
    int revision?;
    # The status of the custom payment method type.
    string status?;
};

public type QueryCustomObjectRecordsResponse record {
    # The record count of the given custom object type
    int count;
    CustomObjectRecordWithAllFields[] records;
};

public type PUTOrderPatchRequestType_orderActions record {
    # Container for custom fields of an Order Action object.
    OrderActionObjectCustomFields customFields?;
    # The Id of the order action in the order. You can provide either the `sequence` or the `orderActionId` field to specify which order action to update. You cannot use then both at the same time.
    string orderActionId?;
    # The sequence number of the order action in the order. You can provide either the `sequence` or the `orderActionId` field to specify which order action to update. You cannot use then both at the same time.
    int sequence?;
};

public type GETPaymentMethodUpdaterInstancesResponse record {
    # Indicates whether the call is successful.
    boolean success?;
    # Container for PMU instances available on your tenant.
    GETPaymentMethodUpdaterInstancesResponse_updaters updaters?;
};

public type GETRampMetricsByOrderNumberResponseType record {
    OrderRampMetrics[] rampMetrics?;
    *CommonResponse;
};

public type NestedPrepaidBalanceFundOnExpand record {|
    # The unique identifier of the prepaid balance fund.
    string id?;
    # The unique identifier of the user who created the prepaid balance fund.
    string createdById?;
    # The date and time when the prepaid balance fund was created.
    string createdDate?;
    # The unique identifier of the user who last updated the prepaid balance fund.
    string updatedById?;
    # The date and time when the prepaid balance fund was last updated.
    string updatedDate?;
    # The ID of the customer account to which the prepaid balance fund belongs.
    string accountId?;
    # The remaining balance (remaining units) on the fund.
    decimal balance?;
    # The number of the charge segment. One prepaid balance fund can only belong to one charge segment.
    int:Signed32 chargeSegmentNumber?;
    # End date of the fund effective period.
    string endDate?;
    # The total units of the fund. 
    decimal fundedBalance?;
    # The type of the Prepaid Balance Fund.  
    "CHARGE"|"ORDER_LINE_ITEM"|"CREDIT_MEMO_ITEM"|"DEBIT_MEMO_ITEM" fundSourceType?;
    # The price amount of a fund. A rounded value that follows the associated invoice owner's <a href="https://knowledgecenter.zuora.com/Quick_References/Rounding_and_Precision#Currency_rounding_rules" target="_blank">currency rounding rule</a>. 
    # 
    # **Calculation**: (Number of billing periods in one fund validity period) * (price in one billing period)
    decimal fundingPrice?;
    decimal totalBilled?;
    decimal totalBalance?;
    decimal originalTotalBalance?;
    decimal originalFundingPrice?;
    string originalFundEndDate?;
    string rolloverValidityPeriodStartDate?;
    string rolloverValidityPeriodEndDate?;
    # The ID of the prepaid balance associated to which this prepaid balance fund belongs.
    string prepaidBalanceId?;
    # The priority of the Fund. Possible values include: 10(high), 50(medium),100(low)
    10|50|100 priority?;
    # The source Id of the fund. It is the original charge ID. 
    string sourceId?;
    # Start date of the fund effective period.
    string startDate?;
    string vpSummaryId?;
    int:Signed32 rolloverCount?;
    string originFundId?;
    string rolloverApplyOption?;
    int:Signed32 done?;
    # EXPANDABLE.
    # The account associated with the prepaid balance fund.
    record {} account?;
    # EXPANDABLE.
    # The prepaid balance that contains the prepaid balance fund.
    record {} prepaidBalance?;
    # EXPANDABLE.
    # The rate plan charge associated with the prepaid balance fund.
    record {} 'source?;
    # EXPANDABLE.
    # The validity period summary associated with the prepaid balance fund.
    record {} vpSummary?;
|};

public type PUTBasicSummaryJournalEntryType record {
    # Key name that represents the list of journal entry items.
    PUTJournalEntryItemType[] journalEntryItems?;
    # Additional information about this record.
    # 
    # ***Character limit:*** 2,000
    string notes?;
    # Status shows whether the journal entry has been transferred to an accounting system. 
    # 
    # This field cannot be changed after the summary journal entry has been canceled.
    # 
    # **Note:** The Zuora Finance ***Override Transferred to Accounting*** permission is required to change `transferredToAccounting` from `Yes` to any other value.
    "No"|"Processing"|"Yes"|"Error"|"Ignore" transferredToAccounting?;
    *JournalEntryObjectCustomFields;
};

public type ProxyModifyProductRatePlan record {
    # A list of 3-letter currency codes representing active currencies for the product rate plan. Use a comma to separate each currency code.
    # 
    # If the request body contains this field, the value of this field must contain the desired list of active currencies. The new list can never have more than four differences from the existing list.
    # 
    # This field cannot be used to modify the status of more than four currencies in a single request. For example, in a single request, you can only activate four currencies, or deactivate four currencies, or activate two and deactivate two. Making more than four changes to currencies always requires more than one call.
    # 
    # When specifying this field in the update request, you must provide the full list of active currencies you want, not just incremental changes. For each active currency update, provide the following currencies in the list:
    # 
    # Current active currencies + at most four changes (additions or deletions)
    string[] ActiveCurrencies?;
    # A description of the product rate plan.
    @constraint:String {maxLength: 500}
    string Description?;
    # The date when the product rate plan expires and can't be subscribed to, in `yyyy-mm-dd` format.
    @constraint:String {maxLength: 29}
    string EffectiveEndDate?;
    # The date when the product rate plan becomes available and can be subscribed to, in `yyyy-mm-dd` format.
    @constraint:String {maxLength: 29}
    string EffectiveStartDate?;
    # The grade that is assigned for the product rate plan. The value of this field must be a positive integer. The greater the value, the higher the grade.
    # 
    # A product rate plan to be added to a Grading catalog group must have one grade. You can specify a grade for a product rate plan in this request or update the product rate plan individually.
    # 
    # **Notes**: 
    #   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `116` or later. Otherwise, an error occurs.
    #   - This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).
    decimal Grade?;
    # The name of the product rate plan. The name doesn't have to be unique in a Product Catalog, but the name has to be unique within a product.
    @constraint:String {maxLength: 255}
    string Name?;
    # The ID of the product that contains the product rate plan.
    @constraint:String {maxLength: 32}
    string ProductId?;
    # The natural key of the product rate plan. 
    # 
    # For existing Product Rate Plan objects that are created before this field is introduced, this field will be null. Use this field to specify a value for only these objects. Zuora also provides a tool to help you automatically backfill this field with tenant ID for your existing product catalog. If you want to use this backfill tool, contact [Zuora Global Support](https://support.zuora.com/).
    # 
    # **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.
    @constraint:String {maxLength: 100}
    string ProductRatePlanNumber?;
    *ProductRatePlanObjectNSFields;
    *ProductRatePlanObjectCustomFields;
};

public type GETPaymentRunDataArrayResponse record {
    # Container for payment run data. Each element in the array is a record processed by the payment run.
    GETPaymentRunDataElementResponse[] data?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type CreatePMPayPalCP record {
    # ID of a PayPal billing agreement.
    string BAID?;
    # Email address associated with the payment method.
    string email?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type CreditMemoApplyDebitMemoItemRequestType record {
    # The amount that is applied to the specific item. 
    decimal amount;
    # The ID of the credit memo item.
    string creditMemoItemId?;
    # The ID of the credit memo taxation item.
    string creditTaxItemId?;
    # The ID of the debit memo item that the credit memo item is applied to.
    string debitMemoItemId?;
    # The ID of the debit memo taxation item that the credit memo taxation item is applied to.
    string taxItemId?;
};

public type GETJournalEntryDetailType record {
    # Name of the accounting period that the journal entry belongs to.
    string accountingPeriodName?;
    # Returns true if the journal entry is aggregating currencies. That is, if the journal entry was created when the `Aggregate transactions with different currencies during a Journal Run` setting was configured to `Yes`. Otherwise, returns `false`.
    boolean aggregateCurrency?;
    # Currency used.
    string currency?;
    # Home currency used.
    string homeCurrency?;
    # Date of the journal entry.
    string journalEntryDate?;
    # Key name that represents the list of journal entry items.
    GETJournalEntryItemType[] journalEntryItems?;
    # 
    # Additional information about this record.
    # Character limit: 2,000
    string notes?;
    # Journal entry number in the format JE-00000001.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # List of segments that apply to the summary journal entry.
    GETJournalEntrySegmentType[] segments?;
    # Status of journal entry.
    "Created"|"Cancelled" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # End date of time period included in the journal entry.
    string timePeriodEnd?;
    # Start date of time period included in the journal entry.
    string timePeriodStart?;
    # Transaction type of the transactions included in the summary journal entry.
    string transactionType?;
    # Date and time that transferredToAccounting was changed to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.
    string transferDateTime?;
    # User ID of the person who changed transferredToAccounting to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`.
    string transferredBy?;
    # Status shows whether the journal entry has been transferred to an accounting system. 
    "No"|"Processing"|"Yes"|"Error"|"Ignore" transferredToAccounting?;
    *JournalEntryObjectCustomFields;
};

public type OrderRampMetrics record {
    # The short description of the ramp.
    string description?;
    # The discount amount for the TCB.
    decimal discountTcb?;
    # The discount amount for the TCV.
    decimal discountTcv?;
    # The gross TCB value before discount charges are applied.
    decimal grossTcb?;
    # The gross TCV value before discount charges are applied.
    decimal grossTcv?;
    # The ramp metrics for each ramp intervals in its timeline.
    OrderRampIntervalMetrics[] intervals?;
    # The name of the ramp.
    string name?;
    # The net TCB value after discount charges are applied.
    decimal netTcb?;
    # The net TCV value after discount charges are applied.
    decimal netTcv?;
    # The number of the ramp. It is automaticcally generated by the billing system.
    string number?;
};

public type V1_attachments_body record {
    # The file to be attached. Files with the following extensions are supported: .pdf, .csv, .png, .xlsx, .xls, .doc, .docx, .msg, .jpg, .txt, .htm, .html, .eml, .pptx, .gif, .rtf, .xml, .jpeg, .log, .cls
    # 
    # The maximum file size is 4 MB.
    record {byte[] fileContent; string fileName;} file;
};

# Information about an order action of type `AddProduct`. 
# 
# If you want to create a pending order through the "Add product" order action, and if the charge's trigger condition is `Specific Date`, you must set a charge number in the `chargeNumber` field for the "Add product" order action. In this case, if you do not set it, Zuora will not generate the charge number for you.
# 
# See more information about pending orders in <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Orders/AA_Overview_of_Orders/Pending_orders_and_subscriptions" target="_blank">Pending orders and subscriptions</a>. 
public type CreateOrderRatePlanOverride record {
    # List of charges associated with the rate plan.
    CreateOrderChargeOverride[] chargeOverrides?;
    # Specifies whether all features in the rate plan will be cleared.
    boolean clearingExistingFeatures?;
    # Container for custom fields of the Rate Plan or Subscription Offer object. The custom fields of the Rate Plan object are used when rate plans are subscribed, and the custom fields of the Subscription Offer object are used when product offers are subscribed.
    OrdersRatePlanObjectCustomFields customFields?;
    # An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.
    # 
    # **Note:** If both `externalCatalogPlanId` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalCatalogPlanId?;
    # Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string externallyManagedPlanId?;
    # Number of a subscription rate plan for this subscription.
    @constraint:String {maxLength: 50}
    string subscriptionRatePlanNumber?;
    # Indicates whether the rate plan is created from the Zuora product catalog or from an external product catalog.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    boolean isFromExternalCatalog?;
    # Internal identifier of the product rate plan that the rate plan is based on.
    string productRatePlanId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # Name of the standalone rate plan.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string ratePlanName?;
    # List of features associated with the rate plan.
    # The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows:
    # * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared.
    # * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.
    CreateOrderRatePlanFeatureOverride[] subscriptionProductFeatures?;
    # Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the rate plan. Then when you update the product, you can use the same unique identifier to specify which rate plan to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
};

# 
public type QueryInvoicesResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedInvoice[] data?;
|};

# Information of scheduled order. 
public type POSTOrderRequestType_schedulingOptions record {
    # The date for the order scheduled.
    string scheduledDate?;
    # Date policy of the scheduled order.
    "SpecificDate" scheduledDatePolicy?;
};

public type GETPaymentMethodResponseForAccount record {
    # The account holder information.
    GETAccountPMAccountHolderInfo accountHolderInfo?;
    # The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.
    string bankIdentificationNumber?;
    # ID of the user who created this payment method.
    string createdBy?;
    # The date and time when the payment method was created, in `yyyy-mm-dd hh:mm:ss` format.
    string createdOn?;
    # The masked credit card number, such as:
    # ```
    # *********1112
    # ```
    # **Note:** This field is only returned for Credit Card Reference Transaction payment type.
    string creditCardMaskNumber?;
    # The type of the credit card or debit card.
    # 
    # Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # **Note:** This field is only returned for the Credit Card and Debit Card payment types.
    string creditCardType?;
    # The session ID of the user when the `PaymentMethod` was created or updated.
    string deviceSessionId?;
    # Indicates whether the mandate is an existing mandate.
    "Yes"|"No" existingMandate?;
    # The payment method ID.
    string id?;
    # The IP address of the user when the payment method was created or updated.
    string ipAddress?;
    # Indicates whether this payment method is the default payment method for the account.
    boolean isDefault?;
    # The date of the last failed attempt to collect payment with this payment method.
    string lastFailedSaleTransactionDate?;
    # ID of the last transaction of this payment method.
    string lastTransaction?;
    # The time when the last transaction of this payment method happened.
    string lastTransactionTime?;
    # The mandate information for the Credit Card, Apple Pay, Google Pay, Credit Card Reference Transaction, ACH, or Bank Transfer payment method.
    # 
    # The following mandate fields are common to all supported payment methods:
    # * `mandateId`
    # * `mandateReason`
    # * `mandateStatus`
    # 
    # The following mandate fields are specific to the ACH and Bank Transfer payment methods:
    # * `mandateReceivedStatus`
    # * `existingMandateStatus`
    # * `mandateCreationDate`
    # * `mandateUpdateDate`
    # 
    # The following mandate fields are specific to the Credit Card, Apple Pay, and Google Pay payment methods:
    # * `mitTransactionId`
    # * `mitProfileAgreedOn`
    # * `mitConsentAgreementRef`
    # * `mitConsentAgreementSrc`
    # * `mitProfileType`
    # * `mitProfileAction`
    POSTAccountPMMandateInfo mandateInfo?;
    # The number of allowable consecutive failures Zuora attempts with the payment method before stopping.
    int maxConsecutivePaymentFailures?;
    # The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. 
    int:Signed32 numConsecutiveFailures?;
    # The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.
    int paymentRetryWindow?;
    # A gateway unique identifier that replaces sensitive payment method data.
    # 
    # **Note:** This field is only returned for the Credit Card Reference Transaction payment type.
    string secondTokenId?;
    # The status of the payment method.
    "Active"|"Closed"|"Scrubbed" status?;
    # A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile.
    # 
    # **Note:** This field is only returned for the Credit Card Reference Transaction payment type.
    string tokenId?;
    # The number of error payments that used this payment method.
    int:Signed32 totalNumberOfErrorPayments?;
    # The number of successful payments that used this payment method.
    int:Signed32 totalNumberOfProcessedPayments?;
    # The type of the payment method. For example, `CreditCard`.
    string 'type?;
    # ID of the user who made the last update to this payment method.
    string updatedBy?;
    # The last date and time when the payment method was updated, in `yyyy-mm-dd hh:mm:ss` format.
    string updatedOn?;
    # Indicates whether this payment method uses the default retry rules configured in the Zuora Payments settings.
    boolean useDefaultRetryRule?;
    *PaymentMethodObjectCustomFieldsForAccount;
    *GETPaymentMethodResponseBankTransferForAccount;
    *GETPaymentMethodResponseACHForAccount;
    *GETPaymentMethodResponseCreditCardForAccount;
    *GETPaymentMethodResponsePayPalForAccount;
    *GETPaymentMethodResponseGooglePayForAccount;
    *GETPaymentMethodResponseApplePayForAccount;
};

public type GETProductDiscountApplyDetailsType record {
    # The ID of the product rate plan charge that the discount product rate plan charge applies to.
    string appliedProductRatePlanChargeId?;
    # The ID of the product rate plan that the discount product rate plan charge applies to.
    string appliedProductRatePlanId?;
};

# 
# Container for credit memos.
# 
# **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. 
public type POSTSubscriptionPreviewResponseType_creditMemo record {
    # Credit memo amount.
    decimal amount?;
    # Credit memo amount minus tax.
    decimal amountWithoutTax?;
    # 
    POSTSubscriptionPreviewCreditMemoItemsType[] creditMemoItems?;
    # Tax amount on the credit memo.
    decimal taxAmount?;
};

public type UnapplyPaymentType record {
    # Container for debit memos. The maximum number of debit memos is 1,000.
    PaymentDebitMemoApplicationUnapplyRequestType[] debitMemos?;
    # The date when the payment is unapplied, in `yyyy-mm-dd` format. The effective date must be later than or equal to the maximum effective date of the payment.
    string effectiveDate?;
    # Container for invoices. The maximum number of invoice is 1,000.
    PaymentInvoiceApplicationUnapplyRequestType[] invoices?;
};

public type PutReverseCreditMemoResponseType record {
    # Container for the credit memo that is automatically generated during the reversal of the invoice that is related to the credit memo. If no related invoice is reversed, the value is null.
    PutReverseCreditMemoResponseType_creditMemo creditMemo?;
    # Container for the debit memo that is automatically generated during the credit memo reversal.
    PutReverseCreditMemoResponseType_debitMemo debitMemo?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# Information of the active version. 
public type WorkflowDefinitionAndVersions_active_version record {
    # The description of the active version.
    string description?;
    # The unique ID of the active version.
    int id?;
    # The status of the active version.
    string status?;
    # The type of the active version. Currently the only valid value is 'Workflow::Setup'.
    "Workflow::Setup"|"Workflow::Instance" 'type?;
    # The version number of the active version.
    string version?;
};

public type GETProductRatePlanChargeResponse record {
    # Indicates which type of charge the discount charge applies to.
    "ONETIME"|"RECURRING"|"USAGE"|"ONETIMERECURRING"|"ONETIMEUSAGE"|"RECURRINGUSAGE"|"ONETIMERECURRINGUSAGE"? applyDiscountTo?;
    # The bill cycle type for this charge.
    string billingDay?;
    # The billing period for this charge.
    string billingPeriod?;
    # The billing period alignment setting for this charge.
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart"|"AlignToTermEnd" billingPeriodAlignment?;
    # The billing timing for this charge.
    "IN_ADVANCE"|"IN_ARREARS" billingTiming?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `141` or higher. Otherwise, an error occurs.
    # 
    # This field defines what type of charge it is in Advanced Consumption Billing:
    # * Standard: Normal charge with no Prepayment or Commitment or Drawdown.
    # * Prepayment: For recurring charges. Unit or currency based prepaid charge.
    # * CommitmentTrueUp: For recurring charges. Currency based minimum commitment charge.
    # * Drawdown: For usage charges. Drawdown from prepaid funds.
    # * DrawdownAndCreditCommitment: For usage charges. Drawdown from prepaid funds and then credit to minimum commitment funds.
    # * CreditCommitment: For usage charges. Credit to minimum commitment funds.
    "Standard"|"Prepayment"|"CommitmentTrueUp"|"Drawdown"|"CreditCommitment"|"DrawdownAndCreditCommitment" chargeFunction?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `133` or higher. Otherwise, an error occurs. 
    # 
    # This field defines the type of commitment. A prepaid charge can be `UNIT` or `CURRENCY`. A minimum commitment(in-arrears) charge can only be `CURRENCY` type. For topup(recurring or one-time) charges, this field indicates what type of funds are created. 
    # * If UNIT, it will create a fund with given prepaidUom.
    # * If CURRENCY, it will create a fund with the currency amount calculated in list price.
    #   
    # For drawdown(usage) charges, this field indicates what type of funds are drawdown from that created from topup charges.
    "UNIT"|"CURRENCY" commitmentType?;
    # Container for custom fields of a Product Rate Plan Charge object.
    ProductRatePlanChargeObjectCustomFields customFields?;
    # The default quantity. 
    # 
    # This field is applicable only for one-time and recurring charges.
    decimal? defaultQuantity?;
    GETDeliverySchedule? deliverySchedule?;
    # The description for this charge.
    string description?;
    # The class that the discount belongs to. The discount class defines the order in which discount product rate plan charges are applied.
    # 
    # For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).
    string? discountClass?;
    # The application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account"? discountLevel?;
    # The end date condition for this charge.
    "Subscription_End"|"One_Time"|"Fixed_Period"|"Specific_End_Date" endDateCondition?;
    # Indicates whether to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Indicates whether to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled.
    boolean excludeItemBookingFromRevenueAccounting?;
    # Indicates whether the charge segment is allocation eligible in revenue recognition. The default value is `false`.
    # 
    # **Values**: `true`, `false`
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.
    boolean isAllocationEligible?;
    # Specifies how to perform the accounting during revenue recognition. The default value is `false`.
    # 
    # **Values**: `true`, `false`
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.     
    boolean isUnbilled?;
    # This field is used to maintain the product category for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.    
    string productCategory?;
    # This field is used to maintain the product class for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.    
    string productClass?;
    # This field is used to maintain the product family for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.
    string productFamily?;
    # This field is used to maintain the product line for integration with Zuora Revenue. 
    # 
    # **Note**: This field is available only if you have the Additional Revenue Fields property enabled.
    string productLine?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" revenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. 
    # Other options might also be avaliable depending on 
    # the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" revenueAmortizationMethod?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
    # This field is ued when overage smoothing model is `RollingWindow` or `Rollover`.
    int? numberOfPeriods?;
    # Container for the finance information of a product rate plan charge.
    FinanceInformation_1 financeInformation?;
    # The unique ID of the product rate plan charge.
    string id?;
    # **Note**: This field is only applicable to the Discount - Percentage charge model.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 130 or higher. Otherwise, an error occurs.
    # 
    # This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:
    #   - `true`: This is a stacked discount, which should be calculated by stacking with other discounts.
    #   - `false`: This is not a stacked discount, which should be calculated in sequence with other discounts.
    # 
    # For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).
    boolean isStackedDiscount?;
    # The base of list price. 
    # 
    # This field is applicable only for recurring charges.
    # 
    # **Note**: The `Per_Year` enum value is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year" listPriceBase?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    "DiscountFixedAmount"|"DiscountPercentage"|"FlatFee"|"PerUnit"|"Overage"|"Tiered"|"TieredwithOverage"|"Volume"|"Delivery"|"MultiAttributePricing"|"PreratedPerUnit"|"PreratedPricing"|"HighWatermarkVolumePricing"|"HighWatermarkTieredPricing" model?;
    # The name of the product rate plan charge.
    string name?;
    # Indicates the number of periods to use when calculating charges in an overage smoothing charge model. The valid value is a positive whole number.
    int numberOfPeriod?;
    # Determines when to calculate overage charges. If the value of the `smoothingMode` field is not specified, the value of this field is ignored.
    # 
    # **Values**: 
    #   - `EndOfSmoothingPeriod`: This option is used by default. The overage is charged at the end of the smoothing period.
    #   - `PerBillingPeriod`: The overage is charged on-demand rather than waiting until the end of the smoothing period.
    "EndOfSmoothingPeriod"|"PerBillingPeriod"? overageCalculationOption?;
    # Determines whether to credit the customer with unused units of usage.
    "NoCredit"|"CreditBySpecificRate"? overageUnusedUnitsCreditOption?;
    # Applies an automatic price change when a termed subscription is renewed.
    "NoChange"|"SpecificPercentageValue"|"UseLatestProductCatalogPricing"? priceChangeOption?;
    # Applies an automatic price change when a termed subscription is renewed.
    "FromTenantPercentageValue"|"SpecificPercentageValue" priceIncreaseOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `priceIncreaseOption` field to `SpecificPercentageValue`.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a decimal value between -100 and 100
    decimal? priceIncreasePercentage?;
    # Container for the prices of the product rate plan charge.
    GETRatePlanChargePricing[] pricing?;
    # A concise description of the charge model and pricing that is suitable to show to your customers. 
    # 
    # When the rate plan charge model is `Tiered` and multi-currency is enabled, this field includes an array of string of each currency, and each string of currency includes tier price description separated by comma.
    # 
    # For the following charge models, the value of this field is an empty string:
    # - Multi-Attribute Pricing
    # - High Water Mark Tiered Pricing
    # - High Water Mark Volume Pricing
    # - Pre-Rated Per Unit Pricing
    # - Pre-Rated Pricing
    # 
    # The charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string[] pricingSummary?;
    # A link to retrieve product charge definitions of this charge.
    string productChargeDefinitions?;
    # Container for the application details about a discount product rate plan charge. 
    # 
    # Only discount product rate plan charges have values in this field.
    GETProductDiscountApplyDetailsType[] productDiscountApplyDetails?;
    # The number of this product rate plan charge.
    string? productRatePlanChargeNumber?;
    # Specifies a rating group based on which usage records are rated.
    # 
    # Possible values:                
    #   - `ByBillingPeriod`: The rating is based on all the usages in a billing period. 
    #   - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    #   - `ByUsageRecord`: The rating is based on each usage record.
    #   - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    #   - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Notes:** 
    #   - The `ByBillingPeriod` value can be applied for all charge models. 
    #   - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
    #   - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    #   - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload"|"ByGroupId"? ratingGroup?;
    # The name of the recognized revenue account for this charge.
    #   - Required when the Allow Blank Accounting Code setting is No.
    #   - Optional when the Allow Blank Accounting Code setting is Yes.
    # 
    #   This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccount?;
    # Associates this product rate plan charge with a specific revenue recognition code.
    string? revRecCode?;
    # Specifies when revenue recognition begins.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate"? revRecTriggerCondition?;
    # Determines when to recognize the revenue for this charge.
    "Recognize upon invoicing"|"Recognize daily over time" revenueRecognitionRuleName?;
    # Specifies the smoothing model for an overage smoothing charge model.
    "RollingWindow"|"Rollover"? smoothingModel?;
    # The specific number of billing periods for this charge.
    decimal? specificBillingPeriod?;
    # The number of months for the list price base of the charge. The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.
    int:Signed32? specificListPriceBase?;
    # Indicates whether the request succeeded.
    boolean success?;
    # Specifies the tax code for taxation rules. This field is required when the `taxable` field is set to `true`.
    # 
    # **Note**: This value affects the tax calculation of the rate plan charge.
    @constraint:String {maxLength: 64}
    string taxCode?;
    # Determines how to define taxation for the charge. This field is required when the `taxable` field is set to `true`.
    # 
    # **Note**: This value affects the tax calculation of the rate plan charge.
    "TaxExclusive"|"TaxInclusive"? taxMode?;
    # Determines whether the charge is taxable. When set to `true`, the `taxMode` and `taxCode` fields are required when creating or updating th Product Rate Plan Charge object.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    # 
    # **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.
    boolean taxable?;
    # Specifies when to start billing the customer for the charge.
    # 
    # **Values**:
    #   - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    #   - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
    #   - `CustomerAcceptance` is when the customer accepts the services or products for a subscription.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance" triggerEvent?;
    # Specifies the type of charge.
    "OneTime"|"Recurring"|"Usage" 'type?;
    # Indicates the units of measure (UOM) that is configured in **Settings > Billing** for the product rate plan charge.
    string? uom?;
    # The number of up-to-periods value for this charge.
    decimal? upToPeriods?;
    # The up-to-periods type setting for this charge.
    "Billing_Periods"|"Days"|"Weeks"|"Months"|"Years"? upToPeriodsType?;
    # Determines how Zuora processes usage records for per-unit usage charges.
    "EndOfBillingPeriod"|"OnDemand"? usageRecordRatingOption?;
    # Determines whether to define a new accounting code for the new discount charge.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    boolean? useDiscountSpecificAccountingCode?;
    # Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. 
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    boolean useTenantDefaultForPriceChange?;
    # Allow the discount duration to be aligned with the billing period partially.
    # 
    # **Note**: You must enable the [Enhanced Discount](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.
    boolean applyToBillingPeriodPartially?;
    # Indicates whether this charge is a prepayment (topup) charge or a
    # drawdown charge.
    # 
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # **Values**: `true` or `false`.
    boolean isPrepaid?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The type of this charge. It is either a prepayment (topup) charge or a drawdown charge. 
    "topup"|"drawdown"? prepaidOperationType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal? prepaidQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The total amount of units that end customers can use during a validity period when they subscribe to a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    decimal? prepaidTotalQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Unit of measurement for a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    string? prepaidUom?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal? drawdownRate?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Unit of measurement for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge).
    string? drawdownUom?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information. 
    "TimeBased"|"ConsumptionBased"|"FullCreditBack" creditOption?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The value is either "true" or "false". It determines whether the rollover fields are needed.
    boolean isRollover?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    decimal rolloverPeriods?;
    # The price lookup formula defined for the product rate plan charge, which is used to identify
    # the correct and relevant charge definition based on the context.
    # 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Attribute-based_pricing/Price_lookup_in_Attribute-based_Pricing"  target="_blank">Price lookup in Attribute-based Pricing</a>.
    # 
    # 
    # **Note**: This field is available only if the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Attribute-based_pricing" target="_blank">Attribute-based Pricing</a> feature is enabled.
    string formula?;
};

# Pricing information about a one-time charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
public type OneTimePerUnitPricingOverride record {
    # Per-unit price of the charge.
    decimal listPrice?;
    # The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.
    decimal originalListPrice?;
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # Unit of measure of the standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    decimal uom?;
};

public type GETAdjustmentsBySubscriptionNumberResponseType record {
    *CommonResponse;
    # Container for all the delivery adjustments of a subscription.
    GETAdjustmentByIdResponseType[] adjustments?;
};

# Container for Product fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type ProductObjectNSFields record {
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the product's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Type of item that is created in NetSuite for the product. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    "Inventory"|"Non Inventory"|"Service" ItemType__NS?;
    # Date when the product was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
};

public type PUTBulkDebitMemosRequestType record {
    # The container for a list of debit memos. The maximum number of debit memos is 50.
    @constraint:Array {maxLength: 50}
    PUTDebitMemoWithIdType[] memos?;
};

public type PostCustomObjectRecordsRequest record {
    # Indicates whether the records that pass the schema validation should be created when not all records in the request pass the schema validation.
    boolean allowPartialSuccess = false;
    # A list of custom object records to be created
    CustomObjectRecordWithOnlyCustomFields[] records;
};

public type QuantityForUsageCharges record {
    # The ID of the subscription charge.
    string chargeId?;
    # The quantity of the subscription charge.
    decimal quantity?;
};

public type PostBatchInvoiceItemResponse record {
    # Indicates whether the invoice is created successfully.
    boolean success?;
    *PostInvoiceResponse;
};

# Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
public type OrderActionRatePlanUsageTieredWithOveragePricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    # Number of periods that Zuora considers when calculating overage charges with overage smoothing.
    @constraint:Int {minValue: 1}
    int numberOfPeriods?;
    # Price per overage unit consumed.
    decimal overagePrice?;
    # Specifies whether to credit the customer for unused units.
    # 
    # If the value of this field is `CreditBySpecificRate`, use the `unusedUnitsCreditRates` field to specify the rate at which to credit the customer for unused units.
    "NoCredit"|"CreditBySpecificRate" overageUnusedUnitsCreditOption?;
    # List of cumulative pricing tiers in the charge.
    OrderActionRatePlanChargeTier[] tiers?;
    # Per-unit rate at which to credit the customer for unused units. Only applicable if the value of the `overageUnusedUnitsCreditOption` field is `CreditBySpecificRate`.
    decimal unusedUnitsCreditRates?;
};

# Container for the finance information related to the source taxation item.
public type CreditMemoTaxItemFromInvoiceTaxItemType_financeInformation record {
    # The accounting code that maps to an on account in your accounting system.
    @constraint:String {maxLength: 100}
    string onAccountAccountingCode?;
    # The accounting code for the sales taxes payable.
    @constraint:String {maxLength: 100}
    string salesTaxPayableAccountingCode?;
};

public type GETProductRatePlanChargeType record {
    # Specifies where (to what charge type) the discount will be applied. These field values are case-sensitive.
    # 
    # Permissible values:
    # - RECURRING
    # - USAGE
    # - ONETIMERECURRING
    # - ONETIMEUSAGE
    # - RECURRINGUSAGE
    # - ONETIMERECURRINGUSAGE
    string applyDiscountTo?;
    # The bill cycle day (BCD) for the charge. The BCD determines which day of the month or week the customer is billed. The BCD value in the account can override the BCD in this object.
    string billingDay?;
    # The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).
    # 
    # Values:
    # - Month
    # - Quarter
    # - Annual
    # - Semi_Annual
    # - Specific Months
    # - Week
    # - Specific_Weeks
    string billingPeriod?;
    # Aligns charges within the same subscription if multiple charges begin on different dates.
    # 
    # Possible values:
    # - AlignToCharge
    # - AlignToSubscriptionStart
    # - AlignToTermStart
    string billingPeriodAlignment?;
    # The billing timing for the charge. You can choose to bill for charges in advance or in arrears.
    # 
    # Values:
    # - In Advance
    # - In Arrears
    # 
    # **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). 
    string billingTiming?;
    # This field is for Zuora Internal Use only. See the **pricing** field for the same information as this field.
    record {} chargeModelConfigurations?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information. 
    "TimeBased"|"ConsumptionBased"|"FullCreditBack" creditOption?;
    # The default quantity of units.  This field is required if you use a per-unit charge model.
    string? defaultQuantity?;
    # The delivery schedule information of this charge. Only when this charge is using Delivery Pricing charge model
    GETProductRatePlanChargeDeliverySchedule deliverySchedule?;
    # Usually a brief line item summary of the Rate Plan Charge.
    string description?;
    # The class that the discount belongs to. The discount class defines the order in which discount product rate plan charges are applied.
    # 
    # For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).
    string? discountClass?;
    # The level of the discount. 
    # 
    # Values:
    # - RatePlan
    # - Subscription
    # - Account
    string? discountLevel?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal drawdownRate?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Unit of measurement for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge).
    string drawdownUom?;
    # Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
    # 
    # Values:
    # - Subscription_End
    # - Fixed_Period
    string endDateCondition?;
    # The flag to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The flag to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting?;
    # Container for finance information of a rate plan charge.
    FinanceInformation financeInformation?;
    # The pricing formula to calculate the actual rating amount for each usage record.
    # 
    # This field is only available for the usage-based charges that use the Multi-Attribute Pricing charge model. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string formula?;
    # Unique product rate-plan charge ID.
    string id?;
    # Specifies the number of units in the base set of units when the charge model is Overage.
    string includedUnits?;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Indicates whether this charge is a prepayment (topup) charge or a drawdown charge. Values: `true` or `false`.
    boolean isPrepaid?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The value is either "true" or "false". It determines whether the rollover fields are needed.
    boolean isRollover?;
    # **Note**: This field is only applicable to the Discount - Percentage charge model.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to 130 or higher. Otherwise, an error occurs.
    # 
    # This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:
    # 
    # - `true`: This is a stacked discount, which should be calculated by stacking with other discounts.
    # 
    # - `false`: This is not a stacked discount, which should be calculated in sequence with other discounts.
    # 
    # For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).
    boolean isStackedDiscount?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The list price base for the product rate plan charge.
    # 
    # This field is only applicable for recurring charges.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # Specifies the maximum number of units for this charge. Use this field and the `minQuantity` field to create a range of units allowed in a product rate plan charge.
    string maxQuantity?;
    # Specifies the minimum number of units for this charge. Use this field and the `maxQuantity` field to create a range of units allowed in a product rate plan charge.
    string minQuantity?;
    # Charge model which determines how charges are calculated. Charge models must be individually activated in Zuora Billing administration. 
    # 
    # Possible values are:
    # - `FlatFee`
    # - `PerUnit`
    # - `Overage`
    # - `Volume`
    # - `Tiered`
    # - `TieredWithOverage`
    # - `DiscountFixedAmount`
    # - `DiscountPercentage`
    # - `Delivery` (available only if you have the Delivery Pricing charge model enabled)
    # - `MultiAttributePricing` (available only if you have the Multi-Attribute Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
    # - `PreratedPerUnit` (available only if you have the Pre-rated Per Unit Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
    # - `PreratedPricing` (available only if you have the Pre-rated Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
    # - `HighWatermarkVolumePricing` (available only if you have the High Water Mark Volume Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
    # - `HighWatermarkTieredPricing` (available only if you have the High Water Mark Tiered Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
    # 
    # The value of the `pricing` field contains details about these charge models and the value of `pricingSummary` field contains their associated pricing summary values.
    string model?;
    # Name of the product rate-plan charge. (Not required to be unique.)
    string name?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model. This field is ued when overage smoothing model is `RollingWindow` or `Rollover`.
    int? numberOfPeriods?;
    # Value specifies when to calculate overage charges.
    # 
    # Values:
    # - EndOfSmoothingPeriod
    # - PerBillingPeriod
    # - null
    string? overageCalculationOption?;
    # Determines whether to credit the customer with unused units of usage.
    # 
    # Values:
    # - NoCredit
    # - CreditBySpecificRate
    string? overageUnusedUnitsCreditOption?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The type of this charge. It is either a prepayment (topup) charge or a drawdown charge. 
    "topup"|"drawdown"? prepaidOperationType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal? prepaidQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The total amount of units that end customers can use during a validity period when they subscribe to a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    decimal? prepaidTotalQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # Unit of measurement for a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    string? prepaidUom?;
    # The number of periods to which prepayment is set. 
    # 
    # **Note:** This field is only available if you already have the prepayment feature enabled. The prepayment feature is deprecated and available only for backward compatibility. Zuora does not support enabling this feature anymore.
    int? prepayPeriods?;
    # Applies an automatic price change when a termed subscription is renewed and the following applies:
    # 
    # 1. AutomatedPriceChange setting is on
    # 2. Charge type is not one-time
    # 3. Charge model is not discount fixed amount
    # 
    # Values:
    # - NoChange (default)
    # - SpecificPercentageValue
    # - UseLatestProductCatalogPricing
    string? priceChangeOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `PriceChangeOption` value to `SpecificPercentageValue`.
    # 
    # 1. AutomatedPriceChange setting is on
    # 2. Charge type is not one-time
    # 3. Charge model is not discount fixed amount
    # 
    # Values: a decimal between -100 and 100
    string? priceIncreasePercentage?;
    # One or more price charge models with attributes that further describe the model. 
    # Some attributes show as null values when not applicable.
    GETProductRatePlanChargePricingType[] pricing?;
    # A concise description of the charge model and pricing that is suitable to show to your customers. When the rate plan charge model is `Tiered` and multi-currency is enabled, this field includes an array of string of each currency, and each string of currency includes tier price description separated by comma.
    # 
    # For the following charge models, the value of this field is an empty string:
    # - Multi-Attribute Pricing
    # - High Water Mark Tiered Pricing
    # - High Water Mark Volume Pricing
    # - Pre-Rated Per Unit Pricing
    # - Pre-Rated Pricing
    # 
    # The charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string[] pricingSummary?;
    # A link to retrieve product charge definitions of this charge.
    string productChargeDefinitions?;
    # Container for the application details about a discount product rate plan charge. 
    # 
    # Only discount product rate plan charges have values in this field.
    GETProductDiscountApplyDetailsType[] productDiscountApplyDetails?;
    # The natural key of the product rate plan charge.
    string productRatePlanChargeNumber?;
    # Specifies a rating group based on which usage records are rated.
    # 
    # Possible values:
    # 
    # - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.
    # - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    # - `ByUsageRecord`: The rating is based on each usage record.
    # - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    # - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Note:** 
    # - The `ByBillingPeriod` value can be applied for all charge models. 
    # - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
    # - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    # - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
    string? ratingGroup?;
    # Associates this product rate plan charge with a specific revenue recognition code. The value is a valid revenue recognition code.
    string? revRecCode?;
    # Specifies when revenue recognition begins.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate"? revRecTriggerCondition?;
    # The name of the revenue recognition rule governing the revenue schedule.
    string revenueRecognitionRuleName?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    decimal rolloverPeriods?;
    # Specifies the smoothing model for an overage smoothing charge model or an tiered with overage model, which is an advanced type of a usage model that avoids spikes in usage charges. If a customer's usage spikes in a single period, then an overage smoothing model eases overage charges by considering usage and multiple periods.
    # 
    # One of the following values shows which smoothing model will be applied to the charge when `Overage` or `Tiered with Overage` is used:
    # 
    # - `RollingWindow` considers a number of periods to smooth usage. The rolling window starts and increments forward based on billing frequency. When allowed usage is met, then period resets and a new window begins.
    # - `Rollover` considers a fixed number of periods before calculating usage. The net balance at the end of a period is unused usage, which is carried over to the next period's balance.
    string? smoothingModel?;
    # When the billing period is set to `Specific` Months then this positive integer reflects the number of months for billing period charges.
    int? specificBillingPeriod?;
    # The number of months for the list price base of the charge. The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.
    int? specificListPriceBase?;
    # Specifies the tax code for taxation rules; used by Zuora Tax.
    string taxCode?;
    # Specifies how to define taxation for the charge; used by Zuora Tax.
    "TaxExclusive"|"TaxInclusive"? taxMode?;
    # Specifies whether the charge is taxable; used by Zuora Tax. Possible values are:`true`, `false`.
    boolean taxable?;
    # Specifies when to start billing the customer for the charge.
    # 
    # Values: one of the following:
    # - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    # - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
    # - `CustomerAcceptance` is when the customer accepts the services or products for a subscription. 
    # - `SpecificDate` is the date specified.
    string triggerEvent?;
    # The type of charge. Possible values are: `OneTime`, `Recurring`, `Usage`.
    string 'type?;
    # Describes the Units of Measure (uom) configured in **Settings > Billing** for the productRatePlanCharges.
    # 
    # Values: `Each`, `License`, `Seat`, or `null`
    string? uom?;
    # Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
    # If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
    int? upToPeriods?;
    # The period type used to define when the charge ends.
    "Billing_Periods"|"Days"|"Weeks"|"Months"|"Years"? upToPeriodsType?;
    # Determines how Zuora processes usage records for per-unit usage charges. 
    string? usageRecordRatingOption?;
    # Determines whether to define a new accounting code for the new discount charge.
    # Values: `true`, `false`
    boolean? useDiscountSpecificAccountingCode?;
    # Shows the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. You set the tenant uplift value in the web-based UI: **Settings > Billing > Define Default Subscription Settings**.
    # 
    # Values: `true`, `false`
    boolean useTenantDefaultForPriceChange?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period in which the prepayment units are valid to use as defined in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
    *ProductRatePlanChargeObjectNSFields;
    *ProductRatePlanChargeObjectCustomFields;
};

# 
public type QuerySubscriptionsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedSubscription[] data?;
|};

# Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
public type UsagePerUnitPricingOverride record {
    *PriceChangeParams;
    # Per-unit price of the charge.
    decimal listPrice?;
    # The original list price is the price of a product or service at which it is listed for sale by a manufacturer or retailer.
    decimal originalListPrice?;
    # Specifies how Zuora groups usage records when rating usage. See [Usage Rating by Group](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Usage/Usage_Rating_by_Group) for more information.
    #   * ByBillingPeriod (default): The rating is based on all the usages in a billing period.
    #   * ByUsageStartDate: The rating is based on all the usages on the same usage start date. 
    #   * ByUsageRecord: The rating is based on each usage record.
    #   * ByUsageUpload: The rating is based on all the usages in a uploaded usage file (.xls or .csv). If you import a mass usage in a single upload, which contains multiple usage files in .xls or .csv format, usage records are grouped for each usage file.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload" ratingGroup?;
    # Unit of measure of the standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    decimal uom?;
};

public type GETAPaymentGatwayResponse record {
    # The ID of the payment gateway.
    string id?;
    # Specifies if this payment gateway is in active status.
    boolean isActive?;
    # Specifies if this is the default payment gateway to process payments for your customer accounts.
    boolean isDefault?;
    # The name of the payment gateway.
    string name?;
    # The type of the payment gateway
    string 'type?;
};

public type FulfillmentItemGet record {
    # The reference id of the related Fulfillment.
    string fulfillmentId?;
    # The sytem generated Id.
    string id?;
    *FulfillmentItemCommon;
};

public type PUTBulkCreditMemosRequestType record {
    # The container for a list of credit memos. The maximum number of credit memos is 50.
    @constraint:Array {maxLength: 50}
    PUTCreditMemosWithIdType[] memos?;
};

# Information about the tax exempt status of a customer account.
public type SignUpTaxInfo record {
    # EU Value Added Tax ID.
    # 
    # **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
    @constraint:String {maxLength: 25}
    string VATId?;
    # Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.
    # 
    # **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).
    @constraint:String {maxLength: 50}
    string companyCode?;
    # ID of the customer tax exemption certificate. Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 32}
    string exemptCertificateId?;
    # Type of tax exemption certificate that the customer holds. Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 32}
    string exemptCertificateType?;
    # Description of the tax exemption certificate that the customer holds. Applicable if you use Zuora Tax or Connect tax engines.
    @constraint:String {maxLength: 500}
    string exemptDescription?;
    # Date when the customer tax exemption starts, in YYYY-MM-DD format. Applicable if you use Zuora Tax or Connect tax engines.
    string exemptEffectiveDate?;
    # Date when the customer tax exemption expires, in YYYY-MM-DD format. Applicable if you use Zuora Tax or Connect tax engines.
    string exemptExpirationDate?;
    # Jurisdiction in which the customer tax exemption certificate was issued.
    @constraint:String {maxLength: 32}
    string exemptIssuingJurisdiction?;
    # Status of the account tax exemption. Applicable if you use Zuora Tax or Connect tax engines. Required if you use Zuora Tax. 
    "No"|"Yes"|"PendingVerification" exemptStatus?;
};

public type POSTPaymentMethodResponse record {
    *CommonResponse;
    # Internal ID of the payment method that was created.
    string id?;
    POSTPaymentMethodResponse_reasons[] reasons?;
};

public type CreatePMPayPalNativeEC record {
    # ID of a PayPal billing agreement. 
    # example: I-1TJ3GAGG82Y9
    string BAID?;
    # Email address associated with the payment method.
    string email?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type Tenant_product_catalog_body record {
    # Deployment's name.
    string name;
    # Deployment's description.
    string description;
    # Specifies if an email should be sent.
    boolean sendEmail;
    # If sendEmail parameter is set to true, comma separated values of emails can be specified. Example  email1@test.com,email2@test.com.
    string emails?;
    # Content of the email to be sent.
    string comments?;
    # Specifies if inactive products needs to be migrated.
    boolean inActiveProducts;
    # Specifies if active products needs to be migrated.
    boolean activeProducts;
    # Specifies if active rate plans needs to be migrated.
    boolean activeRatePlans;
    # Specifies if inactive active rate plans needs to be migrated.
    boolean inActiveRatePlans;
    # Specifies the compare field to be using during migration.
    "name"|"sku" compareField;
    # Specifies the source tenant id.
    string sourceTenantId;
};

public type PUTSubscriptionResumeType record {
    # The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
    string[] applicationOrder?;
    # If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    boolean applyCredit?;
    # Whether to automatically apply a credit balance to an invoice.
    # 
    # If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.
    # 
    # 
    # To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.
    # 
    # Prerequisite: `invoice` must be `true`. 
    # 
    # **Note:** 
    #   - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.
    #   - This field is deprecated if you have the Invoice Settlement feature enabled.
    boolean applyCreditBalance?;
    # The booking date that you want to set for the amendment contract when you resume the subscription. If `extendsTerm` is `true`, which means you also extend the term, then this field is also the booking date for the Terms and Conditions amendment contract.
    # 
    # This field must be in the `yyyy-mm-dd` format. The default value of this field is the current date when you make the API call. 
    string bookingDate?;
    # Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.
    # 
    # If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.
    # 
    # Prerequisite: The `invoice` or `runBilling` field must be `true`. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    boolean collect = false;
    # The date when the customer notifies you that they want to resume their subscription.
    string contractEffectiveDate?;
    # A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
    string creditMemoReasonCode?;
    # The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
    # 
    # - If this field is specified, the specified date is used as the billing document date. 
    # - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
    string documentDate?;
    # Whether to extend the subscription term by the length of time the suspension is in effect.
    # 
    # Values: `true`, `false`.
    boolean extendsTerm?;
    # **Note:** This field has been replaced by the `runBilling` field. The
    # `invoice` field is only available for backward compatibility.
    # 
    # 
    # Creates an invoice for a subscription. The invoice generated in this
    # operation is only for this subscription, not for the entire customer
    # account.
    # 
    # 
    # If the value is `true`, an invoice is created. If the value is
    # `false`, no action is taken. The default value is `false`.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `196.0` and `207.0`. To use this field in the method, you
    # must set the `zuora-version` parameter to the minor version number in
    # the request header.
    boolean invoice?;
    # **Note:** This field has been replaced by the `invoice` field
    # and the `collect` field. `invoiceCollect` is available only for backward
    # compatibility.
    # 
    # 
    # If `true`, an invoice is generated and payment collected automatically during
    # the subscription process. If `false`, no invoicing or payment
    # takes place.  The invoice generated in this operation is only for this subscription,
    # not for the entire customer account.
    # 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`.
    boolean invoiceCollect = false;
    # **Note:** This field has been replaced by the `targetDate` field. The
    # `invoiceTargetDate` field is only available for backward
    # compatibility.
    # 
    # 
    # Date through which to calculate charges if an invoice is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `207.0` and earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string invoiceTargetDate?;
    # The date when the order is signed. If no additinal contractEffectiveDate is provided, this order will use this order date as the contract effective date.
    # This field must be in the `yyyy-mm-dd` format.
    # This field is required for Orders customers only, not applicable to Orders Harmonization customers.
    string orderDate?;
    # The length of the period used to specify when the subscription is resumed. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the `resumePeriodsType` field to specify the period.
    # 
    # **Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.
    string resumePeriods?;
    # The period type used to define when the subscription resumption takes effect. The subscription resumption takes effect after a specified period based on the suspend date or today's date. You must use this field together with the `resumePeriods` field to specify the period.
    # 
    # Values: `Day`, `Week`, `Month`, `Year`
    # 
    # **Note:** This field is only applicable when the `suspendPolicy` field is set to `FixedPeriodsFromToday` or `FixedPeriodsFromSuspendDate`.
    string resumePeriodsType?;
    # Resume methods. Specify a way to resume a subscription.
    # 
    # Values:
    # 
    # * `Today`: The subscription resumption takes effect on today's date.
    # 
    # * `FixedPeriodsFromSuspendDate`: The subscription resumption takes effect after a specified period based on the suspend date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.
    # 
    # * `SpecificDate`: The subscription resumption takes effect on a specific date. You must define the specific date in the `resumeSpecificDate` field.
    # 
    # * `FixedPeriodsFromToday`: The subscription resumption takes effect after a specified period based on the today's date. You must specify the `resumePeriods` and `resumePeriodsType` fields to define the period.
    # * `suspendDate`: The subscription resumption takes effect on the date of suspension of the subscription.
    string resumePolicy;
    # A specific date when the subscription resumption takes effect, in the format yyyy-mm-dd.
    # 
    # **Note:** This field is only applicable only when the `resumePolicy` field is set to `SpecificDate`.
    # 
    # The value should not be earlier than the subscription suspension date.
    string resumeSpecificDate?;
    # Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  
    # 
    # 
    # The billing documents generated
    # in this operation is only for this subscription, not for the entire
    # customer account.
    # 
    # 
    # Possible values:
    # 
    # - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.
    # 
    # 
    # - `false`: No invoice is created.
    # 
    # 
    # **Note:** This field is in Zuora REST API version control. Supported
    # minor versions are `211.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method,
    # you must set the `zuora-version` parameter to the minor version number
    # in the request header.
    true|false runBilling = false;
    # Date through which to calculate charges if an invoice or a credit memo is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `211.0` and later. To use this field in the method, you
    # must set the  `zuora-version` parameter to the minor version number in
    # the request header.
    string targetDate?;
};

public type ExpandedAmendment record {|
    # The unique identifier of the amendment.
    string id?;
    # The unique identifier of the user who created the amendment.
    string createdById?;
    # The time that the amendment gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the amendment.
    string updatedById?;
    # The time that the amendment gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # Indicates whether the amendment is automatically renewed.
    boolean autoRenew?;
    # The amendment code.
    string code?;
    # The date when the amendment becomes effective for billing purposes,
    # as `yyyy-mm-dd`.
    string contractEffectiveDate?;
    # The length of the period for the current subscription term.
    int currentTerm?;
    # The period type for the current subscription term.
    "Month"|"Year"|"Day"|"Week" currentTermPeriodType?;
    # The date when the customer accepts the amendment changes to
    # the subscription, as `yyyy-mm-dd`.
    string customerAcceptanceDate?;
    # Description of the amendment.
    string description?;
    # The date when the amendment changes take effective.
    string effectiveDate?;
    # Effective Policy for the subscription. 
    # 
    # The value depends on the following conditions:
    # * If the rate plan change (from old to new) is an upgrade, the effective policy is `EffectiveImmediately` by default.
    # * If the rate plan change (from old to new) is a downgrade, the effective policy is `EffectiveEndOfBillingPeriod` by default.
    # * Otherwise, the effective policy is `SpecificDate` by default.
    # 
    # **Note:** This feature is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).
    "EffectiveImmediately"|"EffectiveEndOfBillingPeriod"|"SpecificDate" effectivePolicy?;
    # The name of the amendment.
    string name?;
    # The ID of the rate plan charge on which amendment is made. Only
    # the Add or Update amendment returns a new rate plan ID.
    string newRatePlanId?;
    # The ID of the rate plan charge that is removed from the subscription. Only
    # the Remove Product amendment returns a removed rate plan ID.
    string removedRatePlanId?;
    # Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
    "RENEW_WITH_SPECIFIC_TERM"|"RENEW_TO_EVERGREEN" renewalSetting?;
    # The term of renewal for the amended subscription.
    int renewalTerm?;
    # The period type for the subscription renewal term.
    "Month"|"Year"|"Day"|"Week" renewalTermPeriodType?;
    # The date when the subscription resumption takes effect, as `yyyy-mm-dd`.
    # 
    # **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    string resumeDate?;
    # The date when service is activated, as `yyyy-mm-dd`.
    string serviceActivationDate?;
    # The date when the Update Product amendment takes effect.
    # 
    # Only for the Update Product amendments if there is already 
    # a future-dated Update Product amendment on the subscription.
    string specificUpdateDate?;
    # The status of the amendment.
    "Draft"|"Pending Activation"|"Pending Acceptance"|"Completed" status?;
    # The ID of the subscription based on which the amendment is created.
    string subscriptionId?;
    # The date when the subscription suspension takes effect, as `yyyy-mm-dd`.
    # 
    # **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    string suspendDate?;
    # The date when the new terms and conditions take effect.
    string termStartDate?;
    # Indicates if the subscription is termed or evergreen.
    "TERMED"|"EVERGREEN" termType?;
    # Type of the amendment.
    "Cancellation"|"NewProduct"|"OwnerTransfer"|"RemoveProduct"|"Renewal"|"UpdateProduct"|"TermsAndConditions"|"ChangePlan" 'type?;
    # The sub type for the change plan order action.
    # 
    # If this field was not set by user, the field is automatically generated by the system according to the following rules:
    # 
    # When the old and new rate plans are within the same Grading catalog group:
    # * If the grade of new plan is greater than that of the old plan, this is an "Upgrade".
    # * If the grade of new plan is less than that of the old plan, this is a "Downgrade".
    # * If the grade of new plan equals that of the old plan, this is a "Crossgrade".
    # 
    # When the old and new rate plans are not in the same Grading catalog group, or either has no group, this is "PlanChanged".
    "Upgrade"|"Downgrade"|"Crossgrade"|"PlanChanged" subType?;
    string bookingDate?;
|};

public type POSTSubscriptionType record {
    # Customer account number or ID
    string accountKey;
    # The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
    # 
    # **Note:**
    #   - This field is valid only if the `applyCredit` field is set to `true`.
    #   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
    #   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
    string[] applicationOrder?;
    # If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.
    # 
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    boolean applyCredit?;
    # Whether to automatically apply a credit balance to an invoice.
    # 
    # If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.
    # 
    # 
    # To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.
    # 
    # Prerequisite: `invoice` must be `true`. 
    # 
    # **Note:** 
    #   - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.
    #   - This field is deprecated if you have the Invoice Settlement feature enabled.
    boolean applyCreditBalance?;
    # If true, this subscription automatically renews at the end of the subscription term.
    # 
    # This field is only required if the `termType` field is set to `TERMED`.
    boolean autoRenew = false;
    # Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.
    # 
    # If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.
    # 
    # Prerequisite: The `invoice` or `runBilling` field must be `true`. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    boolean collect = true;
    # Effective contract date for this subscription, as yyyy-mm-dd
    string contractEffectiveDate;
    # A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.
    string creditMemoReasonCode?;
    # The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.
    # 
    # Default value is dependent on the value of other fields. See **Notes** section for more details.
    string customerAcceptanceDate?;
    # The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
    # 
    # - If this field is specified, the specified date is used as the billing document date. 
    # - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
    string documentDate?;
    # An enum field on the Subscription object to indicate the name of a third-party store. This field is used to represent subscriptions created through third-party stores.
    "Amazon"|"Apple"|"Google"|"Roku" externallyManagedBy?;
    # The ID of the payment gateway instance. For example, `2c92c0f86078c4d5016091674bcc3e92`.
    # 
    # If <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Payment_Gateway_Routing" target="_blank">Payment Gateway Routing</a> is enabled: 
    #   - If this field is not specified, gateway routing rules will be invoked.
    #   - If this field is specified, the specified gateway will be used to process the payment.
    # 
    # If Payment Gateway Routing is disabled:
    #   - If this field is not specified, the default payment gateway will be used to process the payment. The default gateway of the customer account takes precedence over the default gateway of the tenant. 
    #   - If this field is specified, the specified gateway will be used to process the payment.
    string gatewayId?;
    # The length of the period for the first subscription term. If `termType` is `TERMED`, then this field is required, and the value must be greater than `0`. If `termType` is `EVERGREEN`, this field is ignored.
    int initialTerm?;
    # The period type for the first subscription term.
    # 
    # This field is used with the `InitialTerm` field to specify the initial subscription term.
    # 
    # Values are:
    # 
    # * `Month` (default)
    # * `Year`
    # * `Day`
    # * `Week`
    string initialTermPeriodType?;
    # **Note:** This field has been replaced by the `runBilling` field. The
    # `invoice` field is only available for backward compatibility.
    # 
    # 
    # Creates an invoice for a subscription. The invoice generated in this
    # operation is only for this subscription, not for the entire customer
    # account.
    # 
    # 
    # If the value is `true`, an invoice is created. If the value is
    # `false`, no action is taken. The default value is `true`. 
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `196.0` and `207.0`. To use this field in the method, you
    # must set the zuora-version parameter to the minor version number in
    # the request header.
    boolean invoice?;
    # **Note:** This field has been replaced by the `invoice` field
    # and the `collect` field. `invoiceCollect` is available only for backward compatibility.
    # 
    # 
    # If this field is set to `true`, an invoice is generated and payment collected automatically
    # during the subscription process. If `false`, no invoicing or payment takes
    # place. The invoice generated in this operation is only for this subscription,
    # not for the entire customer account.
    # 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`.
    boolean invoiceCollect = true;
    # Invoice owner account number or ID.
    # 
    # **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    string invoiceOwnerAccountKey?;
    # Separates a single subscription from other subscriptions and invoices the charge independently. 
    # 
    # If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.
    # 
    # The default value is `false`.
    # 
    # Prerequisite: The default subscription setting Enable Subscriptions to be Invoiced Separately must be set to Yes.
    boolean invoiceSeparately?;
    # **Note:** This field has been replaced by the `targetDate` field. The
    # `invoiceTargetDate` field is only available for backward
    # compatibility.
    # 
    # 
    # Date through which to calculate charges if an invoice is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `207.0` and earlier [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string invoiceTargetDate?;
    # The last booking date of the subscription object. This field is writable only when the subscription is newly created as a first version subscription. You can override the date value when creating a subscription through the Subscribe and Amend API or the subscription creation UI (non-Orders). Otherwise, the default value `today` is set per the user's timezone. The value of this field is as follows:
    # * For a new subscription created by the [Subscribe and Amend APIs](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Subscribe_and_Amend_APIs_to_Migrate), this field has the value of the subscription creation date.
    # * For a subscription changed by an amendment, this field has the value of the amendment booking date.
    # * For a subscription created or changed by an order, this field has the value of the order date. 
    string lastBookingDate?;
    # String of up to 500 characters.
    string notes?;
    # The ID of the payment method used for the payment.
    string paymentMethodId?;
    # Indicates whether the subscription will consume the reserved payment amount of the customer account. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information. 
    boolean prepayment?;
    # Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
    # 
    # Values:
    # 
    # * `RENEW_WITH_SPECIFIC_TERM` (default)
    # * `RENEW_TO_EVERGREEN`
    string renewalSetting?;
    # The length of the period for the subscription renewal term. Default is `0`.
    int renewalTerm;
    # The period type for the subscription renewal term.
    # 
    # This field is used with the `renewalTerm` field to specify the subscription renewal term.
    # 
    # Values are:
    # 
    # * `Month` (default)
    # * `Year`
    # * `Day`
    # * `Week`
    string renewalTermPeriodType?;
    # Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  
    # 
    # 
    # The billing documents generated
    # in this operation is only for this subscription, not for the entire
    # customer account.
    # 
    # 
    # Possible values:
    # 
    # - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.
    # 
    # 
    # - `false`: No invoice is created.
    # 
    # 
    # **Note:** This field is in Zuora REST API version control. Supported
    # minor versions are `211.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version). To use this field in the method,
    # you must set the `zuora-version` parameter to the minor version number
    # in the request header.
    true|false runBilling = true;
    # The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.
    # 
    # Default value is dependent on the value of other fields. See **Notes** section for more details.
    string serviceActivationDate?;
    # Container for one or more rate plans for this subscription.
    POSTSrpCreateType[] subscribeToRatePlans;
    # Subscription Number. The value can be up to 1000 characters.
    # 
    # If you do not specify a subscription number when creating a subscription, Zuora will generate a subscription number automatically.
    # 
    # If the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.
    string subscriptionNumber?;
    # Date through which to calculate charges if an invoice or a credit memo is generated, as
    # yyyy-mm-dd. Default is current date.
    # 
    # 
    # **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.
    # 
    # 
    # This field is in Zuora REST API version control. Supported minor
    # versions are `211.0` and later. To use this field in the method, you
    # must set the  `zuora-version` parameter to the minor version number in
    # the request header.
    string targetDate?;
    # The date on which the subscription term begins, as yyyy-mm-dd. If this is a renewal subscription, this date is different from the subscription start date.
    string termStartDate?;
    # Possible values are: `TERMED`, `EVERGREEN`.
    string termType;
    *SubscriptionObjectQTFields;
    *SubscriptionObjectNSFields;
    *SubscriptionObjectCustomFields;
};

public type DebitMemoFromChargeRequest record {
    # The ID of the account associated with the debit memo.
    # 
    # **Note**: When creating debit memos from product rate plan charges, you must specify `accountNumber`, `accountId`, or both in the request body. If both fields are specified, they must correspond to the same account.
    string accountId?;
    # The number of the account associated with the debit memo.
    # 
    # **Note**: When creating debit memos from product rate plan charges, you must specify `accountNumber`, `accountId`, or both in the request body. If both fields are specified, they must correspond to the same account.
    string accountNumber?;
    # Whether debit memos are automatically picked up for processing in the corresponding payment run. 
    # 
    # By default, debit memos are automatically picked up for processing in the corresponding payment run.
    boolean autoPay?;
    # Whether to automatically post the debit memo after it is created. 
    # 
    # Setting this field to `true`, you do not need to separately call the [Post a debit memo](https://developer.zuora.com/api-references/api/operation/PUT_PostDebitMemo) operation to post the debit memo.
    boolean autoPost?;
    # Container for product rate plan charges. The maximum number of items is 1,000.
    @constraint:Array {maxLength: 1000}
    DebitMemoFromChargeDetailType[] charges?;
    # Comments about the debit memo.
    @constraint:String {maxLength: 255}
    string comment?;
    # The code of a currency as defined in Billing Settings through the Zuora UI.
    # 
    # If you do not specify a currency during debit memo creation, the default account currency is applied. The currency that you specify in the request must be configured and activated in Billing Settings.
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    string currency?;
    # It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item or Reporting currency item or both).
    # 
    # **Note**: The API custom rate feature is permission controlled.
    @constraint:Array {maxLength: 2}
    DebitMemoFromChargeCustomRatesType[] customRates?;
    # The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.
    string dueDate?;
    # The date when the debit memo takes effect.
    string effectiveDate?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    string reasonCode?;
    *DebitMemoObjectNSFields;
    *DebitMemoObjectCustomFields;
};

# Container for the finance information related to the taxation item in the credit memo item.
public type PutCreditMemoTaxItemType_financeInformation record {
    # The accounting code that maps to an on account in your accounting system.
    @constraint:String {maxLength: 100}
    string onAccountAccountingCode?;
    # The accounting code for the sales taxes payable.
    @constraint:String {maxLength: 100}
    string salesTaxPayableAccountingCode?;
};

public type GETPaymentMethodResponseACHForAccount record {
    # The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.
    string bankABACode?;
    # The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.
    string bankAccountName?;
};

# Container for custom fields of a Rate Plan object.
public type OrderActionRatePlanRatePlanObjectCustomFields record {
};

public type GETPaymentScheduleStatisticResponse_paymentScheduleItems record {
    # The number of errored payment schedule items.              
    int 'error?;
    # The number of pending payment schedule items.
    int pending?;
    # The number of processed payment schedule items. 
    int processed?;
};

public type DeleteAccountResponseType_reasons record {
    # The error code of the response.
    string code?;
    # The detail information of the error response.
    string message?;
};

# The container of the mandate information for the payment method.
public type CreatePaymentMethodCCReferenceTransaction_mandateInfo record {
    # The mandate ID.
    @constraint:String {maxLength: 36}
    string mandateId?;
    # The reason of the mandate from the gateway side.
    @constraint:String {maxLength: 64}
    string mandateReason?;
    # The status of the mandate from the gateway side.
    @constraint:String {maxLength: 64}
    string mandateStatus?;
};

public type POSTIneligibleAdjustmentResponseType record {
    # The system generated delivery adjustment ID.
    string adjustmentId?;
    # The system generated delivery adjustment number.
    string adjustmentNumber?;
    # The amount of the delivery adjustment.
    string amount?;
    # The billing date of the delivery adjustment.
    string billingDate?;
    # The charge number in the subscription for which the delivery adjustment is created.
    string chargeNumber?;
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string deferredRevenueAccountingCode?;
    # The delivery adjustment date, in `yyyy-mm-dd` format.
    string deliveryDate?;
    # The delivery adjustment day of the week.
    string deliveryDay?;
    # The eligible flag is set as false for an unsuccessful delivery adjustment.
    boolean eligible?;
    # The reason due to which a delivery adjustment is not eligible on the given date. 
    string errorMessage?;
    # The reason for the delivery adjustment.
    string reason?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string recognizedRevenueAccountingCode?;
    # The name of the revenue recognition rule governing the revenue schedule.
    # 
    # **Note**: For the credit memo generated by the delivery adjustment, if this field is not specified, the value inherits from the subscription rate plan charge.
    string revenueRecognitionRuleName?;
    # The status of the delivery adjustment.
    string status?;
    # The subscription number for which the delivery adjustment is created.
    string subscriptionNumber?;
};

# Payment run statistic.
public type PaymentRunStatistic record {
    # The date and time the payment run is completed.
    string completedOn?;
    # The date and time the payment run is executed.
    string executedOn?;
    # Payment run number.
    string number?;
    # Number of errored payments
    int numberOfErrors?;
    # Number of processed payments.
    int numberOfPayments?;
    # Payment run status.
    string status?;
};

public type PUTOrderActionTriggerDatesRequestType_charges record {
    # Charge number of the charge which needs the triggering date to be provided. The charge's `triggerEvent` must have been set as `SpecificDate`.
    string chargeNumber?;
    # Date in YYYY-MM-DD format. The specific trigger date you are to set for the charge.
    string specificTriggerDate?;
};

# Container for Product Rate Plan fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type ProductRatePlanObjectNSFields record {
    # Billing period associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    "Monthly"|"Quarterly"|"Annual"|"Semi-Annual" BillingPeriod__NS?;
    # Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Class__NS?;
    # Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Department__NS?;
    # Specifies whether the corresponding item in NetSuite is visible under child subsidiaries. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    "Yes"|"No" IncludeChildren__NS?;
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the product rate plan's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Type of item that is created in NetSuite for the product rate plan. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    "Inventory"|"Non Inventory"|"Service" ItemType__NS?;
    # Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Location__NS?;
    # Multi-currency price associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string MultiCurrencyPrice__NS?;
    # Price associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Price__NS?;
    # Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Subsidiary__NS?;
    # Date when the product rate plan was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
};

public type PUTSubscriptionSuspendResponseType record {
    # The credit memo ID, if a credit memo is generated during the subscription process.
    # 
    # **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string creditMemoId?;
    # Invoice ID, if an invoice is generated during the subscription process.
    string invoiceId?;
    # Payment amount, if a payment is collected.
    decimal paidAmount?;
    # Payment ID, if a payment is collected.
    string paymentId?;
    # The date when subscription resumption takes effect, in the format yyyy-mm-dd.
    string resumeDate?;
    # The subscription ID.
    string subscriptionId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The date when subscription suspension takes effect, in the format yyyy-mm-dd.
    string suspendDate?;
    # The date when the new subscription term ends, in the format yyyy-mm-dd.
    string termEndDate?;
    # Change in the total contracted value of the subscription as a result of the update.
    decimal totalDeltaTcv?;
};

public type PostOrderResponseType_writeOff record {
    # The amount written off from the invoice balance.
    @constraint:Number {minValue: 9, maxValue: 22}
    decimal amount?;
    # The reason of write-off failure.
    string failedReason?;
    # The number of the invoice that is written off. For example, `INV00051208`.
    @constraint:String {maxLength: 255}
    string invoiceNumber?;
    # The status of the write-off.
    "Success"|"Failed" status?;
    # The number of the credit memo that is written off.
    @constraint:String {maxLength: 255}
    string writeOffCreditMemoNumber?;
};

public type PreviewOrderPricingUpdate record {
    # Container for charge model configuration data.
    # 
    # **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The High Water Mark and Pre-Rated Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    ChargeModelDataOverride chargeModelData?;
    # Pricing information about a discount charge.
    DiscountPricingUpdate discount?;
    # Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    RecurringFlatFeePricingUpdate recurringFlatFee?;
    # Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
    RecurringPerUnitPricingUpdate recurringPerUnit?;
    # Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
    RecurringTieredPricingUpdate recurringTiered?;
    # Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
    RecurringVolumePricingUpdate recurringVolume?;
    # Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
    UsageFlatFeePricingUpdate usageFlatFee?;
    # Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
    UsageOveragePricingUpdate usageOverage?;
    # Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
    UsagePerUnitPricingUpdate usagePerUnit?;
    # Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
    UsageTieredPricingUpdate usageTiered?;
    # Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
    UsageTieredWithOveragePricingUpdate usageTieredWithOverage?;
    # Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
    UsageVolumePricingUpdate usageVolume?;
};

public type ExpandedCreditMemoItem record {|
    # The unique identifier of the credit memo item.
    string id?;
    # The unique identifier of the user who created the credit memo item.
    string createdById?;
    # The date and time when the credit memo item was created.
    string createdDate?;
    # The unique identifier of the user who last updated the credit memo item.
    string updatedById?;
    # The date and time when the credit memo item was last updated.
    string updatedDate?;
    # The amount of the credit memo item. For tax-inclusive credit memo
    # items, the amount indicates the credit memo item amount including tax.
    # For tax-exclusive credit memo items, the amount indicates the credit
    # memo item amount excluding tax.
    decimal amount?;
    # The credit memo item amount excluding tax.
    decimal amountWithoutTax?;
    # The unique ID of the credit memo item that the discount charge is applied to.
    string appliedToItemId?;
    # The amount of the credit memo that is applied to other credit memo
    # items.
    decimal appliedToOthersAmount?;
    decimal beAppliedByOthersAmount?;
    # The date when the credit memo item is charged, in `yyyy-mm-dd hh:mm:ss` format.
    string chargeDate?;
    # The description of the credit memo item.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string description?;
    # The flag to exclude the credit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The reference ID of the fulfillment associated with the credit memo item.
    string fulfillmentId?;
    # The ID of the invoice schedule associated with the credit memo item. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleId?;
    # The ID of the invoice schedule item associated with the credit memo item. The credit memo item is generated during the processing of the invoice schedule item.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleItemId?;
    # The ID of the sold-to contact associated with the credit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactId?;
    # The ID of the sold-to contact snapshot associated with the credit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactSnapshotId?;
    # The type of the credit memo item.
    string itemType?;
    # The ID of the order line item associated with the credit memo item, if applicable.
    string orderLineItemId?;
    # The type of the charge for the credit memo item. 
    "Charge"|"Discount" processingType?;
    # The number of units for the credit memo item.
    decimal quantity?;
    # The purchase order number associated the credit memo item.
    string purchaseOrderNumber?;
    # The type of the credit from item.
    "InvoiceItem"|"CreditMemoItem" creditFromItemSource?;
    # The ID of the credit from item.
    string creditFromItemId?;
    # The service end date of the credit memo item. 
    string serviceEndDate?;
    # The service start date of the credit memo item.
    string serviceStartDate?;
    # The SKU for the product associated with the credit memo item.
    string sku?;
    # The type of the source item.
    # 
    # - If a credit memo is not created from an invoice or a product rate plan charge or a return order line item, the value of this field is `SubscriptionComponent`. 
    # - If a credit memo is created from an invoice, the value of this field is `InvoiceDetail`.
    # - If a credit memo is created from a product rate plan charge, the value of this field is `ProductRatePlanCharge`.
    # - If a credit memo is created from a return order line item, the value of this field is `OrderLineItem`.
    #               
    "SubscriptionComponent"|"InvoiceDetail"|"ProductRatePlanCharge"|"OrderLineItem" sourceItemType?;
    # The ID of the subscription associated with the credit memo item.
    string subscriptionId?;
    # The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # The name of the charge associated with the credit memo item. 
    string chargeName?;
    # The number of the product rate plan charge that the credit memo is created from.
    string chargeNumber?;
    string commitmentChargeSegmentNumber?;
    string commitmentChargeNumber?;
    # The amount of the tax applied to the credit memo item.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific credit memo item.
    string taxCodeName?;
    # The calculated tax amount excluded due to the exemption.
    decimal taxExemptAmount?;
    # The unapplied amount of the credit memo item.
    decimal unappliedAmount?;
    # The units to measure usage.
    string unitOfMeasure?;
    # The per-unit price of the credit memo item.
    decimal unitPrice?;
    # The number of the subscription associated with the credit memo item.
    string subscriptionNumber?;
    # The ID of the invoice item associated with the credit memo item.
    string invoiceItemId?;
    # The ID of the product rate plan charge that the credit memo is created
    # from.
    string productRatePlanChargeId?;
    # The ID of the rate plan charge associated with the credit memo item.
    string ratePlanChargeId?;
    # The name of the revenue recognition rule governing the revenue schedule.
    string revenueRecognitionRuleName?;
    # The ID of the credit memo to which this credit memo item belongs.
    string creditMemoId?;
    # The number of deliveries dedicated to the Delivery Pricing charges. The value might be different, as follows:
    # - For the credit memo generated by a bill run, this field has a value. 
    # - For the credit memo generated from an invoice, this field is blank.
    # **Note**: This field is available only if you have the Delivery Pricing feature enabled.
    decimal numberOfDeliveries?;
    # The Recognized Revenue accounting code for the credit memo item.
    string recognizedRevenueAccountingCodeId?;
    # The Account Receivable accounting code for the credit memo item.
    string accountReceivableAccountingCodeId?;
    # The On Account accounting code for the credit memo item.
    string onAccountAccountingCodeId?;
    # The Deferred Revenue accounting code for the credit memo item.
    string deferredRevenueAccountingCodeId?;
    # The ID of the journal entry that corresponds to this credit memo item.
    string journalEntryId?;
    # The ID of the sold-to contact snapshot associated with the credit memo.
    string soldToContactSnapshotId?;
    # The ID of the bill-to contact snapshot associated with the credit memo.
    string billToContactSnapshotId?;
    NestedSubscriptionOnExpand subscription?;
    NestedRatePlanChargeOnExpand ratePlanCharge?;
|};

# Container for the prefix and starting document number of invoices.
public type InvoiceEntityPrefix record {
    # The prefix of invoices.
    string prefix?;
    # The starting document number of invoices.
    int startNumber?;
};

public type GETCatalogType record {
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Container for one or more products:
    GETProductType[] products?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type RegenerateTransactionObjectResponse record {
    # A list of the IDs for the business objects for which you generate the transactions. 
    string[] idList?;
    ResponseReasons[] reasons?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type PaymentDebitMemoApplicationUnapplyRequestType record {
    # The amount of the payment that is unapplied from the debit memo.
    decimal amount;
    # The unique ID of the debit memo that the payment is unapplied from.
    string debitMemoId?;
    # The number of the debit memo that the payment is unapplied from.
    string debitMemoNumber?;
    # Container for debit memo items. The maximum number of items is 1,000.
    # 
    # **Note:** This field is only available if you have the [Invoice Item Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/C_Invoice_Item_Settlement) feature enabled. Invoice Item Settlement must be used together with other Invoice Settlement features (Unapplied Payments, and Credit and Debit memos).  If you wish to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    PaymentDebitMemoApplicationItemUnapplyRequestType[] items?;
};

public type PaymentDebitMemoApplicationItemCreateRequestType record {
    # The amount of the payment associated with the specific debit memo or taxation item.
    decimal amount;
    # The ID of the specific debit memo item.
    string debitMemoItemId?;
    # The ID of the specific taxation item.
    string taxItemId?;
};

# Container for the debit memo that is automatically generated during the credit memo reversal.
public type PutReverseCreditMemoResponseType_debitMemo record {
    # The ID of the debit memo.
    string id?;
};

public type RevproAccountingCodes record {
    # The name of the account where the Account Type is "Adjustment Liability".
    @constraint:String {maxLength: 100}
    string adjustmentLiabilityAccount;
    # The name of the account where the Account Type is "Adjustment Revenue".
    @constraint:String {maxLength: 100}
    string adjustmentRevenueAccount;
    # The name of the account where the Account Type is "Contract Asset".
    @constraint:String {maxLength: 100}
    string contractAssetAccount;
    # The name of the account where the Account Type is "Contract Liability".
    @constraint:String {maxLength: 100}
    string contractLiabilityAccount;
    # The ID of your product rate plan charge.
    string productRatePlanChargeId;
    # The name of the account where the Account Type is "Recognized Revenue".
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccount;
    # The name of the account where the Account Type is "Unbilled Receivables".
    @constraint:String {maxLength: 100}
    string unbilledReceivablesAccount;
};

# Provides details about the different components that need to be compared and deployed.
public type SettingSourceComponentResponse record {
    SettingComponentKeyValue[] customFields?;
    SettingComponentKeyValue[] customObjects?;
    SettingComponentKeyValue[] dataAccessControl?;
    SettingComponentKeyValue[] notifications?;
    SettingComponentKeyValue[] productCatalog?;
    SettingComponentKeyValue[] settings?;
    SettingComponentKeyValue[] workflows?;
};

# The information about the payment that newly processed to the debit memo.
public type DebitMemoCollectResponse_processedPayment record {
    # The total amount of the payment.
    decimal amount?;
    # The ID of the gateway instance that processes the payment.
    string gatewayId?;
    # The message returned from the payment gateway for the payment. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the payment. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The unique ID of the created payment. For example, 4028905f5a87c0ff015a87eb6b75007f.
    string id?;
    # The unique identification number of the payment. For example, P-00000001.
    string number?;
    # The unique ID of the payment method that the customer used to make the payment.
    string paymentMethodId?;
    # The status of the payment.
    "Processing"|"Processed"|"Error"|"Canceled" status?;
};

public type GETAccountingCodesType record {
    # An array of all the accounting codes in your chart of accounts. Each accounting code has the following fields.
    GETAccountingCodeItemWithoutSuccessType[] accountingCodes?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type ExpandedInvoiceItem record {|
    # The unique identifier of the invoice item.
    string id?;
    # The unique identifier of the user who created the invoice item.
    string createdById?;
    # The date and time when the invoice item was created.
    string createdDate?;
    # The unique identifier of the user who last updated the invoice item.
    string updatedById?;
    # The date and time when the invoice item was last updated.
    string updatedDate?;
    # The unique identifier of the invoice to which this invoice item belongs.
    string invoiceId?;
    # The ID of the invoice schedule associated with the rate plan charge on the subscription.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleId?;
    # The ID of the invoice schedule item that generates this invoice item.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleItemId?;
    # The ID of the rate plan charge associated with the invoice item.
    string ratePlanChargeId?;
    # The accounting code associated with the invoice item.
    string accountingCode?;
    # The unique ID of the invoice item that the discount charge is applied
    # to.
    string appliedToInvoiceItemId?;
    # The amount of the charge. 
    # 
    # This amount does not include taxes regardless if the charge's tax mode is inclusive or exclusive.
    string chargeAmount?;
    # The date when the invoice item is charged, in `yyyy-mm-dd hh:mm:ss` format.
    string chargeDate?;
    # The name of the charge.
    string chargeName?;
    # Number of the charge.
    string chargeNumber?;
    string commitmentChargeNumber?;
    string commitmentChargeSegmentNumber?;
    # The description of the invoice item.
    string description?;
    # The amount of the discount.
    decimal discountAmount?;
    # The flag to exclude the invoice item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The reference ID of the fulfillment associated with the invoice item.
    string fulfillmentId?;
    # The ID of the sold-to contact associated with the invoice item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactId?;
    # The ID of the sold-to contact snapshot associated with the invoice item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string itemSoldToContactSnapshotId?;
    # The kind of the charge for the invoice item. 
    "Charge"|"Discount"|"Prepayment"|"Tax"|"Rounding" processingType?;
    # The quantity of this item, in the configured unit of measure for the
    # charge.
    decimal quantity?;
    string revRecStartDate?;
    # The end date of the service period for this item, i.e., the last day
    # of the service period, as _yyyy-mm-dd_.
    string serviceEndDate?;
    # The start date of the service period for this item, as _yyyy-mm-dd_.
    # For a one-time fee item, the date of the charge.
    string serviceStartDate?;
    # The SKU of the product associated with the invoice item.
    string sKU?;
    # The type of the source item.
    "SubscriptionComponent"|"Rounding"|"ProductRatePlanCharge"|"None"|"OrderLineItem" sourceItemType?;
    # ID of the subscription associated with the invoice item.
    string subscriptionId?;
    # Number of the subscription associated with the invoice item.
    string subscriptionNumber?;
    # The amount of tax applied to the charge.
    string taxAmount?;
    # The tax code of the invoice item.
    # **Note** Only when taxation feature is enabled, this field can be presented.
    string taxCode?;
    decimal taxExemptAmount?;
    # The tax mode of the invoice item, indicating whether the amount of the invoice item includes tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # The per-unit price of the invoice item.
    decimal unitPrice?;
    # The unit of measure (UOM) that is configured in **Settings > Billing** for the product rate plan charge.
    string uOM?;
    # The balance of the invoice item.
    # 
    # **Note**: This field is only available if you have the Invoice Settlement feature enabled.
    decimal balance?;
    # The number of deliveries dedicated to the Delivery Pricing charges. 
    # **Note**: This field is available only if you have the Delivery Pricing feature enabled. 
    decimal numberOfDeliveries?;
    # ID of the account receivable accounting code associated with the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string accountReceivableAccountingCodeId?;
    # ID of the recognized revenue accounting code associated with the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string recognizedRevenueAccountingCodeId?;
    # ID of the deferred revenue accounting code associated with the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string deferredRevenueAccountingCodeId?;
    # ID of the accounting code for contract asset. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractAssetAccountingCodeId?;
    # ID of the accounting code for contract liability. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractLiabilityAccountingCodeId?;
    # ID of the accounting code for contract recognized revenue. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractRecognizedRevenueAccountingCodeId?;
    string unbilledReceivablesAccountingCodeId?;
    # The accounting code for adjustment revenue. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string adjustmentRevenueAccountingCodeId?;
    # ID of the accounting code for adjustment liability. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string adjustmentLiabilityAccountingCodeId?;
    # The ID of the journal entry that corresponds to this invoice item.
    string journalEntryId?;
    # The ID of the account associated with the invoice item.
    string accountId?;
    # The ID of the bill-to contact snapshot associated with the invoice.
    string billToContactSnapshotId?;
    # The ID of the sold-to contact snapshot associated with the invoice.
    string soldToContactSnapshotId?;
    # The parent account of the account associated with the invoice.
    # 
    # **Note**: This field is available only if you have <a
    # href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy"
    # target="_blank">Customer Hierarchy</a> enabled for your tenant.
    string parentAccountId?;
    # The ID of the bill-to contact associated with the invoice.
    string billToContactId?;
    # The ID of the sold-to contact associated with the invoice.
    string soldToContactId?;
    # The ID of the default payment method on the associated account.
    string defaultPaymentMethodId?;
    # The ID of the rate plan that the invoice is created from.
    string ratePlanId?;
    # The ID of the amendment associated with the subscription. 
    # 
    # **Note**: This field is available only if you do not have Orders enabled for your tenant.
    string amendmentId?;
    # The ID of the product rate plan charge that the invoice item is created from.
    string productRatePlanChargeId?;
    # The ID of the product rate plan that the invoice item is created from.
    string productRatePlanId?;
    # The ID of the product that the invoice item is created from.
    string productId?;
    # The booking reference of the invoice item.
    string bookingReference?;
    # The type of the invoice item.
    string itemType?;
    # The purchase order number associated with the invoice item.
    string purchaseOrderNumber?;
    # The revenue recognition code.
    string revRecCode?;
    # The date when revenue recognition is triggered.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate" revRecTriggerCondition?;
    # The revenue recognition rule of the invoice item.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string revenueRecognitionRuleName?;
    # The reference ID of the oder line item associated with the invoice item.
    string orderLineItemId?;
    NestedInvoiceOnExpand invoice?;
    NestedSubscriptionOnExpand subscription?;
    ExpandedTaxationItem[] taxationItems?;
    NestedRatePlanChargeOnExpand ratePlanCharge?;
    NestedOrderLineItemOnExpand orderLineItem?;
|};

# 
public type PUTPublicNotificationDefinitionRequest_filterRule record {
    # The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/).
    # The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects). Notifications with invalid merge fields will fail to evaluate, thus will not be invoked. For example, to trigger an event when an invoice is posted with the amount over 1000, you would define the following condition on the `Invoice` object:
    # 
    # ```changeType == 'UPDATE' && Invoice.Status == 'Posted' && Invoice.Status_old != 'Posted' && Invoice.Amount > 1000```
    # 
    # There are conventions and keywords you need to be aware of. For example:
    # 
    # * `changeType` is a keyword to specify what kind of change happened to the object. Allowed values are `INSERT`, `UPDATE` or `DELETE`.
    # 
    # * `Invoice.Status` refers to field `Status` of the Zuora object `Invoice`.
    # 
    # * A variable with the `_old` suffix means it’s a previous value of the corresponding object field. The "_old" fields are only available on the base objects.
    string condition;
    # The description of the filter rule.
    @constraint:String {maxLength: 255}
    string description?;
    # The parameters of the filter rule and their name must match those in the filter rule. And all parameters must be defined in the event type payload. The name of parameters can't be duplicate. The following reserved keywords should not be used as a parameter name: `AttachmentList`, `RecipientList`, `RecipientType`, `Exceptions`, `OCP_OBJECT_TYPE`, `OCP_OBJECT_ID`, `OCP_TRIGGER_BY`
    FilterRuleParameterDefinitions parameters;
};

public type GETCreditMemoType record {
    # The ID of the customer account associated with the credit memo.
    string accountId?;
    # The number of the customer account associated with the credit memo.
    string accountNumber?;
    # The total amount of the credit memo.
    decimal amount?;
    # The applied amount of the credit memo.
    decimal appliedAmount?;
    # Whether the credit memo automatically applies to the invoice upon posting.
    boolean autoApplyUponPosting?;
    # The ID of the bill-to contact associated with the credit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string billToContactId?;
    # The ID of the bill-to contact snapshot associated with the credit memo.
    # 
    # The value of this field is `null` if the bill rule [Preserve snapshot of bill-to and sold-to contacts when billing documents are posted](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Billing_Rules#Preserve_snapshot_of_bill-to_and_sold-to_contacts_when_billing_documents_are_posted) is disabled.
    string billToContactSnapshotId?;
    # The ID of the Zuora user who cancelled the credit memo.
    string cancelledById?;
    # The date and time when the credit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the credit memo.
    string comment?;
    # The ID of the Zuora user who created the credit memo.
    string createdById?;
    # The date and time when the credit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The date when the credit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.
    string creditMemoDate?;
    # The currency of the credit memo.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # The error code returned when the e-invoice file status is `Failed`. This code can either be a Zuora-generated error code or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorCode?;
    # The error message returned when the e-invoice file status is `Failed`. This message can either be a Zuora-generated error message or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorMessage?;
    # The ID of the e-invoice file generated for the credit memo.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceFileId?;
    # The status of the e-invoice file generation for the credit memo. 
    # 
    # - If e-invoice file generation succeeds, this field is either `Generated` or `Success`, and both the error code and message are empty, and the `eInvoiceFileId` field stores the ID of the generated e-invoice file.
    # - If a failure occurs during e-invoice file generation, this field is `Failed` and an error code and an error message are returned respectively in the `einvoiceErrorCode` and `einvoiceErrorMessage` fields. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    "Processing"|"Generated"|"Success"|"Failed" einvoiceStatus?;
    # Whether the credit memo is excluded from the rule of automatically
    # applying credit memos to invoices.
    boolean excludeFromAutoApplyRules?;
    # The flag to exclude the credit memo item from revenue accounting.
    # 
    # 
    # **Note**: This field is only available if you have the Billing -
    # Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The unique ID of the credit memo.
    string id?;
    # The number of the invoice group associated with the credit memo.
    # 
    # 
    # The value of this field is `null` if you have the [Flexible Billing
    # Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes)
    # feature disabled.
    string? invoiceGroupNumber?;
    # The ID of the latest PDF file generated for the credit memo.
    string latestPDFFileId?;
    # The unique identification number of the credit memo.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the Zuora user who posted the credit memo.
    string postedById?;
    # The date and time when the credit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.
    string postedOn?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty.
    string reasonCode?;
    # The ID of a referred invoice.
    string referredInvoiceId?;
    # The amount of the refund on the credit memo.
    decimal refundAmount?;
    # Whether the credit memo is reversed.
    boolean reversed?;
    # The ID of the sequence set associated with the credit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string sequenceSetId?;
    # The source of the credit memo.
    # 
    # Possible values:
    # - `BillRun`: The credit memo is generated by a bill run.
    # - `API`: The credit memo is created by calling the [Invoice and collect](https://developer.zuora.com/api-references/api/operation/POST_TransactionInvoicePayment) operation, or by calling the Orders, Order Line Items, or Fulfillments API operations.
    # - `ApiSubscribe`: The credit memo is created by calling the [Create subscription](https://developer.zuora.com/api-references/api/operation/POST_Subscription) and [Create account](https://developer.zuora.com/api-references/api/operation/POST_Account) operation.
    # - `ApiAmend`: The credit memo is created by calling the [Update subscription](https://developer.zuora.com/api-references/api/operation/PUT_Subscription) operation.
    # - `AdhocFromPrpc`: The credit memo is created from a product rate plan charge through the Zuora UI or by calling the [Create a credit memo from a charge](https://developer.zuora.com/api-references/api/operation/POST_CreditMemoFromPrpc) operation.
    # - `AdhocFromInvoice`: The credit memo is created from an invoice or created by reversing an invoice. You can create a credit memo from an invoice through the Zuora UI or by calling the [Create credit memo from invoice](https://developer.zuora.com/api-references/api/operation/POST_CreditMemoFromInvoice) operation. You can create a credit memo by reversing an invoice through the Zuora UI or by calling the [Reverse invoice](https://developer.zuora.com/api-references/api/operation/PUT_ReverseInvoice) operation.
    string 'source?;
    # The ID of the credit memo source.
    # 
    # If a credit memo is generated from a bill run, the value is the number of the corresponding bill run. Otherwise, the value is `null`.
    string sourceId?;
    # The type of the credit memo source.
    "Subscription"|"Standalone"|"Invoice"|"Order"|"CreditMemo"|"Consolidation" sourceType?;
    # The status of the credit memo.
    "Draft"|"Posted"|"Canceled"|"Error"|"PendingForTax"|"Generating"|"CancelInProgress" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The target date for the credit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.
    string targetDate?;
    # The amount of taxation.
    decimal taxAmount?;
    # The message about the status of tax calculation related to the credit memo. If tax calculation fails in one credit memo, this field displays the reason for the failure.
    string taxMessage?;
    # The status of tax calculation related to the credit memo.
    # 
    # **Note**: This field is only applicable to tax calculation by third-party tax engines.
    "Complete"|"Error" taxStatus?;
    # The calculated tax amount excluded due to the exemption.
    decimal totalTaxExemptAmount?;
    # Whether the credit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The unapplied amount of the credit memo.
    decimal unappliedAmount?;
    # The ID of the Zuora user who last updated the credit memo.
    string updatedById?;
    # The date and time when the credit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:36:10.
    string updatedDate?;
    *CreditMemoObjectNSFields;
    *CreditMemoObjectCustomFields;
};

# The delivery schedule information of this charge. Only when this charge is using Delivery Pricing charge model
public type GETProductRatePlanChargeDeliverySchedule record {
    # The frequency of the delivery. Only supports weekly now
    "Weekly" frequency?;
    # The flag to indicate should the delivery happen on Friday
    boolean friday?;
    # The flag to indicate should the delivery happen on Monday
    boolean monday?;
    # The flag to indicate should the delivery happen on Saturday
    boolean saturday?;
    # The flag to indicate should the delivery happen on Sunday
    boolean sunday?;
    # The flag to indicate should the delivery happen on Thursday
    boolean thursday?;
    # The flag to indicate should the delivery happen on Tuesday
    boolean tuesday?;
    # The flag to indicate should the delivery happen on Wendesday
    boolean wendesday?;
};

public type GETAttachmentResponseWithoutSuccessType record {
    # Zuora user id of who added this attachment to the object.
    string createdBy?;
    # Date and time when the attachment was added to the object.
    string createdOn?;
    # Description of the attachment.
    string description?;
    # Attachment file type.
    string fileContentType?;
    # File ID of the attached file. Use this file ID with [Get files](https://developer.zuora.com/api-references/api/operation/GET_Files) to download the file.
    string fileId?;
    # Attachment file name.
    string fileName?;
    # Zuora id of this attachement.
    string id?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # Zuora user id who last updated the attachment.
    string updatedBy?;
    # Date and time when the attachment was last updated.
    string updatedOn?;
};

public type PUTPublicNotificationDefinitionCalloutOauth2Authentication record {
    *PUTPublicNotificationDefinitionCalloutCommon;
    # Indicates whether OAuth 2.0 authentication is enabled for the callout.
    boolean requiredOauth2?;
    # The ID of the OAuth 2.0 provider in your tenant that provides access tokens for the callout.
    # 
    # For more information about how to get the ID of an OAuth 2.0 provider, see <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Add_an_OAuth_2.0_Provider#Retrieve_the_ID_of_an_OAuth_2.0_provider" target="_blank">Retrieve the ID of an OAuth 2.0 provider</a>.
    anydata oauth2ProviderId?;
};

public type LinkedPaymentID record {
    # ID of the payment.
    string paymentId?;
};

public type POSTJournalRunType record {
    # Name of the accounting period.
    # 
    # This field determines the target start and end dates of the journal run.
    # 
    # Required if you do not include `targetStartDate` and `targetEndDate`.
    string accountingPeriodName?;
    # Date of the journal entry.
    string journalEntryDate;
    # The organizations that this run is created for. 
    # 
    # For each item in the array, either the `organizationId` or the `organizationName` field is required.
    # 
    # This field is only required when you have already turned on Multi-Org feature.
    GETProductType_organizationLabels[] organizationLabels?;
    # The target end date of the journal run.
    # 
    # If you include `accountingPeriodName`, the `targetEndDate` must be empty or the same as the end date of the accounting period specified in `accountingPeriodName`.
    string targetEndDate?;
    # The target start date of the journal run.
    # 
    # Required if you include targetEndDate.
    # 
    # If you include `accountingPeriodName`, the `targetStartDate` must be empty or the same as the start date of the accounting period specified in `accountingPeriodName`.
    string targetStartDate?;
    # Transaction types included in the journal run.
    # 
    # You can include one or more transaction types.
    POSTJournalRunTransactionType[] transactionTypes;
};

# Container for basic information about the account.
public type GETAccountSummaryTypeBasicInfo record {
    # Account number.
    string accountNumber?;
    # A list of additional email addresses to receive email notifications.
    string[] additionalEmailAddresses?;
    # Whether future payments are automatically collected when they are due during a payment run.
    boolean autoPay?;
    # Current outstanding balance.
    string balance?;
    # The alias name given to a batch. A string of 50 characters or less.
    string batch?;
    # Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.
    string billCycleDay?;
    # A currency as defined in Billing Settings in the Zuora UI.
    string currency?;
    # 
    GETAccountSummaryTypeBasicInfo_defaultPaymentMethod defaultPaymentMethod?;
    # Account ID.
    string id?;
    # Whether the customer wants to receive invoices through email. 
    boolean invoiceDeliveryPrefsEmail?;
    # Whether the customer wants to receive printed invoices, such as through postal mail.
    boolean invoiceDeliveryPrefsPrint?;
    # Date of the most recent invoice for the account; null if no invoice has ever been generated.
    string lastInvoiceDate?;
    # The date and time when account metrics are last updated, if the account is a partner account.
    # 
    # **Note**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account" target="_blank">Reseller Account</a> feature enabled.
    #   - If you have the Reseller Account feature enabled, and set the `partnerAccount` field to `false` for an account, the value of the `lastMetricsUpdate` field is automatically set to `null` in the response. 
    #   - If you ever set the `partnerAccount` field to `true` for an account, the value of `lastMetricsUpdate` field is the time when the account metrics are last updated.
    #   
    string lastMetricsUpdate?;
    # Amount of the most recent payment collected for the account; null if no payment has ever been collected.
    string lastPaymentAmount?;
    # Date of the most recent payment collected for the account. Null if no payment has ever been collected.
    string lastPaymentDate?;
    # Account name.
    string name?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # Whether the customer account is a partner, distributor, or reseller. 
    # 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account" target="_blank">Reseller Account</a> feature enabled.
    boolean partnerAccount?;
    # `true` indicates the consent from your customer to use the Cascading Payment Method feature was collected. 
    # `false` indicates the consent was not collected and the Cascading Payment Method feature is not enabled.
    boolean paymentMethodCascadingConsent?;
    # The purchase order number provided by your customer for services, products, or both purchased.
    string purchaseOrderNumber?;
    # Account status; possible values are: `Active`, `Draft`, `Canceled`.
    string status?;
    # 
    string tags?;
    *AccountObjectNSFields;
    *AccountObjectCustomFields;
};

# Container for custom fields of an Order Action object.
public type OrderActionObjectCustomFields record {
};

public type ProxyCreateOrModifyProductRatePlanChargeChargeModelConfigurationItem record {
    # The name of the field that is specified for a specific charge model.
    # 
    # Configuration keys supported are as follows:
    # 
    # * `formula` (only available if you have the Multi-Attribute Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
    # * `customFieldPerUnitRate` (only available if you have the Pre-Rated Per Unit Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
    # * `customFieldTotalAmount` (only available if you have the Pre-Rated Pricing model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
    string Key;
    # The value of the field that is specified in the `Key` field.
    # 
    # Possible values are follows:
    # 
    # * A valid pricing formula to calculate actual rating amount for each usage record. For example, `usageQuantity()*10`. Use it with Key `formula` when the Multi-Attribute Pricing charge model is used. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    # * A name of a usage custom field that carries the per-unit rate for a usage record. For example, `perUnitRate__c`. Use it with Key `customFieldPerUnitRate` when the Pre-Rated Per Unit Pricing charge model is used. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    # * A name of a usage custom field that carries the total amount for a usage record. For example, `totalAmount__c`. Use it with Key `customFieldTotalAmount` when the Pre-Rated Pricing model is used. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string Value;
};

# Container for custom fields of a Contact object.
public type ContactObjectCustomFields record {
};

public type PriceChangeParams record {
    # Specifies how Zuora changes the price of the charge each time the subscription renews.
    # 
    # If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
    "NoChange"|"SpecificPercentageValue"|"UseLatestProductCatalogPricing" priceChangeOption?;
    # Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`.
    @constraint:Number {minValue: -100}
    decimal priceIncreasePercentage?;
};

# Invoice or Payment.
public type Options record {
    # Date through which to calculate charges if an invoice is generated. See [What is a Target Date?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs#What_is_a_Target_Date.3F).
    string billingTargetDate?;
    # Indicates if the current request needs to collect payments. This value can not be 'true' when 'runBilling' flag is 'false'.
    boolean collectPayment?;
    decimal maxSubscriptionsPerAccount?;
    # Indicates if the current request needs to generate an invoice. The invoice will be generated against all subscriptions included in this order.
    boolean runBilling?;
};

# Container for Credit Memo fields provided by the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
public type CreditMemoObjectNSFields record {
    # ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationId__NS?;
    # Status of the credit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string IntegrationStatus__NS?;
    # Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Origin__NS?;
    # Date when the credit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string SyncDate__NS?;
    # Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
    @constraint:String {maxLength: 255}
    string Transaction__NS?;
};

public type GETProductRatePlanType record {
    # Rate plan description.
    string description?;
    # Final date the rate plan is active, as `yyyy-mm-dd`. After this date, the rate plan status is `Expired`.
    string effectiveEndDate?;
    # First date the rate plan is active (i.e., available to be subscribed to), as `yyyy-mm-dd`.  Before this date, the status is `NotStarted`.
    string effectiveStartDate?;
    # The grade of the product rate plan.
    # 
    # **Note**: This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).
    decimal grade?;
    # Unique product rate-plan ID.
    string id?;
    # Name of the product rate-plan charge. (Not required to be unique.)
    string name?;
    # Field attributes describing the product rate plan charges:
    GETProductRatePlanChargeType[] productRatePlanCharges?;
    # The natural key of the product rate plan.  
    string productRatePlanNumber?;
    # The status of the product rate plan.
    "Active"|"Expired"|"NotStarted" status?;
    *ProductRatePlanObjectNSFields;
    *ProductRatePlanObjectCustomFields;
};

public type ValidationErrors record {
    # The list of reasons that the request was unsuccessful
    ValidationReasons[] reasons?;
    # Returns `false` if the request was not successful.
    boolean success?;
};

# Container for optional sold-to contact; uses the same field structure as the bill-to contact (above). If a sold-to contact is not specified, one is created from the bill-to contact. Once created, these are two separate data entities, and future changes to one do not affect the other.
public type POSTAccountTypeSoldToContact record {
    # First address line, 255 characters or less.
    string address1?;
    # Second address line, 255 characters or less.
    string address2?;
    # City, 40 characters or less.
    string city?;
    # Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.
    string country?;
    # County; 32 characters or less. May optionally be used by Zuora Tax to calculate county tax.
    string county?;
    # Fax phone number, 40 characters or less.
    string fax?;
    # First name, 100 characters or less.
    string firstName;
    # Home phone number, 40 characters or less.
    string homePhone?;
    # Last name, 100 characters or less.
    string lastName;
    # Mobile phone number, 40 characters or less.
    string mobilePhone?;
    # Nickname for this contact
    string nickname?;
    # Other phone number, 40 characters or less.
    string otherPhone?;
    # Possible values are: `Work`, `Mobile`, `Home`, `Other`.
    string otherPhoneType?;
    # Personal email address, 80 characters or less.
    string personalEmail?;
    # State; must be a valid state or province name or 2-character abbreviation. If using Zuora Tax, be aware that Zuora Tax requires a state (in the US) or province (in Canada) in this field for the sold-to contact to calculate tax, and that a bill-to contact may be used if no sold-to contact is provided.
    string state?;
    # If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.
    string taxRegion?;
    # Work email address, 80 characters or less.
    string workEmail?;
    # Work phone number, 40 characters or less.
    string workPhone?;
    # Zip code, 20 characters or less.
    string zipCode?;
    *ContactObjectCustomFields;
};

public type GetScheduledEventResponse record {
    # Indicate whether the scheduled event is active or inactive
    boolean active?;
    # The base field of the base object in the `apiObject` field, should be in date or timestamp format. The scheduled event notifications are triggered based on this date and the event parameters (before or after a specified number of days) from notification definitions. Should be specified in the pattern: ^[A-Z][\\w\\-]*$
    string apiField?;
    # The base object that the scheduled event is defined upon. The base object should contain a date or timestamp format field. Should be specified in the pattern: ^[A-Z][\\w\\-]*$
    string apiObject?;
    # The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/). The scheduled event is triggered only if the condition is evaluated as true.
    # The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects).
    # Scheduled events with invalid merge fields will fail to evaluate, thus will not be triggered. For example, to trigger an invoice due date scheduled event to only invoices with an amount over 1000, you would define the following condition:
    # 
    # ```Invoice.Amount > 1000```
    # 
    # `Invoice.Amount` refers to the `Amount` field of the Zuora object `Invoice`.
    string condition?;
    # The cron expression defines the time when scheduled event notifications will be sent.
    string cronExpression?;
    # The description of the scheduled event.
    string description?;
    # The display name of the scheduled event.
    string displayName?;
    # Scheduled event ID.
    string id?;
    # The name of the scheduled event.
    string name?;
    # The namespace of the scheduled event name in the `name` field.
    string namespace?;
    # The parameter definitions of the filter rule. The names of the parameters must match with the filter rule and can't be duplicated. You should specify all the parameters when creating scheduled event notifications.
    record {|GetScheduledEventResponse_parameters...;|} parameters?;
};

# Container for cardholder information.
public type POSTAccountTypeCreditCard_cardHolderInfo record {
    # First address line, 255 characters or less.
    string addressLine1;
    # Second address line, 255 characters or less.
    string addressLine2?;
    # The card holder's full name as it appears on the card, e.g., "John J Smith", 50 characters or less.
    string cardHolderName;
    # City, 40 characters or less.
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    string city;
    # Country; must be a valid country name or abbreviation.
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    string country;
    # Card holder's email address, 80 characters or less.
    string email?;
    # Phone number, 40 characters or less.
    string phone?;
    # State; must be a valid state name or 2-character abbreviation.
    string state;
    # Zip code, 20 characters or less.
    string zipCode;
};

public type GETAccountingCodeItemType record {
    # The category associated with the accounting code.
    "Assets"|"Liabilities"|"Equity"|"Revenue"|"Expenses" category?;
    # The ID of the user who created the accounting code.
    string createdBy?;
    # Date and time when the accounting code was created.
    string createdOn?;
    # Name of the account in your general ledger.
    # 
    # Field only available if you have Zuora Finance enabled.
    string glAccountName?;
    # Account number in your general ledger.
    # 
    # Field only available if you have Zuora Finance enabled.
    string glAccountNumber?;
    # ID of the accounting code.
    string id?;
    # Name of the accounting code.
    string name?;
    # Any optional notes for the accounting code.
    string notes?;
    # The accounting code status.
    "Active"|"Inactive" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Accounting code type. 
    # 
    # Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature. 
    "AccountsReceivable"|"On-Account Receivable"|"Cash"|"OtherAssets"|"CustomerCashOnAccount"|"DeferredRevenue"|"SalesTaxPayable"|"OtherLiabilities"|"SalesRevenue"|"SalesDiscounts"|"OtherRevenue"|"OtherEquity"|"BadDebt"|"OtherExpenses" 'type?;
    # The ID of the user who last updated the accounting code.
    string updatedBy?;
    # Date and time when the accounting code was last updated.
    string updatedOn?;
    *AccountingCodeObjectCustomFields;
};

# 
public type QueryProductRatePlansResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedProductRatePlan[] data?;
|};

public type GETPublicNotificationDefinitionResponse_callout record {
    # The status of the callout. The default value is `true`.
    boolean active?;
    # If `requiredAuth` is `true`, this object is required.
    CalloutAuth calloutAuth?;
    # The callout URL. It must start with 'https://'
    @constraint:String {minLength: 10}
    string calloutBaseurl?;
    # A key-value map of merge fields of this callout.
    CalloutMergeFields calloutParams?;
    # Specified whether to retry the callout when the callout fails. The default value is `true`.
    boolean calloutRetry?;
    # Description for the callout.
    @constraint:String {maxLength: 255}
    string description?;
    # The name of the custom event type.
    @constraint:String {minLength: 1}
    string eventTypeName?;
    # The HTTP method of the callout.
    "GET"|"PUT"|"POST"|"DELETE" httpMethod?;
    # The ID of the callout. If `calloutActive` is `true`, a callout is required. The eventTypeName of the callout MUST be the same as the eventTypeName.
    string id?;
    # The name of the created callout.
    @constraint:String {maxLength: 255}
    string name?;
    # The ID of the OAuth 2.0 provider in your tenant that provides access tokens for the callout.
    string oauth2ProviderId?;
    # Indicates whether Basic authentication is enabled for the callout.
    boolean requiredAuth?;
    # Indicates whether OAuth 2.0 authentication is enabled for the callout.
    boolean requiredOauth2?;
};

public type PUTSrpUpdateType record {
    # The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call. 
    string bookingDate?;
    # Container for one or more product rate plan charges. 
    PUTScUpdateType[] chargeUpdateDetails?;
    # The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.
    # 
    # If there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect.
    string contractEffectiveDate;
    # The date when the customer accepts the contract in yyyy-mm-dd format.
    # 
    # If this field is not set:
    # 
    # * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date.
    # * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.
    # 
    # The billing trigger dates must follow this rule:
    # 
    # contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
    string customerAcceptanceDate?;
    # An external ID of the rate plan to be updated. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to update the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.
    # 
    # **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalCatalogPlanId?;
    # The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.
    # 
    # **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalIdSourceSystem?;
    # Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string externallyManagedPlanId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # ID of a rate plan for this subscription. This can be the latest version or any history version of ID.
    string ratePlanId?;
    # The date when the update amendment is activated in yyyy-mm-dd format.
    # 
    # You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.
    # 
    # The billing trigger dates must follow this rule:
    # 
    # contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate
    string serviceActivationDate?;
    # The date when the Update Product amendment takes effect. This field is only applicable if there is already a future-dated Update Product amendment on the subscription. The format of the date is yyyy-mm-dd.
    # 
    # Required only for Update Product amendments if there is already a future-dated Update Product amendment on the subscription.
    string specificUpdateDate?;
    # Number of a rate plan for this subscription.
    string subscriptionRatePlanNumber?;
    *RatePlanObjectCustomFields;
};

public type GETProductChargeDefinitionsResponse record {
    # The list of the product charge definitions that are retrieved.
    ChargeDefinitions[] chargeDefinitions?;
    # Indicates whether the request succeeded.
    boolean success?;
};

public type POSTReconcileRefundResponse record {
    # The ID of the customer account that the refund is for.
    string accountId?;
    # The total amount of the refund.
    decimal amount?;
    # The date and time when the transaction was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the refund.
    string comment?;
    # The ID of the Zuora user who created the refund.
    string createdById?;
    # The date and time when the refund is created, in `yyyy-mm-dd hh:mm:ss` format.
    string createdDate?;
    # The ID of the credit memo that is refunded.
    string creditMemoId?;
    # Container for the finance information related to the refund.
    POSTReversePaymentResponse_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the refund.
    string gatewayId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the refund. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the refund. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the refund in the gateway; specifically used for reconciliation.
    "Settled"|"FailedToSettle" gatewayState?;
    # The ID of the refund.
    string id?;
    # The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # How an external refund was issued to a customer. 
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The unique identification number of the refund. For example, R-00000001.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the payment that is refunded.
    string paymentId?;
    # The unique ID of the payment method that the customer used to make the refund.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
    string paymentMethodSnapshotId?;
    # The payout ID of the refund from the gateway side.
    string payoutId?;
    # A code identifying the reason for the transaction.      
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2020-03-01.       
    string refundDate?;
    # The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
    string refundTransactionTime?;
    # The transaction ID returned by the payment gateway if there is an additional refund. 
    string secondRefundReferenceId?;
    # The date and time when the transaction is settled, in `yyyy-mm-dd hh:mm:ss` format.
    string settledOn?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptor?;
    # A payment gateway-specific field that maps Zuora to other gateways.          
    string softDescriptorPhone?;
    # The status of the refund.
    string status?;
    # The date and time when the refund was submitted, in yyyy-mm-dd hh:mm:ss format.
    string submittedOn?;
    # Indicates if the request is processed successfully.
    boolean success?;
    # The type of the refund.
    "External"|"Electronic" 'type?;
    # The ID of the Zuora user who last updated the refund.
    string updatedById?;
    # The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format.
    string updatedDate?;
};

public type POSTSettlePaymentResponse record {
    # The ID of the customer account that the payment is for.
    string accountId?;
    # The total amount of the payment.
    decimal amount?;
    # The applied amount of the payment.
    decimal appliedAmount?;
    # The authorization transaction ID from the payment gateway.
    string authTransactionId?;
    # The first six or eight digits of the credit card or debit card used for the payment, when applicable.
    string bankIdentificationNumber?;
    # The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the payment.
    string comment?;
    # The ID of the Zuora user who created the refund.
    string createdById?;
    # The date and time when the chargeback is created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-01 15:31:10.
    string createdDate?;
    # The amount that the payment transfers to the credit balance. The value is not `0` only for those payments that come from legacy payment operations performed without the Invoice Settlement feature.
    decimal creditBalanceAmount?;
    # A currency defined in the web-based UI administrative settings.
    string currency?;
    # The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.
    string effectiveDate?;
    # Container for the finance information related to the refund.
    POSTReversePaymentResponse_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the payment.
    string gatewayId?;
    # A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
    string gatewayOrderId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the payment. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the payment. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the payment in the gateway; specifically used for reconciliation.
    "Submitted"|"NotSubmitted"|"Settled"|"FailedToSettle" gatewayState?;
    # The ID of the payment chargeback.
    string id?;
    # The date and time when a charge was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # The unique identification number of the payment. For example, P-00000001.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The unique ID of the payment method that the customer used to make the payment.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
    string paymentMethodSnapshotId?;
    # The payout ID from the gateway side.
    string payoutId?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The amount of the payment that is refunded.
    decimal refundAmount?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the payment. 
    string secondPaymentReferenceId?;
    # The date and time when the transaction is settled, in `yyyy-mm-dd hh:mm:ss` format.
    string settledOn?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptor?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptorPhone?;
    # The status of the payment.
    string status?;
    # The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # Indicates if the request is processed successfully.
    boolean success?;
    # The type of the payment.
    "External"|"Electronic" 'type?;
    # The unapplied amount of the payment.
    decimal unappliedAmount?;
    # The ID of the Zuora user who last updated the payment.
    string updatedById?;
    # The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-02 15:36:10.
    string updatedDate?;
};

# The `CreatedDate` field definition
public type CustomObjectAllFieldsDefinition_CreatedDate record {
    # The field data format
    "date-time" format?;
    # Specifies the field is a system field
    "system" origin?;
    # The field data type
    "string" 'type?;
};

# An object containing pagination information for the list of tasks returned by the API.
public type TasksResponse_pagination record {
    # A string containing the URL where the next page of data can be retrieved.
    string next_page?;
    # An integer denoting the current page number.
    int page?;
    # An integer denoting the number of tasks in this response. The maximum value is 100.
    int page_length?;
};

public type GETAccountType record {
    # Container for basic information about the account.
    GETAccountTypeBasicInfo basicInfo?;
    # Container for bill-to contact information.
    GETAccountTypeBillToContact billToContact?;
    # Container for billing and payment information for the account.
    GETAccountType_billingAndPayment billingAndPayment?;
    # Container for e-invoicing profile information for this account.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    GetAccountEInvoiceProfile einvoiceProfile?;
    # Container for account metrics of the account's default currency. 
    # If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled, the `metricsData` field provides account metrics of different currencies.
    GETAccountType_metrics metrics?;
    # Container for account metrics of different currencies.
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    GETAccountCurrencyMetricsType[] metricsData?;
    # Container for sold-to contact information. Uses the same field structure as billToContact.
    GETAccountTypeSoldToContact soldToContact?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Container for tax exempt information, used to establish the tax exempt status of a customer account.
    GETAccountType_taxInfo taxInfo?;
};

# Container for custom fields of a Rate Plan object.
public type RatePlanObjectCustomFields record {
};

public type POSTTaxationItemForDMType record {
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # Container for the finance information related to the taxation item.
    POSTTaxationItemForDMType_financeInformation financeInformation?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The ID of the debit memo that the taxation item is created for.
    string memoItemId?;
    # The name of the taxation item.
    string name;
    # The ID of the taxation item of the invoice, which the debit memo is created from. 
    # 
    # If you want to use this REST API to create taxation items for a debit memo created from an invoice, the taxation items of the invoice must be created or imported through the SOAP API call.
    # 
    # **Note:** 
    #   - This field is only used if the debit memo is created from an invoice. 
    #   - If you do not contain this field in the request body, Zuora will automatically set a value for the `sourceTaxItemId` field based on the tax location code, tax jurisdiction, and tax rate.
    string sourceTaxItemId?;
    # The amount of the tax applied to the debit memo.
    decimal taxAmount;
    # The tax code identifies which tax rules and tax rates to apply to a specific debit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date when the tax is applied to the debit memo.
    string taxDate?;
    # The tax rate applied to the debit memo.
    decimal taxRate;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate applied to the debit memo.
    "Percentage"|"FlatFee" taxRateType;
    *TaxationItemObjectCustomFields;
};

public type ExpandedProductRatePlanCharge record {|
    # The unique identifier of the product rate plan charge.
    string id?;
    # The unique identifier of the user who created the product rate plan charge.
    string createdById?;
    # The date and time when the product rate plan charge was created.
    string createdDate?;
    # The unique identifier of the user who last updated the product rate plan charge.
    string updatedById?;
    # The date and time when the product rate plan charge was last updated.
    string updatedDate?;
    # The accounting code for the charge. Accounting codes group
    # transactions that contain similar accounting attributes.
    @constraint:String {maxLength: 100}
    string accountingCode?;
    # Indicates which type of charge the discount charge applies to.
    "ONETIME"|"RECURRING"|"USAGE"|"ONETIMERECURRING"|"ONETIMEUSAGE"|"RECURRINGUSAGE"|"ONETIMERECURRINGUSAGE"? applyDiscountTo?;
    # Sets the bill cycle day (BCD) for the charge. The BCD determines which
    # day of the month customer is billed. The BCD value in the account can
    # override the BCD in this object.
    @constraint:Int {minValue: 1, maxValue: 31}
    int billCycleDay?;
    # Specifies how to determine the billing day for the
    # charge.               
    "DefaultFromCustomer"|"SpecificDayofMonth"|"SubscriptionStartDay"|"ChargeTriggerDay"|"SpecificDayofWeek"|"TermStartDay"|"TermEndDay" billCycleType?;
    # The billing period for the charge. The start day of the billing period
    # is also called the bill cycle day (BCD).
    "Month"|"Quarter"|"Annual"|"Semi-Annual"|"Specific Months"|"Subscription Term"|"Week"|"Specific Weeks"|"Specific Days" billingPeriod?;
    # The billing period alignment setting for this charge.
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart"|"AlignToTermEnd" billingPeriodAlignment?;
    # The billing timing for this charge.
    "IN_ADVANCE"|"IN_ARREARS" billingTiming?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    "Discount-Fixed Amount"|"Discount-Percentage"|"Flat Fee Pricing"|"Per Unit Pricing"|"Overage Pricing"|"Tiered Pricing"|"Tiered with Overage Pricing"|"Volume Pricing"|"Delivery Pricing"|"MultiAttributePricing"|"PreratedPerUnit"|"PreratedPricing`"|"HighWatermarkVolumePricing"|"HighWatermarkTieredPricing" chargeModel?;
    # Specifies the type of charge.
    "OneTime"|"Recurring"|"Usage" chargeType?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # The way to calculate credit. See [Credit
    # Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option)
    # for more information. 
    "TimeBased"|"ConsumptionBased"|"FullCreditBack" creditOption?;
    # The default quantity. 
    # 
    # This field is applicable only for one-time and recurring charges.
    decimal? defaultQuantity?;
    # The name of the deferred revenue account for this charge.
    # 
    # 
    # This feature is in **Limited Availability**. If you wish to have
    # access to the feature, submit a request at [Zuora Global
    # Support](http://support.zuora.com/). 
    @constraint:String {maxLength: 100}
    string deferredRevenueAccount?;
    # Description of the product rate plan charge.
    string description?;
    # ID of the class the discount belongs to. The discount class defines the order in which discount product rate plan charges are applied.
    # 
    # For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).
    string? discountClassId?;
    # The application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account"? discountLevel?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).
    decimal? drawdownRate?;
    # The end date condition for this charge.
    "Subscription_End"|"One_Time"|"Fixed_Period"|"Specific_End_Date" endDateCondition?;
    # Indicates whether to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Indicates whether to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled.
    boolean excludeItemBookingFromRevenueAccounting?;
    # Specifies the number of units in the base set of units.
    decimal includedUnits?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # Indicates whether this charge is a prepayment (topup) charge or a
    # drawdown charge. 
    boolean isPrepaid?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # It determines whether the rollover fields are needed.
    boolean isRollover?;
    # **Note**: This field is only applicable to the Discount - Percentage charge model.
    # 
    # This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:
    #   - `True`: This is a stacked discount, which should be calculated by stacking with other discounts.
    #   - `False`: This is not a stacked discount, which should be calculated in sequence with other discounts.
    # 
    # For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).
    boolean isStackedDiscount?;
    # Indicates whether to use the legacy revenue reporting for this charge.
    boolean legacyRevenueReporting?;
    # The list price base for the product rate plan charge.
    # 
    # This field is only applicable for recurring charges.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # The number of months for the list price base of the charge. The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.
    int:Signed32? specificListPriceBase?;
    # The maximum number of units for this charge. This field and the `minQuantity` field can be used to create a range of units allowed in a product rate plan charge.
    decimal maxQuantity?;
    # The minimum number of units for this charge. This field and the `maxQuantity` field can be used to create a range of units allowed in a product rate plan charge.
    decimal minQuantity?;
    # Name of the product rate-plan charge. Not required to be unique.
    string name?;
    # Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
    # This field is ued when overage smoothing model is `RollingWindow` or `Rollover`.
    int? numberOfPeriod?;
    # Value specifies when to calculate overage charges.
    "EndOfSmoothingPeriod"|"PerBillingPeriod"? overageCalculationOption?;
    # Determines whether to credit the customer with unused units of usage.
    "NoCredit"|"CreditBySpecificRate" overageUnusedUnitsCreditOption?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The type of this charge. It is either a prepayment (topup) charge or a drawdown charge. 
    "topup"|"drawdown"? prepaidOperationType?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal? prepaidQuantity?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The total amount of units that end customers can use during a validity period when they subscribe to a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    decimal? prepaidTotalQuantity?;
    # Applies an automatic price change when a termed subscription is
    # renewed and the following applies:
    # 
    # 
    # 1. AutomatedPriceChange setting is on
    # 
    # 2. Charge type is not one-time
    # 
    # 3. Charge model is not discount fixed amount
    "NoChange"|"SpecificPercentageValue"|"UseLatestProductCatalogPricing" priceChangeOption?;
    # Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `PriceChangeOption` value to `SpecificPercentageValue`.
    # 
    # 1. AutomatedPriceChange setting is on
    # 2. Charge type is not one-time
    # 3. Charge model is not discount fixed amount
    # 
    # Values: a decimal between -100 and 100
    decimal? priceIncreasePercentage?;
    # The natural key of the product rate plan charge.
    string productRatePlanChargeNumber?;
    # Specifies a rating group based on which usage records are rated.
    # 
    # Possible values:
    # 
    # - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.
    # - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
    # - `ByUsageRecord`: The rating is based on each usage record.
    # - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
    # - `ByGroupId`: The rating is based on all the usages in a custom group.
    # 
    # **Note:** 
    # - The `ByBillingPeriod` value can be applied for all charge models. 
    # - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
    # - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
    # - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
    string? ratingGroup?;
    # Specifies when revenue recognition begins.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate"? revRecTriggerCondition?;
    # The name of the revenue recognition rule governing the revenue schedule.
    string revenueRecognitionRuleName?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the priority of rollover, which is either first or last.
    "ApplyFirst"|"ApplyLast" rolloverApply?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The period length of the rollover fund.
    int:Signed32 rolloverPeriodLength?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # This field defines the number of rollover periods, it is restricted to 3.
    int rolloverPeriods?;
    # The name of the recognized revenue account for this charge.
    #   - Required when the Allow Blank Accounting Code setting is No.
    #   - Optional when the Allow Blank Accounting Code setting is Yes.
    # 
    # This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). 
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccount?;
    # Specifies the smoothing model for an overage smoothing charge model or
    # an tiered with overage model, which is an advanced type of a usage
    # model that avoids spikes in usage charges. If a customer's usage
    # spikes in a single period, then an overage smoothing model eases
    # overage charges by considering usage and multiple periods.
    # 
    # 
    # One of the following values shows which smoothing model will be
    # applied to the charge when `Overage` or `Tiered with Overage` is used:
    # 
    # 
    # - `RollingWindow` considers a number of periods to smooth usage. The
    # rolling window starts and increments forward based on billing
    # frequency. When allowed usage is met, then period resets and a new
    # window begins.
    # 
    # - `Rollover` considers a fixed number of periods before calculating
    # usage. The net balance at the end of a period is unused usage, which
    # is carried over to the next period's balance.
    string? smoothingModel?;
    # When the billing period is set to `Specific` Months then this positive
    # integer reflects the number of months for billing period charges.
    int? specificBillingPeriod?;
    # Specifies whether the charge is taxable; used by Zuora Tax. 
    boolean taxable?;
    # Specifies the tax code for taxation rules; used by Zuora Tax.
    string taxCode?;
    # Specifies how to define taxation for the charge; used by Zuora Tax.
    "TaxExclusive"|"TaxInclusive"? taxMode?;
    # Specifies when to start billing the customer for the charge.
    # 
    # Values: one of the following:
    # - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
    # - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
    # - `CustomerAcceptance` is when the customer accepts the services or products for a subscription. 
    # - `SpecificDate` is the date specified.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance"|"SpecificDate" triggerEvent?;
    # Specifies the length of the period during which the charge is active.
    # If this period ends before the subscription ends, the charge ends when
    # this period ends.
    # 
    # If the subscription end date is subsequently changed through a
    # Renewal, or Terms and Conditions amendment, the charge end date will
    # change accordingly up to the original period end.
    int? upToPeriods?;
    # The period type used to define when the charge ends.
    "Billing_Periods"|"Days"|"Weeks"|"Months"|"Years"? upToPeriodsType?;
    # Determines how Zuora processes usage records for per-unit usage
    # charges. 
    string? usageRecordRatingOption?;
    # Determines whether to define a new accounting code for the new
    # discount charge.
    boolean? useDiscountSpecificAccountingCode?;
    # Shows the tenant-level percentage uplift value for an automatic price
    # change to a termed subscription's renewal. You set the tenant uplift
    # value in the web-based UI: **Settings > Billing > Define Default
    # Subscription Settings**.
    boolean useTenantDefaultForPriceChange?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # The period in which the prepayment units are valid to use as defined
    # in a [prepayment
    # charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    "SUBSCRIPTION_TERM"|"ANNUAL"|"SEMI_ANNUAL"|"QUARTER"|"MONTH" validityPeriodType?;
    # Specifies which day of the week as the bill cycle day (BCD) for the
    # charge.
    # 
    # 
    # This feature is in **Limited Availability**. If you wish to have
    # access to the feature, submit a request at [Zuora Global
    # Support](http://support.zuora.com/). 
    "Sunday"|"Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"|"Saturday" weeklyBillCycleDay?;
    # Indicates whether the price upsell quantity is stacked.
    boolean priceUpsellQuantityStacked?;
    # The unique identifier of the delivery schedule associated with the
    # product rate plan charge. This field is applicable only when this charge is
    # using Delivery Pricing charge model.
    string deliveryScheduleId?;
    # **Note**: This field is only available if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_for_usage_or_prepaid_products/Advanced_Consumption_Billing/Unbilled_Usage" target="_blank">Unbilled Usage</a> feature enabled.
    # 
    # To use this field, you must set the `X-Zuora-WSDL-Version` request header to `133` or higher. Otherwise, an error occurs. 
    # 
    # This field defines the type of commitment. A prepaid charge can be `UNIT` or `CURRENCY`. A minimum commitment(in-arrears) charge can only be `CURRENCY` type. For topup(recurring or one-time) charges, this field indicates what type of funds are created. 
    # * If UNIT, it will create a fund with given prepaidUom.
    # * If CURRENCY, it will create a fund with the currency amount calculated in list price.
    #   
    # For drawdown(usage) charges, this field indicates what type of funds are drawdown from that created from topup charges.
    "UNIT"|"CURRENCY" commitmentType?;
    # Indicates whether the charge is commited.
    boolean isCommitted?;
    # The unique identifier of the product rate plan to which this product rate plan charge belongs.
    string productRatePlanId?;
    # The type of the accounting code for accounts receivable.
    string accountReceivableAccountingCodeId?;
    # The accounting code for recognized revenue, such as Monthly Recurring
    # Charges or Overage Charges. 
    string recognizedRevenueAccountingCodeId?;
    # The type associated with the deferred revenue accounting code, such as
    # Deferred Revenue. 
    string? deferredRevenueAccountingCodeId?;
    # The type associated with the adjustment liability accounting code. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string adjustmentLiabilityAccountingCodeId?;
    # The type associated with the adjustment revenue accounting code. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string adjustmentRevenueAccountingCodeId?;
    # The type associated with the contract asset accounting code. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string contractAssetAccountingCodeId?;
    # The accounting code for contract liability. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string contractLiabilityAccountingCodeId?;
    # The accounting code for contract recognized revenue. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string contractRecognizedRevenueAccountingCodeId?;
    # The accounting code for unbilled receivables. 
    # 
    # 
    # **Note**: This field is only available if you have the Zuora Billing -
    # Revenue Integration feature enabled.
    string? unbilledReceivablesAccountingCodeId?;
    # Associates this product rate plan charge with a specific revenue
    # recognition code.
    string? revRecCode?;
    # Describes the Units of Measure (uom) configured in **Settings >
    # Billing** for the productRatePlanCharges.
    string? uOM?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # Unit of measurement for a [drawdown
    # charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge).
    string drawdownUom?;
    # **Note**: This field is only available if you have the [Prepaid with
    # Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown)
    # feature enabled.
    # 
    # 
    # Unit of measurement for a [prepayment
    # charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).
    string? prepaidUom?;
    NestedProductRatePlanOnExpand productRatePlan?;
    NestedPrpcTierOnExpand[] productRatePlanChargeTiers?;
|};

# Container for custom fields of a Usage object.
public type UsageObjectCustomFields record {
};

public type ExpandedPaymentMethod record {|
    # The unique identifier of the payment method.
    string id?;
    # The unique identifier of the user who created the payment method.
    string createdById?;
    # The time that the payment method gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the payment method.
    string updatedById?;
    # The time that the payment method gets updated in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string updatedDate?;
    # The unique identifier of the account that the payment method is
    # associated with.
    string accountId?;
    # The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.
    string achAbaCode?;
    # The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.
    string achAccountName?;
    # The masked bank account number associated with the ACH payment method. This field is only required if the `type` field is set to `ACH`.
    string achAccountNumberMask?;
    # The type of bank account associated with the ACH payment method. This field is only required if the `type` field is set to `ACH`.
    # 
    # When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify any of the allowed values as a dummy value, `Checking` preferably.
    "BusinessChecking"|"Checking"|"Saving" achAccountType?;
    # First address line for the ACH payment method.
    @constraint:String {maxLength: 255}
    string achAddress1?;
    # Second address line for the ACH payment method.
    @constraint:String {maxLength: 255}
    string achAddress2?;
    # The name of the bank where the ACH payment account is held.
    # 
    # When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.
    @constraint:String {maxLength: 70}
    string achBankName?;
    # City for the ACH payment method.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    @constraint:String {maxLength: 40}
    string achCity?;
    # Country for the ACH payment method. Must be a valid country name or abbreviation.
    # 
    # See <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a> for the list of supported country names and abbreviations.
    # 
    # It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.
    string achCountry?;
    # Zip code or postal code for the ACH payment method.
    @constraint:String {maxLength: 20}
    string achPostalCode?;
    # State for the ACH payment method. Must be a valid state name or 2-character abbreviation.
    # 
    # See [United States Standard State Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes) and [Canadian Standard Province Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/C_Canadian_Province_Names_and_2-Digit_Codes) for the list of supported names and abbreviations.
    string achState?;
    # Indicates whether the payment method is active.
    boolean active?;
    # Indicates whether the payment method is a system-generated payment method.
    boolean isSystem?;
    # The branch code of the bank used for Direct Debit.  
    string bankBranchCode?;
    # The check digit in the international bank account number, which confirms the validity of the account. Applicable to direct debit payment methods.
    string bankCheckDigit?;
    # The city of the direct debit bank.
    string bankCity?;
    # The sort code or number that identifies the bank. This is also known as the sort code. 
    string bankCode?;
    # The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.
    string bankIdentificationNumber?;
    # The name of the direct debit bank.
    string bankName?;
    # The zip code or postal code of the direct debit bank.
    string bankPostalCode?;
    # The name of the street of the direct debit bank.
    string bankStreetName?;
    # The number of the direct debit bank.
    string bankStreetNumber?;
    # The name on the direct debit bank account.
    string bankTransferAccountName?;
    # This is a masked displayable version of the bank account number, used for
    # security purposes. For example: `XXXXXXXXX54321`.
    string bankTransferAccountNumberMask?;
    # The type of the customer's bank account. Applicable to direct debit
    # payment methods.
    string bankTransferAccountType?;
    # Specifies the type of direct debit transfer. The value of this field is dependent on the country of the user.
    # 
    # Possible Values: 
    # 
    # 
    # * `AutomatischIncasso` (NL)
    # 
    # * `LastschriftDE` (Germany)
    # 
    # * `LastschriftAT` (Austria)
    # 
    # * `DemandeDePrelevement` (FR)
    # 
    # * `DirectDebitUK` (UK)
    # 
    # * `Domicil` (Belgium)
    # 
    # * `LastschriftCH` (CH)
    # 
    # * `RID` (Italy)
    # 
    # * `OrdenDeDomiciliacion` (Spain)
    # * `Autogiro` (Sweden)
    # * `Betalingsservice` (Denmark)
    "AutomatischIncasso"|"LastschriftDE"|"LastschriftAT"|"DemandeDePrelevement"|"DirectDebitUK"|"Domicil"|"LastschriftCH"|"RID"|"OrdenDeDomiciliacion"|"Autogiro"|"Betalingsservice" bankTransferType?;
    # The business identification code for Swiss direct payment methods that use
    # the Global Collect payment gateway. Only applicable to direct debit
    # payment methods in Switzerland with Global Collect.
    string businessIdentificationCode?;
    # The city of the customer's address. Applicable to debit payment methods.
    string city?;
    # The two-letter country code of the customer's address. Applicable to direct debit payment methods.
    string country?;
    # The first line of the card holder's address, which is often a street
    # address or business name. Applicable to credit card and direct debit
    # payment methods.
    string creditCardAddress1?;
    # The second line of the card holder's address. Applicable to credit card
    # and direct debit payment methods.
    string creditCardAddress2?;
    # The city of the card holder's address. Applicable to credit card and
    # direct debit payment methods.
    string creditCardCity?;
    # The country where the credit card holder stays.
    # 
    # When creating a payment method through a translated UI or Payment Page, a country name in a translated language might be selected. 
    # Regardless of the country texts selected when creating the payment method, only the supported country name returns in this field. 
    # For a complete list of supported country names, see <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Manage_countries_and_regions#View_countries_or_regions" target="_blank">View countries or regions</a>. 
    # Internationalization is not supported for the API field value.
    string creditCardCountry?;
    # One or two digits expiration month.
    @constraint:Int {minValue: 1, maxValue: 12}
    int:Signed32 creditCardExpirationMonth?;
    # Four-digit expiration year.
    int:Signed32 creditCardExpirationYear?;
    # The full name of the credit card holder.
    string creditCardHolderName?;
    # The masked credit card number, such as `*********1112`.
    string creditCardMaskNumber?;
    # The postal code for the address of the credit card holder.
    string creditCardPostalCode?;
    # The state where the credit card holder stays.
    string creditCardState?;
    # The type of the credit card or debit card.
    # 
    # Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # **Note:** This field is only returned for the Credit Card and Debit Card payment types.
    string creditCardType?;
    # The session ID of the user when the `PaymentMethod` was created or updated.
    string deviceSessionId?;
    # Indicates whether the mandate is an existing mandate.
    "Yes"|"No" existingMandate?;
    # The email address of the payment method holder.
    string email?;
    # The customer's first name. Only applicable to direct debit payment methods.
    string firstName?;
    # The International Bank Account Number used to create the SEPA payment method. The value is masked.
    string iBAN?;
    # The IP address of the user when the payment method was created or updated.
    string iPAddress?;
    # The identity number of the account holder or the cardholder.
    string identityNumber?;
    # The name of the company.
    string companyName?;
    # Whether the customer account is a company.
    boolean isCompany?;
    # The date of the last failed attempt to collect payment with this payment
    # method.
    string lastFailedSaleTransactionDate?;
    # The customer's last name. Only applicable to direct debit payment methods.
    string lastName?;
    # The date and time of the most recent transaction.
    string lastTransactionDateTime?;
    # The status of the most recent transaction.
    string lastTransactionStatus?;
    # The date on which the mandate was created.
    string mandateCreationDate?;
    # The mandate ID.
    string mandateId?;
    # The reason of the mandate from the gateway side.
    string mandateReason?;
    # Indicates whether the mandate is received from the gateway.
    "Yes"|"No" mandateReceived?;
    # The status of the mandate from the gateway side.
    string mandateStatus?;
    # The date on which the mandate was updated.
    string mandateUpdateDate?;
    # The number of allowable consecutive failures Zuora attempts with the payment method before stopping.
    int:Signed32 maxConsecutivePaymentFailures?;
    # The name of the payment method.
    string name?;
    # The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment. 
    int:Signed32 numConsecutiveFailures?;
    # The status of the payment method.
    "Active"|"Closed"|"Scrubbed" paymentMethodStatus?;
    # The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.
    int:Signed32 paymentRetryWindow?;
    # ID of a PayPal billing agreement. 
    string paypalBaid?;
    # Email address associated with the PayPal payment method. 
    string paypalEmail?;
    # The PayPal preapproval key.
    string paypalPreapprovalKey?;
    # The type of the PayPal payment method.
    string paypalType?;
    # The phone number that the account holder registered with the bank. This
    # field is used for credit card validation when passing to a gateway.
    string phone?;
    # The zip code of the customer's address. Only applicable to direct debit
    # payment methods.
    string postalCode?;
    # A gateway unique identifier that replaces sensitive payment method data.
    # 
    # **Note:** This field is only returned for the Credit Card Reference Transaction payment type.
    string secondTokenId?;
    # The state of the customer's address. Only applicable to direct debit
    # payment methods.
    string state?;
    # The street name of the customer's address. Only applicable to direct debit
    # payment methods.
    string streetName?;
    # The street number of the customer's address. Only applicable to direct
    # debit payment methods.
    string streetNumber?;
    # A gateway unique identifier that replaces sensitive payment method data or
    # represents a gateway's unique customer profile. Applicable to CC Reference
    # Transaction payment methods.
    string tokenId?;
    # The number of error payments that used this payment method.
    int:Signed32 totalNumberOfErrorPayments?;
    # The number of successful payments that used this payment method.
    int:Signed32 totalNumberOfProcessedPayments?;
    # The type of the payment method. For example, `CreditCard`.
    string 'type?;
    # Indicates whether this payment method uses the default retry rules configured in the Zuora Payments settings.
    boolean useDefaultRetryRule?;
    # The identification reference of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Payment Method Data Source Exports and Data Query.
    string methodReferenceId?;
    # The identification reference of the user or customer account.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string userReferenceId?;
    # The identification reference indicating the subtype of the custom payment method.
    # 
    # This field should be mapped to a field name defined in the `fields` array for the purpose of being used as a filter in reporting tools such as Data Source Exports and Data Query.
    string subType?;
    # Other method-specific data of the payment method.
    string methodSpecificData?;
    NestedAccountOnExpand account?;
|};

public type DiscountApplyDetail record {
    # Product Rate Plan Charge Id of the discount apply to.
    string productRatePlanChargeId;
    # Product Rate Plan Id of the discount apply to.
    string productRatePlanId;
};

public type GETCMTaxItemTypeNew record {
    # The applied amount of the taxation item.
    decimal appliedAmount?;
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # Container for the finance information related to the taxation item.
    GETCMTaxItemTypeNew_financeInformation financeInformation?;
    # The ID of the taxation item.
    string id?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The name of the taxation item.
    string name?;
    # The amount of the refund on the taxation item.
    decimal refundAmount?;
    # The ID of the source taxation item.
    string sourceTaxItemId?;
    # The amount of taxation.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific credit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the credit memo, in `yyyy-mm-dd` format.
    string taxDate?;
    # The tax rate applied to the credit memo.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate.
    "Percentage"|"FlatFee" taxRateType?;
    # The unapplied amount of the taxation item.
    decimal unappliedAmount?;
    *CreditTaxationItemObjectCustomFields;
};

# The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
# 
# Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
# 
# This field is not supported in updating Credit Card Reference Transaction payment methods.
public type PUTPaymentMethodRequest_gatewayOptions record {
    # The name of a gateway-specific parameter.
    string 'key?;
    # The value of the gateway-specific parameter.
    string value?;
};

# The schema of the custom object definition
public type CustomObjectDefinition_schema record {
    # The set of fields which Audit Trail tracks and records changes of.
    string[] auditable?;
    # Indicates whether to audit the creation of custom object records of this custom object definition.
    boolean enableCreateRecordAuditing?;
    # Indicates whether to audit the deletion of custom object records of this custom object definition.
    boolean enableDeleteRecordAuditing?;
    # The set of fields that are allowed to be queried on. Queries on non-filterable fields will be rejected. You can not change a non-filterable field to filterable.
    string[] filterable?;
    # A label for the custom object
    string label?;
    # The API name of the custom object
    string 'object?;
    # The definitions of all the fields in the custom object definition
    CustomObjectAllFieldsDefinition properties?;
    # An array of relationships with Zuora objects or other custom objects
    CustomObjectDefinition_schema_relationships[] relationships?;
    # The required fields of the custom object definition. You can change required fields to optional. However, you can only change optional fields to required on the custom objects with no records.
    string[] required?;
    # The custom object definition type. Can only be `object` currently.
    "object" 'type?;
    # The fields with unique constraints.
    string[] unique?;
};

# Configuration of the query result.
public type ProxyActionqueryRequest_conf record {
    # Defines the batch size of the query result. The range is 1 - 2000 (inclusive). If a value higher than 2000 is submitted, only 2000 results are returned.
    int batchSize?;
};

# 
public type POSTSequenceSetsRequest record {
    # Array of sequence sets configured for billing documents, payments, and refunds.
    POSTSequenceSetRequest[] sequenceSets?;
};

# 
public type QueryRatePlansResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedRatePlan[] data?;
|};

# Information about an order action of type `RenewSubscription`.
public type RenewSubscription record {
    # The ID of the bill-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string billToContactId?;
    # Whether to clear the existing bill-to contact ID at the subscription level. This field is mutually exclusive with the `billToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingBillToContact?;
    # Whether to clear the existing invoice group number at the subscription level. This field is mutually exclusive with the `invoiceGroupNumber` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingInvoiceGroupNumber?;
    # Whether to clear the existing invoice template ID at the subscription level. This field is mutually exclusive with the `invoiceTemplateId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingInvoiceTemplate?;
    # Whether to clear the existing payment term at the subscription level. This field is mutually exclusive with the `paymentTerm` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingPaymentTerm?;
    # Whether to clear the existing sequence set ID at the subscription level. This field is mutually exclusive with the `sequenceSetId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSequenceSet?;
    # Whether to clear the existing sold-to contact ID at the subscription level. This field is mutually exclusive with the `soldToContactId` field.
    # 
    # **Note**: If you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body.
    boolean clearingExistingSoldToContact?;
    # The number of the invoice group associated with the subscription.
    # 
    # After enabling the Invoice Grouping feature, you can specify invoice group numbers to bill subscriptions and order line items based on specific criteria. For the same account, Zuora generates separate invoices for subscriptions and order line items, each identified by unique invoice group numbers. For more information, see [Invoice Grouping](https://knowledgecenter.zuora.com/Billing/Subscriptions/Invoice_Grouping).
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request during subscription creation, the value of this field is automatically set to `null` in the response body.
    string? invoiceGroupNumber?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # The name of the payment term associated with the subscription. For example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body..
    string paymentTerm?;
    # The ID of the sequence set associated with the subscription.
    #   
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Contact from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string soldToContactId?;
};

# 
public type QueryDebitMemosResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedDebitMemo[] data?;
|};

# Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
public type UsageTieredWithOveragePricingOverride record {
    *PriceChangeParams;
    # Number of periods that Zuora considers when calculating overage charges with overage smoothing.
    @constraint:Int {minValue: 1}
    int numberOfPeriods?;
    # Price per overage unit consumed.
    decimal overagePrice?;
    # Specifies whether to credit the customer for unused units.
    # 
    # If the value of this field is `CreditBySpecificRate`, use the `unusedUnitsCreditRates` field to specify the rate at which to credit the customer for unused units.
    "NoCredit"|"CreditBySpecificRate" overageUnusedUnitsCreditOption?;
    # List of cumulative pricing tiers in the charge.
    ChargeTier[] tiers?;
    # Per-unit rate at which to credit the customer for unused units. Only applicable if the value of the `overageUnusedUnitsCreditOption` field is `CreditBySpecificRate`.
    decimal unusedUnitsCreditRates?;
};

public type ValidationReasons record {
    # The name of the invalid field
    string fieldName?;
    # A description why that field is invalid
    string title?;
};

# Payment method information associated with an account.
public type POSTPaymentMethodRequest CreatePaymentMethodCreditCard|CreatePaymentMethodCCReferenceTransaction|CreatePaymentMethodACH|CreatePaymentMethodSEPA|CreatePaymentMethodBetalingsservice|CreatePaymentMethodAutogiro|CreatePaymentMethodBacs|CreatePaymentMethodBecs|CreatePaymentMethodBecsnz|CreatePaymentMethodPAD|CreatePMPayPalNativeEC|CreatePMPayPalCP|CreatePMPayPalEC|CreatePaymentMethodPayPalAdaptive|CreatePaymentMethodApplePayAdyen|CreatePaymentMethodGooglePayChase;

# Container for the finance information related to the refund.
public type POSTReversePaymentResponse_financeInformation record {
    # The accounting code that maps to a bank account in your accounting system.
    @constraint:String {maxLength: 100}
    string bankAccountAccountingCode?;
    # The type of the accounting code that maps to a bank account in your accounting system.
    #   
    string bankAccountAccountingCodeType?;
    # Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The accounting code for the unapplied payment.
    @constraint:String {maxLength: 100}
    string unappliedPaymentAccountingCode?;
    # The type of the accounting code for the unapplied payment.
    #   
    string unappliedPaymentAccountingCodeType?;
};

# Container for payment schedules.
public type GETPaymentSchedulesResponse PaymentScheduleCommonResponse[];

public type GETAccountingCodeItemWithoutSuccessType record {
    # The category associated with the accounting code.
    "Assets"|"Liabilities"|"Equity"|"Revenue"|"Expenses" category?;
    # The ID of the user who created the accounting code.
    string createdBy?;
    # Date and time when the accounting code was created.
    string createdOn?;
    # Name of the account in your general ledger.
    # 
    # Field only available if you have Zuora Finance enabled.
    string glAccountName?;
    # Account number in your general ledger.
    # 
    # Field only available if you have Zuora Finance enabled.
    string glAccountNumber?;
    # ID of the accounting code.
    string id?;
    # Name of the accounting code.
    string name?;
    # Any optional notes for the accounting code.
    string notes?;
    # The accounting code status.
    "Active"|"Inactive" status?;
    # Accounting code type. 
    # 
    # Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature. 
    "AccountsReceivable"|"On-Account Receivable"|"Cash"|"OtherAssets"|"CustomerCashOnAccount"|"DeferredRevenue"|"SalesTaxPayable"|"OtherLiabilities"|"SalesRevenue"|"SalesDiscounts"|"OtherRevenue"|"OtherEquity"|"BadDebt"|"OtherExpenses" 'type?;
    # The ID of the user who last updated the accounting code.
    string updatedBy?;
    # Date and time when the accounting code was last updated.
    string updatedOn?;
    *AccountingCodeObjectCustomFields;
};

public type ProxyGetPaymentTransactionLog record {
    # The response code returned by the payment gateway referring to the AVS international response of the payment transaction.
    string AVSResponseCode?;
    # The ID of the batch used to send the transaction if the request was sent in a batch.
    string BatchId?;
    # The response code returned by the payment gateway referring to the CVV international response of the payment transaction.
    string CVVResponseCode?;
    # The name of the payment gateway used to transact the current payment transaction log.
    string Gateway?;
    # The code returned by the payment gateway for the payment. This code is gateway-dependent.
    string GatewayReasonCode?;
    # The message returned by the payment gateway for the payment. This message is gateway-dependent. 
    string GatewayReasonCodeDescription?;
    # The state of the transaction at the payment gateway.
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" GatewayState?;
    # The type of the transaction, either making a payment, or canceling a payment. 
    "Authorization"|"Sale"|"Void"|"Inquiry"|"VoidAuth" GatewayTransactionType?;
    # The ID of the payment transaction log.
    string Id?;
    # The ID of the payment wherein the payment transaction log was recorded. 
    string PaymentId?;
    # The payment transaction request string sent to the payment gateway. 
    string RequestString?;
    # The payment transaction response string returned by the payment gateway. 
    string ResponseString?;
    # The transaction date when the payment was performed. 
    string TransactionDate?;
    # The transaction ID returned by the payment gateway. This field is used to reconcile payment transactions between the payment gateway and records in Zuora.
    string TransactionId?;
};

# The fields populated for a quote when a quote is sent to Zuora Billing from Zuora Quote.
public type QuoteObjectFields record {
    # The closing date of the Opportunity.
    # 
    # This field is used in Zuora Reporting Data Sources to report on Subscription metrics.
    # 
    # If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
    string OpportunityCloseDate__QT?;
    # The unique identifier of the Opportunity. 
    # 
    # This field is used in the Zuora Reporting Data Sources to report on Subscription metrics.
    # 
    # If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
    # 
    # **Character limit**: 100
    string OpportunityName__QT?;
    # The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn.
    # 
    # This field is used in the Zuora Reporting Data Sources to report on Subscription metrics.
    # 
    # If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
    # 
    # **Character limit**: 32
    string QuoteBusinessType__QT?;
    # The unique identifier of the Quote.
    # 
    # This field is used in the Zuora Reporting Data Sources to report on Subscription metrics.
    # 
    # If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
    # 
    # **Character limit**: 32
    string QuoteNumber__QT?;
    # The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel.
    # 
    # This field is used in the Zuora Reporting Data Sources to report on Subscription metrics.
    # 
    # If the subscription was originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
    # 
    # **Character limit**: 32
    string QuoteType__QT?;
};

public type OrderActionRatePlanChargeModelDataOverride_chargeModelConfiguration record {
    # The custom field that carries the per-unit rate for each usage record. For example, `perUnitAmount__c`.
    # 
    # This field is only available for the usage-based charges that use the Pre-Rated Per Unit Pricing charge model. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string customFieldPerUnitRate?;
    # The custom field that carries the total amount to charge for a usage record. For example, `totalAmount__c`.
    # 
    # This field is only available for the usage-based charges that use the Pre-Rated Pricing charge model. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string customFieldTotalAmount?;
    # The pricing formula to calculate actual rating amount for each usage record.
    # 
    # This field is only available for the usage-based charges that use the Multi-Attribute Pricing charge model. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    string formula?;
};

public type SoldToContactPostOrder record {
    # First line of the contact's address. This is often a street address or a business name.
    @constraint:String {maxLength: 255}
    string address1?;
    # Second line of the contact's address.
    @constraint:String {maxLength: 255}
    string address2?;
    # City of the contact's address.
    @constraint:String {maxLength: 40}
    string city?;
    # A description for the contact.          
    @constraint:String {maxLength: 100}
    string contactDescription?;
    # Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.
    @constraint:String {maxLength: 64}
    string country?;
    # County of the contact's address.
    @constraint:String {maxLength: 32}
    string county?;
    # Fax number of the contact.
    @constraint:String {maxLength: 40}
    string fax?;
    # First name of the contact.
    @constraint:String {maxLength: 100}
    string firstName;
    # Home phone number of the contact.
    @constraint:String {maxLength: 40}
    string homePhone?;
    # Last name of the contact.
    @constraint:String {maxLength: 100}
    string lastName;
    # Mobile phone number of the contact.
    @constraint:String {maxLength: 40}
    string mobilePhone?;
    # Nickname of the contact.
    @constraint:String {maxLength: 100}
    string nickname?;
    # Additional phone number of the contact. Use the `otherPhoneType` field to specify the type of phone number.
    @constraint:String {maxLength: 40}
    string otherPhone?;
    # Specifies the type of phone number in the `otherPhone` field.
    "Work"|"Mobile"|"Home"|"Other" otherPhoneType?;
    # Personal email address of the contact.
    @constraint:String {maxLength: 80}
    string personalEmail?;
    # ZIP code or other postal code of the contact's address.
    @constraint:String {maxLength: 20}
    string postalCode?;
    # State or province of the contact's address.
    @constraint:String {maxLength: 40}
    string state?;
    # Region defined in your taxation rules. Only applicable if you use Zuora Tax.
    @constraint:String {maxLength: 32}
    string taxRegion?;
    # Business email address of the contact.
    @constraint:String {maxLength: 80}
    string workEmail?;
    # Business phone number of the contact.
    @constraint:String {maxLength: 40}
    string workPhone?;
    *ContactObjectCustomFields;
};

# 
public type GETSequenceSetsResponse record {
    # Array of sequence sets configured for billing documents, payments, and refunds.
    GETSequenceSetResponse[] sequenceSets?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type OrderActionRatePlanBillingUpdate record {
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart" billingPeriodAlignment?;
};

public type CommonOQErrorResponse record {
    # The error code.
    int:Signed32 code?;
    # The error message.
    string message?;
};

public type ProxyActionqueryMoreRequest record {
    # Configuration of the query result.
    ProxyActionqueryRequest_conf conf?;
    # A marker passed to QueryMore to get the next set of results.
    string queryLocator;
};

# Container for bill-to contact information for this account. If you do not provide a sold-to contact, the bill-to contact is copied to sold-to contact. Once the sold-to contact is created, changes to billToContact will not affect soldToContact and vice versa.
public type POSTAccountTypeBillToContact record {
    # First address line, 255 characters or less.
    string address1?;
    # Second address line, 255 characters or less.
    string address2?;
    # City, 40 characters or less.
    string city?;
    # Country; must be a valid country name or abbreviation. If using Zuora Tax, you must specify a country in the sold-to contact to calculate tax. A bill-to contact may be used if no sold-to contact is provided.
    string country?;
    # County; 32 characters or less. May optionally be used by Zuora Tax to calculate county tax.
    string county?;
    # Fax phone number, 40 characters or less.
    string fax?;
    # First name, 100 characters or less.
    string firstName;
    # Home phone number, 40 characters or less.
    string homePhone?;
    # Last name, 100 characters or less.
    string lastName;
    # Mobile phone number, 40 characters or less.
    string mobilePhone?;
    # Nickname for this contact
    string nickname?;
    # Other phone number, 40 characters or less.
    string otherPhone?;
    # Possible values are: `Work`, `Mobile`, `Home`, `Other`.
    string otherPhoneType?;
    # Personal email address, 80 characters or less.
    string personalEmail?;
    # State; must be a valid state or province name or 2-character abbreviation. If using Zuora Tax, be aware that Zuora tax requires a state (in the US) or province (in Canada) in this field for the sold-to contact to calculate tax, and that a bill-to contact may be used if no sold-to contact is provided.
    string state?;
    # If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.
    string taxRegion?;
    # Work email address, 80 characters or less.
    string workEmail?;
    # Work phone number, 40 characters or less.
    string workPhone?;
    # Zip code, 20 characters or less.
    string zipCode?;
    *ContactObjectCustomFields;
};

# 
public type QueryPaymentSchedulesResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedPaymentSchedule[] data?;
|};

# Container for the finance information related to the taxation item.
public type POSTTaxationItemForCMType_financeInformation record {
    # The accounting code that maps to an on account in your accounting system.
    @constraint:String {maxLength: 100}
    string onAccountAccountingCode?;
    # The accounting code for the sales taxes payable.
    @constraint:String {maxLength: 100}
    string salesTaxPayableAccountingCode?;
};

public type InvoiceResponseType record {
    # The ID of the generated invoice.
    string id?;
};

public type ProxyModifyProductRatePlanChargeTier record {
    # The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.
    decimal Price?;
};

# Information of scheduled order.
public type Order_schedulingOptions record {
    # The date for the order scheduled.
    string scheduledDate?;
    # Date policy of the scheduled order.
    "SpecificDate" scheduledDatePolicy?;
};

public type Versions_import_body record {
    Linkage[] linkages?;
    Task[] tasks?;
    # A workflow.
    DetailedWorkflow workflow?;
};

public type PUTDebitMemoWithIdType record {
    # The ID of the debit memo.
    string id?;
    *PUTDebitMemoType;
};

# namespace.name pair should be unique universally
public type PostScheduledEventRequest record {
    # Indicate whether the scheduled event is active or inactive.
    boolean active = true;
    # The base field of the base object in the `apiObject` field, should be in date or timestamp format. The scheduled event notifications are triggered based on this date and the event parameters (before or after a specified number of days) from notification definitions. Should be specified in the pattern: ^[A-Z][\\w\\-]*$
    #  
    # See [Custom Scheduled Events](https://knowledgecenter.zuora.com/Central_Platform/Events_and_Notifications/A_Z_Custom_Scheduled_Events) for all available base fields.
    string apiField;
    # The base object that the scheduled event is defined upon. The base object should contain a date or timestamp format field. Should be specified in the pattern: ^[A-Z][\\w\\-]*$
    #            
    # See [Custom Scheduled Events](https://knowledgecenter.zuora.com/Central_Platform/Events_and_Notifications/A_Z_Custom_Scheduled_Events) for all available base objects.
    string apiObject;
    # The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/). The scheduled event is triggered only if the condition is evaluated as true.
    # The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects).
    # Scheduled events with invalid merge fields will fail to evaluate, thus will not be triggered. For example, to trigger an invoice due date scheduled event to only invoices with an amount over 1000, you would define the following condition:
    # 
    # ```Invoice.Amount > 1000```
    # 
    # `Invoice.Amount` refers to the `Amount` field of the Zuora object `Invoice`.
    @constraint:String {maxLength: 65535}
    string condition?;
    # The description of the scheduled event.
    @constraint:String {maxLength: 1000}
    string description?;
    # The display name of the scheduled event.
    @constraint:String {maxLength: 500, minLength: 1}
    string displayName;
    # The scheduled time (hour) that the scheduled event notifications are sent. This time is based on the localized timezone of your tenant.
    @constraint:Int {minValue: 0, maxValue: 23}
    int hours;
    # The scheduled time (minute) that the scheduled event notifications are sent. This time is based on the localized timezone of your tenant.
    @constraint:Int {minValue: 0, maxValue: 59}
    int minutes;
    # The name of the scheduled event. Should be unique, contain no space, and be in the pattern: ^[A-Za-z]{1,}[\\w\\-]*$
    @constraint:String {maxLength: 200, minLength: 1}
    string name;
    # The parameter definitions of the filter rule. The names of the parameters must match with the filter rule and can't be duplicated. You should specify all the parameters when creating scheduled event notifications.
    record {|PostScheduledEventRequest_parameters...;|} parameters?;
};

# An array of charge pricing tiers.
public type GETChargeDefinitionPricingTier GETChargeDefinitionPricingTier_inner[];

public type CancelBillRunResponseType record {
    *GetBillRunResponseType;
    NextRunResponseType nextRun?;
};

public type POSTCreatePaymentSessionRequest record {
    # The ID of the customer account in Zuora that is associated with this payment method.
    string accountId;
    # The amount of the payment.
    # 
    # This field is required if `processPayment` is `true`.
    decimal amount?;
    # The authorization amount for the payment method. Specify a value greater than 0.
    # 
    # This field is required if `processPayment` is false.
    decimal authAmount?;
    # The currency of the payment in the format of the three-character ISO currency code.
    string currency;
    # The ID of the payment gateway instance configured in Zuora that will process the payment, such as `e884322ab8c711edab030242ac120004`.
    string paymentGateway;
    # Indicate whether a payment should be processed after creating the payment method.
    # 
    # If this field is set to `true`, you must specify the `amount` field.
    # 
    # If this field is set to `false`, you must specify the `authAmount` field. The payment method will be verified through the payment gateway instance specified in the `paymentGateway` field.
    boolean processPayment;
};

public type InvoiceScheduleSpecificSubscriptions record {
    # A list of charges in the subscription that are chosen to be included in the invoice schedule.
    string chargeNumbers?;
    # The unique ID or number of the order associated with the invoice schedule.
    string orderKey?;
    # The unique number of the subscription contained in the order associated with the invoice schedule.
    string subscriptionKey?;
};

public type PostOrderLineItemsRequestType record {
    PostOrderLineItemUpdateType[] orderLineItems?;
    # Processing options for generating billing documents.
    ProcessingOptions processingOptions?;
};

# A task.
public type UpdateTask record {
    # The type of task.
    string action_type?;
    # The type of the API used.
    string call_type?;
    # The maximum number of this task that can run concurrently.
    @constraint:Int {minValue: 1, maxValue: 9999999}
    int concurrent_limit?;
    # The unique ID of the task.
    int id;
    # The name of the task.
    string name?;
    # The selected object for the task.
    string 'object?;
    # The ID of the selected object of the task.
    string object_id?;
    # The status of the task instance.
    "Queued"|"Processing"|"Pending"|"Success"|"Stopped"|"Error" status?;
    # The array of filter tags.
    string[] tags?;
    # The ID of the workflow the task belongs to.
    int workflow_id?;
};

# Container for the terms and renewal settings of the subscription.
public type PreviewOrderCreateSubscription_terms record {
    # Specifies whether the subscription automatically renews at the end of the each term. Only applicable if the type of the first term is `TERMED`.
    boolean autoRenew?;
    # Information about the first term of the subscription.
    PreviewOrderCreateSubscription_terms_initialTerm initialTerm;
    # Specifies the type of the terms that follow the first term if the subscription is renewed. Only applicable if the type of the first term is `TERMED`.
    # 
    # * `RENEW_WITH_SPECIFIC_TERM` - Each renewal term has a predefined duration. The first entry in `renewalTerms` specifies the duration of the second term of the subscription, the second entry in `renewalTerms` specifies the duration of the third term of the subscription, and so on. The last entry in `renewalTerms` specifies the ultimate duration of each renewal term.
    # * `RENEW_TO_EVERGREEN` - The second term of the subscription does not have a predefined duration.
    "RENEW_WITH_SPECIFIC_TERM"|"RENEW_TO_EVERGREEN" renewalSetting?;
    # List of renewal terms of the subscription. Only applicable if the type of the first term is `TERMED` and the value of the `renewalSetting` field is `RENEW_WITH_SPECIFIC_TERM`.
    RenewalTerm[] renewalTerms?;
};

public type GETSubscriptionTypeWithSuccess record {
    # The ID of the account associated with this subscription.
    string accountId?;
    # The name of the account associated with this subscription.
    string accountName?;
    # The number of the account associated with this subscription.
    string accountNumber?;
    # If `true`, the subscription automatically renews at the end of the term. Default is `false`.
    boolean autoRenew?;
    # Container for bill-to contact information.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `billToContactId` field in the request or you select **Default Contact from Account** for the `billToContactId` field during subscription creation, the value of the `billToContact` field is automatically set to `null` in the response body.
    GETAccountSummaryTypeBillToContact billToContact?;
    # The reason for a subscription cancellation copied from the `changeReason` field of a Cancel Subscription order action. 
    # 
    # This field contains valid value only if a subscription is cancelled through the Orders UI or API. Otherwise, the value for this field will always be `null`.
    string cancelReason?;
    # Effective contract date for this subscription, as yyyy-mm-dd.
    string contractEffectiveDate?;
    # Monthly recurring revenue of the subscription.
    decimal contractedMrr?;
    # The currency of the subscription.
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currencies</a> feature enabled.
    string currency?;
    # The length of the period for the current subscription term.
    int currentTerm?;
    # The period type for the current subscription term.
    # 
    # Values are:
    # 
    # * `Month` (default)
    # * `Year`
    # * `Day`
    # * `Week`
    string currentTermPeriodType?;
    # The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.
    string customerAcceptanceDate?;
    # An enum field on the Subscription object to indicate the name of a third-party store. This field is used to represent subscriptions created through third-party stores.
    "Amazon"|"Apple"|"Google"|"Roku" externallyManagedBy?;
    # Subscription ID.
    string id?;
    # The length of the period for the first subscription term.
    int initialTerm?;
    # The period type for the first subscription term.
    # 
    # Values are:
    # 
    # * `Month` (default)
    # * `Year`
    # * `Day`
    # * `Week`
    string initialTermPeriodType?;
    # The number of the invoice group associated with the subscription.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string? invoiceGroupNumber?;
    # 
    string invoiceOwnerAccountId?;
    # 
    string invoiceOwnerAccountName?;
    # 
    string invoiceOwnerAccountNumber?;
    # The ID of the invoice schedule associated with the subscription.
    # 
    # If multiple invoice schedules are created for different terms of a subscription, this field stores the latest invoice schedule.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    int invoiceScheduleId?;
    # Separates a single subscription from other subscriptions and creates an invoice for the subscription. 
    # 
    # If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.
    string invoiceSeparately?;
    # The ID of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Template from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string invoiceTemplateId?;
    # The name of the invoice template associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `invoiceTemplateId` field in the request or you select **Default Template from Account** for the `invoiceTemplateId` field during subscription creation, the value of the `invoiceTemplateName` field is automatically set to `null` in the response body.
    #   
    string invoiceTemplateName?;
    # If `true`, the current subscription object is the latest version.
    boolean isLatestVersion?;
    # The last booking date of the subscription object. This field is writable only when the subscription is newly created as a first version subscription. You can override the date value when creating a subscription through the Subscribe and Amend API or the subscription creation UI (non-Orders). Otherwise, the default value `today` is set per the user's timezone. The value of this field is as follows:
    # * For a new subscription created by the [Subscribe and Amend APIs](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Subscribe_and_Amend_APIs_to_Migrate), this field has the value of the subscription creation date.
    # * For a subscription changed by an amendment, this field has the value of the amendment booking date.
    # * For a subscription created or changed by an order, this field has the value of the order date. 
    string lastBookingDate?;
    # A string of up to 65,535 characters.
    string notes?;
    # The order number of the order in which the changes on the subscription are made. 
    # 
    # **Note:** This field is only available if you have the [Order Metrics](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Order_Metrics) feature enabled. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/). We will investigate your use cases and data before enabling this feature for you.
    string orderNumber?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The name of the payment term associated with the subscription. For example, `Net 30`. The payment term determines the due dates of invoices.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Term from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string paymentTerm?;
    # Container for rate plans.
    GETSubscriptionRatePlanType[] ratePlans?;
    # Specifies whether a termed subscription will remain `TERMED` or change to `EVERGREEN` when it is renewed. 
    # 
    # Values are:
    # 
    # * `RENEW_WITH_SPECIFIC_TERM` (default)
    # * `RENEW_TO_EVERGREEN`
    string renewalSetting?;
    # The length of the period for the subscription renewal term.
    int renewalTerm?;
    # The period type for the subscription renewal term.
    # 
    # Values are:
    # 
    # * `Month` (default)
    # * `Year`
    # * `Day`
    # * `Week`
    string renewalTermPeriodType?;
    # An auto-generated decimal value uniquely tagged with a subscription. The value always contains one decimal place, for example, the revision of a new subscription is 1.0. If a further version of the subscription is created, the revision value will be increased by 1. Also, the revision value is always incremental regardless of deletion of subscription versions.
    string revision?;
    # The ID of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify this field in the request or you select **Default Set from Account** for this field during subscription creation, the value of this field is automatically set to `null` in the response body.
    string sequenceSetId?;
    # The name of the sequence set associated with the subscription.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `sequenceSetId` field in the request or you select **Default Template from Account** for the `sequenceSetId` field during subscription creation, the value of the `sequenceSetName` field is automatically set to `null` in the response body.
    string sequenceSetName?;
    # The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd
    string serviceActivationDate?;
    # Container for sold-to contact information.
    # 
    # **Note**: 
    #   - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature disabled, this field is unavailable in the request body and the value of this field is `null` in the response body. 
    #   - If you have the Flexible Billing Attributes feature enabled, and you do not specify the `soldToContactId` field in the request or you select **Default Contact from Account** for the `soldToContactId` field during subscription creation, the value of the `soldToContact` field is automatically set to `null` in the response body.
    GETAccountSummaryTypeSoldToContact soldToContact?;
    # Subscription status; possible values are:
    # 
    # * `Draft`
    # * `Pending Activation`
    # * `Pending Acceptance`
    # * `Active`
    # * `Cancelled`
    # * `Suspended`
    string status?;
    # Container for status history.
    GETSubscriptionStatusHistoryType[] statusHistory?;
    # The date when the subscription term ends, where the subscription ends at midnight the day before.
    # For example, if the `subscriptionEndDate` is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016.
    # This date is the same as the term end date or the cancelation date, as appropriate.
    string subscriptionEndDate?;
    # Subscription number.
    string subscriptionNumber?;
    # Date the subscription becomes effective.
    string subscriptionStartDate?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # Date the subscription term ends. If the subscription is evergreen, this is null or is the cancellation date (if one has been set).
    string termEndDate?;
    # Date the subscription term begins. If this is a renewal subscription, this date is different from the subscription start date.
    string termStartDate?;
    # Possible values are: `TERMED`, `EVERGREEN`.
    string termType?;
    # Total contracted value of the subscription.
    decimal totalContractedValue?;
    # This is the subscription version automatically generated by Zuora Billing. Each order or amendment creates a new version of the subscription, which incorporates the changes made in the order or amendment.
    int version?;
    *SubscriptionObjectQTFields;
    *SubscriptionObjectNSFields;
    *SubscriptionObjectCustomFields;
};

# Container for subscription information, used if creating a subscription for the new account at the time of account creation.
public type POSTAccountTypeSubscription record {
    # If `true`, auto-renew is enabled. Default is `false`.
    boolean autoRenew?;
    # Effective contract date for this subscription, as `yyyy-mm-dd`.
    string contractEffectiveDate;
    # The date on which the services or products within a subscription have been accepted by the customer, as `yyyy-mm-dd`.
    # 
    # Default value is dependent on the value of other fields. See Notes section for more details.
    string customerAcceptanceDate?;
    # Duration of the initial subscription term in whole months.  Default is 0. 
    int initialTerm?;
    # Invoice owner account number or ID.
    # 
    # **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). 
    string invoiceOwnerAccountKey?;
    # Separates a single subscription from other subscriptions and invoices the charge independently. 
    # 
    # If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.
    # The default value is `false`.
    # 
    # Prerequisite: The default subscription setting `Enable Subscriptions to be Invoiced Separately` must be set to `Yes`.
    boolean invoiceSeparately?;
    # 
    string notes?;
    # Duration of the renewal term in whole months. Default is 0.
    int renewalTerm?;
    # The date on which the services or products within a subscription have been activated and access has been provided to the customer, as `yyyy-mm-dd`.
    # 
    # Default value is dependent on the value of other fields. See Notes section for more details.
    string serviceActivationDate?;
    # Container for one or more rate plans for this subscription.
    POSTSrpCreateType[] subscribeToRatePlans?;
    # Subscription Number. The value can be up to 1000 characters.
    # 
    # If you do not specify a subscription number when creating a subscription for the new account, Zuora will generate a subscription number automatically.
    # 
    # If the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.
    string subscriptionNumber?;
    # The date on which the subscription term begins, as `yyyy-mm-dd`. If this is a renewal subscription, this date is different from the subscription start date.
    string termStartDate?;
    # Possible values are: `TERMED`, `EVERGREEN`.
    string termType;
    *SubscriptionObjectQTFields;
    *SubscriptionObjectNSFields;
    *SubscriptionObjectCustomFields;
};

# The JSON object containing the information for a charge update in the 'UpdateProduct' type order action.
public type CreateOrderChargeUpdate record {
    BillingUpdate billing?;
    # The number of the charge to be updated. The value of this field is inherited from the `subscriptions` > `orderActions` > `addProduct` > `chargeOverrides` > `chargeNumber` field.
    string chargeNumber?;
    # Container for custom fields of a Rate Plan Charge object.
    RatePlanChargeObjectCustomFields customFields?;
    string description?;
    # Specifies when a charge becomes active.
    CreateOrderUpdateProductTriggerParams effectiveDate?;
    # **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.
    # 
    # The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).
    decimal prepaidQuantity?;
    # Pricing information about the charge.
    CreateOrderPricingUpdate pricing?;
    # A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan charge. For example, if you want to add and update a product in the same order, assign a unique token to the newly added rate plan charge and use that token in future order actions.
    string uniqueToken?;
};

# Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
public type OrderActionRatePlanUsagePerUnitPricingOverride record {
    *OrderActionRatePlanPriceChangeParams;
    # Per-unit price of the charge.
    decimal listPrice?;
    # Specifies how Zuora groups usage records when rating usage. See [Usage Rating by Group](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Usage/Usage_Rating_by_Group) for more information.
    #   * ByBillingPeriod (default): The rating is based on all the usages in a billing period.
    #   * ByUsageStartDate: The rating is based on all the usages on the same usage start date.
    #   * ByUsageRecord: The rating is based on each usage record.
    #   * ByUsageUpload: The rating is based on all the usages in a uploaded usage file (.xls or .csv). If you import a mass usage in a single upload, which contains multiple usage files in .xls or .csv format, usage records are grouped for each usage file.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload" ratingGroup?;
};

public type PaymentMethodCommonFields record {
    # Internal ID of the customer account that will own the payment method. 
    # 
    # To create an orphan payment method that is not associated with any customer account, you do not need to specify this field during creation. However, you must associate the orphan payment method with a customer account within 10 days. Otherwise, this orphan payment method will be deleted.
    string accountKey?;
    # Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.
    # 
    # If you do not set this field, Zuora will use one of the following payment gateways instead:
    # 
    # * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set.
    # * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.
    string authGateway?;
    # The currency used for payment method authorization.
    string currencyCode?;
    # The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
    PaymentMethodCommonFields_gatewayOptions gatewayOptions?;
    # The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways. 
    # 
    # If the IP address length is beyond 45 characters, a validation error occurs.
    # 
    # For validating SEPA payment methods on Stripe v2, this field is required.
    string ipAddress?;
    # Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.
    # 
    # When you set this field to `true`, make sure the payment method is supported by the default payment gateway.
    boolean makeDefault?;
    # Specify whether to skip the validation of the information through the payment gateway. For example, when migrating your payment methods, you can set this field to `true` to skip the validation. 
    boolean skipValidation?;
    # Type of the payment method. The following types of the payment methods are supported:
    # 
    #   * `CreditCard`
    # 
    #   * `CreditCardReferenceTransaction`
    # 
    #   * `ACH`
    # 
    #   * `SEPA`
    # 
    #   * `Betalingsservice`
    # 
    #   * `Autogiro`
    # 
    #   * `Bacs`
    # 
    #   * `Becs`
    # 
    #   * `Becsnz`
    # 
    #   * `PAD`
    # 
    #   * `PayPalCP`
    # 
    #   * `PayPalEC`
    # 
    #   * `PayPalNativeEC`
    # 
    #   * `PayPalAdaptive`
    # 
    #   * `AdyenApplePay`
    # 
    #   * `AdyenGooglePay`
    # 
    #   * `GooglePay`
    # 
    # 
    # To view the schema and example applicable to a specific payment method type, select the corresponding option from the following list.
    "CreditCard"|"CreditCardReferenceTransaction"|"ACH"|"SEPA"|"Betalingsservice"|"Autogiro"|"Bacs"|"Becs"|"Becsnz"|"PAD"|"PayPalCP"|"PayPalEC"|"PayPalNativeEC"|"PayPalAdaptive"|"AdyenApplePay"|"AdyenGooglePay"|"GooglePay" 'type?;
};

public type SettingItemHttpRequestParameter record {
    # The description of the paramter.
    string description?;
    # The name of the parameter.
    string name?;
};

public type ExpandedRatingResult record {|
    # The unique identifier of the rating result.
    string id?;
    # The unique identifier of the user who created the rating result.
    string createdById?;
    # The date and time when the rating result was created in the Zuora
    # system, in the `yyyy-mm-dd hh:mm:ss` format.
    string createdDate?;
    # The unique identifier of the user who last updated the rating result.
    string updatedById?;
    # The date and time when the rating result was last updated, in the `yyyy-mm-dd hh:mm:ss` format.
    string updatedDate?;
    # The unique identifier of the customer account associated with the rating result.
    string accountId?;
    # The unique identifier of the subscription associated with the rating result.
    string subscriptionId?;
    # The unique identifier of the rate plan charge associated with the rating result.
    string ratePlanChargeId?;
    # The quantity of the charge.
    decimal quantity?;
    # The amount of the charge.
    decimal amount?;
    # The start date of the service period for the rating result.
    string serviceStartDate?;
    # The end date of the service period for the rating result.
    string serviceEndDate?;
    # The status of the rating result.
    string status?;
    # Indicates whether the rating result is partial.
    boolean isPartial?;
    # Rate plan charge number.
    int:Signed32 chargeSegmentNumber?;
    # The unique identifier of the invoice item associated with the rating result.
    string invoiceItemId?;
    # The start date of the actual period for the rating result.
    string actualPeriodStartDate?;
    # The end date of the actual period for the rating result.
    string actualPeriodEndDate?;
    # The day of the month on which the billing cycle starts.
    int:Signed32 billingCycleDay?;
    NestedAccountOnExpand account?;
    NestedRatePlanChargeOnExpand ratePlanCharge?;
    NestedSubscriptionOnExpand subscription?;
    NestedInvoiceItemOnExpand invoiceItem?;
|};

public type SettingValueResponseWrapper record {
    # The Id of the corresponding request.
    string id?;
    # The HTTP method. It is the same as that of the corresponding request.
    "GET"|"HEAD"|"POST"|"PUT"|"PATCH"|"DELETE"|"OPTIONS"|"TRACE" method?;
    SettingValueResponse response?;
    # The url as specified in the corresponding request.
    string url?;
};

public type PUTSubscriptionResumeResponseType record {
    # The credit memo ID, if a credit memo is generated during the subscription process.
    # 
    # **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string creditMemoId?;
    # Invoice ID, if an invoice is generated during the subscription process.
    string invoiceId?;
    # Payment amount, if a payment is collected.
    decimal paidAmount?;
    # Payment ID, if a payment is collected.
    string paymentId?;
    # The date when subscription resumption takes effect, as yyyy-mm-dd.
    string resumeDate?;
    # The subscription ID.
    string subscriptionId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The date when the new subscription term ends, as yyyy-mm-dd.
    string termEndDate?;
    # Change in the total contracted value of the subscription as a result of the update.
    decimal totalDeltaTcv?;
};

public type StopWorkflowRunError record {
    # The error messages
    StopWorkflowRunError_errors[] errors?;
};

public type POSTBillingDocumentFilesDeletionJobRequest record {
    # Container for the IDs of the accounts that you want to create the billing document files deletion job for.
    # 
    # **Note**: When creating jobs to delete billing document PDF files, you must specify either set of `accountIds` or `accountKeys` in the request body.
    string[] accountIds?;
    # Container for the IDs and/or numbers of the accounts that you want to create the billing document files deletion job for.
    # 
    # **Note**: When creating jobs to delete billing document PDF files, you must specify either set of `accountIds` or `accountKeys` in the request body.
    string[] accountKeys?;
};

# Pricing information about a one-time charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
public type OrderActionRatePlanOneTimeTieredPricingOverride record {
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # List of cumulative pricing tiers in the charge.
    OrderActionRatePlanChargeTier[] tiers?;
};

public type POSTReconcileRefundRequest record {
    # The action of the refund reconciliation.
    #   - `settle`: Sets Gateway State to "Settled" and returns the refund object as response.
    #   - `reject`: Sets Gateway State to "FailedToSettle" and handle the event according to the settings configured in the Gateway Reconciliation Configuration in Payments Settings through Zuora UI. See [Configure how to handle refund rejected events](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/M_Payment_Gateways/Gateway_Reconciliation#Configure_how_to_handle_refund_rejected_events) for details.
    "settle"|"reject" action?;
    # The date and time of the refund reconciliation action, in `yyyy-mm-dd hh:mm:ss` format.
    string actionDate?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The payout ID of the refund from the gateway side.
    string payoutId?;
};

public type PostEventTriggerRequest record {
    # The status of the event trigger.
    boolean active;
    # The base object that the trigger rule is defined upon. The format of the value in this field depends on the base object type:
    # - Standard object: object name, which should follow the pattern ^[A-Z][\w\-]*$. For example, `Invoice`.
    # - Custom object: `default__<custom_object_api_name>`. For example, `default__vehicle`.
    @constraint:String {maxLength: 100, minLength: 1}
    string baseObject;
    # The JEXL expression to be evaluated against object changes. See above for more information and an example.
    @constraint:String {maxLength: 5000, minLength: 1}
    string condition;
    # The description of the event trigger.
    @constraint:String {maxLength: 1000}
    string description?;
    EventType eventType;
};

# To create tokenized SEPA payment methods on Adyen Integration v2.0, pass in the existing token information through the fields in this container.
# For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Adyen_Integration_v2.0/D_Tokenize_SEPA_payment_methods_on_Adyen_Integration_v2.0" target="_blank">Tokenize SEPA payment methods on Adyen Integration v2.0</a>.
public type CreatePaymentMethodSEPA_tokens record {
    # Required. 
    # 
    # The type of the payment gateway to generate the tokens. This field is case-sensitive.
    "Adyen" gatewayType?;
    # Pass in the second token of the payment method. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Adyen_Integration_v2.0/D_Tokenize_SEPA_payment_methods_on_Adyen_Integration_v2.0" target="_blank">Tokenize SEPA payment methods on Adyen Integration v2.0</a>.
    string secondTokenId?;
    # Pass in the third token of the payment method.
    string thirdTokenId?;
    # Required. 
    # 
    # Pass in the first token of the payment method. For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Adyen_Integration_v2.0/D_Tokenize_SEPA_payment_methods_on_Adyen_Integration_v2.0" target="_blank">Tokenize SEPA payment methods on Adyen Integration v2.0</a>.
    string tokenId?;
};

public type DebitMemoFromChargeDetailType record {
    # The amount of the debit memo item.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    decimal amount?;
    # The ID of the product rate plan charge that the debit memo is created from.
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string chargeId;
    # The flag to exclude the debit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.            
    boolean excludeItemBillingFromRevenueAccounting = false;
    # Comments about the product rate plan charge.
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or before.
    @constraint:String {maxLength: 255}
    string comment?;
    # The description of the product rate plan charge.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    @constraint:String {maxLength: 255}
    string description?;
    # Container for the finance information related to the product rate plan charge associated with the debit memo.
    DebitMemoFromChargeDetailType_financeInformation financeInformation?;
    # The amount of the debit memo item.
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `224.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    decimal memoItemAmount?;
    # The ID of the product rate plan charge that the debit memo is created from.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string productRatePlanChargeId;
    # The number of units for the debit memo item.
    decimal quantity?;
    # The service end date of the debit memo item. If not specified, the effective end date of the corresponding product rate plan will be used.
    string serviceEndDate?;
    # The service start date of the debit memo item. If not specified, the effective start date of the corresponding product rate plan will be used.
    string serviceStartDate?;
    *DebitMemoItemObjectCustomFields;
};

# Container for finance information of a rate plan charge.
public type FinanceInformation record {
    # The accounting code for adjustment liability. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled. 
    string adjustmentLiabilityAccountingCode?;
    # The type associated with the adjustment liability accounting code. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled.
    string adjustmentLiabilityAccountingCodeType?;
    # The accounting code for adjustment revenue. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled. 
    string adjustmentRevenueAccountingCode?;
    # The type associated with the adjustment revenue accounting code. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled.
    string adjustmentRevenueAccountingCodeType?;
    # The accounting code for contract asset. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled. 
    string contractAssetAccountingCode?;
    # The type associated with the contract asset accounting code. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled.
    string contractAssetAccountingCodeType?;
    # The accounting code for contract liability. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled. 
    string contractLiabilityAccountingCode?;
    # The type associated with the contract liability accounting code. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled.
    string contractLiabilityAccountingCodeType?;
    # The accounting code for contract recognized revenue. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled. 
    string contractRecognizedRevenueAccountingCode?;
    # The type associated with the contract recognized revenue accounting code. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled.
    string contractRecognizedRevenueAccountingCodeType?;
    # The accounting code for deferred revenue, such as Monthly Recurring Liability. 
    string deferredRevenueAccountingCode?;
    # The type associated with the deferred revenue accounting code, such as Deferred Revenue. 
    string? deferredRevenueAccountingCodeType?;
    # The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. 
    string recognizedRevenueAccountingCode?;
    # The type associated with the recognized revenue accounting code, such as Sales Revenue or Sales Discount. 
    string? recognizedRevenueAccountingCodeType?;
    # The accounting code for unbilled receivables. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled. 
    string unbilledReceivablesAccountingCode?;
    # The type associated with the unbilled receivables accounting code. 
    # 
    # **Note**: This field is only available if you have the RevPro Integration feature enabled.
    string unbilledReceivablesAccountingCodeType?;
};

# Condition evaluated on a single object field
public type CustomObjectBulkDeleteFilterCondition record {
    # The object field that is evaluated. Only filterable fields can be evaluated in the filter.
    string 'field;
    "EQ"|"GT"|"LT"|"GE"|"LE" operator;
    # The value that the filterable `field` is evaluated against in the filter. The data type of `value` is consistent with that of the `field`.
    anydata value;
};

public type ResponseReasons record {
    # The error code of response.
    string code?;
    # The detail information of the error response.
    string message?;
};

public type GETInvoiceTaxationItemsResponse record {
    # Container for the taxation items of the invoice item.
    GETInvoiceTaxItemType[] data?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# A volume summary record.
public type ApiVolumeSummaryRecord record {
    # The API path name.
    string api?;
    # The count of failed API requests of above `api` and `httpMethod`.
    int 'error?;
    # The http method.
    string httpMethod?;
    # The count of successful API requests of above `api` and `httpMethod`.
    int success?;
    # The count of total API requests of above `api` and `httpMethod`.
    int total?;
};

public type PUTOrderLineItemRequestType PutOrderLineItemUpdateType;

public type JobResult_subscriptions record {
    # Status of the subscription. `Pending Activation` and `Pending Acceptance` are only applicable for an order that contains a `CreateSubscription` order action.
    "Active"|"Pending Activation"|"Pending Acceptance"|"Cancelled" status?;
    # Subscription number of the subscription included in this order.
    string subscriptionNumber?;
};

# When a comparison is made between a source and target tenant, it sends a response to the user interface.
public type MigrationComponentContent record {
    string attribute?;
    # Type of selected components to be migrated.
    string componentType?;
    # Json node object contains metadata.
    JsonNode currentTargetResponse?;
    string description?;
    string disabled?;
    # Error information.
    string errorMessage?;
    string httpMethods?;
    string id?;
    string 'key?;
    # It is the time when migration is triggered.
    string migratedOn?;
    # Migration ID. It is generated at the time of triggering deployment.
    string migrationId?;
    # PathPattern of component.
    string pathPattern?;
    # Json node object contains metadata.
    JsonNode previousTargetResponse?;
    # Returns the result details of Components.
    string result?;
    # Displays the differences between components.
    string segregationKey?;
    # Json node object contains metadata.
    JsonNode sourceResponse?;
    # Returns the status of each component.
    string status?;
    # Updated Status.
    string updateStatus?;
};

public type ListEInvoicingServiceProvidersResponse record {
    # Container for e-invoicing service providers.
    GetEInvoicingServiceProviderResponse[] serviceProviders?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type POSTPaymentMethodUpdaterResponse_reasons record {
    # Error code.
    string code?;
    # Error message.
    string message?;
};

# Pricing information about a one-time charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
public type OneTimeVolumePricingOverride record {
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # List of variable pricing tiers in the charge.
    ChargeTier[] tiers?;
    # Unit of measure of the standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    decimal uom?;
};

public type Order_subscriptions record {
    # The base version of the subscription.
    int baseVersion?;
    # Container for custom fields of a Subscription object.
    SubscriptionObjectCustomFields customFields?;
    # An enum field on the Subscription object to indicate the name of a third-party store. This field is used to represent subscriptions created through third-party stores.
    "Amazon"|"Apple"|"Google"|"Roku" externallyManagedBy?;
    # The latest version of the subscription.
    int newVersion?;
    OrderAction[] orderActions?;
    # The fields populated for a quote when a quote is sent to Zuora Billing from Zuora Quote.
    QuoteObjectFields quote?;
    # **Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.
    # 
    # The ramp definition.
    RampResponse[] ramp?;
    # The sequence number of a certain subscription processed by the order.
    int sequence?;
    # The new subscription number for a new subscription created, or the existing subscription number. Unlike the order request, the subscription number here always has a value.
    string subscriptionNumber?;
    # The number of the account that owns the subscription.
    string subscriptionOwnerAccountNumber?;
};

public type GETAccountSummaryInvoiceType record {
    # Invoice amount before adjustments, discounts, and similar items.
    decimal amount?;
    # Balance due on the invoice.
    string balance?;
    # Due date as `yyyy-mm-dd`.
    string dueDate?;
    # Invoice ID.
    string id?;
    # Invoice date as `yyyy-mm-dd`.
    string invoiceDate?;
    # Invoice number.
    string invoiceNumber?;
    # Invoice status - not the payment status of the invoice, just the status of the invoice itself. Possible values are: `Posted`, `Draft`, `Canceled`, `Error`.
    string status?;
};

# Container for custom fields of a Fulfillment object.
public type FulfillmentCustomFields record {
};

public type ConfigTemplateErrorResponse_reasons record {
    # The error code of response.
    string code?;
    # A detailed description of the error response.
    string message?;
};

public type GETAccountSummarySubscriptionRatePlanType record {
    # Product ID.
    string productId?;
    # Product name.
    string productName?;
    # Product Rate Plan ID.
    string productRatePlanId?;
    # 
    string productSku?;
    # Rate plan name.
    string ratePlanName?;
};

public type CreateOrderNewAccount record {
    @constraint:String {maxLength: 70}
    string accountNumber?;
    # List of additional email addresses to receive emailed invoices. Values should be a comma-separated list of email addresses.
    @constraint:String {maxLength: 1200}
    string additionalEmailAddresses?;
    # Indicates if associated invoices can be edited.
    # Values are: 
    # 
    # * `true`
    # * `false` (default)
    boolean allowInvoiceEdit?;
    # Specifies whether future payments are to be automatically billed when they are due. Possible values are `true`, `false`.
    boolean autoPay?;
    # **Note**: By default, you have 50 configurable account batches. To increase the limit to 200 batches, you must have the <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Performance_Booster_Elite" target="_blank">Performance Booster Elite</a> package.
    string batch?;
    # Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as "AutoSet".
    @constraint:Int {minValue: 0, maxValue: 31}
    int billCycleDay;
    BillToContactPostOrder billToContact;
    string communicationProfileId?;
    # Default payment method associated with an account. Only credit card payment methods are supported.
    CreditCard creditCard?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.
    string creditMemoTemplateId?;
    @constraint:String {maxLength: 100}
    string crmId?;
    # 3 uppercase character currency code.
    # 
    # For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.
    string currency;
    # Container for custom fields of an Account object.
    AccountObjectCustomFields customFields?;
    # Name of the account's customer service representative, if applicable.
    @constraint:String {maxLength: 50}
    string customerServiceRepName?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.
    string debitMemoTemplateId?;
    # The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.
    # 
    # If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field,
    # but not both.
    # 
    # For the Credit Card Reference Transaction payment method, you can specify the payment method ID in this field or use the `paymentMethod` field to create a CC Reference Transaction payment method for an account.
    string hpmCreditCardPaymentMethodId?;
    # Specifies whether to turn on the invoice delivery method 'Email' for the new account. 
    # Values are: 
    # 
    # * `true` (default). Turn on the invoice delivery method 'Email' for the new account.
    # * `false`. Turn off the invoice delivery method 'Email' for the new account.
    boolean invoiceDeliveryPrefsEmail?;
    # Specifies whether to turn on the invoice delivery method 'Print' for the new account.
    # Values are: 
    # 
    # * `true`. Turn on the invoice delivery method 'Print' for the new account.
    # * `false` (default). Turn off the invoice delivery method 'Print' for the new account.
    boolean invoiceDeliveryPrefsPrint?;
    string invoiceTemplateId?;
    @constraint:String {maxLength: 255}
    string name;
    @constraint:String {maxLength: 65535}
    string notes?;
    # Name of the organization that the account belongs to.  
    # 
    # This field is only required when you have already turned on Multi-Org feature.    
    string organizationLabel?;
    # Identifier of the parent customer account for this Account object. Use this field if you have <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy" target="_blank">Customer Hierarchy</a> enabled.
    string parentId?;
    # Whether the customer account is a partner, distributor, or reseller. 
    # 
    # 
    # You can set this field to `true` if you have business with distributors or resellers, or operating in B2B model to manage numerous subscriptions through concurrent API requests. After this field is set to `true`, the calculation of account metrics is performed asynchronously during operations such as subscription creation, order changes, invoice generation, and payments.
    # 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account" target="_blank">Reseller Account</a> feature enabled.
    boolean partnerAccount = false;
    @constraint:String {maxLength: 40}
    string paymentGateway?;
    # Payment method information associated with an account.
    POSTPaymentMethodRequest paymentMethod?;
    # **Note**: If you want to specify a payment term when creating a new account, you must set a value in this field. If you do not set a value in this field, Zuora will use `Due Upon Receipt` as the value instead of the default value set in **Billing Settings** > **Payment Terms** from Zuora UI.
    string paymentTerm?;
    # The number of the purchase order associated with this account. Purchase order information generally comes from customers.
    @constraint:String {maxLength: 100}
    string purchaseOrderNumber?;
    # The name of the sales representative associated with this account, if applicable.
    @constraint:String {maxLength: 50}
    string salesRep?;
    # The ID of the sequence set to assign to the customer account. 
    # 
    # The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.
    string sequenceSetId?;
    SoldToContactPostOrder soldToContact?;
    # Whether the sold-to contact and bill-to contact are the same entity. 
    # 
    # The created account has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:
    # 
    # - This field is set to `true`. 
    # - A bill-to contact is specified.
    # - No sold-to contact is specified.
    boolean soldToSameAsBillTo?;
    # Information about the tax exempt status of a customer account.
    TaxInfo taxInfo?;
    *DataAccessControlField;
};

# 
public type QueryPaymentMethodSnapshotsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedPaymentMethodSnapshot[] data?;
|};

public type RampChargeResponse record {
    # The number of the rate plan charge.
    string chargeNumber?;
};

public type PostInvoiceResponse record {
    # The ID of the customer account associated with the invoice.
    string accountId?;
    # The amount of the invoice adjustments associated with the invoice.
    string adjustmentAmount?;
    # The total amount of the invoice.
    string amount?;
    # The invoice amount excluding tax.
    string amountWithoutTax?;
    # Whether invoices are automatically picked up for processing in the corresponding payment run.
    boolean autoPay?;
    # The remaining balance of the invoice after all payments, adjustments, and refunds are applied.
    string balance?;
    # The id of bill run if the invoice is generated by a bill run.
    string billRunId?;
    # The ID of the bill-to contact associated with the invoice.
    string billToContactId?;
    # The ID of the bill-to contact snapshot associated with the invoice.
    string billToContactSnapshotId?;
    # Comments about the invoice.
    string comments?;
    # The user ID of the person who created the invoice. If a bill run generated the invoice, then the value is the user ID of person who created the bill run.
    string createdById?;
    # The date and time when the invoice was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The currency amount of the adjustment applied to the customer's credit balance.
    # 
    #  **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.
    string creditBalanceAdjustmentAmount?;
    # The currency amount of all credit memos applied to this invoice.
    # 
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    string creditMemoAmount?;
    # The currency of the invoice.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # the invoice discount amount.
    string discount?;
    # The date by which the payment for this invoice is due, in `yyyy-mm-dd` format.
    string dueDate?;
    # The error code when status is "Failed". This code can either be a Zuora-generated error code or one returned by a third-party e-invoice vendor.
    string einvoiceErrorCode?;
    # The error message when status is "Failed". This message can either be a Zuora-generated error code or one returned by a third-party e-invoice vendor.
    string einvoiceErrorMessage?;
    # The ID of the e-invoice file.
    string einvoiceFileId?;
    # It could be Processing, Generated, Success, Failed. If it’s Failed, it will have an error code and message. If it’s Generated or Success, both error code and message are empty, and eInvoiceFileId stores the file id of e-invoice.
    "Processing"|"Generated"|"Success"|"Failed" einvoiceStatus?;
    # The unique ID of the invoice.
    string id?;
    # Specifies whether the invoice includes one-time charges.
    boolean includesOneTime?;
    # Specifies whether the invoice includes recurring charges.
    boolean includesRecurring?;
    # Specifies whether the invoice includes usage charges.
    boolean includesUsage?;
    # The date that appears on the invoice being created.
    string invoiceDate?;
    # The number of the invoice group associated with the invoice. 
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string? invoiceGroupNumber?;
    # The unique identification number of the invoice.
    string invoiceNumber?;
    # The date when the invoice was last emailed.
    string lastEmailSentDate?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The amount of payments applied to the invoice.
    string paymentAmount?;
    # The name of payment term associated with the invoice.
    string paymentTerm?;
    # The user ID of the person who moved the invoice to Posted status.
    string postedBy?;
    # The date when the invoice was posted.
    string postedDate?;
    # Specifies the amount of a refund that was applied against an earlier payment on the invoice.
    string refundAmount?;
    # The ID of the sequence set associated with the invoice.
    string sequenceSetId?;
    # The ID of the sold-to contact associated with the invoice.
    string soldToContactId?;
    # The ID of the sold-to contact snapshot associated with the invoice.
    string soldToContactSnapshotId?;
    # The source of the invoice.
    "BillRun"|"API"|"ApiSubscribe"|"ApiAmend" 'source?;
    # The ID of the invoice source.
    # If an invoice is generated from a bill run, the value is the number of the corresponding bill run.Otherwise, the value is `null`.
    string sourceId?;
    # The type of the invoice source.
    "Subscription"|"Standalone"|"Order"|"Consolidation" sourceType?;
    # The status of the invoice.
    "Draft"|"Posted" status?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.
    string targetDate?;
    # The amount of taxation.
    string taxAmount?;
    # The calculated tax amount excluded due to the exemption.
    string taxExemptAmount?;
    # The message that the tax engine return if it calculates the taxes of this invoice fails.
    string taxMessage?;
    # The status that the tax engine return after it calculates the taxes of this invoice.
    "Complete"|"Error"|"UnknownError"|"DuplicateDoc"|"InvalidRequest"|"InvalidResponse"|"TaxEngineError"|"ConcurrentModify"|"InternalServerError"|"TaxCodeTemplateError" taxStatus?;
    # The ID of the invoice template.
    # 
    # - If you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Flexible_Billing_Attributes" target="_blank">Flexible Billing Attributes</a> feature enabled, the value of this field depends on the configuration of the invoice template. 
    #   - If you specify an invoice template at the subscription level, the value of this field is automatically populated from the corresponding subscription.
    #   - If you do not specify any invoice template at the subscription level, the value of this field is automatically populated from the corresponding account.
    # - If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string templateId?;
    # Whether the invoice was transferred to an external accounting system.
    "Processing"|"Error"|"Ignore"|"Yes"|"No" transferredToAccounting?;
    # The ID of the Zuora user who last updated the invoice.
    string updatedById?;
    # The date when the invoice was last updated.
    string updatedDate?;
    *InvoiceObjectNSFields;
    *InvoiceObjectCustomFields;
};

public type GETTaxationItemsOfCreditMemoItemType record {
    # Container for the taxation items of the credit memo item.
    GETCMTaxItemTypeNew[] data?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type OrderActionRatePlanUsageTieredPricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    OrderActionRatePlanChargeTier[] tiers?;
};

# Container for custom fields of a Debit Taxation Item object.
public type DebitTaxationItemObjectCustomFields record {
};

# Information about an order action of type `Suspend`.
public type CreateOrderSuspend record {
    # This field is applicable only when the `suspendPolicy` field is set to `FixedPeriodsFromToday`. It must be used together with the `suspendPeriodsType` field. 
    # 
    # The total number of the periods used to specify when a subscription suspension takes effect. The subscription suspension will take place after the specified time frame (`suspendPeriods` multiplied by `suspendPeriodsType`) from today's date. 
    int suspendPeriods?;
    # This field is applicable only when the `suspendPolicy` field is set to `FixedPeriodsFromToday`. It must be used together with the `suspendPeriods` field.
    # 
    # The period type used to specify when a subscription suspension takes effect. The subscription suspension will take place after the specified time frame (`suspendPeriods` multiplied by `suspendPeriodsType`) from today's date. 
    "Day"|"Week"|"Month"|"Year" suspendPeriodsType?;
    # Suspend methods. Specify a way to suspend a subscription. See [Suspend Date](https://knowledgecenter.zuora.com/BC_Subscription_Management/Subscriptions/Suspend_a_Subscription#Suspend_Date) for more information.
    "Today"|"EndOfLastInvoicePeriod"|"FixedPeriodsFromToday"|"SpecificDate" suspendPolicy;
    # This field is applicable only when the `suspendPolicy` field is set to `SpecificDate`.
    # 
    # A specific date when the subscription suspension takes effect, in YYYY-MM-DD format. The value should not be earlier than the subscription's contract effective date or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) than the subscription's term end date.
    string suspendSpecificDate?;
};

public type NestedOrderLineItemOnExpand record {|
    # The unique identifier of the order line item.
    string id?;
    # The unique identifier of the user who created the order line item.
    string createdById?;
    # The time that the order line item gets created in the system, in the
    # `YYYY-MM-DD HH:MM:SS` format.
    string createdDate?;
    # The unique identifier of the user who last updated the order line item.
    string updatedById?;
    # The date and time when the order line item was last updated.
    string updatedDate?;
    # The accountingCode for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string accountingCode?;
    # The target date for the Order Line Item (OLI) to be picked up by bill run for generating billing documents.
    # 
    # To generate billing documents for an OLI, you must set this field and set the `itemState` field to `SentToBilling`.
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string billTargetDate?;
    # The actual charged amount per unit for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    decimal amountPerUnit?;
    # The description of the Order Line Item.
    string description?;
    # The total amount for the Order Line Item (OLI).
    decimal amount?;
    # The total amount for the Order Line Item (OLI) excluding tax.
    decimal amountWithoutTax?;
    # The name of the Order Line Item (OLI).
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string itemName?;
    # The number for the Order Line Item (OLI).
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string itemNumber?;
    # The state of the Order Line Item (OLI). See [State transitions for an order, order line item, and fulfillment](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
    # 
    # To generate invoice for an OLI, you must set this field to `SentToBilling` and set the `billTargetDate` field .
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` or 'Booked' or `SentToBilling`state (when the `itemState` field is set as `Executing` or `SentToBilling`).
    "Executing"|"Booked"|"SentToBilling"|"Complete"|"Cancelled" itemState?;
    # The type of the Order Line Item (OLI). 
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    "Product"|"Fee"|"Services" itemType?;
    # The list price per unit for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    decimal listPricePerUnit?;
    # The extended list price for an order line item, calculated by the formula:
    # listPrice = listPricePerUnit * quantity
    decimal listPrice?;
    # The ID of the order that the order line item belongs to.
    string orderId?;
    # The product code for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string productCode?;
    # Used by customers to specify the Purchase Order Number provided by the buyer.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string purchaseOrderNumber?;
    # The quantity of units, such as the number of authors in a hosted wiki service.
    # 
    # You can update this field for a sales or return OLI only when the OLI in the `Executing` state (when the `itemState` field is set as `Executing`).
    decimal quantity?;
    # The Revenue Recognition rule for the Order Line Item.
    string revenueRecognitionRule?;
    # ID of a Product Rate Plan Charge. Only one-time charges are supported.
    string productRatePlanChargeId?;
    # The ID of a contact that belongs to the billing account of the order line item. Use this field to assign an existing account as the bill-to contact of an order line item.
    string billToId?;
    # The snapshot of the ID for an account used as the bill-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `billToSnapshotId` field is exposed while retrieving the order line item details.
    string billToSnapshotId?;
    # The ID of a contact that belongs to the owner acount or billing account of the order line item. Use this field to assign an existing account as the sold-to contact of an order line item.
    string soldTo?;
    # The snapshot of the ID for an account used as the sold-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `soldToSnapshotId` field is exposed while retrieving the order line item details.
    string soldToSnapshotId?;
    # The ID of the sold-to contact for the order.
    string soldToOrderContactId?;
    # The account ID of the owner of the order line item.
    string ownerAccountId?;
    # The account ID of the invoice owner of the order line item.
    string invoiceOwnerAccountId?;
    # The tax code for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string taxCode?;
    # The tax mode for the Order Line Item (OLI).
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    "TaxInclusive"|"TaxExclusive" taxMode?;
    # The date when the transaction occurs.
    string transactionDate?;
    # Specifies the units to measure usage.
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string uOM?;
    # This field is used to relate an order line item to an subscription. 
    # 
    # You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string relatedSubscriptionNumber?;
    # The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the `transactionStartDate` field.
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string transactionEndDate?;
    # The date a transaction starts. The default value of this field is the order date.
    # 
    # You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).
    string transactionStartDate?;
    # Indicates whether to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Indicates whether to exclude the related rate plan charges and order line items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Order to Revenue or Billing - Revenue Integration feature enabled.
    boolean excludeItemBookingFromRevenueAccounting?;
    # The date of the original sale order for a return order line item.
    string originalOrderDate?;
    # The date of the amended order for a return order line item.
    string amendedByOrderOn?;
    # The category of the Order Line Item, to indicate a product sale or return.
    "Sales"|"Return" itemCategory?;
    # The ID of the original sale order for a return order line item. 
    string originalOrderId?;
    # The ID of the original sale order line item for a return order line item. 
    string originalOrderLineItemId?;
    # The number of the original sale order line item for a return order line item. 
    string originalOrderLineItemNumber?;
    # The number of the original sale order for a return order line item. 
    string originalOrderNumber?;
    # The quantity that can be returned for an order line item. 
    decimal quantityAvailableForReturn?;
    # The fulfilled quantity for an order line item.
    decimal quantityFulfilled?;
    # The quantity to fulfill for an order line item. 
    decimal quantityPendingFulfillment?;
    # The flag to show whether fulfillment is needed or not. It's derived from billing rule of the Order Line Item.
    boolean requiresFulfillment?;
    # The billing rule of the Order Line Item.
    "TriggerWithoutFulfillment"|"TriggerAsFulfillmentOccurs" billingRule?;
    # This field is used in accordance with the `inlineDiscountType` field, in the following manner:
    # * If the `inlineDiscountType` field is set as `Percentage`, this field specifies the discount percentage for each unit of the order line item. For exmaple, if you specify `5` in this field, the discount percentage is 5%.
    # * If the `inlineDiscountType` field is set as `FixedAmount`, this field specifies the discount amount on each unit of the order line item. For exmaple, if you specify `10` in this field, the discount amount on each unit of the order line item is 10.
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    decimal inlineDiscountPerUnit?;
    # This field is used to specify the inline discount type, which can be `Percentage`, `FixedAmount`, or `None`. The default value is `Percentage`.
    # 
    # This field is used together with the `inlineDiscountPerUnit` field to specify inline discounts for order line items. The inline discount is applied to the list price of an order line item. 
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    "Percentage"|"FixedAmount"|"None" inlineDiscountType?;
    # This field shows the total discount amount that is applied to an order line item after the `inlineDiscountType`, `inlineDiscountPerUnit` and `quantity` fields are set.
    # 
    # The inline discount is applied to the list price of an order line item.
    decimal discount?;
    # The recognized revenue accounting code for the Order Line Item.
    string recognizedRevenueAccountingCodeId?;
    # The deferred revenue accounting code for the Order Line Item.
    string deferredRevenueAccountingCodeId?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractAssetAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractLiabilityAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractRecognizedRevenueAccountingCodeId?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string unbilledReceivablesAccountingCodeId?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string adjustmentRevenueAccountingCodeId?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string adjustmentLiabilityAccountingCodeId?;
    # EXPANDABLE. The invoice item associated with the order line item.
    record {}[] invoiceItems?;
|};

public type DiscountPricingUpdate record {
    # Specifies which type of charge the discount charge applies to.
    "ONETIME"|"RECURRING"|"USAGE"|"ONETIMERECURRING"|"ONETIMEUSAGE"|"RECURRINGUSAGE"|"ONETIMERECURRINGUSAGE" applyDiscountTo?;
    # Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
    "rateplan"|"subscription"|"account" discountLevel?;
    # The amount of the discount as a percentage. This field is only used for percentage discounts.
    decimal discountPercentage?;
    # Specifies how Zuora changes the price of the charge each time the subscription renews.
    "NoChange"|"UseLatestProductCatalogPricing" priceChangeOption?;
};

public type StopWorkflowRunSuccess record {
    # The indicator for whether the operation to stop a workflow run was a success.
    boolean success?;
};

public type Template_product_catalog_body record {
    # Deployment's name.
    string name;
    # Deployment's description.
    string description;
    # Specifies if an email should be sent.
    boolean sendEmail;
    # If sendEmail parameter is set to true, comma separated values of emails can be specified.
    string emails?;
    # Content of the email to be sent.
    string comments?;
    # Template file.
    record {byte[] fileContent; string fileName;} template;
    # Specifies if inactive products needs to be migrated.
    boolean inActiveProducts;
    # Specifies if active products needs to be migrated.
    boolean activeProducts;
    # Specifies if active rate plans needs to be migrated.
    boolean activeRatePlans;
    # Specifies if inactive rate plans needs to be migrated.
    boolean inActiveRatePlans;
    # Specifies the compare field to be using during migration.
    "name"|"sku" compareField;
};

public type PUTWriteOffInvoiceResponse record {
    # Container for the credit memo that is automatically generated when writing off invoices.
    PUTWriteOffInvoiceResponse_creditMemo creditMemo?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type GETCustomExchangeRatesType record {
    # - If `true`, the exchange rate in the response is an inverse exchange rate.
    # - If `false`, the exchange rate in the response is not an inverse exchange rate.
    # The value is determined by the **Use inverse rate** checkbox in your Zuora Finance Manage Currency Conversion settings.
    boolean inverse?;
    # Container for exchange rate data. Contains a set of fields that provide exchange rate data for each day between the specified `startDate` and `endDate` (inclusive). 
    record {|Rate...;|} rates?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type GETAccountSummarySubscriptionType record {
    # If `true`, auto-renew is enabled. If `false`, auto-renew is disabled.
    boolean autoRenew?;
    # Subscription ID.
    string id?;
    # Duration of the initial subscription term in whole months. 
    string initialTerm?;
    # Container for rate plans for this subscription.
    GETAccountSummarySubscriptionRatePlanType[] ratePlans?;
    # Duration of the renewal term in whole months.
    string renewalTerm?;
    # Subscription status; possible values are: `Draft`, `PendingActivation`, `PendingAcceptance`, `Active`, `Cancelled`, `Expired`.
    string status?;
    # Subscription Number.
    string subscriptionNumber?;
    # Subscription start date.
    string subscriptionStartDate?;
    # End date of the subscription term. If the subscription is evergreen, this is either null or equal to the cancellation date, as appropriate.
    string termEndDate?;
    # Start date of the subscription term. If this is a renewal subscription, this date is different than the subscription start date.
    string termStartDate?;
    # Possible values are: `TERMED`, `EVERGREEN`.
    string termType?;
    *SubscriptionObjectQTFields;
    *SubscriptionObjectNSFields;
    *SubscriptionObjectCustomFields;
};

public type PUTDebitMemoType record {
    # Whether debit memos are automatically picked up for processing in the corresponding payment run. 
    # 
    # By default, debit memos are automatically picked up for processing in the corresponding payment run.
    boolean autoPay?;
    # Comments about the debit memo.
    @constraint:String {maxLength: 255}
    string comment?;
    # The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.
    string dueDate?;
    # The date when the debit memo takes effect.
    string effectiveDate?;
    # Container for debit memo items.
    PUTDebitMemoItemType[] items?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code
    string reasonCode?;
    # Whether the debit memo is transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    *DebitMemoObjectNSFields;
    *DebitMemoObjectCustomFields;
};

# The container for payment method processing options.
public type PUTPaymentMethodRequest_processingOptions record {
    # Indicates whether to perform a duplication check when you create a payment method of the following types:
    #   - Credit Card
    #   - ACH
    #   - Bank Transfer
    # 
    # The default value is `false`.
    # 
    # With this field set to `true`, Zuora will check the active and closed payment methods associated with the same billing account to ensure that no duplicate payment methods are created. 
    # 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_Methods/D1_Duplication_check_on_payment_methods" target="_blank">Duplication check on payment methods</a>.
    boolean checkDuplicated?;
};

# Container for the debit memo that is automatically generated during the reversal of the credit memo related to this invoice. If no related credit memo is reversed, this field is not retruned in the response body.
public type PutReverseInvoiceResponseType_debitMemo record {
    # The ID of the debit memo.
    string id?;
};

public type GetAllOrdersResponseType record {
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    Order[] orders?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type ExpandedCreditMemo record {|
    # The unique identifier of the credit memo.
    string id?;
    # The unique identifier of the user who created the credit memo.
    string createdById?;
    # The date and time when the credit memo was created.
    string createdDate?;
    # The unique identifier of the user who last updated the credit memo.
    string updatedById?;
    # The date and time when the credit memo was last updated.
    string updatedDate?;
    # The applied amount of the credit memo.
    decimal appliedAmount?;
    # The remaining balance of credit memo.
    decimal balance?;
    # The ID of the bill-to contact associated with the credit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string billToContactId?;
    # The ID of the bill-to contact snapshot associated with the credit memo.
    # 
    # The value of this field is `null` if the bill rule [Preserve snapshot of bill-to and sold-to contacts when billing documents are posted](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/Billing_Settings/Define_Billing_Rules#Preserve_snapshot_of_bill-to_and_sold-to_contacts_when_billing_documents_are_posted) is disabled.
    string billToContactSnapshotId?;
    # The ID of the Zuora user who cancelled the credit memo.
    string cancelledById?;
    # The date and time when the credit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the credit memo.
    string comment?;
    # The currency of the credit memo.
    # 
    # **Note:** By default, the currency on a billing document matches the default currency set on the associated account. 
    # However, Zuora now offers a Multiple Currencies feature to support different currencies for billing documents, allowing flexibility beyond the account-level currency. 
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies" target="_blank">Multiple Currency</a>.
    string? currency?;
    # The amount of the discount on the credit memo.
    decimal discountAmount?;
    # The error code returned when the e-invoice file status is `Failed`. This code can either be a Zuora-generated error code or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorCode?;
    # The error message returned when the e-invoice file status is `Failed`. This message can either be a Zuora-generated error message or one returned by a third-party e-invoicing service provider.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceErrorMessage?;
    # The ID of the e-invoice file generated for the credit memo.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    string einvoiceFileId?;
    # The status of the e-invoice file generation for the credit memo. 
    # 
    # - If e-invoice file generation succeeds, this field is either `Generated` or `Success`, and both the error code and message are empty, and the `eInvoiceFileId` field stores the ID of the generated e-invoice file.
    # - If a failure occurs during e-invoice file generation, this field is `Failed` and an error code and an error message are returned respectively in the `einvoiceErrorCode` and `einvoiceErrorMessage` fields. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/E-Invoicing" target="_blank">E-Invoicing</a> feature in **Early Adopter** phase enabled.
    "Processing"|"Generated"|"Success"|"Failed" einvoiceStatus?;
    # Whether the credit memo is excluded from the rule of automatically applying credit memos to invoices.
    boolean excludeFromAutoApplyRules?;
    # The date of the exchange rate used. The date is in `yyyy-mm-dd` format.
    # Corresponds to the value specified in the Provider Exchange Rate Date column in the Import Foreign Exchange Rates template when you uploaded the rates through the Mass Updater.
    string exchangeRateDate?;
    # Whether the credit memo automatically applies to the invoice upon
    # posting.
    boolean autoApplyUponPosting?;
    # The date when the credit memo takes effect, in `yyyy-mm-dd` format.
    # For example, `2024-01-01`.
    string memoDate?;
    # The unique identification number of the credit memo.
    string memoNumber?;
    # The ID of the Zuora user who posted the credit memo.
    string postedById?;
    # The date and time when the credit memo was posted, in
    # `yyyy-mm-dd hh:mm:ss` format.
    string postedOn?;
    # A code identifying the reason for the transaction. The value
    # must be an existing reason code or empty.
    string reasonCode?;
    # The amount of the refund on the credit memo.
    decimal refundAmount?;
    # Whether the credit memo is reversed.
    boolean reversed?;
    # The ID of the sequence set associated with the credit memo.
    # 
    # The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.
    string sequenceSetId?;
    # The source of the credit memo.
    # 
    # Possible values:
    # - `BillRun`: The credit memo is generated by a bill run.
    # - `API`: The credit memo is created by calling the [Invoice and collect](https://developer.zuora.com/api-references/api/operation/POST_TransactionInvoicePayment) operation, or by calling the Orders, Order Line Items, or Fulfillments API operations.
    # - `ApiSubscribe`: The credit memo is created by calling the [Create subscription](https://developer.zuora.com/api-references/api/operation/POST_Subscription) and [Create account](https://developer.zuora.com/api-references/api/operation/POST_Account) operation.
    # - `ApiAmend`: The credit memo is created by calling the [Update subscription](https://developer.zuora.com/api-references/api/operation/PUT_Subscription) operation.
    # - `AdhocFromPrpc`: The credit memo is created from a product rate plan charge through the Zuora UI or by calling the [Create a credit memo from a charge](https://developer.zuora.com/api-references/api/operation/POST_CreditMemoFromPrpc) operation.
    # - `AdhocFromInvoice`: The credit memo is created from an invoice or created by reversing an invoice. You can create a credit memo from an invoice through the Zuora UI or by calling the [Create credit memo from invoice](https://developer.zuora.com/api-references/api/operation/POST_CreditMemoFromInvoice) operation. You can create a credit memo by reversing an invoice through the Zuora UI or by calling the [Reverse invoice](https://developer.zuora.com/api-references/api/operation/PUT_ReverseInvoice) operation.
    "BillRun"|"API"|"ApiSubscribe"|"ApiAmend"|"AdhocFromPrpc"|"AdhocFromInvoice" 'source?;
    # The ID of the credit memo source.
    # 
    # If a credit memo is generated from a bill run, the value is the
    # number of the corresponding bill run. Otherwise, the value is
    # `null`.
    string sourceId?;
    # The type of the credit memo source.
    "Subscription"|"Standalone"|"Invoice"|"Order"|"CreditMemo"|"Consolidation" sourceType?;
    # The status of the credit memo.
    "Draft"|"Posted"|"Canceled"|"Error"|"PendingForTax"|"Generating"|"CancelInProgress" status?;
    # The target date for the credit memo, in `yyyy-mm-dd` format. For example, `2024-01-01`.
    string targetDate?;
    # The amount of taxation.
    decimal taxAmount?;
    # The message about the status of tax calculation related to the credit memo. If tax calculation fails in one credit memo, this field displays the reason for the failure.
    string taxMessage?;
    # The status of tax calculation related to the credit memo.
    # 
    # **Note**: This field is only applicable to tax calculation by third-party tax engines.
    "Complete"|"Error" taxStatus?;
    # The ID of the sold-to contact snapshot associated with the
    # credit memo.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature
    # disabled, the value of this field is `null`.
    string soldToContactSnapshotId?;
    # Whether to automatically calculate taxes in the credit memo.
    boolean taxAutoCalculation?;
    # The total amount of the credit memo, including taxes.
    decimal totalAmount?;
    # The total amount of the credit memo, excluding taxes.
    decimal totalAmountWithoutTax?;
    # The calculated tax amount excluded due to the exemption.
    decimal totalTaxExemptAmount?;
    # Whether the credit memo was transferred to an external
    # accounting system. This field is used for integration with
    # accounting systems such as NetSuite.
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The ID of a referred invoice.
    string invoiceId?;
    # The ID of the customer account associated with the credit memo.
    string accountId?;
    NestedAccountOnExpand account?;
    ExpandedContact billToContact?;
    NestedCreditMemoItemOnExpand[] creditMemoItems?;
    NestedCreditMemoApplicationOnExpand[] creditMemoApplications?;
|};

# Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
public type UsageVolumePricingOverride record {
    *PriceChangeParams;
    # Specifies how Zuora groups usage records when rating usage. See [Usage Rating by Group](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Usage/Usage_Rating_by_Group) for more information.
    #   * ByBillingPeriod (default): The rating is based on all the usages in a billing period.
    #   * ByUsageStartDate: The rating is based on all the usages on the same usage start date. 
    #   * ByUsageRecord: The rating is based on each usage record.
    #   * ByUsageUpload: The rating is based on all the usages in a uploaded usage file (.xls or .csv). If you import a mass usage in a single upload, which contains multiple usage files in .xls or .csv format, usage records are grouped for each usage file.
    "ByBillingPeriod"|"ByUsageStartDate"|"ByUsageRecord"|"ByUsageUpload" ratingGroup?;
    # List of variable pricing tiers in the charge.
    ChargeTier[] tiers?;
    # Unit of measure of the standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    decimal uom?;
};

# Represents an order item. An order item is a sales item within an order in the context of the recurring subscription business model. It can be a unit of products or a service, but defined by both quantity and term (the start and end dates). 
# 
# For the one time and the recurring charge types, if an order action causes a quantity metric creation (when the delta quantity equals to or is greater than zero), an order item is created.
# 
# The following order actions will create an order item for the one time and recurring charges. The other order actions will refer to an existing order item. Also, the Owner Transfer order action always creates an order item whose quantity field is zero.
# 
#   * Create Subscription
#   * Terms and Conditions - Extend Term
#   * Renewal
#   * Update Product - Increase Quantity
#   * Add product
#   * Owner Transfer
# 
# For the usage charge type, if the order action causes a usage increase, an order item is created, and the quantity field of the order item is always zero.
# 
# The following order actions will create an order item for for the usage charges.
# 
#   * Create Subscription
#   * Terms and Conditions - Extend Term
#   * Renewal
#   * Add product
#   * Owner Transfer
public type OrderItem record {
    # The order item's effective end date, aligned with the end date of an increased quantity order metrics.
    string endDate?;
    # The ID of the order item.
    string id?;
    # Specify the order action that creates this order item.
    string orderActionId?;
    # The order item quantity. For the usage charge type, the value of this field is always zero. Also, the Owner Transfer order action always creates an order item whose Quantity field is zero.
    decimal quantity?;
    # The ID of the charge segment that gets newly generated when the order item is created.
    string scId?;
    # The order item's effective start date, aligned with the start date of an increased quantity order metrics.
    string startDate?;
};

# Container for custom fields of an Invoice Schedule object.
public type InvoiceScheduleCustomFields record {
};

public type GETPaymentPartsCollectionType record {
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Container for payment parts.
    GETPaymentPartTypewithSuccess[] parts?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type PreviewExistingSubscriptionResultInvoices record {
    # The invoice number.
    string invoiceNumber?;
    # Invoice amount.
    decimal amount?;
    # Invoice amount minus tax.
    decimal amountWithoutTax?;
    # The tax amount of the invoice.
    decimal taxAmount?;
    # Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd.
    string targetDate?;
    # The container for invoice items.
    PreviewExistingSubscriptionInvoiceItemResult[] invoiceItems?;
    # The status of the invoice.
    "Draft"|"Posted" status?;
    # Indicates whether the invoice information is from an existing invoice.
    boolean isFromExistingInvoice?;
};

public type FulfillmentCommon record {
    # The target date for the Fulfillment to be picked up by bill run for billing.
    string billTargetDate?;
    # The carrier of the Fulfillment. The available values can be configured in **Billing Settings** > **Fulfillment Settings** through Zuora UI.
    string carrier?;
    # Container for custom fields of a Fulfillment object.
    FulfillmentCustomFields customFields?;
    # The description of the Fulfillment.
    string description?;
    # The flag to exclude Fulfillment related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The flag to exclude Fulfillment from revenue accounting.
    # 
    # **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting?;
    # The external id of the Fulfillment.
    string externalId?;
    # The date of the Fulfillment.
    string fulfillmentDate?;
    # The fulfillment location of the Fulfillment. The available values can be configured in **Billing Settings** > **Fulfillment Settings** through Zuora UI.
    string fulfillmentLocation?;
    # The fulfillment system of the Fulfillment. The available values can be configured in **Billing Settings** > **Fulfillment Settings** through Zuora UI.
    string fulfillmentSystem?;
    # The type of the Fulfillment. 
    "Delivery"|"Return" fulfillmentType?;
    # The reference id of the related Order Line Item.
    string orderLineItemId?;
    # The quantity of the Fulfillment.
    decimal quantity?;
    # The state of the Fulfillment. See [State transitions for an order, order line item, and fulfillment](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
    "Executing"|"Booked"|"SentToBilling"|"Complete"|"Cancelled" state?;
    # The tracking number of the Fulfillment.
    string trackingNumber?;
};

public type NestedRefundOnExpand record {|
    # The unique identifier of the refund.
    string id?;
    # The unique identifier of the user who created the refund.
    string createdById?;
    # The date and time when the refund was created.
    string createdDate?;
    # The unique identifier of the user who last updated the refund.
    string updatedById?;
    # The date and time when the refund was last updated.
    string updatedDate?;
    # The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment or credit memo.
    string accountId?;
    # The total amount of the refund.
    decimal amount?;
    # The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the refund.
    string comment?;
    # The unique ID of the payment method snapshot which is a copy of the particular payment method used in a transaction.
    string paymentMethodSnapshotId?;
    # The accounting code that maps to this refund transaction in your accounting
    # system.
    string accountingCode?;
    # The currency of the refund.
    string currency?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the refund. This
    # message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the refund. This code
    # is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the refund in the gateway. 
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    # The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # How an external refund was issued to a customer. 
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The unique ID of the payment method that the customer used to make the refund.
    string paymentMethodId?;
    # The payout ID of the refund from the gateway side.
    string payoutId?;
    # A code identifying the reason for the transaction.
    string reasonCode?;
    # The number of the refund.
    string refundNumber?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format. For example, 2017-03-01.
    string refundDate?;
    # The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
    string refundTransactionTime?;
    # Specifies whether the refund is a refund payment or a credit balance. 
    "Payment"|"CreditBalance" sourceType?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondRefundReferenceId?;
    # The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptor?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptorPhone?;
    # The status of the refund. 
    "Processed"|"Canceled"|"Error"|"Processing" status?;
    # The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
    "Processing"|"Yes"|"No"|"Error"|"Ignore" transferredToAccounting?;
    # The type of the refund. 
    "External"|"Electronic" 'type?;
    # The number of the associated transactions, such as payments.
    string associatedTransactionNumber?;
    # The gateway that processed the original payment. A gateway is an online service provider that connects an online shopping cart to a payment processor.
    # Zuora uses this same gateway for the corresponding refund. 
    # If this payment gateway is no longer active, then the electronic refund fails. 
    string gateway?;
    # EXPANDABLE.
    # The account associated with the refund.
    record {} account?;
    # EXPANDABLE.
    # The payment method to which the refund is returned.
    record {} paymentMethod?;
    # EXPANDABLE.
    # The refund applications associated with the refund.
    record {}[] refundApplications?;
|};

# Information about feature in rate plan.
public type RatePlanFeatureOverride record {
    # A container for custom fields of the feature.
    RatePlanFeatureOverrideCustomFields customFields?;
    # A description of the feature.
    @constraint:String {maxLength: 500}
    string description?;
    # Internal identifier of the feature in the product catalog.
    string featureId?;
    # Internal identifier of the rate plan feature override.
    string id?;
};

public type DeleteDataQueryJobResponse record {
    # A cancelled data query job.
    DataQueryJobCancelled data?;
};

public type Object_import_body record {
    # The data to import.
    record {byte[] fileContent; string fileName;} File;
    # The type of data to import.
    "Usage"|"Payment"|"Quote"|"TaxationDetail"|"UpdateAccountingCode"|"CreateRevenueSchedule"|"UpdateRevenueSchedule"|"DeleteRevenueSchedule"|"ImportFXRate" ImportType;
    # A descriptive name for the import.
    string Name;
};

# Specifies when a charge becomes inactive.
public type OrderActionRatePlanEndConditions record {
    # Condition for the charge to become inactive.
    # 
    # If the value of this field is `Fixed_Period`, the charge is active for a predefined duration based on the value of the `upToPeriodsType` and `upToPeriods` fields.
    # 
    # If the value of this field is `Specific_End_Date`, use the `specificEndDate` field to specify the date when then charge becomes inactive.
    "Subscription_End"|"Fixed_Period"|"Specific_End_Date" endDateCondition?;
    # Date in YYYY-MM-DD format. Only applicable if the value of the `endDateCondition` field is `Specific_End_Date`.
    string specificEndDate?;
    # Duration of the charge in billing periods, days, weeks, months, or years, depending on the value of the `upToPeriodsType` field. Only applicable if the value of the `endDateCondition` field is `Fixed_Period`.
    int upToPeriods?;
    # Unit of time that the charge duration is measured in. Only applicable if the value of the `endDateCondition` field is `Fixed_Period`.
    "Billing_Periods"|"Days"|"Weeks"|"Months"|"Years" upToPeriodsType?;
};

# Information about the new product rate plan to add. 
public type CreateOrderChangePlanRatePlanOverride record {
    # List of charges associated with the rate plan.
    ChangePlanChargeOverride[] chargeOverrides?;
    # Specifies whether all features in the rate plan will be cleared.
    boolean clearingExistingFeatures?;
    # Container for custom fields of the Rate Plan or Subscription Offer object. The custom fields of the Rate Plan object are used when rate plans are subscribed, and the custom fields of the Subscription Offer object are used when product offers are subscribed.
    OrdersRatePlanObjectCustomFields customFields?;
    # An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.
    # 
    # **Note:** If both `externalCatalogPlanId` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.
    string externalCatalogPlanId?;
    # Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string externallyManagedPlanId?;
    # Number of a subscription rate plan for this subscription.
    @constraint:String {maxLength: 50}
    string subscriptionRatePlanNumber?;
    # Indicates whether the rate plan is created from the Zuora product catalog or from an external product catalog.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    boolean isFromExternalCatalog?;
    # Internal identifier of the product rate plan that the rate plan is based on.
    string productRatePlanId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # Name of the standalone rate plan.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    string ratePlanName?;
    # List of features associated with the rate plan.
    # The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows:
    # * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared.
    # * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.
    CreateOrderRatePlanFeatureOverride[] subscriptionProductFeatures?;
    # Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.
    # 
    # For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the rate plan. Then when you update the product, you can use the same unique identifier to specify which rate plan to modify.
    @constraint:String {maxLength: 50}
    string uniqueToken?;
};

# A instance workflow object.
public type WorkflowInstance record {
    # The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.
    string createdAt?;
    # The unique ID of the workflow.
    int id?;
    # The run number of this workflow instance
    string name?;
    # The identifier of the workflow template that is used to create this instance.
    int originalWorkflowId?;
    # Describes the current state of this workflow instance:
    #   - Queued: The workflow is in queue for being processed.
    #   - Processing: The workflow is in process.
    "Queued"|"Processing" status?;
    # The date and time the last time when the workflow is updated, in the `YYYY-MM-DD HH:MM:SS` format.
    string updatedAt?;
};

public type PreviewResult_orderMetrics record {
    PreviewResult_orderActions[] orderActions?;
    string subscriptionNumber?;
};

public type POSTTierType record {
    # End number of a range of units for the tier.
    decimal endingUnit?;
    # Price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.
    decimal price;
    # Indicates if pricing is a flat fee or is per unit.
    # 
    # Values:
    # 
    # * `FlatFee`
    # * `PerUnit`
    string priceFormat?;
    # Starting number of a range of units for the tier.
    decimal startingUnit?;
    # Unique number that identifies the tier that the price applies to.
    int tier;
};

public type Inline_response_200_7_succeeded record {
    # Component name.
    string component?;
    # Subcomponent name.
    string subComponent?;
    # Key to identify a particular migration data.
    string 'key?;
};

# Information about an order action of type `UpdateProduct`.
public type RatePlanUpdate record {
    # Array of the JSON objects containing the information for a charge update in the `updateProduct` type of order action.
    ChargeUpdate[] chargeUpdates?;
    # Specifies whether all features in the rate plan will be cleared.
    boolean clearingExistingFeatures?;
    # Container for custom fields of the Rate Plan or Subscription Offer object. The custom fields of the Rate Plan object are used when rate plans are subscribed, and the custom fields of the Subscription Offer object are used when product offers are subscribed.
    OrdersRatePlanObjectCustomFields customFields?;
    # Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.
    string externallyManagedPlanId?;
    # Internal identifier of the updated rate plan in the new subscription version.
    string newRatePlanId?;
    # Number of a product rate plan for this subscription.
    string productRatePlanNumber?;
    # Internal identifier of the rate plan that was updated. It can be the latest version or any history version id.
    string ratePlanId?;
    # 
    # The date when the Update Product order action takes effect. This field is only applicable if there is already a future-dated Update Product order action on the subscription. The format of the date is yyyy-mm-dd.
    # 
    # See [Update a Product on Subscription with Future-dated Updates](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AC_Orders_Tutorials/C_Update_a_Product_in_a_Subscription/Update_a_Product_on_Subscription_with_Future-dated_Updates) for more information about this feature.
    string specificUpdateDate?;
    # List of features associated with the rate plan.
    # The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows:
    # * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared.
    # * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.
    RatePlanFeatureOverride[] subscriptionProductFeatures?;
    # Number of a rate plan for this subscription.
    string subscriptionRatePlanNumber?;
    # A unique string to represent the rate plan in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added rate plan and use that token in future order actions.
    string uniqueToken?;
};

public type PutInvoiceItemType record {
    # The accounting code associated with the invoice item.
    string accountingCode?;
    # The accounting code for adjustment liability. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string adjustmentLiabilityAccountingCode?;
    # The accounting code for adjustment revenue. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string adjustmentRevenueAccountingCode?;
    # The amount of the invoice item. 
    # 
    # - For tax-inclusive invoice items, the amount indicates the invoice item amount including tax. 
    # - For tax-exclusive invoice items, the amount indicates the invoice item amount excluding tax.
    string amount?;
    # The date when the invoice item is charged, in `yyyy-mm-dd hh:mm:ss` format.
    string chargeDate?;
    # The name of the charge associated with the invoice item. 
    # 
    # This field is required if the `productRatePlanChargeId` field is not specified in the request.
    string chargeName?;
    # The accounting code for contract asset. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractAssetAccountingCode?;
    # The accounting code for contract liability. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractLiabilityAccountingCode?;
    # The accounting code for contract recognized revenue. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string contractRecognizedRevenueAccountingCode?;
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string deferredRevenueAccountingCode?;
    # The description of the invoice item.
    string description?;
    # Container for discount items. The maximum number of discount items is 10.
    PutDiscountItemType[] discountItems?;
    # The flag to exclude the invoice item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The unique ID of the invoice item.
    string id?;
    # The type of the invoice item.
    string itemType?;
    # The purchase order number associated the invoice item.
    string purchaseOrderNumber?;
    # The number of units for the invoice item.
    string quantity?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string recognizedRevenueAccountingCode?;
    # The revenue recognition code.
    string revRecCode?;
    # The date when revenue recognition is triggered.
    "ContractEffectiveDate"|"ServiceActivationDate"|"CustomerAcceptanceDate" revRecTriggerCondition?;
    # The name of the revenue recognition rule governing the revenue schedule.
    # 
    # **Note:** This field is only available if you have Zuora Finance enabled.
    string revenueRecognitionRuleName?;
    # The service end date of the invoice item.
    string serviceEndDate?;
    # The service start date of the invoice item.
    string serviceStartDate?;
    # The SKU of the invoice item. The SKU of the invoice item must be different from the SKU of any existing product.
    string sku?;
    # The tax code identifies which tax rules and tax rates to apply to the invoice item.
    # 
    # **Note:** 
    # - This field is only available if you have Taxation enabled.
    # - If the values of both `taxCode` and `taxMode` fields are changed to `null` when updating a standalone invoice, the corresponding `invoiceItems` > `taxItems` field and its nested fields specified in the creation request will be removed.
    string taxCode?;
    # The tax mode of the invoice item, indicating whether the amount of the invoice item includes tax.
    # 
    # **Note:** 
    # - This field is only available if you have Taxation enabled.
    # - If the values of both `taxCode` and `taxMode` fields are changed to `null` when updating a standalone invoice, the corresponding `invoiceItems` > `taxItems` field and its nested fields specified in the creation request will be removed.
    "TaxInclusive"|"TaxExclusive" taxMode?;
    # The accounting code for unbilled receivables. 
    #       
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    string unbilledReceivablesAccountingCode?;
    # The per-unit price of the invoice item.
    string unitPrice?;
    # The unit of measure.
    string uom?;
    *InvoiceItemObjectNSFields;
    *InvoiceItemObjectCustomFields;
};

public type PUTBulkProductChargeDefinitionRequest record {
    # The override value of the billingPeriod for the product charge definition.
    string billingPeriod?;
    # The override value of the billingTiming for the product charge definition.
    "IN_ADVANCE"|"IN_ARREARS" billingTiming?;
    # Determines how to calculate charges. Charge models must be individually activated in Zuora Billing administration.
    "DiscountFixedAmount"|"DiscountPercentage"|"FlatFee"|"PerUnit"|"Tiered"|"Volume"|"Delivery" chargeModel?;
    # The default quantity. 
    # 
    # This field is applicable only for one-time and recurring charges.
    decimal defaultQuantity?;
    # The list price base. 
    # 
    # This field is applicable only for recurring charges.
    # 
    # **Note**: The `Per_Year` enum value is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year" listPriceBase?;
    # Container for the new prices to override the existing prices of the product charge definition.
    POSTProductChargeDefinitionPricing[] prices?;
    # The unique number or ID of the product charge definition to be updated.
    string productChargeDefinitionKey?;
    # The override value of the specificBillingPeriod for the product charge definition.
    decimal? specificBillingPeriod?;
    # The number of months for the list price base of the charge definition. 
    # The field is `null` if the `listPriceBase` field is not set to `Per_Specific_Months`.
    int:Signed32? specificListPriceBase?;
    # Specifies the tax code for taxation rules. This field is equired when the `Taxable` field is set to `True`.
    # 
    # **Note**: This value affects the tax calculation of the charge.
    @constraint:String {maxLength: 64}
    string taxCode?;
    # Determines how to define taxation for the charge. This field is equired when the `taxable` field is set to `true`.
    # 
    # **Note**: This value affects the tax calculation of the charge.
    "TaxExclusive"|"TaxInclusive"? taxMode?;
    # Determines whether the charge definition is taxable. When this field is set to `true`, the `taxMode` and `taxCode` fields are required.
    # 
    # **Character limit**: 5
    # 
    # **Values**: `true`, `false`
    # 
    # **Note**: This value affects the tax calculation of the charge.
    boolean taxable?;
    # The number of periods of a termed subscription that is eligible for this charge definition. This field is applicable when the `termType` field is set to `TERMED`, 
    # and is to be used together with the `termPeriodType` field.
    decimal? term?;
    # Specifies the period type for the subscription term that is eligible for this charge definition.
    "Month"|"Year"|"Day"|"Week"? termPeriodType?;
    # The type of the subscription that is eligible for this charge definition.
    "TERMED"|"EVERGREEN"? termType?;
    # Describes the unit of measure (UOM) configured in **Settings > Billing**.
    # 
    # **Values**: `Each`, `License`, `Seat`, or `null`
    string? uom?;
};

public type CreatePaymentMethodBecs record {
    # The container for the account holder information. The nested `accountHolderName` field is required.
    CreatePaymentMethodBetalingsservice_accountHolderInfo accountHolderInfo?;
    # The number of the customer's bank account.
    string accountNumber?;
    # The masked account number such as ****1234.
    string accountMaskNumber?;
    # The branch code of the bank used for direct debit.
    string branchCode?;
    # The container of the mandate information for the payment method.
    CreatePaymentMethodCreditCard_mandateInfo mandateInfo?;
    # The container for payment method processing options.
    CreatePaymentMethodCreditCard_processingOptions processingOptions?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

# Container for basic information about the account.
public type GETAccountTypeBasicInfo record {
    # Account number.
    string accountNumber?;
    # The alias name given to a batch. A string of 50 characters or less.
    string batch?;
    # The ID of the communication profile that this account is linked to.
    string communicationProfileId?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.
    string creditMemoTemplateId?;
    # CRM account ID for the account, up to 100 characters.
    string crmId?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.
    string debitMemoTemplateId?;
    # Account ID.
    string id?;
    # Invoice template ID, configured in Billing Settings in the Zuora UI.
    string invoiceTemplateId?;
    # The date and time when account metrics are last updated, if the account is a partner account.
    # 
    # **Note**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account" target="_blank">Reseller Account</a> feature enabled.
    #   - If you have the Reseller Account feature enabled, and set the `partnerAccount` field to `false` for an account, the value of the `lastMetricsUpdate` field is automatically set to `null` in the response. 
    #   - If you ever set the `partnerAccount` field to `true` for an account, the value of `lastMetricsUpdate` field is the time when the account metrics are last updated.
    #        
    string lastMetricsUpdate?;
    # Account name.
    string name?;
    # Notes associated with the account, up to 65,535 characters.
    string notes?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy" target="_blank">Customer Hierarchy</a> enabled.
    string parentId?;
    # Whether the customer account is a partner, distributor, or reseller. 
    # 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account" target="_blank">Reseller Account</a> feature enabled.
    boolean partnerAccount?;
    # The number of the communication profile that this account is linked to.
    string profileNumber?;
    # The purchase order number provided by your customer for services, products, or both purchased.
    string purchaseOrderNumber?;
    # The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.
    string salesRep?;
    # The ID of the billing document sequence set that is assigned to the customer account. 
    string sequenceSetId?;
    # Account status; possible values are: `Active`, `Draft`, `Canceled`.
    string status?;
    # 
    string tags?;
    *AccountObjectNSFields;
    *AccountObjectCustomFields;
};

# Container for charge model configuration data.
# 
# **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
public type OrderActionRatePlanChargeModelDataOverride record {
    OrderActionRatePlanChargeModelDataOverride_chargeModelConfiguration chargeModelConfiguration?;
    # List of cumulative pricing tiers in the charge.
    # 
    # **Note**: When you override tiers of the charge with a High Water Mark Pricing charge model, you have to provide all of the tiers, including the ones you do not want to change. The new tiers will completely override the previous ones. The High Water Mark Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    OrderActionRatePlanChargeTier[] tiers?;
};

public type GetPaymentVolumeSummaryResponse record {
    # List of electronic payments summary.
    PaymentVolumeSummaryRecord[] data?;
};

public type ProxyCreateProduct record {
    # Controls whether to allow your users to add or remove features while creating or amending a subscription.
    # 
    # **Values**: true, false (default)
    boolean AllowFeatureChanges?;
    # Category of the product. Used by Zuora Quotes Guided Product Selector.
    # 
    # **Values**: 
    #   - Base Products
    #   - Add On Services
    #   - Miscellaneous Products
    @constraint:String {maxLength: 100}
    string Category?;
    # A description of the product. 
    @constraint:String {maxLength: 500}
    string Description?;
    # The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format.
    string EffectiveEndDate;
    # The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format.
    string EffectiveStartDate;
    # The name of the product. This information is displayed in the product catalog pages in the web-based UI.
    @constraint:String {maxLength: 100}
    string Name;
    # The natural key of the product.
    # 
    # **Values**: 
    #   - leave null for automatically generated string
    #   - an alphanumeric string of 100 characters or fewer
    # 
    # **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.
    @constraint:String {maxLength: 100}
    string ProductNumber?;
    # The unique SKU for the product.
    # 
    # **Values**: 
    #   - leave null for automatically generated string
    #   - an alphanumeric string of 50 characters or fewer
    @constraint:String {maxLength: 50}
    string SKU?;
    *ProductObjectNSFields;
    *ProductObjectCustomFields;
};

public type ListEInvoicingBusinessRegionsResponse record {
    # Container for e-invoicing business regions.
    GetEInvoicingBusinessRegionResponse[] regions?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type GETDMTaxItemTypeNew record {
    # The balance of the taxation item.
    decimal balance?;
    # The amount of credit memos applied to the debit memo. 
    decimal creditAmount?;
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # Container for the finance information related to the taxation item.
    GETDMTaxItemTypeNew_financeInformation financeInformation?;
    # The ID of the taxation item.
    string id?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The name of the taxation item.
    string name?;
    # The amount of payments applied to the debit memo. 
    decimal paymentAmount?;
    # The ID of the source taxation item.
    string sourceTaxItemId?;
    # The amount of taxation.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific debit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the debit memo, in `yyyy-mm-dd` format.
    string taxDate?;
    # The tax rate applied to the debit memo.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate.
    "Percentage"|"FlatFee" taxRateType?;
    *DebitTaxationItemObjectCustomFields;
};

# 
public type QueryDebitMemoItemsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedDebitMemoItem[] data?;
|};

public type PUTOrderTriggerDatesResponseType record {
    *CommonResponse;
    # The account number for the order.
    string accountNumber?;
    # The order number of the order updated.
    string orderNumber?;
    # Status of the order.
    "Completed"|"Pending" status?;
    # The subscriptions updated.
    PUTOrderTriggerDatesResponseType_subscriptions[] subscriptions?;
};

public type PUTUpdateOpenPaymentMethodTypeResponse record {
    # The API name of the custom payment method type.
    string paymentMethodType?;
    # The date when the custom payment method type was published. It is emptry if the custom payment method type has not been published yet.
    string publishDate?;
    # The revision number of the custom payment method type, which starts from 1 and increases by 1 when you update a published revision for the first time.
    int revision?;
    # The status of the custom payment method type.
    string status?;
};

# The custom field definition in the custom object
public type CustomObjectCustomFieldDefinitionUpdate record {
    # Applicable if the `type` of the action is  `updateField`
    string default?;
    # Applicable if the `type` of the action is  `updateField`
    string description?;
    # Indicates whether to use this field as the display name of the custom object when being linked to another custom object.
    # 
    # This field applies only to the Text custom field type:
    # 
    # - The `type` field is `string`.
    # - The `enum` field is not specified.
    boolean displayName?;
    # The data format of the custom field
    string format?;
    # The UI label of the custom field
    string label?;
    # The maximum length of string that can be stored in the custom field.
    # 
    # This field applies only to the following custom field types:
    # 
    # - Text:
    #   - The `type` field is `string`.
    #   - The `format` field is not specified or is `url`.
    #   - The `enum` field is not specified.
    # - Picklist:
    #   - The `type` field is `string`.
    #   - The `enum` field is specified.
    #   - The `multiselect` field is not specified or is `false`.
    # - Multiselect:
    #   - The `type` field is `string`.
    #   - The `enum` field is specified.
    #   - The `multiselect` field is `true`.
    # 
    # If the custom field is filterable, the value of `maxLength` must be 512 or less.
    int maxLength?;
    # Indicates whether this is a multiselect custom field.
    # 
    # This field applies only to the creation of Picklist or Multiselect custom fields:
    # 
    # - The action `type` field is `addField`.
    # - The definition `type` field is `string`.
    # - The `maxLength` field is specified.
    # - The `enum` field is specified.
    boolean multiselect?;
    # Specifies that this is a custom field
    "custom" origin?;
    # The data type of the custom field
    string 'type?;
};

public type ProxyModifyProduct record {
    # Controls whether to allow your users to add or remove features while creating or amending a subscription.
    # 
    # **Values**: true, false (default)
    boolean AllowFeatureChanges?;
    # Category of the product. Used by Zuora Quotes Guided Product Selector.
    # 
    # **Values**:
    #   - Base Products
    #   - Add On Services
    #   - Miscellaneous Products
    @constraint:String {maxLength: 100}
    string Category?;
    # A description of the product. 
    @constraint:String {maxLength: 500}
    string Description?;
    # The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format.
    string EffectiveEndDate?;
    # The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format.
    string EffectiveStartDate?;
    # The name of the product. This information is displayed in the product catalog pages in the web-based UI.
    @constraint:String {maxLength: 100}
    string Name?;
    # The natural key of the product. 
    # 
    # For existing Product objects that are created before this field is introduced, this field will be null. Use this field to specify a value for only these objects. Zuora also provides a tool to help you automatically backfill this field with tenant ID for your existing product catalog. If you want to use this backfill tool, contact [Zuora Global Support](https://support.zuora.com/).
    # 
    # **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.
    @constraint:String {maxLength: 100}
    string ProductNumber?;
    # The unique SKU for the product.
    @constraint:String {maxLength: 50}
    string SKU?;
    *ProductObjectNSFields;
    *ProductObjectCustomFields;
};

# The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
# 
# Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
public type PaymentMethodCommonFields_gatewayOptions record {
    # The name of a gateway-specific parameter.
    string 'key?;
    # The value of the gateway-specific parameter.
    string value?;
};

# Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
public type RecurringVolumePricingOverride record {
    *PriceChangeParams;
    # Specifies the duration of each recurring period.
    "Per_Billing_Period"|"Per_Month"|"Per_Week"|"Per_Year"|"Per_Specific_Months" listPriceBase?;
    # List of tier prices with intervals. 
    # The `priceIntervals` field is not supported for a charge subscribed via a RatePlan, you can only override the `priceIntervals` field for a charge subscribed via an offer.
    # 
    # **Note**: You must enable the Offers feature to access this field. The Offers feature is in the Early Adopter phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at <a href="https://support.zuora.com/hc/en-us" target="_blank">Zuora Global Support</a>.
    PriceIntervalWithTiers[] priceIntervals?;
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
    # The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.
    # 
    # **Note**: 
    #   - This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price" target="_blank">Annual List Price</a> feature enabled.
    #   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.              
    @constraint:Int {minValue: 1, maxValue: 200}
    int:Signed32 specificListPriceBase?;
    # List of variable pricing tiers in the charge.
    ChargeTier[] tiers?;
    # Unit of measure of the standalone charge.
    # 
    # **Note:** This field is available when the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders" target="_blank">Standalone Orders</a> feature is enabled.
    decimal uom?;
};

public type ChargePreviewMetrics_tcb record {
    # Total contract billing amount of all discount charges which are applied to one specific recurring charge. This value is calculated from the rating results for the latest subscription version in the order.
    decimal discount?;
    # Delta discount TCB value between the base and the latest subscription version for specific recurring charge in the order.
    decimal discountDelta?;
    decimal regular?;
    # Delta TCB value between the base and the latest subscription version in the order.
    decimal regularDelta?;
};

# A workflow.
public type WorkflowDefinition record {
    # Information of the active version. 
    WorkflowDefinitionAndVersions_active_version active_version?;
    # Indicates whether the callout trigger is enabled for the retrieved workflow.
    boolean calloutTrigger?;
    # The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.
    string createdAt?;
    # The description of the workflow definition.
    string description?;
    # The unique ID of the workflow definition.
    int id?;
    # The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled.
    string interval?;
    # The name of the workflow definition.
    string name?;
    # Indicates whether the ondemand trigger is enabled for the workflow.
    boolean ondemandTrigger?;
    # Indicates whether the scheduled trigger is enabled for the workflow.
    boolean scheduledTrigger?;
    # The status of the workflow definition.
    string status?;
    # The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled.
    string timezone?;
    # The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.
    string updatedAt?;
};

public type OrderActionRatePlanUsagePerUnitPricingUpdate record {
    *OrderActionRatePlanPriceChangeParams;
    decimal listPrice?;
};

public type RegenerateRevRecEventsResponse record {
    ResponseReasons[] reasons?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type TriggerDate record {
    # Name of the trigger date of the order action.
    "ContractEffective"|"ServiceActivation"|"CustomerAcceptance" name?;
    # Trigger date in YYYY-MM-DD format.
    string triggerDate?;
};

public type DebitMemoTaxItemFromInvoiceTaxItemType record {
    # The amount of the debit memo taxation item.
    decimal amount?;
    # Container for the finance information related to the source taxation item.
    DebitMemoTaxItemFromInvoiceTaxItemType_financeInformation financeInformation?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The ID of the source taxation item.
    string sourceTaxItemId?;
    # The tax code identifies which tax rules and tax rates to apply to a specific debit memo.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the debit memo, in `yyyy-mm-dd` format.
    string taxDate?;
    # The calculated tax amount excluded due to the exemption.
    decimal taxExemptAmount?;
    # The name of taxation.
    string taxName?;
    # The tax rate applied to the debit memo.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate applied to the debit memo.
    "Percentage"|"FlatFee" taxRateType?;
};

public type GETRefundType record {
    # The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment or credit memo.
    string accountId?;
    # The total amount of the refund.
    decimal amount?;
    # The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the refund.
    string comment?;
    # The ID of the Zuora user who created the refund.
    string createdById?;
    # The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, `2017-03-01 15:31:10`.
    string createdDate?;
    # The ID of the credit memo that is refunded.
    string creditMemoId?;
    # Container for the finance information related to the refund.
    GETRefundCreditMemoType_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the refund.
    string gatewayId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the refund. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the refund. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the refund in the gateway.
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    # The ID of the refund.
    string id?;
    # The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format. 
    string markedForSubmissionOn?;
    # How an external refund was issued to a customer. 
    "ACH"|"Cash"|"Check"|"CreditCard"|"PayPal"|"WireTransfer"|"DebitCard"|"CreditCardReferenceTransaction"|"BankTransfer"|"Other" methodType?;
    # The unique identification number of the refund.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The ID of the payment that is refunded.
    string paymentId?;
    # The unique ID of the payment method that the customer used to make the refund.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.
    string paymentMethodSnapshotId?;
    # The payout ID of the refund from the gateway side.
    string payoutId?;
    # A code identifying the reason for the transaction.
    string reasonCode?;
    # The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
    string referenceId?;
    # The date when the refund takes effect, in `yyyy-mm-dd` format. For example, `2017-03-01`.
    string refundDate?;
    # The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
    string refundTransactionTime?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondRefundReferenceId?;
    # The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptor?;
    # A payment gateway-specific field that maps Zuora to other gateways.
    string softDescriptorPhone?;
    # The status of the refund. 
    "Processed"|"Canceled"|"Error"|"Processing" status?;
    # The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The type of the refund. 
    "External"|"Electronic" 'type?;
    # The ID of the Zuora user who last updated the refund.
    string updatedById?;
    # The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *RefundObjectNSFields;
    *RefundObjectCustomFields;
};

# The preview through date.
public type PreviewThroughDate record {
    # The options on how the preview through date is calculated. 
    # - If you set this field to `nextBillingPeriods`, you must specify the number of billing periods to preview in the `nextBillingPeriods` field.
    # - If you set this field to `endOfTerm`, the preview through date is the end date of the subscription term.
    # - If you set this field to `specificDate`, you must specify a specific date in the `specificDate` field. The date must be in the format `yyyy-mm-dd`.
    PreviewThruDatePolicy previewThruDatePolicy?;
    # The number of billing periods to preview. Required if `previewThruDatePolicy` is `nextBillingPeriods`.
    decimal nextBillingPeriods?;
    # The specific date for the preview start date. Required if `previewThruDatePolicy` is `specificDate`.
    string specificDate?;
};

public type POSTPaymentScheduleRequest record {
    # ID of the customer account the payment schedule belongs to.
    # 
    # **Note:**
    # `accountId` and `accountNumber` cannot both be `null`. When both fields are specified, the two values must match each other.          
    string accountId?;
    # Account number of the customer account the payment schedule belongs to.
    # 
    # **Note:**
    # `accountId` and `accountNumber` cannot both be `null`. When both fields are specified, the two values must match each other.          
    string accountNumber?;
    # The amount of each payment schedule item in the payment schedule.
    # 
    # **Note:**
    # - This field is required when `items` is not specified.
    # - This field will be ignored when `items` is specified.
    # - When creating recurring payment schedules, there are 2 options to specify amounts:  
    #   - Specify `totalAmount` and `occurrences`, `amount` will be calculated.
    #   - Specify `amount` and `occurrences`, `totalAmount` will be calculated.
    #   You must specify either `totalAmount` or `amount`. Specifying both fields at the same time is not allowed.
    decimal amount?;
    # Object of the billing document with which the payment schedule is associated.
    # 
    # **Note:**
    # - This field is optional. If you have the Standalone Payment feature enabled, you can leave this field blank and set `standalone` to `true` to create standalone payments. You can also choose to create unapplied payments by leaving this object blank and setting `standalone` to `false`.
    # - If Standalone Payment is not enabled, leaving this object unspecified will create unapplied payments.
    POSTPaymentScheduleRequest_billingDocument billingDocument?;
    # Currency of the payment schedule.
    # 
    # **Note:**
    # - This field is optional. The default value is the account's default currency.
    # - This field will be ignored when `items` is specified.
    string currency?;
    # Description of the payment schedule. Max length is 255.
    string description?;
    # Container array for payment schedule items.
    record {
        # The amount that needs to be collected by this payment schedule item.
        decimal amount?;
        # Object for the billing document with which the payment schedule item is associated. 
        # **Note:** You must specify the same billing document for all the payment schedule items in one payment schedule.
        record {
            # The ID of the billing document.
            # 
            # **Note:**
            # If a billing document is specified, one of `id` or `number` must be specified. You cannot specify both of them or or skip both.
            string id?;
            # The number of the billing document.
            # 
            # **Note:**
            # If a billing document is specified, one of `id` or `number` must be specified. You cannot specify both of them or skip both.
            string number?;
            # The type of the billing document. The default value is `Invoice`.
            "Invoice"|"DebitMemo" 'type;
        } billingDocument?;
        # The currency of the payment.
        # 
        # **Note**:
        # - This field is optional. If not specified, the default value is the currency set for the account.
        string currency?;
        # Description of the payment schedule item.
        string description?;
        # The ID of the payment gateway.
        # 
        # **Note**:
        # - This field is optional. If not specified, the default value is the payment gateway id set for the account.
        string paymentGatewayId?;
        # The ID of the payment method.
        # 
        # **Note**:
        # - This field is optional. If not specified, the default value is the payment method id set for the account.
        string paymentMethodId?;
        # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
        # 
        # Here is an example:
        # ```
        # "paymentOption": [
        #   {
        #     "type": "GatewayOptions",
        #     "detail": {
        #       "SecCode":"WEB"
        #     }
        #   }
        # ]
        # ```
        # 
        # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
        # 
        # To enable this field, submit a request at [Zuora Global Support](https://support.zuora.com/). This field is only available if `zuora-version` is set to `337.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
        PaymentSchedulePaymentOptionFields[] paymentOption?;
        # At which hour in the day in the tenant’s timezone this payment will be collected. Available values:`[0,1,2,~,22,23]`. If the time difference between your tenant’s timezone and the timezone where Zuora servers are is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half hour later than your scheduled time.
        # The default value is `0`.
        # If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs.
        string runHour?;
        # The date to collect the payment.
        string scheduledDate?;
        *PaymentScheduleItemCustomFields;
    }[] items?;
    # The number of payment schedule item to be created. Maximum value is 1000.
    # 
    # **Note:**
    # - This field is required when `items` is not specified.
    # - This field will be ignored when `items` is specified. 
    int occurrences?;
    # ID of the payment gateway.
    # 
    # **Note:**
    # - This field is optional. The default value is the account's default payment gateway ID. If no payment gateway ID is found on the cusotmer account level, the default value will be the tenant's default payment gateway ID.
    # - This field will be ignored when `items` is specified.
    string paymentGatewayId?;
    # ID of the payment method.
    # 
    # **Note:**
    # - This field is optional. The default value is the account's default payment method ID.
    # - This field will be ignored when `items` is specified.  
    string paymentMethodId?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # 
    # Here is an example:
    # ```
    # "paymentOption": [
    #   {
    #     "type": "GatewayOptions",
    #     "detail": {
    #       "SecCode":"WEB"
    #     }
    #   }
    # ]
    # ```
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # You can use this field to specify the number of the payment schedule.
    # Only characters from the following sets are allowed: A-Z, a-z, 0-9, and `-`. 
    # Payment numbers must start with a letter. In addition,`-` can only be used at most once and cannot be placed at the beginning or the end of the payment numbers.         
    string paymentScheduleNumber?;
    # The frequency for the payment collection since the `startDate`.
    # 
    # **Note:**
    # - Thie field is required when `items` is not specified.
    # - This field will be ignored when `items` is specified.
    # - If `startDate` is `30` or `31` and `period` is `Monthly`, when in February, payment schedule will use the last day of February for payment collection. 
    "Monthly"|"Weekly"|"BiWeekly" period?;
    # Indicates whether the payments created by the payment schedule will be used as reserved payments. This field will only be available if the prepaid cash drawdown permission is enabled. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.
    boolean prepayment?;
    # Specifies at which hour in the day in the tenant’s time zone when this payment will be collected. Available values: `[0,1,2,~,22,23]`.
    # 
    # **Note:**
    # - If the time difference between your tenant’s timezone and the timezone where Zuora servers are is not in full hours, for example, 2.5 hours, the payment schedule items will be triggered half hour later than your scheduled time.
    # - If the payment `runHour` and `scheduledDate` are backdated, the system will collect the payment when the next runHour occurs.
    # - This field is optional. The default value is `0`.
    # - This field will be ignored when `items` is specified.             
    int runHour?;
    # Indicate whether the payments created by the payment schedule are standalone payments or not. When setting to `true`, standalone payments will be created. When setting to `false`, you can either specify a billing document, or not specifying any billing documents. In the later case, unapplied payments will be created. If set to `null`, standalone payment will be created.
    # 
    # **Note**: 
    # - This field is only available if the Standalone Payment is enabled. Do not include this field if Standalone Payment is not enabled.
    # - If Standalone Payment is enabled, default value is `true`.
    boolean standalone?;
    # The date for the first payment collection.
    # 
    # **Note:**
    # - This field is required when `items` is not specified.
    # - This field will be ignored when `items` is specified.              
    string startDate?;
    # The total amount of that the payment schedule will collect. This field is only available for recurring payment schedules. 
    # 
    # **Note**:
    # - When creating recurring payment schedules, there are 2 options to specify amounts:
    #   
    #   - Specify `totalAmount` and `occurrences`, `amount` will be calculated.
    #   - Specify `amount` and `occurrences`, `totalAmount` will be calculated.
    #   
    #   You must specify either `totalAmount` or `amount`. Specifying both fields at the same time is not allowed.
    # - If the Standalone Payments feature is enabled and `standalone` is set to `true` for the payment schedule, `totalAmount` will be ignored.
    decimal totalAmount?;
    *PaymentScheduleCustomFields;
};

# Container for custom fields of a Rate Plan Charge object.
public type OrderActionRatePlanRatePlanChargeObjectCustomFields record {
};

public type ProxyGetProductRatePlanChargeTier record {
    # The ID of the Zuora user who created the ProductRatePlanChargeTier object.
    @constraint:String {maxLength: 32}
    string CreatedById?;
    # The date when the ProductRatePlanChargeTier object was created.
    @constraint:String {maxLength: 29}
    string CreatedDate?;
    # The valid code corresponding to the currency for the tier's price.
    @constraint:String {maxLength: 3}
    string Currency?;
    # The end number of a range of units for the tier.
    # 
    # **Character limit**: 16
    # 
    # **Values**: any positive decimal value
    decimal EndingUnit?;
    # Object identifier.
    string Id?;
    # The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.
    # 
    # **Character limit**: 16
    # 
    # **Values**: a valid currency value
    decimal Price?;
    # Indicates if pricing is a flat fee or is per unit. This field is for tiered and volume pricing models only.
    # 
    # **Values**: `FlatFee`, `PerUnit`
    # 
    # **Note:** The values `Flat Fee` and `Per Unit` (with spaces) is valid for create or update calls.
    @constraint:String {maxLength: 8}
    string PriceFormat?;
    # The starting number of a range of units for the tier.
    # 
    # **Character limit**: 16
    # 
    # **Values**: any positive decimal value
    decimal StartingUnit?;
    # A unique number that identifies the tier that the price applies to.
    # 
    # **Character limit**: 20
    # 
    # **Values**: automatically generated
    int:Signed32 Tier?;
    # The ID of the user who last updated the product rate plan charge tier.
    @constraint:String {maxLength: 32}
    string UpdatedById?;
    # The date when the product rate plan charge tier was last updated.
    @constraint:String {maxLength: 29}
    string UpdatedDate?;
};

# To create tokenized ACH payment methods on Stripe v2, pass in the existing token information through the fields in this container.
# 
# For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration#ACH" target="_blank">Overview of Stripe payment gateway integration</a>.
public type CreatePaymentMethodACH_tokens record {
    # The type of the payment gateway to generate the tokens. This field is case-sensitive.
    "Stripe" gatewayType;
    # Pass in the second token of the payment method. For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration#ACH" target="_blank">Overview of Stripe payment gateway integration</a>.
    string secondTokenId?;
    # Pass in the third token of the payment method.
    string thirdTokenId?;
    # Pass in the first token of the payment method. For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration#ACH" target="_blank">Overview of Stripe payment gateway integration</a>.
    string tokenId;
};

public type GETCreditMemoItemType record {
    # The amount of the credit memo item. For tax-inclusive credit memo items, the amount indicates the credit memo item amount including tax. For tax-exclusive credit memo items, the amount indicates the credit memo item amount excluding tax.
    decimal amount?;
    # The credit memo item amount excluding tax.
    decimal amountWithoutTax?;
    # The applied amount of the credit memo item.
    decimal appliedAmount?;
    # The unique ID of the credit memo item that the discount charge is applied to.
    string appliedToItemId?;
    # Comments about the credit memo item.
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string comment?;
    # The ID of the Zuora user who created the credit memo item.
    string createdById?;
    # The date and time when the credit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the credit from item.
    string creditFromItemId?;
    # The type of the credit from item.
    "InvoiceItem"|"CreditMemoItem" creditFromItemSource?;
    # Container for the taxation items of the credit memo item. 
    # 
    # **Note**: This field is not available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    GETCMTaxItemType[] creditTaxItems?;
    # The description of the credit memo item.
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    string description?;
    # The flag to exclude the credit memo item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # Container for the finance information related to the credit memo item.
    GETCreditMemoItemType_financeInformation financeInformation?;
    # The ID of the credit memo item.
    string id?;
    # The ID of the invoice schedule associated with the credit memo item. 
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleId?;
    # The ID of the invoice schedule item associated with the credit memo item. The credit memo item is generated during the processing of the invoice schedule item.
    # 
    # **Note**: This field is available only if you have the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Billing_Schedule" target="_blank">Billing Schedule</a> feature enabled.
    string invoiceScheduleItemId?;
    # The number of deliveries dedicated to the Delivery Pricing charges. The value might be different, as follows:
    # - For the credit memo generated by a bill run, this field has a value. 
    # - For the credit memo generated from an invoice, this field is blank.
    # **Note**: This field is available only if you have the Delivery Pricing feature enabled. 
    decimal numberOfDeliveries?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The kind of the charge for the credit memo item. Its possible values are `Charge` and `Discount`. 
    string processingType?;
    # The number of units for the credit memo item.
    decimal quantity?;
    # The amount of the refund on the credit memo item.
    decimal refundAmount?;
    # The service end date of the credit memo item.
    string serviceEndDate?;
    # The service start date of the credit memo item. If the associated charge is a one-time fee, this date is the date of that charge.
    string serviceStartDate?;
    # The SKU for the product associated with the credit memo item.
    string sku?;
    # The name of the SKU.
    string skuName?;
    # The ID of the sold-to contact associated with the credit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string soldToContactId?;
    # The ID of the sold-to contact snapshot associated with the credit memo item.
    # 
    # **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.
    string soldToContactSnapshotId?;
    # The ID of the source item.
    # 
    # - If the value of the `sourceItemType` field is `SubscriptionComponent` , the value of this field is the ID of the corresponding rate plan charge.
    # - If the value of the `sourceItemType` field is `InvoiceDetail`, the value of this field is the ID of the corresponding invoice item.
    # - If the value of the `sourceItemType` field is `ProductRatePlanCharge` , the value of this field is the ID of the corresponding product rate plan charge.
    # - If the value of the `sourceItemType` field is `OrderLineItem` , the value of this field is the ID of the corresponding return order line item.
    string sourceItemId?;
    # The type of the source item.
    # 
    # - If a credit memo is not created from an invoice or a product rate plan charge or a return order line item,, the value of this field is `SubscriptionComponent`.
    # - If a credit memo is created from an invoice, the value of this field is `InvoiceDetail`.
    # - If a credit memo is created from a product rate plan charge, the value of this field is `ProductRatePlanCharge`.
    # - If a credit memo is created from a return order line item, the value of this field is `OrderLineItem`.
    "SubscriptionComponent"|"InvoiceDetail"|"ProductRatePlanCharge"|"OrderLineItem" sourceItemType?;
    # The ID of the subscription associated with the credit memo item.
    string subscriptionId?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
    "TaxExclusive"|"TaxInclusive" taxMode?;
    # Container for the taxation items of the credit memo item. 
    # 
    # **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version).
    GETCreditMemoItemTypewithSuccess_taxationItems taxationItems?;
    # The unapplied amount of the credit memo item.
    decimal unappliedAmount?;
    # The units to measure usage.
    string unitOfMeasure?;
    # The per-unit price of the credit memo item.
    decimal unitPrice?;
    # The ID of the Zuora user who last updated the credit memo item.
    string updatedById?;
    # The date and time when the credit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *CreditMemoItemObjectCustomFields;
};

public type PUTWriteOffInvoiceRequest record {
    # Comments about the write-off. The comment is used as the comment of the credit memo generated by writing off the specified invoice.
    @constraint:String {maxLength: 255}
    string comment?;
    # Container for items. This field is optional. 
    # **Note:** If specified, you must specify ALL the items of the invoice. The entire balance of the invoice will be written off, you cannot just write off some items of the invoice.
    CreditMemoItemFromWriteOffInvoice[] items?;
    # The date when the credit memo was created, in `yyyy-mm-dd` format. The memo date must be later than or equal to the invoice date.
    # 
    # The default value is the date when you write off the invoice.
    string memoDate?;
    # A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code `Write-off`.
    string reasonCode?;
    *CreditMemoObjectCustomFields;
    *CreditMemoObjectNSFields;
};

public type CreatePaymentType record {
    # The ID of the customer account that the payment is created for.
    string accountId?;
    # The number of the customer account that the payment is created for, such as `A00000001`.
    # 
    # You can specify either `accountNumber` or `accountId` for a customer account. If both of them are specified, they must refer to the same customer account.
    string accountNumber?;
    # The total amount of the payment.
    decimal amount;
    # The authorization transaction ID from the payment gateway. Use this field for electronic payments, such as credit cards.
    # 
    # When you create a payment for capturing the authorized funds, it is highly recommended to pass in the gatewayOrderId that you used when authorizing the funds by using the [Create authorization](https://www.zuora.com/developer/api-references/api/operation/POST_CreateAuthorization) operation, together with the `authTransactionId` field.
    # 
    # The following payment gateways support this field:
    #   - Adyen Integration v2.0
    #   - CyberSource 1.28
    #   - CyberSource 1.97
    #   - CyberSource 2.0
    #   - Chase Paymentech Orbital
    #   - Ingenico ePayments
    #   - SlimPay
    #   - Stripe v2
    #   - Verifi Global Payment Gateway
    #   - WePay Payment Gateway Integration
    @constraint:String {maxLength: 50}
    string authTransactionId?;
    # Additional information related to the payment.
    @constraint:String {maxLength: 255}
    string comment?;
    # When Standalone Payment is not enabled, the `currency` of the payment must be the same as the payment currency defined in the customer account settings through Zuora UI. But if you have the [Multiple Currencies](https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Flexible_Billing/Multiple_Currencies) feature enabled, you can have a different payment currency.
    # 
    # When Standalone Payment is enabled and `standalone` is `true`, the `currency` of the standalone payment can be different from the payment currency defined in the customer account settings. The amount will not be summed up to the account balance or key metrics regardless of currency.
    string currency;
    # It contains Home currency and Reporting currency custom rates currencies. The maximum number of items is 2 (you can pass the Home currency item or Reporting currency item or both).
    # 
    # **Note**: The API custom rate feature is permission controlled.
    @constraint:Array {maxLength: 2}
    PaymentWithCustomRatesType[] customRates?;
    # Container for debit memos. The maximum number of debit memos is 1,000.
    PaymentDebitMemoApplicationCreateRequestType[] debitMemos?;
    # The date when the payment takes effect, in `yyyy-mm-dd` format.
    # 
    # **Note:**
    #   - This field is required for only electronic payments. It's an optional field for external payments.
    #   - When specified, this field must be set to the date of today.
    #   - When applying or transferring payments, this field must be later than or equal to the maximum effective date of the payment.
    string effectiveDate?;
    # Container for the finance information related to the payment.
    CreatePaymentType_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the payment. The ID must be a valid gateway instance ID and this gateway must support the specific payment method.
    # 
    # - If <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Payment_Gateway_Routing" target="_blank">Payment Gateway Routing</a> is enabled, when creating electronic payments, this field is optional. 
    #     - If this field is not specified, gateway routing rules will be invoked.
    #     - If this field is specified, the specified gateway will be used to process the payment.
    # 
    # - If Payment Gateway Routing is disabled, when creating electronic payments, this field is required.
    # 
    # - When creating external payments, this field is optional.
    # 
    # Use the same gateway instance if both `paymentGatewayNumber` and
    # `gatewayId` are sent in the request.
    string gatewayId?;
    # The field used to pass gateway-specific parameters and parameter values. The fields supported by gateways vary. For more information, see the Overview topic of each gateway integration in [Zuora Knowledge Center](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways).
    # 
    # Zuora sends all the information that you specified to the gateway. If you specify any unsupported gateway option parameters, they will be ignored without error prompts.
    CreatePaymentType_gatewayOptions gatewayOptions?;
    # A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
    # 
    # Gateways check duplicates on the gateway order ID to ensure that the merchant do not accidentally enter the same transaction twice. This ID can also be used to do reconciliation and tie the payment to a natural key in external systems. The source of this ID varies by merchant. Some merchants use their shopping cart order IDs, and others use something different. Merchants use this ID to track transactions in their eCommerce systems.
    # 
    # When you create a payment for capturing the authorized funds, it is highly recommended to pass in the gatewayOrderId that you used when authorizing the funds by using the [Create authorization](https://www.zuora.com/developer/api-references/api/operation/POST_CreateAuthorization) operation, together with the `authTransactionId` field.
    @constraint:String {maxLength: 50}
    string gatewayOrderId?;
    # Container for invoices. The maximum number of invoices is 1,000.
    PaymentInvoiceApplicationCreateRequestType[] invoices?;
    # Payment transaction source used to differentiate the transaction source in Stored Credential Transaction framework.
    #   - `C_Unscheduled`: Cardholder-initiated transaction (CIT) that does not occur on scheduled or regularly occurring dates.
    #   - `M_Recurring`: Merchant-initiated transaction (MIT) that occurs at regular intervals.
    #   - `M_Unscheduled`: Merchant-initiated transaction (MIT) that does not occur on scheduled or regularly occurring dates.
    #   - `M_MOTO`: Mail Order Telephone Order (MOTO) payment transaction. This option is only available for credit card payments on Stripe v2. See [Overview of Stripe payment gateway integration](https://knowledgecenter.zuora.com/Zuora_Collect/Payment_gateway_integrations/Supported_payment_gateways/Stripe_Payment_Gateway/A_Overview_of_Stripe_payment_gateway_integration) for more information.
    "C_Unscheduled"|"M_Recurring"|"M_Unscheduled"|"M_MOTO" mitTransactionSource?;
    # The natural key for the payment gateway. 
    # 
    # Use the same gateway instance if both `paymentGatewayNumber` and `gatewayId` are sent in the request.
    string paymentGatewayNumber?;
    # The unique ID of the payment method that the customer used to make the payment. 
    # 
    # If no payment method ID is specified in the request body, the default payment method for the customer account is used automatically. If the default payment method is different from the type of payments that you want to create, an error occurs.
    string paymentMethodId?;
    # The type of the payment method that the customer used to make the payment. 
    # 
    # Specify this value when you are creating an external payment method. If both `paymentMethodType` and `paymentMethodId` are specified, only the `paymentMethodId` value is used to create the payment.
    string paymentMethodType?;
    # Container for the paymentOption items, which describe the transactional level rules for processing payments. Currently, only the Gateway Options type is supported.
    # 
    # Here is an example:
    # ```
    # "paymentOption": [
    #   {
    #     "type": "GatewayOptions",
    #     "detail": {
    #       "SecCode":"WEB"
    #     }
    #   }
    # ]
    # ```
    # 
    # `paymentOption` of the payment schedule takes precedence over `paymentOption` of the payment schedule item.
    # 
    # You can use this field or the `gatewayOptions` field to pass the Gateway Options fields supported by a payment gateway. However, the Gateway Options fields passed through the `paymentOption` field will be stored in the Payment Option object and can be easily retrieved.
    PaymentSchedulePaymentOptionFields[] paymentOption?;
    # The unique ID or the number of the payment schedule to be linked with the payment. See [Link payments to payment schedules](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Payment_Schedules/Link_payments_with_payment_schedules) for more information.
    string paymentScheduleKey?;
    # Indicates whether the payment will be used as a reserved payment. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.
    boolean prepayment?;
    # The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
    @constraint:String {maxLength: 100}
    string referenceId?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    @constraint:String {maxLength: 35}
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    @constraint:String {maxLength: 20}
    string softDescriptorPhone?;
    # This field is only available if support for standalone payments is enabled.
    # 
    # Specify `true` to create a standalone payment that will be processed in Zuora through Zuora gateway integration but will be settled outside of Zuora.
    # 
    # When `standalone` is set to `true`:
    #   - `accountId`, `amount`, `currency`, and `type` are required. 
    #   - `type` must be `Electronic`.
    #   - `currency` of the payment can be different from the payment currency in the customer account settings.
    #   - The amount will not be summed up into the account balance and key metrics regardless of the payment currency.
    #   - No settlement data will be created.
    #   - Either the applied amount or the unapplied amount of the payment is zero.
    #   - The standalone payment cannot be applied, unapplied, or transferred.
    # 
    # Specify `false` to create an ordinary payment that will be created, processed, and settled in Zuora. The `currency` of an ordinary payment must be the same as the currency in the customer account settings.
    boolean standalone = false;
    # The type of the payment.
    # 
    # **Note**:  If you specify the type as `Electronic`, you must specify the value for `accountId` or `accountNumber`.
    "External"|"Electronic" 'type;
    *PaymentObjectNSFields;
    *PaymentObjectCustomFields;
};

public type GETPaymentItemPartType record {
    # The amount of the payment part item.
    decimal amount?;
    # The ID of the Zuora user who created the payment part item.
    string createdById?;
    # The date and time when the payment part item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The ID of the debit memo item associated with the payment part item.
    string debitMemoItemId?;
    # The ID of the payment part item.
    string id?;
    # The ID of the invoice item associated with the payment part item.
    string invoiceItemId?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The ID of the taxation item associated with the payment part item.
    string taxItemId?;
    # The ID of the Zuora user who last updated the payment part item.
    string updatedById?;
    # The date and time when the payment part item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
};

# Pricing information about a one-time charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
public type OrderActionRatePlanOneTimePerUnitPricingOverride record {
    # Per-unit price of the charge.
    decimal listPrice?;
    # Number of units purchased.
    @constraint:Number {minValue: 0}
    decimal quantity?;
};

public type ChargePreviewMetrics_tcv record {
    # Always equals to discountTcb.
    decimal discount?;
    # Always equals to delta discountTcb.
    decimal discountDelta?;
    decimal regular?;
    decimal regularDelta?;
};

public type PostCustomObjectDefinitionsRequestDefinition_recordConstraints_create record {
    # Specifies whether Zuora validates the values of mapped fields
    # in custom object records.
    # 
    # By default, Zuora validates the values of mapped fields
    # in custom object records. For example, if the
    # custom object definition has a field called `AccountId__c`
    # that is mapped to the `Id` field of the `account` object,
    # Zuora verifies that the value of `AccountId__c` is a valid
    # account ID when a custom object record is created.
    # If the value of `AccountId__c` is not a valid account ID,
    # the operation fails.
    boolean enforceValidMapping?;
};

public type GETInvoiceTaxItemType record {
    *TaxationItemObjectCustomFields;
    # The amount of the invoice taxation item that is available to credit.
    decimal availableToCreditAmount?;
    # The unrounded amount of the tax. 
    decimal applicableTaxUnRounded?;
    # The field which contains country code.
    string country?;
    # The balance of the taxation item.
    decimal balance?;
    # The amount of credit memos applied to the taxation item. 
    decimal creditAmount?;
    # The calculated tax amount excluded due to the exemption.
    decimal exemptAmount?;
    # The ID of the taxation item.
    string id?;
    # The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
    string jurisdiction?;
    # The identifier for the location based on the value of the `taxCode` field.
    string locationCode?;
    # The name of the taxation item.
    string name?;
    # The amount of payments applied to the taxation item. 
    decimal paymentAmount?;
    # The amount of taxation.
    decimal taxAmount?;
    # The tax code identifies which tax rules and tax rates to apply to a specific invoice.
    string taxCode?;
    # The description of the tax code.
    string taxCodeDescription?;
    # The date that the tax is applied to the invoice, in `yyyy-mm-dd` format.
    string taxDate?;
    # The tax rate applied to the invoice.
    decimal taxRate?;
    # The description of the tax rate.
    string taxRateDescription?;
    # The type of the tax rate.
    "Percentage"|"FlatFee" taxRateType?;
};

public type POSTInvoiceCollectCreditMemosType record {
    # The ID of the credit memo.
    string id?;
    # The amount of the credit memo.
    decimal totalAmount?;
    # The unique identification number of the credit memo.
    string memoNumber?;
};

public type CustomObjectBulkJobResponse record {
    # The ID of the user who creates the job.
    string CreatedById?;
    # The time when the bulk job is created.
    string CreatedDate?;
    # The custom object bulk job ID.
    string Id?;
    # The ID of the user who updates the job.
    string UpdatedById?;
    # The time when the bulk job is updated.
    string UpdatedDate?;
    CustomObjectBulkJobResponse_error 'error?;
    # The namespace of the object. Custom objects belong to the `default` namespace. Zuora standard objects belong to the `com_zuora` namespace. Bulk job operations on the following Zuora standard objects are supported:
    # * SavedQuery
    "default"|"com_zuora" namespace?;
    # The object to that the bulk operation performs on.
    string 'object?;
    # The operation that the bulk job performs. Only the users that have the "Delete Custom Objects" permission can submit a `delete` bulk job request. Only the users that have the "Edit Custom Objects" permission can submit a `create` or `update` bulk job request. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
    "delete"|"create"|"update" operation?;
    # The amount of time elapsed, in milliseconds, from the submission to the completion of the bulk job.
    int processingTime?;
    # The number of object records processed by the bulk job.
    int recordsProcessed?;
    # The status of the bulk job:
    # 
    # - `accepted` - The job has been accepted and is ready to process.
    # - `pending` - The job is waiting for your input. You can use [Upload a file for a custom object bulk job](https://developer.zuora.com/api-references/api/operation/POST_UploadFileForCustomObjectBulkJob) to upload a file so that the job can start creating records.
    # - `in_progress` - The job is processing.
    # - `completed` - The job has completed.
    # - `failed` - The job was unable to complete. You can use [List all errors for a custom object bulk job](https://developer.zuora.com/api-references/api/operation/GET_CustomObjectBulkJobErrors) to list the errors.
    # - `cancelled` - The job was cancelled by the server.
    "accepted"|"pending"|"in_progress"|"completed"|"failed"|"cancelled" status?;
};

# Billing information about the charge.
public type OrderActionRatePlanChargeOverride_billing record {
    # Day of the month that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofMonth`.
    @constraint:Int {minValue: 0, maxValue: 31}
    int billCycleDay?;
    # Specifies how Zuora determines the day that each billing period begins on.
    # 
    #   * `DefaultFromCustomer` - Each billing period begins on the bill cycle day of the account that owns the subscription.
    #   * `SpecificDayofMonth` - Use the `billCycleDay` field to specify the day of the month that each billing period begins on.
    #   * `SubscriptionStartDay` - Each billing period begins on the same day of the month as the start date of the subscription.
    #   * `ChargeTriggerDay` - Each billing period begins on the same day of the month as the date when the charge becomes active.
    #   * `SpecificDayofWeek` - Use the `weeklyBillCycleDay` field to specify the day of the week that each billing period begins on.
    "DefaultFromCustomer"|"SpecificDayofMonth"|"SubscriptionStartDay"|"ChargeTriggerDay"|"SpecificDayofWeek" billCycleType?;
    # Billing frequency of the charge. The value of this field controls the duration of each billing period.
    # 
    # If the value of this field is `Specific_Months` or `Specific_Weeks`, use the `specificBillingPeriod` field to specify the duration of each billing period.
    "Month"|"Quarter"|"Semi_Annual"|"Annual"|"Eighteen_Months"|"Two_Years"|"Three_Years"|"Five_Years"|"Specific_Months"|"Subscription_Term"|"Week"|"Specific_Weeks" billingPeriod?;
    # Specifies how Zuora determines when to start new billing periods. You can use this field to align the billing periods of different charges.
    # 
    # * `AlignToCharge` - Zuora starts a new billing period on the first billing day that falls on or after the date when the charge becomes active.
    # * `AlignToSubscriptionStart` - Zuora starts a new billing period on the first billing day that falls on or after the start date of the subscription.
    # * `AlignToTermStart` - For each term of the subscription, Zuora starts a new billing period on the first billing day that falls on or after the start date of the term.
    # 
    # See the `billCycleType` field for information about how Zuora determines the billing day.
    "AlignToCharge"|"AlignToSubscriptionStart"|"AlignToTermStart" billingPeriodAlignment?;
    # Specifies whether to invoice for a billing period on the first day of the billing period (billing in advance) or the first day of the next billing period (billing in arrears).
    "IN_ADVANCE"|"IN_ARREARS" billingTiming?;
    # Duration of each billing period in months or weeks, depending on the value of the `billingPeriod` field. Only applicable if the value of the `billingPeriod` field is `Specific_Months` or `Specific_Weeks`.
    int specificBillingPeriod?;
    # Day of the week that each billing period begins on. Only applicable if the value of the `billCycleType` field is `SpecificDayofWeek`.
    "Sunday"|"Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"|"Saturday" weeklyBillCycleDay?;
};

public type PUTPaymentRunRequest record {
    # The ID of the customer account associated with the payment run.
    # 
    # This field conflicts with each of the `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields. If there are such conflicts, an error occurs and an error message is returned.
    string accountId?;
    # **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.
    # 
    # Whether to apply credit balances in the payment run. This field is only available when you have Invoice Settlement feature disabled.
    boolean applyCreditBalance?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # Whether to automatically apply a posted credit memo to one or more receivables in the payment run.
    boolean autoApplyCreditMemo?;
    # **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
    # 
    # Whether to automatically apply unapplied payments to  one or more receivables in the payment run.
    boolean autoApplyUnappliedPayment?;
    # The alias name given to a batch. The batch name is a string of 50 characters or less.
    # 
    # This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned. 
    # 
    # **Note**: By default, you have 50 configurable account batches. To increase the limit to 200 batches, you must have the <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/Performance_Booster_Elite" target="_blank">Performance Booster Elite</a> package.
    string batch?;
    # The billing cycle day (BCD), the day of the month when a bill run generates invoices for the account. The value must be equal to or less then 31, and 31 is mean the EOM.
    # 
    # This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.
    string billCycleDay?;
    # The ID of a bill run.
    # 
    # This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.
    string billingRunId?;
    # Whether to process electronic payments during the execution of payment runs. 
    # 
    # If the Payment user permission "Process Electronic Payment" is disabled, this field will be ignored.
    boolean collectPayment?;
    # **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information. 
    # 
    # Whether to process a single payment for all receivables that are due on an account.
    boolean consolidatedPayment?;
    # A currency defined in the web-based UI administrative settings.
    # 
    # This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.
    string currency?;
    # The organizations that the run is created for. 
    # 
    # For each item in the array, either the `organizationId` or the `organizationName` field is required.
    # 
    # This field is only required when you have already turned on Multi-Org feature.
    GETProductType_organizationLabels[] organizationLabels?;
    # The ID of the gateway instance that processes the payment.
    # 
    # This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.
    string paymentGatewayId?;
    # **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information. 
    # 
    # Whether to process payments even if the default payment method is closed.
    boolean processPaymentWithClosedPM?;
    # The date and time when the scheduled payment run is to be executed, in `yyyy-mm-dd hh:mm:ss` format. The backend will ignore mintues and seconds in the field value. For example, if you specify `2017-03-01 11:30:37` for this value, this payment run will be run at 2017-03-01 11:00:00.
    string runDate?;
    # The target date used to determine which receivables to be paid in the payment run. The payments are collected for all receivables with the due date no later than the target date.
    string targetDate?;
};

# 
public type QueryProductRatePlanChargeTiersResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedProductRatePlanChargeTier[] data?;
|};

# The mandate information for the Credit Card, Apple Pay, Google Pay, Credit Card Reference Transaction, ACH, or Bank Transfer payment method.
# 
# The following mandate fields are common to all supported payment methods:
# * `mandateId`
# * `mandateReason`
# * `mandateStatus`
# 
# The following mandate fields are specific to the ACH and Bank Transfer payment methods:
# * `mandateReceivedStatus`
# * `existingMandateStatus`
# * `mandateCreationDate`
# * `mandateUpdateDate`
# 
# The following mandate fields are specific to the Credit Card, Apple Pay, and Google Pay payment methods:
# * `mitTransactionId`
# * `mitProfileAgreedOn`
# * `mitConsentAgreementRef`
# * `mitConsentAgreementSrc`
# * `mitProfileType`
# * `mitProfileAction`
public type POSTPMMandateInfo record {
    # Indicates whether the mandate is an existing mandate.
    "Yes"|"No" existingMandateStatus?;
    # The date on which the mandate was created.
    string mandateCreationDate?;
    # The mandate ID.
    string mandateId?;
    # The reason of the mandate from the gateway side.
    string mandateReason?;
    # Indicates whether the mandate is received from the gateway
    "Yes"|"No" mandateReceivedStatus?;
    # The status of the mandate from the gateway side.
    string mandateStatus?;
    # The date on which the mandate was updated.
    string mandateUpdateDate?;
    # Reference for the consent agreement that you have established with the customer.  
    string mitConsentAgreementRef?;
    # Required if you set the `mitProfileAction` field. Specifies how the consent agreement has been established with the customer. The allowed value is `External`. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `External` set to this field.
    "External" mitConsentAgreementSrc?;
    # Specifies how Zuora creates and activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
    # 
    # - `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
    # 
    #   Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
    #   
    #   If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
    # 
    # 
    # - `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
    # 
    # If you do not specify this field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Activate` set to this field.
    "Activate"|"Persist" mitProfileAction?;
    # The date on which the stored credential profile is agreed. The date format is `yyyy-mm-dd`.
    string mitProfileAgreedOn?;
    # Indicates the type of the stored credential profile. If you do not specify the `mitProfileAction` field, Zuora will automatically create a stored credential profile for the payment method, with the default value `Recurring` set to this field.
    string mitProfileType?;
    # Specifies the ID of the transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.
    @constraint:String {maxLength: 128}
    string mitTransactionId?;
};

public type PUTJournalEntryItemType record {
    # Name of the accounting code.
    # 
    # If the Journal Entry Item has a blank accounting code, enter the empty string.
    string accountingCodeName;
    # Accounting code type.
    # 
    # Note that `On-Account Receivable` is only available if you enable the Invoice Settlement feature. 
    "AccountsReceivable"|"On-Account Receivable"|"Cash"|"OtherAssets"|"CustomerCashOnAccount"|"DeferredRevenue"|"SalesTaxPayable"|"OtherLiabilities"|"SalesRevenue"|"SalesDiscounts"|"OtherRevenue"|"OtherEquity"|"BadDebt"|"OtherExpenses" accountingCodeType?;
    # Type of journal entry item. 
    "Credit"|"Debit" 'type;
    *JournalEntryItemObjectCustomFields;
};

# A cancelled data query job.
public type DataQueryJobCancelled record {
    *DataQueryJobCommon;
    # Status of the query job.
    "cancelled" queryStatus?;
};

public type GetDebitMemoApplicationPartType record {
    # The amount that is applied to the debit memo.
    decimal appliedAmount?;
    # The ID of the Zuora user who created the payment or credit memo.
    string createdById?;
    # The date and time when the payment or credit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-12-01 15:31:10.
    string createdDate?;
    # The ID of credit memo that is applied to the specified debit memo.
    string creditMemoId?;
    # The ID of the payment that is applied to the specified debit memo.
    string paymentId?;
    # The ID of the Zuora user who last updated the payment or credit memo.
    string updatedById?;
    # The date and time when the payment or credit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2018-01-02 11:42:16.
    string updatedDate?;
};

public type OrderLineItemCommonRetrieveOrderLineItem record {
    # Specifies the units to measure usage.
    string UOM?;
    # The accountingCode for the Order Line Item.
    string accountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string adjustmentLiabilityAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string adjustmentRevenueAccountingCode?;
    # The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sales order line in Zuora Revenue.
    string amendedByOrderOn?;
    # The actual charged amount per unit for the Order Line Item.
    decimal amountPerUnit?;
    # The target date for the Order Line Item to be picked up by bill run for billing.
    string billTargetDate?;
    # The ID of a contact that belongs to the billing account of the order line item. Use this field to assign an existing account as the bill-to contact of an order line item.
    string billTo?;
    # The snapshot of the ID for an account used as the bill-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `billToSnapshotId` field is exposed while retrieving the order line item details.
    string billToSnapshotId?;
    # The billing rule for the Order Line Item.
    "TriggerWithoutFulfillment"|"TriggerAsFulfillmentOccurs" billingRule?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractAssetAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractLiabilityAccountingCode?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string contractRecognizedRevenueAccountingCode?;
    # The currency for the order line item. You can specify a currency when creating an order line item through the "Create an order" operation.
    string currency?;
    # Container for custom fields of an Order Line Item object.
    OrderLineItemCustomFieldsRetrieveOrderLineItem customFields?;
    # The deferred revenue accounting code for the Order Line Item.
    string deferredRevenueAccountingCode?;
    # The description of the Order Line Item.
    string description?;
    # This field shows the total discount amount that is applied to an order line item after the `inlineDiscountType`, `inlineDiscountPerUnit` and `quantity` fields are set.
    # 
    # The inline discount is applied to the list price of an order line item (see the `listPrice` field).
    decimal discount?;
    # The flag to exclude Order Line Item related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.
    # 
    # **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBillingFromRevenueAccounting?;
    # The flag to exclude Order Line Item from revenue accounting.
    # 
    # **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled. 
    boolean excludeItemBookingFromRevenueAccounting?;
    # This field is used in accordance with the `inlineDiscountType` field, in the following manner:
    # * If the `inlineDiscountType` field is set as `Percentage`, this field specifies the discount percentage for each unit of the order line item. For exmaple, if you specify `5` in this field, the discount percentage is 5%.
    # * If the `inlineDiscountType` field is set as `FixedAmount`, this field specifies the discount amount on each unit of the order line item. For exmaple, if you specify `10` in this field, the discount amount on each unit of the order line item is 10.
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    decimal inlineDiscountPerUnit?;
    # This field is used to specify the inline discount type, which can be `Percentage`, `FixedAmount`, or `None`. The default value is `Percentage`.
    # 
    # This field is used together with the `inlineDiscountPerUnit` field to specify inline discounts for order line items. The inline discount is applied to the list price of an order line item. 
    # 
    # Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.
    "Percentage"|"FixedAmount"|"None" inlineDiscountType?;
    # The account ID of the invoice owner of the order line item.
    string invoiceOwnerAccountId?;
    # The account name of the invoice owner of the order line item.
    string invoiceOwnerAccountName?;
    # The account number of the invoice owner of the order line item.
    string invoiceOwnerAccountNumber?;
    # This field is used to identify if the charge segment is allocation eligible in revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isAllocationEligible?;
    # This field is used to dictate how to perform the accounting during revenue recognition.
    # 
    # **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href="https://support.zuora.com/" target="_blank">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.
    boolean isUnbilled?;
    # The category for the Order Line Item, to indicate a product sales or return.
    "Sales"|"Return" itemCategory?;
    # The name of the Order Line Item.
    string itemName?;
    # The number for the Order Line Item.
    string itemNumber?;
    # The state of the Order Line Item. See [State transitions for an order, order line item, and fulfillment](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information.
    "Executing"|"Booked"|"SentToBilling"|"Complete"|"Cancelled" itemState?;
    # The type of the Order Line Item. 
    "Product"|"Fee"|"Services" itemType?;
    # The extended list price for an order line item, calculated by the formula: listPrice = listPricePerUnit * quantity
    decimal listPrice?;
    # The list price per unit for the Order Line Item.
    decimal listPricePerUnit?;
    # The date when the rate plan charge is created through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sales order line in Zuora Revenue.
    string originalOrderDate?;
    # The ID of the original sales order for a return order line item.
    string originalOrderId?;
    # The ID of the original sales order line item for a return order line item.
    string originalOrderLineItemId?;
    # The number of the original sales order line item for a return order line item.
    string originalOrderLineItemNumber?;
    # The number of the original sales order for a return order line item.
    string originalOrderNumber?;
    # The account ID of the owner of the order line item.
    string ownerAccountId?;
    # The account name of the owner of the order line item.
    string ownerAccountName?;
    # The account number of the owner of the order line item.
    string ownerAccountNumber?;
    # The product code for the Order Line Item.
    string productCode?;
    # Id of a Product Rate Plan Charge. Only one-time charges are supported.
    string productRatePlanChargeId?;
    # Used by customers to specify the Purchase Order Number provided by the buyer.
    string purchaseOrderNumber?;
    # The quantity of units, such as the number of authors in a hosted wiki service.
    decimal quantity?;
    # The quantity that can be returned for an order line item. 
    decimal quantityAvailableForReturn?;
    # The fulfilled quantity for an order line item. 
    decimal quantityFulfilled?;
    # The quantity to fulfill for an order line item. 
    decimal quantityPendingFulfillment?;
    # The recognized revenue accounting code for the Order Line Item.
    string recognizedRevenueAccountingCode?;
    # Use this field to relate an order line item to an subscription. Specify this field to the subscription number of the subscription to relate.
    string relatedSubscriptionNumber?;
    # The flag to show whether fulfillment is needed or not. It's derived from billing rule of the Order Line Item.
    boolean requiresFulfillment?;
    # The Revenue Recognition rule for the Order Line Item.
    string revenueRecognitionRule?;
    # Specifies the type of revenue recognition timing.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Upon Billing Document Posting Date"|"Upon Order Activation Date" revenueRecognitionTiming?;
    # Specifies the type of revenue amortization method.
    # 
    # Predefined options are listed as enum values in this API Reference. Other options might also be avaliable depending on the <a href="https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Configure_revenue_settings/Configure_revenue_recognition_policy" target="_blank">revenue recognition policy configuration</a> in the Zuora Billing UI.
    # 
    # **Note**: This field is only available if you have the Order to Revenue feature enabled. 
    "Immediate"|"Ratable Using Start And End Dates" revenueAmortizationMethod?;
    # The ID of the sequence set associated with the OrderLineItem.
    string sequenceSetId?;
    # The ID of a contact that belongs to the owner account or billing account of the order line item. Use this field to assign an existing account as the sold-to contact of an order line item.
    string soldTo?;
    # The snapshot of the ID for an account used as the sold-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `soldToSnapshotId` field is exposed while retrieving the order line item details.
    string soldToSnapshotId?;
    # The tax code for the Order Line Item.
    string taxCode?;
    # The tax mode for the Order Line Item.
    "TaxInclusive"|"TaxExclusive" taxMode?;
    # The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the `transactionStartDate` field.
    string transactionEndDate?;
    # The date a transaction starts. The default value of this field is the order date.
    string transactionStartDate?;
    # The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).
    string unbilledReceivablesAccountingCode?;
};

public type GETPaymentRunDataTransactionElementResponse record {
    # The total amount of the newly generated payment.
    # 
    # **Note:** This field is only available if `type` is `Payment`.
    decimal amount?;
    # The amount allocated to this data record.
    decimal appliedAmount?;
    # The error code of the response.
    # 
    # **Note:** This field is only available if `type` is `Payment`.
    string errorCode?;
    # The detailed information of the error response.
    # 
    # **Note:** This field is only available if `type` is `Payment`.
    string errorMessage?;
    # The ID of the current transaction.
    string id?;
    # The status of the newly generated payment.
    # 
    # **Note:** This field is only available if `type` is `Payment`.
    "Processed"|"Processing"|"Error" status?;
    # The type of the current transaction.
    "Payment"|"CreditMemo"|"UnappliedPayment"|"CreditBalanceAdjustment" 'type?;
};

public type POSTPublicNotificationDefinitionCalloutBasicAuthentication record {
    *POSTPublicNotificationDefinitionCalloutCommon;
    # Indicates whether Basic authentication is enabled for the callout.
    # 
    # When creating callout notifications with Basic authentication enabled, you must set this field to `true` and specify the username and password in `calloutAuth`.
    boolean requiredAuth;
    # If `requiredAuth` is `true`, this object is required.
    CalloutAuth calloutAuth?;
};

public type BadRequestResponse_Errors record {
    # The error code.
    string code?;
    # The status of the response.
    string status?;
    # The reason for the error.
    string title?;
};

public type POSTPaymentSchedulesRequest record {
    # Container of the payment schedules to be created.
    POSTPaymentScheduleRequest[] paymentSchedules?;
};

public type OrderActionRatePlanPriceChangeParams record {
    # Specifies how Zuora changes the price of the charge each time the subscription renews.
    # 
    # If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
    "NoChange"|"SpecificPercentageValue"|"UseLatestProductCatalogPricing" priceChangeOption?;
    # Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`.
    @constraint:Number {minValue: -100}
    decimal priceIncreasePercentage?;
};

public type SignUpPaymentMethod record {
    # Type of payment method. The following types of the payment method are supported:
    "PayPalEC"|"PayPalNativeEC"|"PayPalAdaptive"|"CreditCard"|"CreditCardReferenceTransaction" 'type;
    *SignUpCreatePaymentMethodCreditCardReferenceTransaction;
    *SignUpCreatePMPayPalECPayPalNativeEC;
    *SignUpCreatePaymentMethodPayPalAdaptive;
    *SignUpCreatePaymentMethodCreditCard;
    *SignUpCreatePaymentMethodCommon;
    *SignUpPaymentMethodObjectCustomFields;
};

# The field used to pass gateway-specific parameters and parameter values.
public type PostNonRefRefundType_gatewayOptions record {
    # The name of a gateway-specific parameter.
    string 'key?;
    # The value of the gateway-specific parameter.
    string value?;
};

public type RampIntervalResponse record {
    # The short description of the interval.
    string description?;
    # The end date of the interval.
    string endDate?;
    # The name of the interval.
    string name?;
    # The start date of the interval.
    string startDate?;
};

public type GetApiVolumeSummaryResponse record {
    # List of API volume summary records. The records are grouped and ordered by API path name and http method.      
    ApiVolumeSummaryRecord[] data?;
};

# Container for credit memos.
# 
# **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later [available versions](https://developer.zuora.com/api-references/api/overview/#section/API-Versions/Minor-Version) in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information. 
public type PUTSubscriptionResponseType_creditMemo record {
    # Credit memo amount.
    decimal amount?;
    # Credit memo amount minus tax.
    decimal amountWithoutTax?;
    # 
    POSTSubscriptionPreviewCreditMemoItemsType[] creditMemoItems?;
    # Tax amount on the credit memo.
    decimal taxAmount?;
};

# Container for the finance information related to the credit memo item.
public type CreditMemoItemFromWriteOffInvoice_financeInformation record {
    # The accounting code for the deferred revenue, such as Monthly Recurring Liability.
    @constraint:String {maxLength: 100}
    string deferredRevenueAccountingCode?;
    # The accounting code that maps to an on account in your accounting system.
    @constraint:String {maxLength: 100}
    string onAccountAccountingCode?;
    # The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
    @constraint:String {maxLength: 100}
    string recognizedRevenueAccountingCode?;
    # The name of the revenue recognition rule governing the revenue schedule.
    @constraint:String {maxLength: 100}
    string revenueRecognitionRuleName?;
};

public type CustomObjectRecordsErrorResponse record {
    int code?;
    CustomObjectRecordsWithError[] details?;
    string message?;
};

public type NestedProductOnExpand record {|
    # The unique identifier of the product.
    string id?;
    # The unique identifier of the user who created the product.
    string createdById?;
    # The date and time when the product was created.
    string createdDate?;
    # The unique identifier of the user who last updated the product.
    string updatedById?;
    # The date and time when the product was last updated.
    string updatedDate?;
    # Controls whether to allow your users to add or remove features while creating or amending a subscription.
    boolean allowFeatureChanges?;
    # A description of the product. 
    string description?;
    # The name of the product. This information is displayed in the product
    # catalog pages in the web-based UI.
    string name?;
    # The date when the product expires and can't be subscribed to anymore,
    # in the `yyyy-mm-dd` format.
    string effectiveEndDate?;
    # The date when the product becomes available and can be subscribed to, in the `yyyy-mm-dd` format.
    string effectiveStartDate?;
    # The unique SKU for the product.
    string sKU?;
    # The product number of the product.
    string productNumber?;
    # Category of the product. Used by Zuora Quotes Guided Product Selector.
    "Base Products"|"Add On Services"|"Miscellaneous Products" category?;
    # EXPANDABLE. The product rate plans contained in this product.
    record {}[] productRatePlans?;
|};

public type GETARPaymentType record {
    # The ID of the customer account that the payment is for.
    string accountId?;
    # The number of the customer account that the payment is for.
    string accountNumber?;
    # The total amount of the payment.
    decimal amount?;
    # The applied amount of the payment.
    decimal appliedAmount?;
    # The authorization transaction ID from the payment gateway.
    string authTransactionId?;
    # The first six or eight digits of the credit card or debit card used for the payment, when applicable.
    string bankIdentificationNumber?;
    # The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
    string cancelledOn?;
    # Comments about the payment.
    string comment?;
    # The ID of the Zuora user who created the payment.
    string createdById?;
    # The date and time when the payment was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
    string createdDate?;
    # The amount that the payment transfers to the credit balance. The value is not `0` only for those payments that come from legacy payment operations performed without the Invoice Settlement feature.
    decimal creditBalanceAmount?;
    # When Standalone Payment is not enabled, the `currency` of the payment must be the same as the payment currency defined in the customer account settings through Zuora UI.
    # 
    # When Standalone Payment is enabled and `standalone` is `true`, the `currency` of the standalone payment can be different from the payment currency defined in the customer account settings. The amount will not be summed up to the account balance or key metrics regardless of currency.
    string currency?;
    # The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.
    string effectiveDate?;
    # Container for the finance information related to the payment.
    GETARPaymentTypewithSuccess_financeInformation financeInformation?;
    # The ID of the gateway instance that processes the payment.
    string gatewayId?;
    # A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created.  If not specified, the payment number will be passed in instead.
    string gatewayOrderId?;
    # The reason of gateway reconciliation.
    string gatewayReconciliationReason?;
    # The status of gateway reconciliation.
    string gatewayReconciliationStatus?;
    # The message returned from the payment gateway for the payment. This message is gateway-dependent.
    string gatewayResponse?;
    # The code returned from the payment gateway for the payment. This code is gateway-dependent.
    string gatewayResponseCode?;
    # The status of the payment in the gateway; use for reconciliation.
    "MarkedForSubmission"|"Submitted"|"Settled"|"NotSubmitted"|"FailedToSettle" gatewayState?;
    # The unique ID of the created payment. For example, 4028905f5a87c0ff015a87eb6b75007f.
    string id?;
    # The date and time when a payment was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
    string markedForSubmissionOn?;
    # The unique identification number of the payment. For example, P-00000001.
    string number?;
    # The organization that this object belongs to.
    # 
    # Note: This field is available only when the Multi-Org feature is enabled.
    string organizationLabel?;
    # The natural key for the payment gateway.
    string paymentGatewayNumber?;
    # The unique ID of the payment method that the customer used to make the payment.
    string paymentMethodId?;
    # The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
    string paymentMethodSnapshotId?;
    # The unique ID or the number of the payment schedule that is linked to the payment. See [Link payments to payment schedules](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Payment_Schedules/Link_payments_with_payment_schedules) for more information.
    string paymentScheduleKey?;
    # The payout ID of the payment from the gateway side.
    string payoutId?;
    # Indicates whether the payment is used as a reserved payment. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.
    boolean prepayment?;
    # The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
    string referenceId?;
    # The amount of the payment that is refunded.
    decimal refundAmount?;
    # The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.
    string secondPaymentReferenceId?;
    # The date and time when the payment was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
    string settledOn?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptor?;
    # A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
    string softDescriptorPhone?;
    # This field is only available if the support for standalone payment is enabled. This field is not available for transferring, applying, or unapplying a payment.
    # 
    # The value `true` indicates this is a standalone payment that is created and processed in Zuora through Zuora gateway integration but will be settled outside of Zuora. No settlement data will be created. The standalone payment cannot be applied, unapplied, or transferred.
    # 
    # The value `false` indicates this is an ordinary payment that is created, processed, and settled in Zuora.
    boolean standalone?;
    # The status of the payment.
    "Draft"|"Processing"|"Processed"|"Error"|"Canceled"|"Posted" status?;
    # The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.
    string submittedOn?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
    # The type of the payment.
    "External"|"Electronic" 'type?;
    # The unapplied amount of the payment.
    decimal unappliedAmount?;
    # The ID of the Zuora user who last updated the payment.
    string updatedById?;
    # The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
    string updatedDate?;
    *PaymentObjectNSFields;
    *PaymentObjectCustomFields;
};

public type CreatePaymentMethodSEPA record {
    # The International Bank Account Number. 
    # 
    # This field is required if the `type` field is set to `SEPA`. However, for creating tokenized SEPA payment methods on Adyen Integration v2.0, this field is optional. 
    #   - If the `tokenize` field is `true`, `IBAN` is required. 
    #   - If the `tokens` field is specified,  `IBAN` is not required but `accountMaskNumber` is required.
    string IBAN?;
    # The container for the account holder information. The nested `accountHolderName` field is required.
    CreatePaymentMethodSEPA_accountHolderInfo accountHolderInfo?;
    # The masked account number such as ****1234.
    # When creating SEPA payment methods on Adyen, if the `tokens` field is provided, this `accountMaskNumber` field is required. For more information, see  <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Adyen_Integration_v2.0/D_Tokenize_SEPA_payment_methods_on_Adyen_Integration_v2.0" target="_blank">Tokenize SEPA payment methods on Adyen Integration v2.0</a>
    string accountMaskNumber?;
    # The BIC code used for SEPA.
    string businessIdentificationCode?;
    # The container of the mandate information for the payment method.
    CreatePaymentMethodCreditCard_mandateInfo mandateInfo?;
    # When creating a SEPA payment method on Adyen Integration v2.0, use this
    # field to specify whether to tokenize the payment method with IBAN. If
    # `tokenize` is `true`, `IBAN` is required. If the `tokens` field is provided, this `tokenize` field is not required. For more information about how to create tokenized SEPA payment methods on
    # Adyen, see <a
    # href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Adyen_Integration_v2.0/D_Tokenize_SEPA_payment_methods_on_Adyen_Integration_v2.0"
    # target="_blank">Tokenize SEPA payment methods on Adyen Integration
    # v2.0</a>.
    boolean tokenize?;
    # To create tokenized SEPA payment methods on Adyen Integration v2.0, pass in the existing token information through the fields in this container.
    # For more information, see <a href="https://knowledgecenter.zuora.com/Zuora_Payments/Payment_gateway_integrations/Supported_payment_gateways/Adyen_Integration_v2.0/D_Tokenize_SEPA_payment_methods_on_Adyen_Integration_v2.0" target="_blank">Tokenize SEPA payment methods on Adyen Integration v2.0</a>.
    CreatePaymentMethodSEPA_tokens tokens?;
    # The container for payment method processing options.
    CreatePaymentMethodCreditCard_processingOptions processingOptions?;
    *PaymentMethodCommonFields;
    *PaymentMethodObjectCustomFields;
};

public type CommonResponse record {
    # The ID of the process that handles the operation.
    string processId?;
    CommonResponse_reasons[] reasons?;
    # Unique identifier of the request.
    @constraint:String {maxLength: 36, minLength: 36}
    string requestId?;
    # Indicates whether the call succeeded.
    boolean success?;
};

public type GetDataQueryJobsResponse record {
    # List of data query jobs. The query jobs are listed in reverse order of creation.
    DataQueryJob[] data?;
};

public type BatchQuery record {
    # The API version for the query. If an API version is not specified, the latest version is used by default. Using the latest WSDL version is most useful for reporting use cases. For integration purposes, specify the WSDL version to ensure consistent query behavior, that is, what is supported and included in the response returned by the API.
    # 
    # **Note**: As of API version 69 and later, Zuora changed the format of certain fields. See <a href="https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/G_SOAP_API/AB_Getting_started_with_the__SOAP_API/C_Date_Field_Changes_in_the_SOAP_API" target="_blank">Date Field Changes in the SOAP API</a> for more information and a list of affected fields.
    string apiVersion?;
    # The currencies that you want to convert transaction amounts into. You can specify any number of currencies. Specify the currencies using their <a href="https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/D_Currencies_and_Their_3-Letter_Codes" target="_blank">ISO currency codes</a> and separate each currency with a comma, for example, "EUR,GBP,JPY".
    # 
    # See <a href="https://knowledgecenter.zuora.com/Zuora_Collect/Zuora_Finance/D_Finance_Settings/F_Foreign_Currency_Conversion/Foreign_Currency_Conversion_for_Data_Source_Exports#Creating_the_Data_Source_Export_Using_the_AQuA_API" target="_blank">Convert Transaction Amounts Into Any Currency</a> for more information and examples.
    # 
    # To use this field, you must have <a href="https://knowledgecenter.zuora.com/Zuora_Collect/Zuora_Finance/D_Finance_Settings/F_Foreign_Currency_Conversion" target="_blank">Foreign Currency Conversion</a> enabled and you must be using API version 78 or later.
    string convertToCurrencies?;
    # This field indicates that the AQuA incremental load will retrieve deleted records.
    # 
    # If you want to export deleted data, this field is required.
    # 
    # **Note**: AQuA API is subject to Zuora Data Retention Policy. The retention period of deleted data is 30 days. You can only retrieve deleted data for 30 days through AQuA.
    DeletedRecord[] deleted?;
    # The query name that can uniquely identify the query in this API request.
    string name?;
    # A valid ZOQL query or Export ZOQL query statement.
    string query?;
    # The query type.
    "zoql"|"zoqlexport" 'type?;
};

# 
public type QueryOrderssResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedOrders[] data?;
|};

# Date range of the source validity period from which the funds are transferred. It should be close to the destination validity period.
public type SourceValidityPeriodInfo record {
    # End date of the source validity period.
    string endDate;
    # Start date of the source validity period.
    string startDate;
};

public type InvoiceItemPreviewResult_additionalInfo record {
    # The number of deliveries dedicated to the Delivery Pricing charges. 
    # **Note**: This field is available only if you have the Delivery Pricing feature enabled.
    decimal numberOfDeliveries?;
    decimal quantity?;
    string unitOfMeasure?;
};

public type GETRampMetricsBySubscriptionKeyResponseType record {
    RampMetrics rampMetrics?;
    *CommonResponse;
};

public type GETInvoiceFilesResponse record {
    # Container for invoice PDF files.
    InvoiceFile[] invoiceFiles?;
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

public type POSTInvoicesBatchPostType record {
    # The container for invoices to be posted. The maximum number of invoices to be posted is 50 in one request.
    InvoicePostType[] invoices?;
};

# Processing options for generating billing documents.
public type ProcessingOptions record {
    BillingOptions billingOptions?;
    # Indicates if the current request needs to generate a billing document. The billing document will be generated against all Order Line Items included in this order.
    boolean runBilling?;
};

public type GETRefundCollectionType record {
    # URL to retrieve the next page of the response if it exists; otherwise absent.
    string nextPage?;
    # Container for refunds.
    GETRefundTypewithSuccess[] refunds?;
    # Returns `true` if the request was processed successfully.
    boolean success?;
};

# 
public type QueryProcessedUsagesResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedProcessedUsage[] data?;
|};

public type Inline_response_200_7_targetTenant record {
    # Target tenant id.
    string id?;
    # Target tenant name.
    string name?;
    # Target tenant description.
    string environment?;
};

public type RampChargeRequest record {
    # The number of the rate plan charge.
    string chargeNumber?;
    # Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.
    string uniqueToken?;
};

# An array of charge pricing tier.
public type POSTChargeDefinitionPricingTier POSTChargeDefinitionPricingTier_inner[];

# The set of order metrics for an order action.
public type OrderMetric record {
    string chargeNumber?;
    # The extended list price which is calculated by the original product catalog list price multiplied by the delta quantity.
    # 
    # The `elp` nested field is only available to existing Orders customers who already have access to the field.
    # 
    # **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics.
    # * The Order ELP and Order Item objects 
    # * The "Generated Reason" and "Order Item ID" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects
    # 
    # Existing Orders customers who have these metrics will continue to be supported.
    TimeSlicedElpNetMetrics[] elp?;
    TimeSlicedNetMetrics[] mrr?;
    string originRatePlanId?;
    string productRatePlanChargeId?;
    string productRatePlanId?;
    # Number of a subscription rate plan for this subscription.
    string subscriptionRatePlanNumber?;
    TimeSlicedMetrics[] quantity?;
    # Total contracted billing which is the forecast value for the total invoice amount.
    TimeSlicedTcbNetMetrics[] tcb?;
    # Total contracted value.
    TimeSlicedNetMetrics[] tcv?;
};

public type GETPaymentMethodResponseCreditCardForAccount record {
    # The masked credit card number.
    # 
    # When `cardNumber` is `null`, the following fields will not be returned:
    #   - `expirationMonth`
    #   - `expirationYear`
    #   - `accountHolderInfo`
    string cardNumber?;
    # One or two digits expiration month (1-12).
    int expirationMonth?;
    # Four-digit expiration year.
    int expirationYear?;
    # The CVV or CVV2 security code for the credit card or debit card.
    #             Only required if changing expirationMonth, expirationYear, or cardHolderName.
    #             To ensure PCI compliance, this value isn''t stored and can''t be queried. 
    string securityCode?;
};

public type ChargePreviewMetrics_tax record {
    # Total tax amount of all discount charges which are applied to one specific recurring charge. This value is calculated from the rating results for the latest subscription version in the order.
    decimal discount?;
    # Delta discount TAX value between the base and the latest subscription version in the order for the specific recurring charge.
    decimal discountDelta?;
    decimal regular?;
    # Delta tax value between the base and the latest subscription version in the order.
    decimal regularDelta?;
};

# 
public type QueryPaymentRunsResponse record {|
    # A string that can be used as the `cursor` value to retrieve the next page of the response if it exists; otherwise absent.
    string? nextPage?;
    ExpandedPaymentRun[] data?;
|};

public type PUTContactType record {
    # The first line of the contact's address, which is often a street address or business name.
    @constraint:String {maxLength: 255}
    string address1?;
    # The second line of the contact's address.
    @constraint:String {maxLength: 255}
    string address2?;
    # The city of the contact's address.
    @constraint:String {maxLength: 40}
    string city?;
    # A description for the contact.
    @constraint:String {maxLength: 100}
    string contactDescription?;
    # The country of the contact's address.
    @constraint:String {maxLength: 64}
    string country?;
    # The county. May optionally be used by Zuora Tax to calculate county tax.
    @constraint:String {maxLength: 32}
    string county?;
    # The contact's fax number.
    @constraint:String {maxLength: 40}
    string fax?;
    # The contact's first name.
    @constraint:String {maxLength: 100}
    string firstName?;
    # The contact's home phone number.
    @constraint:String {maxLength: 40}
    string homePhone?;
    # The contact's last name.
    @constraint:String {maxLength: 100}
    string lastName?;
    # The mobile phone number of the contact.
    @constraint:String {maxLength: 100}
    string mobilePhone?;
    # A nickname for the contact.
    @constraint:String {maxLength: 100}
    string nickname?;
    # An additional phone number for the contact.
    @constraint:String {maxLength: 40}
    string otherPhone?;
    # The type of the additional phone number.
    "Work"|"Mobile"|"Home"|"Other" otherPhoneType?;
    # The contact's personal email address.
    @constraint:String {maxLength: 74}
    string personalEmail?;
    # The state or province of the contact's address.
    @constraint:String {maxLength: 40}
    string state?;
    # If using Zuora Tax, a region string as optionally defined in your tax rules. Not required.
    @constraint:String {maxLength: 32}
    string taxRegion?;
    # The contact's business email address.
    @constraint:String {maxLength: 74}
    string workEmail?;
    # The contact's business phone number.
    @constraint:String {maxLength: 40}
    string workPhone?;
    # The zip code for the contact's address.
    @constraint:String {maxLength: 20}
    string zipCode?;
    *ContactObjectCustomFields;
};
